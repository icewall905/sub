Project Snapshot
Root: sub-1
Generated: Mon May 26 19:23:10 CEST 2025
Mode: Bash Script (Corrected)

========================================
Included Files (respecting .gitignore, excluding 'project_snapshot_bash.txt'):
----------------------------------------
.gitignore
LICENSE
README.md
app.py
cache/wikis/95599_terminology.json
config.ini.example
dump.sh
files/meaning.json
live_translation_viewer.py
py/config_manager.py
py/critic_service.py
py/local_whisper.py
py/logger.py
py/secure_browser.py
py/subtitle_processor.py
py/translation_service.py
py/video_transcriber.py
py/wiki_terminology.py
py/wyoming_client.py
requirements.txt
run_debug.py
start_translator.sh
static/bootstrap/css/bootstrap.min.css
static/bootstrap/css/font-awesome.min.css
static/bootstrap/js/bootstrap.bundle.min.js
static/css/main.css
static/images/sublogo.png
static/js/browser-debug.js
static/js/browser-fix.js
static/js/config_editor.js
static/js/debug_browser.js
static/js/log_viewer.js
static/js/main.js
subs/translation_report.txt
templates/browser_diagnostics.html
templates/config_editor.html
templates/index.html
templates/log_viewer.html
test_browser.py
wyoming_chunk2srt.py

========================================
File Contents:
========================================

--- File: .gitignore ---
   1	# Configuration files with personal settings
   2	config.ini
   3	
   4	# Virtual environment
   5	venv/
   6	.venv/
   7	env/
   8	.env/
   9	.*
  10	
  11	# Python cache files
  12	__pycache__/
  13	*.py[cod]
  14	*$py.class
  15	.pytest_cache/
  16	.coverage
  17	htmlcov/
  18	
  19	# Temporary files
  20	*.srt
  21	temp/
  22	tmp/
  23	.DS_Store
  24	cache/*
  25	
  26	# Log files
  27	*.log
  28	*.log.1
  29	*.log.2
  30	*.log.3
  31	logs/
  32	
  33	# Distribution / packaging
  34	dist/
  35	build/
  36	*.egg-info/
  37	
  38	#More stuff
  39	venv_subtrans
  40	
  41	notes.txt
  42	
  43	subs/*
  44	
  45	translation_progress.json
  46	
  47	files/*

--- File: LICENSE ---
   1	MIT License
   2	
   3	Copyright (c) 2025 icewall905
   4	
   5	Permission is hereby granted, free of charge, to any person obtaining a copy
   6	of this software and associated documentation files (the "Software"), to deal
   7	in the Software without restriction, including without limitation the rights
   8	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9	copies of the Software, and to permit persons to whom the Software is
  10	furnished to do so, subject to the following conditions:
  11	
  12	The above copyright notice and this permission notice shall be included in all
  13	copies or substantial portions of the Software.
  14	
  15	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  21	SOFTWARE.


--- File: README.md ---
   1	# Subtitle Translator üé¨üåç
   2	
   3	**Subtitle Translator** is a powerful and versatile tool designed to translate subtitle files seamlessly. It offers a user-friendly web interface, supports various subtitle formats, integrates with multiple translation services (including local LLMs), and even provides video transcription capabilities. Enhanced with features like live translation monitoring, bulk processing, and context-aware translation using TMDB and Fandom/MediaWiki wikis, this tool aims to be a comprehensive solution for all your subtitle translation needs.
   4	
   5	![Subtitle Translator Logo](static/images/sublogo.png)
   6	
   7	## ‚ú® Key Features
   8	
   9	* **Versatile Format Support**: Translates `.srt`, `.ass`, and `.vtt` subtitle files.
  10	* **Intuitive Web Interface**: Easy-to-use UI for uploading files, managing translations, configuring settings, and viewing logs.
  11	* **Multiple Translation Services**:
  12	    * Supports popular services like DeepL, Google Translate.
  13	    * Integrates with local LLMs via Ollama and LM Studio for privacy-focused or custom translations.
  14	    * OpenAI (GPT) and MyMemory translation options.
  15	    * Service priority can be configured.
  16	* **Video Transcription**: Transcribe audio from video files directly into SRT subtitle files using Faster-Whisper (supports remote server or local execution).
  17	* **Live Translation Monitoring**:
  18	    * Real-time progress updates in the web UI, showing current line, overall progress, and individual service suggestions.
  19	    * Dedicated terminal-based live viewer (`live_translation_viewer.py`) for detailed log monitoring and report summaries.
  20	* **Bulk Processing**:
  21	    * Scan entire directories and translate all supported subtitle files within them.
  22	    * Automatically identify source language files and skip already translated ones.
  23	* **Advanced Contextual Translation**:
  24	    * **TMDB Integration**: Fetches movie/show metadata (plot, genres, cast) from The Movie Database to provide better context to LLMs.
  25	    * **Wiki Terminology**: Pulls character names, locations, and specific jargon from Fandom/MediaWiki sites to improve translation accuracy for niche content.
  26	    * **Custom Glossary**: Define special meanings for words or phrases via `files/meaning.json` or the web UI to ensure consistent and correct terminology.
  27	* **Translation Quality Critic**: Utilizes LLMs (Ollama or LM Studio) to evaluate the quality of translations, provide feedback, and even suggest improved versions.
  28	* **Secure File Handling**:
  29	    * Secure file browser for selecting subtitle and video files directly from the host system, with configurable allowed/denied paths.
  30	* **Comprehensive Configuration**:
  31	    * Easy-to-use web-based configuration editor (`/config`).
  32	    * Detailed settings in `config.ini` for all aspects of the application.
  33	* **Logging & Debugging**:
  34	    * View application logs directly in the web UI (`/logs`).
  35	    * Debug mode for verbose logging, including full LLM prompts.
  36	
  37	## üìÇ Project Structure
  38	
  39	‚îú‚îÄ‚îÄ app.py                     # Main Flask application‚îú‚îÄ‚îÄ config.ini.example         # Example configuration file‚îú‚îÄ‚îÄ start_translator.sh        # Setup and startup script‚îú‚îÄ‚îÄ requirements.txt           # Python dependencies‚îú‚îÄ‚îÄ README.md                  # This file‚îú‚îÄ‚îÄ LICENSE                    # Project license‚îú‚îÄ‚îÄ py/                        # Backend Python modules‚îÇ   ‚îú‚îÄ‚îÄ config_manager.py      # Handles config.ini‚îÇ   ‚îú‚îÄ‚îÄ subtitle_processor.py  # Core subtitle parsing and translation logic‚îÇ   ‚îú‚îÄ‚îÄ translation_service.py # Facade for translation APIs, TMDB, Wiki‚îÇ   ‚îú‚îÄ‚îÄ critic_service.py      # LLM-based translation critic‚îÇ   ‚îú‚îÄ‚îÄ video_transcriber.py   # Video to SRT transcription‚îÇ   ‚îú‚îÄ‚îÄ local_whisper.py       # Local Whisper implementation‚îÇ   ‚îú‚îÄ‚îÄ wiki_terminology.py    # Fandom/MediaWiki integration‚îÇ   ‚îú‚îÄ‚îÄ secure_browser.py      # Secure file browsing logic‚îÇ   ‚îú‚îÄ‚îÄ logger.py              # Logging setup‚îÇ   ‚îî‚îÄ‚îÄ wyoming_client.py      # Client for Wyoming protocol (Whisper)‚îú‚îÄ‚îÄ static/                    # Frontend static assets‚îÇ   ‚îú‚îÄ‚îÄ css/                   # Stylesheets (main.css)‚îÇ   ‚îú‚îÄ‚îÄ js/                    # JavaScript files (main.js, config_editor.js, etc.)‚îÇ   ‚îî‚îÄ‚îÄ images/                # Images like the logo‚îú‚îÄ‚îÄ templates/                 # HTML templates for Flask‚îÇ   ‚îú‚îÄ‚îÄ index.html             # Main translation page‚îÇ   ‚îú‚îÄ‚îÄ config_editor.html     # Configuration page‚îÇ   ‚îî‚îÄ‚îÄ log_viewer.html        # Log viewing page‚îú‚îÄ‚îÄ cache/                     # Temporary cache files (e.g., for subtitles, wikis)‚îÇ   ‚îî‚îÄ‚îÄ wikis/                 # Cached wiki terminology‚îú‚îÄ‚îÄ subs/                      # Default output directory for translated subtitles‚îú‚îÄ‚îÄ files/                     # Supporting files‚îÇ   ‚îî‚îÄ‚îÄ meaning.json           # User-defined special meanings/glossary‚îú‚îÄ‚îÄ live_translation_viewer.py # Terminal tool for live monitoring‚îú‚îÄ‚îÄ wyoming_chunk2srt.py       # Script for Wyoming protocol STT chunk processing‚îî‚îÄ‚îÄ ... (other utility scripts and files)
  40	## ‚öôÔ∏è Prerequisites
  41	
  42	* **Python**: Version 3.8 or higher is recommended.
  43	* **Bash Shell**: Required for running the setup script (`start_translator.sh`) on macOS, Linux, or Windows (e.g., via Git Bash or WSL).
  44	* **FFmpeg**: Required for video transcription (extracting audio from video files). The `start_translator.sh` script will attempt to install it if missing.
  45	
  46	## üöÄ Installation & Setup
  47	
  48	1.  **Clone the Repository**:
  49	    ```bash
  50	    git clone <your-repository-url>
  51	    cd subtitle-translator
  52	    ```
  53	
  54	2.  **Run the Setup and Start Script**:
  55	    ```bash
  56	    ./start_translator.sh
  57	    ```
  58	    This script will:
  59	    * Check for and attempt to install essential system dependencies like Python and FFmpeg.
  60	    * Set up a Python virtual environment (e.g., in `venv_subtrans/`).
  61	    * Install all required Python packages from `requirements.txt` (e.g., Flask, requests, srt, Pillow, faster-whisper, CTranslate2).
  62	    * Create a default `config.ini` from `config.ini.example` if it doesn't exist.
  63	    * Start the Subtitle Translator web application.
  64	
  65	    *Note for Windows users*: You might need to restart your terminal or system for PATH changes (especially for FFmpeg) to take effect if installed by the script.
  66	
  67	## ‚ñ∂Ô∏è Running the Application
  68	
  69	1.  **Start the Application**:
  70	    Execute the startup script from the project's root directory:
  71	    ```bash
  72	    ./start_translator.sh
  73	    ```
  74	2.  **Access the Web UI**:
  75	    Open your web browser and navigate to `http://127.0.0.1:PORT` (the default port is `5089` but can be changed in `config.ini`).
  76	3.  **Stopping the Application**:
  77	    Press `Ctrl+C` in the terminal where the script is running.
  78	
  79	## üìñ Usage
  80	
  81	The primary way to use Subtitle Translator is through its web interface.
  82	
  83	### Single File Translation
  84	* Navigate to the main "Translate" page.
  85	* **Upload a file**: Click "Choose File" to upload an `.srt`, `.ass`, or `.vtt` file from your computer.
  86	* **Or select a host file**: Click "Browse" next to "Select File from Host" to use the secure file browser to pick a file from allowed directories on the server.
  87	* **Choose Languages**: Select the source and target languages for translation. Defaults are read from `config.ini`.
  88	* **Special Meanings (Optional)**: Expand the "Special Meanings" section to define custom translations for specific words or phrases. This is useful for character names, technical jargon, or correcting common mistranslations by the AI. These can also be pre-configured in `files/meaning.json`.
  89	* Click "Start Translation". Progress will be shown in the "Translation Progress" card.
  90	
  91	### Video Transcription to SRT
  92	* On the main "Translate" page, find the "Transcribe Video File" card.
  93	* Click "Browse Video" to select a video file from the host system.
  94	* Optionally, select the language of the video audio. Leaving it blank will use auto-detection (if supported by the Whisper model).
  95	* Click "Start Transcription". The system will extract audio, transcribe it using Whisper (via a remote server or local processing as configured), and save the result as an SRT file in the `subs/` directory.
  96	
  97	### Bulk Directory Translation
  98	* On the main "Translate" page, find the "Bulk Translate Directory" card.
  99	* Click "Browse Directory" to open the inline file browser. Navigate to the desired directory.
 100	* Once inside the target directory, click "Select this directory" (this option appears within the browser).
 101	* Confirm the selected path appears next to the "Browse Directory" button.
 102	* Click the "Translate This Directory" button (which becomes active/visible after selection or is part of the browser actions).
 103	* The application will scan the directory (and its subdirectories) for subtitle files. It will attempt to identify source language files and translate them if a target language version isn't already present.
 104	* Progress for bulk operations is also displayed in the "Translation Progress" card, and a ZIP file of all translated subtitles will be available for download upon completion.
 105	
 106	### Configuration
 107	* **Web UI**: Navigate to the "Settings" tab (or `/config`) to access the web-based configuration editor. Changes made here are saved to `config.ini`.
 108	* **`config.ini` File**: For more advanced settings or direct editing, modify the `config.ini` file in the project root. If it doesn't exist, it's created from `config.ini.example` on first run.
 109	    * See the `config.ini.example` file for a comprehensive list of available options and their descriptions.
 110	
 111	### Log Viewing
 112	* Navigate to the "Logs" tab (or `/logs`) in the web UI to view application logs. You can refresh, clear, and filter logs.
 113	
 114	### Live Translation Viewer (Terminal)
 115	For developers or users who prefer a terminal-based view:
 116	* **Monitor Live Log**: `python live_translation_viewer.py monitor`
 117	* **View Translation Report Summary**: `python live_translation_viewer.py report`
 118	    (This reads from `translation_report.txt` which is generated by some translation processes).
 119	
 120	## üõ†Ô∏è Configuration Details
 121	
 122	The application's behavior is primarily controlled by `config.ini`.
 123	
 124	* **`[general]`**:
 125	    * `source_language`, `target_language`: Default languages for translation.
 126	    * `debug_mode`: `true` for verbose logging (including LLM prompts), `false` otherwise.
 127	    * `host`, `port`: Network host and port for the web application.
 128	* **`[whisper]`**:
 129	    * `use_remote_whisper`: `true` to use a remote Faster-Whisper server, `false` for local processing.
 130	    * `server_url`: URL of the remote Faster-Whisper API server (if `use_remote_whisper` is true).
 131	    * Local Whisper settings (model, device, compute_type) are also available if running locally.
 132	* **`[translation]`**:
 133	    * `service_priority`: Comma-separated list of translation services to try in order (e.g., `deepl,ollama,google`).
 134	* **LLM Services (`[ollama]`, `[lmstudio]`, `[openai]`)**:
 135	    * `enabled`: `true` or `false`.
 136	    * `server_url` / `api_base_url`: API endpoint.
 137	    * `model`: Specific model name to use.
 138	    * `api_key`: For services like OpenAI and DeepL.
 139	    * Performance parameters for Ollama (`num_gpu`, `num_thread`, `num_ctx`, `use_mmap`, `use_mlock`).
 140	* **`[deepl]`**: API key and URL.
 141	* **`[tmdb]`**:
 142	    * `enabled`: `true` to fetch media context from TMDB.
 143	    * `api_key`: Your TMDB API v3 key.
 144	* **`[wiki_terminology]`**:
 145	    * `enabled`: `true` to fetch terminology from Fandom/MediaWiki sites.
 146	    * `cache_expiry_days`, `max_terms`, `manual_wiki_override`.
 147	* **`[critic]` / `[agent_critic]`**:
 148	    * `enabled`: `true` to use an LLM to critique and potentially revise translations.
 149	    * `service`: `ollama` or `lmstudio`.
 150	    * `model`, `temperature`.
 151	* **`[file_browser]`**:
 152	    * `allowed_paths`: Comma-separated list of absolute base paths the file browser is allowed to access on the host system.
 153	    * `denied_patterns`: Comma-separated list of glob patterns or specific paths to deny access to.
 154	
 155	* **`files/meaning.json`**:
 156	    A JSON file to define custom translations for specific words or phrases, ensuring consistency for names, jargon, or common mistranslations. Example:
 157	    ```json
 158	    [
 159	      {
 160	        "word": "Mutes",
 161	        "meaning": "Mutated animals with enhanced intelligence"
 162	      },
 163	      {
 164	        "word": "Prahm",
 165	        "meaning": "A special reconciliation party (prom)"
 166	      }
 167	    ]
 168	    ```
 169	
 170	## üì¶ Dependencies
 171	
 172	Key Python dependencies are managed by `requirements.txt` and include:
 173	
 174	* Flask
 175	* requests
 176	* srt
 177	* ffmpeg-python
 178	* Pillow
 179	* Wyoming protocol client (`wyoming>=0.4.0`)
 180	* For local Whisper: `faster-whisper`, `ctranslate2`, `torch`
 181	* For Wiki Terminology: `beautifulsoup4`, `mwparserfromhell`
 182	
 183	The `start_translator.sh` script handles the installation of these dependencies within a virtual environment.
 184	
 185	## ü§ù Contributing
 186	
 187	Contributions are welcome! Please feel free to submit pull requests, create issues for bugs or feature requests.
 188	
 189	1.  Fork the repository.
 190	2.  Create your feature branch (`git checkout -b feature/AmazingFeature`).
 191	3.  Commit your changes (`git commit -m 'Add some AmazingFeature'`).
 192	4.  Push to the branch (`git push origin feature/AmazingFeature`).
 193	5.  Open a Pull Request.
 194	
 195	## üìú License
 196	
 197	This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.
 198	
 199	## üôè Acknowledgements
 200	
 201	* This project leverages several powerful open-source libraries and tools.
 202	* Portions of the startup script and some utility functions may have been inspired or assisted by AI code generation tools like GitHub Copilot.


--- File: app.py ---
   1	import os
   2	import shutil
   3	import sys
   4	import logging
   5	import re
   6	import tempfile
   7	import zipfile
   8	import threading
   9	import traceback  # Add missing traceback import
  10	from flask import Flask, render_template, request, jsonify, send_file, redirect, url_for, flash, send_from_directory
  11	from werkzeug.utils import secure_filename
  12	import configparser
  13	import json
  14	import time
  15	from datetime import datetime
  16	import uuid
  17	
  18	# Add the project root to sys.path
  19	sys.path.append(os.path.dirname(os.path.abspath(__file__)))
  20	
  21	# Import modules
  22	from py.config_manager import ConfigManager
  23	from py.subtitle_processor import SubtitleProcessor
  24	from py.translation_service import TranslationService
  25	from py.critic_service import CriticService
  26	from py.logger import setup_logger
  27	from py.video_transcriber import VideoTranscriber
  28	from py.secure_browser import SecureFileBrowser
  29	
  30	# Initialize Flask app
  31	app = Flask(__name__)
  32	app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max upload size
  33	app.config['UPLOAD_FOLDER'] = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'subs')
  34	app.secret_key = os.urandom(24)  # Add secret key for flash messages
  35	
  36	# Ensure the upload folder exists
  37	os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
  38	
  39	# Define the cache directory for temporary files
  40	CACHE_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'cache')
  41	os.makedirs(CACHE_DIR, exist_ok=True)  # Ensure the cache folder exists
  42	
  43	# Initialize config first
  44	config_manager = ConfigManager(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'config.ini'))
  45	config = config_manager.get_config()
  46	 
  47	# Setup logging with correct level based on debug_mode
  48	debug_mode = config.getboolean('general', 'debug_mode', fallback=False)
  49	log_level = logging.DEBUG if debug_mode else logging.INFO
  50	logger = setup_logger('app', os.path.join(os.path.dirname(os.path.abspath(__file__)), 'translator.log'), level=log_level)
  51	
  52	if debug_mode:
  53	    logger.debug("Debug mode is enabled - full LLM prompts will be logged")
  54	
  55	# Initialize the configuration manager
  56	config_manager = ConfigManager(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'config.ini'))
  57	
  58	# Translation jobs storage
  59	translation_jobs = {}
  60	
  61	# Locks for thread-safe access to shared resources
  62	progress_lock = threading.Lock()
  63	jobs_lock = threading.Lock()  # New lock for translation_jobs dictionary
  64	
  65	# Progress status file path
  66	PROGRESS_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'translation_progress.json')
  67	
  68	# Global variable for bulk translation progress tracking
  69	bulk_translation_progress = {
  70	    "mode": "idle",
  71	    "status": "idle", 
  72	    "message": "",
  73	    "current_file": "",
  74	    "done_files": 0,
  75	    "total_files": 0,
  76	    "zip_path": ""
  77	}
  78	
  79	# Progress data for individual transcription jobs (like local Whisper)
  80	# This will be populated by VideoTranscriber instances
  81	transcription_job_progress = {}
  82	
  83	# Load saved progress state if it exists
  84	def load_progress_state():
  85	    global bulk_translation_progress
  86	    try:
  87	        if os.path.exists(PROGRESS_FILE):
  88	            with progress_lock:
  89	                with open(PROGRESS_FILE, 'r', encoding='utf-8') as f:
  90	                    saved_progress = json.load(f)
  91	                    if saved_progress.get("status") in ["processing", "scanning", "translating"]:
  92	                        # If the saved status shows an active process, set to failed
  93	                        # as the process was likely interrupted
  94	                        saved_progress["status"] = "failed"
  95	                        saved_progress["message"] = "Translation was interrupted. Please start again."
  96	                    bulk_translation_progress = saved_progress
  97	                    logger.info("Loaded saved translation progress state")
  98	    except Exception as e:
  99	        logger.error(f"Failed to load translation progress state: {e}")
 100	
 101	# Save current progress state to file
 102	def save_progress_state():
 103	    try:
 104	        with progress_lock:
 105	            with open(PROGRESS_FILE, 'w', encoding='utf-8') as f:
 106	                json.dump(bulk_translation_progress, f, ensure_ascii=False, indent=2)
 107	    except Exception as e:
 108	        logger.error(f"Failed to save translation progress state: {e}")
 109	
 110	# Initialize by loading any saved state
 111	load_progress_state()
 112	
 113	@app.route('/api/transcription_progress/<job_id>', methods=['GET'])
 114	def get_transcription_progress(job_id):
 115	    # VideoTranscriber should be imported at the top of the file
 116	    progress_data = VideoTranscriber.get_progress(job_id) # Uses the class method
 117	    if progress_data:
 118	        return jsonify(progress_data)
 119	    else:
 120	        return jsonify({"status": "unknown", "job_id": job_id, "message": "No progress data found for this job ID.", "percent": 0}), 404
 121	
 122	# Language mapping
 123	LANGUAGES = [
 124	    ('en', 'English'),
 125	    ('es', 'Spanish'),
 126	    ('fr', 'French'),
 127	    ('de', 'German'),
 128	    ('it', 'Italian'),
 129	    ('pt', 'Portuguese'),
 130	    ('ru', 'Russian'),
 131	    ('ja', 'Japanese'),
 132	    ('ko', 'Korean'),
 133	    ('zh', 'Chinese'),
 134	    ('da', 'Danish'),
 135	    ('nl', 'Dutch'),
 136	    ('fi', 'Finnish'),
 137	    ('sv', 'Swedish'),
 138	    ('no', 'Norwegian'),
 139	]
 140	
 141	@app.route('/')
 142	def index():
 143	    """Render the home page with recent translations."""
 144	    config = config_manager.get_config()
 145	    # Use source_language and target_language from config instead of default_source_language and default_target_language
 146	    default_source = config.get('general', 'source_language', fallback='en')
 147	    default_target = config.get('general', 'target_language', fallback='da')
 148	    
 149	    # Get list of recent translations
 150	    recent_files = get_recent_translations()
 151	    
 152	    return render_template('index.html', 
 153	                          languages=LANGUAGES, 
 154	                          default_source=default_source,
 155	                          default_target=default_target,
 156	                          recent_files=recent_files)
 157	
 158	@app.route('/logs')
 159	def logs():
 160	    """Render the log viewer page."""
 161	    log_files = get_log_files()
 162	    current_log = 'translator.log'
 163	    log_content = get_log_content(current_log)
 164	    
 165	    return render_template('log_viewer.html',
 166	                          log_files=log_files,
 167	                          current_log=current_log,
 168	                          log_content=log_content)
 169	
 170	@app.route('/config')
 171	def config():
 172	    """Render the configuration editor page."""
 173	    return render_template('config_editor.html')
 174	
 175	@app.route('/api/config', methods=['GET', 'POST'])
 176	def api_config():
 177	    """API endpoint for getting and setting configuration."""
 178	    if request.method == 'GET':
 179	        return jsonify(config_manager.get_config_as_dict())
 180	    elif request.method == 'POST':
 181	        try:
 182	            config_data = request.json
 183	            config_manager.save_config(config_data)
 184	            return jsonify({'success': True})
 185	        except Exception as e:
 186	            logger.error(f"Error saving configuration: {str(e)}")
 187	            return jsonify({'success': False, 'message': str(e)})
 188	
 189	@app.route('/api/logs')
 190	def api_logs():
 191	    """API endpoint for getting logs."""
 192	    log_file = request.args.get('file', 'translator.log')
 193	    content = get_log_content(log_file)
 194	    return jsonify({'logs': content.splitlines() if content else []})
 195	
 196	@app.route('/api/clear_log', methods=['POST'])
 197	def api_clear_log():
 198	    """API endpoint for clearing a log file."""
 199	    log_file = request.json.get('file', 'translator.log')
 200	    success = clear_log_file(log_file)
 201	    return jsonify({'success': success})
 202	
 203	@app.route('/api/translate', methods=['POST'])
 204	def api_translate():
 205	    """Handle file upload and start translation."""
 206	    try:
 207	        # Check if a host file path was provided instead of a file upload
 208	        host_file_path = request.form.get('host_file_path', '')
 209	        
 210	        if (host_file_path):
 211	            # Get a secure browser instance for path validation
 212	            secure_browser = get_secure_browser()
 213	            
 214	            # Normalize the path before validation
 215	            normalized_path = os.path.abspath(os.path.normpath(host_file_path))
 216	            
 217	            # Validate the path is allowed using our secure browser
 218	            if not secure_browser.is_path_allowed(normalized_path):
 219	                logger.warning(f"Access denied for file: {normalized_path}. Not within allowed bases or matches denied pattern.")
 220	                return jsonify({"error": "Access to this file is restricted."}), 403
 221	            
 222	            # After validation, use the normalized path
 223	            requested_abs_path = normalized_path
 224	            
 225	            # Additional validations
 226	            if not os.path.isfile(requested_abs_path):
 227	                return jsonify({"error": "Invalid file path or file does not exist"}), 400
 228	                
 229	            # Check if it's a subtitle file
 230	            if not requested_abs_path.lower().endswith(('.srt', '.ass', '.vtt')):
 231	                return jsonify({"error": "Only subtitle files (.srt, .ass, .vtt) are supported"}), 400
 232	                
 233	            # Get the filename without path
 234	            filename = os.path.basename(requested_abs_path)
 235	            
 236	            # Create a job ID based on the filename and timestamp
 237	            timestamp = int(time.time())
 238	            job_id = f"{timestamp}_{filename}"
 239	            
 240	            # Copy the file to the cache directory
 241	            cache_path = os.path.join(CACHE_DIR, filename)
 242	            shutil.copy2(requested_abs_path, cache_path)
 243	            logger.info(f"Using host file: {requested_abs_path}, copied to {cache_path}")
 244	            
 245	        else:
 246	            # Handle regular file upload
 247	            if 'file' not in request.files:
 248	                return jsonify({"error": "No file part in the request"}), 400
 249	                
 250	            file = request.files['file']
 251	            
 252	            if file.filename == '':
 253	                return jsonify({"error": "No file selected"}), 400
 254	                
 255	            if not allowed_file(file.filename):
 256	                return jsonify({"error": "File type not allowed. Only subtitle files (.srt, .ass, .vtt) are permitted"}), 400
 257	                
 258	            # Create a secure filename
 259	            filename = secure_filename(file.filename)
 260	            
 261	            # Create a job ID based on the filename and timestamp
 262	            timestamp = int(time.time())
 263	            job_id = f"{timestamp}_{filename}"
 264	            
 265	            # Save the file to the cache directory
 266	            cache_path = os.path.join(CACHE_DIR, filename)
 267	            file.save(cache_path)
 268	            logger.info(f"File uploaded: {filename}, saved to {cache_path}")
 269	
 270	        # Get language options
 271	        source_language = request.form.get('source_language', 'en')
 272	        target_language = request.form.get('target_language', 'da')
 273	        
 274	        # Process special meanings if provided
 275	        special_meanings = []
 276	        if 'special_meanings' in request.form:
 277	            try:
 278	                special_meanings = json.loads(request.form['special_meanings'])
 279	                logger.info(f"Special meanings provided: {len(special_meanings)} items")
 280	            except:
 281	                logger.warning("Failed to parse special meanings JSON")
 282	
 283	        # Start the translation in a background thread
 284	        threading.Thread(
 285	            target=process_translation,
 286	            args=(job_id, cache_path, filename, source_language, target_language, special_meanings)
 287	        ).start()
 288	
 289	        return jsonify({
 290	            "status": "success",
 291	            "message": "File uploaded and translation started",
 292	            "job_id": job_id
 293	        })
 294	
 295	    except Exception as e:
 296	        logger.exception("Error in file upload and translation")
 297	        return jsonify({"error": str(e)}), 500
 298	
 299	@app.route('/download/<job_id>')
 300	def download_translation(job_id):
 301	    """Endpoint for downloading a completed translation."""
 302	    if job_id not in translation_jobs or translation_jobs[job_id]['status'] != 'completed':
 303	        return redirect(url_for('index'))
 304	    
 305	    job = translation_jobs[job_id]
 306	    return send_file(job['target_path'], 
 307	                     as_attachment=True, 
 308	                     download_name=f"translated_{job['original_filename']}")
 309	
 310	@app.route('/api/view_subtitle/<path:file_or_job_id>')
 311	def api_view_subtitle(file_or_job_id):
 312	    """API endpoint for viewing a subtitle file. Can accept either a job ID or a filename."""
 313	    # First, try handling it as a job ID
 314	    if file_or_job_id in translation_jobs:
 315	        job = translation_jobs[file_or_job_id]
 316	        file_path = job['target_path'] if job['status'] == 'completed' else job['source_path']
 317	        filename = os.path.basename(file_path)
 318	    else:
 319	        # If not a job ID, treat as a filename in the subs folder
 320	        safe_filename = secure_filename(file_or_job_id)
 321	        if safe_filename != file_or_job_id:
 322	            return jsonify({'success': False, 'message': 'Invalid filename'})
 323	        
 324	        file_path = os.path.join(app.config['UPLOAD_FOLDER'], safe_filename)
 325	        filename = safe_filename
 326	        
 327	        if not os.path.exists(file_path):
 328	            return jsonify({'success': False, 'message': f'File not found: {filename}'})
 329	    
 330	    try:
 331	        with open(file_path, 'r', encoding='utf-8') as f:
 332	            content = f.read()
 333	        return jsonify({
 334	            'success': True,
 335	            'content': content,
 336	            'filename': filename
 337	        })
 338	    except Exception as e:
 339	        logger.error(f"Error reading subtitle file: {str(e)}")
 340	        return jsonify({'success': False, 'message': f"Error reading file: {str(e)}"})
 341	
 342	@app.route('/upload', methods=['POST'])
 343	def upload():
 344	    """Handle subtitle file upload and translation."""
 345	    if 'srtfile' not in request.files:
 346	        flash("No SRT file part in the request.", "error")
 347	        return redirect(url_for("index"))
 348	        
 349	    file = request.files['srtfile']
 350	    if file.filename == '':
 351	        flash("No selected file.", "error")
 352	        return redirect(url_for("index"))
 353	        
 354	    if not file.filename.lower().endswith('.srt'):
 355	        flash("Invalid file type. Please upload an SRT file.", "error")
 356	        return redirect(url_for("index"))
 357	
 358	    # Save the uploaded file temporarily for processing
 359	    temp_input_path = os.path.join(tempfile.gettempdir(), secure_filename(f"temp_{file.filename}"))
 360	    try:
 361	        file.save(temp_input_path)
 362	        logger.info(f"Received SRT: {file.filename} -> {temp_input_path}")
 363	    except Exception as e:
 364	        logger.error(f"Failed to save temporary input file: {e}")
 365	        flash("Server error saving uploaded file.", "error")
 366	        return redirect(url_for("index"))
 367	
 368	    # Get language codes from config
 369	    config = config_manager.get_config()
 370	    src_lang = config.get("general", "source_language", fallback="en")
 371	    tgt_lang = config.get("general", "target_language", fallback="da")
 372	    
 373	    # Determine output filename
 374	    base, ext = os.path.splitext(file.filename)
 375	    out_base = base
 376	    replaced = False
 377	    
 378	    # Try to replace language code in filename if it exists
 379	    patterns = [
 380	        f'.{src_lang}.', f'.{src_lang}-', f'.{src_lang}_',
 381	        f'{src_lang}.', f'-{src_lang}.', f'_{src_lang}.'
 382	    ]
 383	    import re
 384	    for pat in patterns:
 385	        if pat in base.lower():
 386	            newpat = pat.replace(src_lang, tgt_lang)
 387	            out_base = re.sub(pat, newpat, base, flags=re.IGNORECASE)
 388	            replaced = True
 389	            break
 390	    if not replaced:
 391	        out_base = f"{base}.{tgt_lang}"
 392	    
 393	    # Ensure the output filename is secure and save to SUBS_FOLDER
 394	    out_filename = secure_filename(out_base + ext)
 395	    output_path = os.path.join(app.config['UPLOAD_FOLDER'], out_filename)
 396	
 397	    try:
 398	        # Initialize subtitle processor and translation service
 399	        subtitle_processor = SubtitleProcessor(logger)
 400	        translation_service = TranslationService(config, logger)
 401	        
 402	        # Process the subtitles
 403	        subtitles = subtitle_processor.parse_file(temp_input_path)
 404	        translated_subtitles = []
 405	        
 406	        for subtitle in subtitles:
 407	            translated_text = translation_service.translate(
 408	                subtitle['text'],
 409	                src_lang,
 410	                tgt_lang
 411	            )
 412	            translated_subtitle = subtitle.copy()
 413	            translated_subtitle['text'] = translated_text
 414	            translated_subtitles.append(translated_subtitle)
 415	        
 416	        # Write translated subtitles to file
 417	        subtitle_processor.write_file(output_path, translated_subtitles)
 418	        
 419	        flash(f"Translation complete! Saved as '{out_filename}' in the subs archive.", "success")
 420	    except Exception as e:
 421	        logger.error(f"Translation failed: {e}")
 422	        flash(f"Translation failed: {e}", "error")
 423	    finally:
 424	        # Clean up the temporary input file
 425	        if os.path.exists(temp_input_path):
 426	            try:
 427	                os.remove(temp_input_path)
 428	                logger.info(f"Cleaned up temporary input file: {temp_input_path}")
 429	            except Exception as e_clean:
 430	                logger.warning(f"Failed to clean up temp input file {temp_input_path}: {e_clean}")
 431	
 432	    # Redirect back to the index page instead of download
 433	    return redirect(url_for("index"))
 434	
 435	@app.route('/api/progress')
 436	def get_progress():
 437	    """API endpoint for getting translation progress."""
 438	    with progress_lock:
 439	        return jsonify(bulk_translation_progress)
 440	
 441	@app.route('/api/list_subs')
 442	def api_list_subs():
 443	    """API endpoint for listing subtitle files in the subs folder."""
 444	    try:
 445	        logger.info(f"Listing subtitle files in {app.config['UPLOAD_FOLDER']}")
 446	        if not os.path.exists(app.config['UPLOAD_FOLDER']):
 447	            logger.warning(f"Subs folder {app.config['UPLOAD_FOLDER']} does not exist")
 448	            return jsonify({"files": [], "warning": f"Subs folder does not exist"})
 449	        
 450	        files = [f for f in os.listdir(app.config['UPLOAD_FOLDER']) 
 451	                if f.lower().endswith('.srt') and os.path.isfile(os.path.join(app.config['UPLOAD_FOLDER'], f))]
 452	        files.sort(key=lambda f: os.path.getmtime(os.path.join(app.config['UPLOAD_FOLDER'], f)), reverse=True)
 453	        
 454	        logger.info(f"Found {len(files)} subtitle files in archive")
 455	        return jsonify({"files": files})
 456	    except Exception as e:
 457	        logger.error(f"Failed to list subs folder: {e}")
 458	        return jsonify({"files": [], "error": str(e)}), 500
 459	
 460	@app.route('/download_sub/<path:filename>')
 461	def download_sub_file(filename):
 462	    """Endpoint for downloading a specific subtitle file from the subs folder."""
 463	    safe_filename = secure_filename(filename)
 464	    if safe_filename != filename:  # Basic check against directory traversal attempts
 465	        logger.error(f"Invalid filename requested for download: {filename}")
 466	        return "Invalid filename", 400
 467	        
 468	    file_path = os.path.join(app.config['UPLOAD_FOLDER'], safe_filename)
 469	    
 470	    if not os.path.isfile(file_path):
 471	        logger.error(f"File not found in subs archive: {file_path}")
 472	        return "File not found in archive", 404
 473	        
 474	    logger.info(f"Serving file from subs archive: {file_path}")
 475	    try:
 476	        return send_from_directory(
 477	            app.config['UPLOAD_FOLDER'], 
 478	            safe_filename, 
 479	            as_attachment=True
 480	        )
 481	    except Exception as e:
 482	        logger.error(f"Failed to send file from subs archive {file_path}: {e}")
 483	        return "Error serving file", 500
 484	
 485	@app.route('/api/delete_sub/<path:filename>', methods=['DELETE'])
 486	def api_delete_sub(filename):
 487	    """API endpoint for deleting a subtitle file from the subs folder."""
 488	    try:
 489	        safe_filename = secure_filename(filename)
 490	        if safe_filename != filename:
 491	            return jsonify({"success": False, "error": "Invalid filename"}), 400
 492	            
 493	        file_path = os.path.join(app.config['UPLOAD_FOLDER'], safe_filename)
 494	        
 495	        if not os.path.isfile(file_path):
 496	            return jsonify({"success": False, "error": "File not found"}), 404
 497	            
 498	        os.remove(file_path)
 499	        logger.info(f"Deleted subtitle file: {safe_filename}")
 500	        return jsonify({"success": True})
 501	    except Exception as e:
 502	        logger.error(f"Failed to delete subtitle file: {str(e)}")
 503	        return jsonify({"success": False, "error": str(e)}), 500
 504	
 505	@app.route('/api/browse_dirs', methods=['GET'])
 506	def api_browse_dirs():
 507	    """API endpoint to list directories for the file browser."""
 508	    parent_path = request.args.get("path", "")
 509	    
 510	    # Get secure browser instance
 511	    secure_browser = get_secure_browser()
 512	    
 513	    # If no allowed paths configured, restrict access
 514	    if not secure_browser.allowed_paths:
 515	        logger.warning("File browsing attempted but no 'allowed_paths' configured in [file_browser] section.")
 516	        return jsonify({"error": "File browsing is not configured or no paths are allowed."}), 403
 517	    
 518	    # Default to first allowed path if no path provided
 519	    if not parent_path:
 520	        # If no path provided, return configured allowed_paths as root entries
 521	        roots = [{"name": os.path.basename(p) or p, "path": p} for p in secure_browser.allowed_paths]
 522	        resp = jsonify({"directories": roots, "files": [], "current_path": "", "parent_path": ""})
 523	        resp.headers["X-Content-Type-Options"] = "nosniff"
 524	        resp.headers["X-Frame-Options"] = "DENY"
 525	        return resp
 526	    
 527	    try:
 528	        # Validate the requested path
 529	        if not secure_browser.is_path_allowed(parent_path):
 530	            logger.warning(f"Access denied for path: {parent_path}. Not within allowed bases.")
 531	            return jsonify({"error": "Access to this path is restricted."}), 403
 532	        
 533	        # Normalize path
 534	        requested_abs_path = os.path.abspath(os.path.normpath(parent_path))
 535	        
 536	        # Get the parent path if navigation is allowed
 537	        parent_of_parent = secure_browser.get_safe_parent_path(requested_abs_path)
 538	        
 539	        # List all directories in the parent path
 540	        dirs = []
 541	        if os.path.isdir(requested_abs_path):
 542	            # Get all items in the directory
 543	            items = os.listdir(requested_abs_path)
 544	            
 545	            # Filter items based on security rules
 546	            filtered_items = secure_browser.filter_items(requested_abs_path, items)
 547	            
 548	            # Add all directories to the result
 549	            for item in filtered_items:
 550	                full_path = os.path.join(requested_abs_path, item)
 551	                if os.path.isdir(full_path):
 552	                    dirs.append({"name": item, "path": full_path})
 553	            
 554	            # Sort directories by name
 555	            dirs.sort(key=lambda x: x["name"].lower())
 556	            
 557	            # Add security headers
 558	            resp = jsonify({
 559	                "directories": dirs,
 560	                "current_path": requested_abs_path,
 561	                "parent_path": parent_of_parent
 562	            })
 563	            resp.headers["X-Content-Type-Options"] = "nosniff"
 564	            resp.headers["X-Frame-Options"] = "DENY"
 565	            return resp
 566	        else:
 567	            return jsonify({"error": "Not a valid directory"}), 400
 568	    except PermissionError:
 569	        logger.warning(f"Permission denied accessing directory: {parent_path}")
 570	        return jsonify({"error": "Permission denied accessing this directory"}), 403
 571	    except Exception as e:
 572	        logger.error(f"Error browsing directory {parent_path}: {str(e)}")
 573	        return jsonify({"error": f"Error accessing directory: {str(e)}"}), 500
 574	
 575	@app.route('/api/browse_files', methods=['GET'])
 576	def api_browse_files():
 577	    """API endpoint to list files in a directory for the host file browser."""
 578	    parent_path = request.args.get("path", "")
 579	    
 580	    # Get secure browser instance
 581	    secure_browser = get_secure_browser()
 582	    
 583	    # If no allowed paths configured, restrict access
 584	    if not secure_browser.allowed_paths:
 585	        logger.warning("File browsing attempted but no 'allowed_paths' configured in [file_browser] section.")
 586	        return jsonify({"error": "File browsing is not configured or no paths are allowed."}), 403
 587	    
 588	    # If no path provided, return configured allowed_paths as root entries
 589	    if not parent_path:
 590	        roots = [{"name": os.path.basename(p) or p, "path": p} for p in secure_browser.allowed_paths]
 591	        resp = jsonify({"directories": roots, "files": [], "current_path": "", "parent_path": ""})
 592	        resp.headers["X-Content-Type-Options"] = "nosniff"
 593	        resp.headers["X-Frame-Options"] = "DENY"
 594	        return resp
 595	    
 596	    try:
 597	        # Validate the requested path
 598	        if not secure_browser.is_path_allowed(parent_path):
 599	            logger.warning(f"Access denied for path: {parent_path}. Not within allowed bases.")
 600	            return jsonify({"error": "Access to this path is restricted."}), 403
 601	        
 602	        # Normalize path
 603	        requested_abs_path = os.path.abspath(os.path.normpath(parent_path))
 604	        
 605	        # Get the parent path if navigation is allowed
 606	        parent_of_parent = secure_browser.get_safe_parent_path(requested_abs_path)
 607	        
 608	        # List all items in the parent path
 609	        files = []
 610	        dirs = []
 611	        
 612	        if os.path.isdir(requested_abs_path):
 613	            # Get all items in the directory
 614	            items = os.listdir(requested_abs_path)
 615	            
 616	            # Filter items based on security rules
 617	            filtered_items = secure_browser.filter_items(requested_abs_path, items)
 618	            
 619	            for item in filtered_items:
 620	                full_path = os.path.join(requested_abs_path, item)
 621	                
 622	                if os.path.isdir(full_path):
 623	                    dirs.append({"name": item, "path": full_path})
 624	                else:
 625	                    # Only include files with certain extensions
 626	                    if item.lower().endswith(('.srt', '.ass', '.vtt')):
 627	                        files.append({"name": item, "path": full_path})
 628	            
 629	            # Sort directories and files by name
 630	            dirs.sort(key=lambda x: x["name"].lower())
 631	            files.sort(key=lambda x: x["name"].lower())
 632	            
 633	            # Add security headers
 634	            resp = jsonify({
 635	                "files": files,
 636	                "directories": dirs,
 637	                "current_path": requested_abs_path,
 638	                "parent_path": parent_of_parent
 639	            })
 640	            resp.headers["X-Content-Type-Options"] = "nosniff"
 641	            resp.headers["X-Frame-Options"] = "DENY"
 642	            return resp
 643	        else:
 644	            return jsonify({"error": "Not a valid directory"}), 400
 645	    except PermissionError:
 646	        logger.warning(f"Permission denied accessing directory: {parent_path}")
 647	        return jsonify({"error": "Permission denied accessing this directory"}), 403
 648	    except Exception as e:
 649	        logger.error(f"Error browsing files in directory {parent_path}: {str(e)}")
 650	        return jsonify({"error": f"Error accessing directory: {str(e)}"}), 500
 651	
 652	@app.route("/api/start-scan", methods=["POST"])
 653	def api_start_scan():
 654	    """API endpoint to start a bulk scan and translation of a directory."""
 655	    data = request.get_json(silent=True) or {}
 656	    root = data.get("path", "").strip()
 657	    if not root or not os.path.isdir(root):
 658	        logger.error(f"Invalid or missing folder path: {root}")
 659	        return jsonify({"ok": False, "error": "Folder not found or path is invalid"}), 400
 660	
 661	    config = config_manager.get_config()
 662	
 663	    # Optional: Whitelist check
 664	    allowed_bases = config.get("bulk_scan", "allowed_base", fallback="").split(',')
 665	    allowed_bases = [os.path.abspath(b.strip()) for b in allowed_bases if b.strip()]
 666	    if allowed_bases:  # Only check if allowed_base is configured
 667	        try:
 668	            abs_root = os.path.abspath(root)
 669	            base_ok = any(os.path.commonpath([abs_root, b]) == b for b in allowed_bases)
 670	            if not base_ok:
 671	                logger.error(f"Path '{root}' is outside allowed base paths: {allowed_bases}")
 672	                return jsonify({"ok": False, "error": "Folder is outside the allowed base paths configured in config.ini"}), 403
 673	        except ValueError as e:
 674	            # Handle cases where paths might be on different drives (Windows)
 675	            logger.error(f"Error checking common path for '{root}': {e}")
 676	            return jsonify({"ok": False, "error": "Error validating folder path against allowed bases."}), 400
 677	
 678	    # Reset global progress dict for bulk mode
 679	    with progress_lock:
 680	        bulk_translation_progress.clear()
 681	        bulk_translation_progress.update({
 682	            "mode": "bulk",
 683	            "status": "queued",
 684	            "message": "",
 685	            "current_file": "",
 686	            "done_files": 0,
 687	            "total_files": 0,
 688	            "zip_path": ""
 689	        })
 690	    
 691	    # Start bulk translation in background thread
 692	    threading.Thread(
 693	        target=scan_and_translate_directory,
 694	        args=(root, config, bulk_translation_progress, logger),
 695	        daemon=True
 696	    ).start()
 697	
 698	    return jsonify({"ok": True})
 699	
 700	@app.route("/download-zip")
 701	def download_zip():
 702	    """Endpoint for downloading a zip file of translated subtitles."""
 703	    temp_path = request.args.get("temp", "")
 704	    # Security check: Ensure the path is within an expected temp directory structure
 705	    if not temp_path or not temp_path.startswith(tempfile.gettempdir()) or '..' in temp_path:
 706	        logger.error(f"Invalid or potentially unsafe temp path requested: {temp_path}")
 707	        return "Invalid or potentially unsafe file path", 400
 708	        
 709	    if not os.path.isfile(temp_path):
 710	        logger.error(f"Zip file not found or expired: {temp_path}")
 711	        return "File expired or missing", 404
 712	        
 713	    logger.info(f"Serving zip file: {temp_path}")
 714	    try:
 715	        return send_from_directory(
 716	            directory=os.path.dirname(temp_path),
 717	            path=os.path.basename(temp_path),
 718	            as_attachment=True,
 719	            download_name="translated_subtitles.zip"
 720	        )
 721	    except Exception as e:
 722	        logger.error(f"Failed to send file {temp_path}: {e}")
 723	        return "Error serving file", 500
 724	
 725	@app.route('/api/live_status')
 726	def live_status():
 727	    """API endpoint to get the current live translation status.
 728	    This now primarily relies on bulk_translation_progress which is updated by all job types.
 729	    """
 730	    # bulk_translation_progress is the global dictionary
 731	    # Ensure a consistent structure for the response
 732	    with progress_lock:
 733	        response_data = {
 734	            "mode": bulk_translation_progress.get("mode", "idle"),
 735	            "status": bulk_translation_progress.get("status", "idle"),
 736	            "message": bulk_translation_progress.get("message", "System is idle."),
 737	            "filename": bulk_translation_progress.get("current_file", ""),
 738	            "percent": bulk_translation_progress.get("percent", 0), # Percent is now directly in bulk_translation_progress
 739	            "job_id": bulk_translation_progress.get("job_id"), # job_id is useful for all modes
 740	            "current_line": bulk_translation_progress.get("current_line", 0),
 741	            "total_lines": bulk_translation_progress.get("total_lines", 0),
 742	            "done_files": bulk_translation_progress.get("done_files", 0),
 743	            "total_files": bulk_translation_progress.get("total_files", 0),
 744	            "current": bulk_translation_progress.get("current", {}),
 745	            "processed_lines": bulk_translation_progress.get("processed_lines", [])
 746	        }
 747	    
 748	    # No mode-specific logic needed here anymore if bulk_translation_progress is always up-to-date.
 749	    # The background threads (process_translation, process_video_transcription, scan_and_translate_directory)
 750	    # are responsible for keeping bulk_translation_progress accurate.
 751	
 752	    if config.getboolean('logging', 'log_live_status', fallback=False):
 753	        logger.debug(f"Live status API response: {json.dumps(response_data)}")
 754	    
 755	    return jsonify(response_data)
 756	
 757	@app.route('/api/translation_report/<path:filename>')
 758	def api_translation_report(filename):
 759	    """API endpoint for getting a detailed report of a translated subtitle file."""
 760	    try:
 761	        safe_filename = secure_filename(filename)
 762	        if safe_filename != filename:  # Basic check against directory traversal attempts
 763	            logger.error(f"Invalid filename requested for report: {filename}")
 764	            return jsonify({"success": False, "message": "Invalid filename"}), 400
 765	            
 766	        file_path = os.path.join(app.config['UPLOAD_FOLDER'], safe_filename)
 767	        
 768	        if not os.path.isfile(file_path):
 769	            logger.error(f"File not found for report: {file_path}")
 770	            return jsonify({"success": False, "message": "File not found"}), 404
 771	            
 772	        # Get file info
 773	        file_stats = os.stat(file_path)
 774	        creation_time = datetime.fromtimestamp(file_stats.st_ctime).strftime('%Y-%m-%d %H:%M:%S')
 775	        file_size = file_stats.st_size
 776	        
 777	        # Parse language codes from filename (assuming format like xxx_en_to_da_xxx.srt)
 778	        source_lang = "unknown"
 779	        target_lang = "unknown"
 780	        lang_pattern = re.compile(r'_([a-z]{2})_to_([a-z]{2})_')
 781	        lang_match = lang_pattern.search(filename)
 782	        if lang_match:
 783	            source_lang = lang_match.group(1)
 784	            target_lang = lang_match.group(2)
 785	            
 786	        # Read the file to get subtitle details
 787	        try:
 788	            with open(file_path, 'r', encoding='utf-8') as f:
 789	                content = f.read()
 790	                
 791	            # Basic subtitle analysis
 792	            subtitle_processor = SubtitleProcessor(logger)
 793	            subtitles = subtitle_processor.parse_file(file_path)
 794	            
 795	            # Calculate statistics
 796	            total_lines = len(subtitles)
 797	            total_words = 0
 798	            total_chars = 0
 799	            avg_line_length = 0
 800	            longest_line = 0
 801	            longest_line_content = "";
 802	            
 803	            for subtitle in subtitles:
 804	                text = subtitle.get('text', '')
 805	                words = len(text.split())
 806	                chars = len(text)
 807	                total_words += words
 808	                total_chars += chars;
 809	                
 810	                if chars > longest_line:
 811	                    longest_line = chars
 812	                    longest_line_content = text
 813	            
 814	            if total_lines > 0:
 815	                avg_line_length = total_chars / total_lines
 816	            
 817	            # Get a few sample subtitles for preview
 818	            sample_count = min(5, total_lines)
 819	            samples = []
 820	            step = max(1, total_lines // sample_count)
 821	            for i in range(0, total_lines, step):
 822	                if len(samples) < sample_count and i < total_lines:
 823	                    samples.append(subtitles[i])
 824	            
 825	            report = {
 826	                "success": True,
 827	                "filename": safe_filename,
 828	                "source_language": source_lang,
 829	                "target_language": target_lang,
 830	                "creation_time": creation_time,
 831	                "file_size_bytes": file_size,
 832	                "file_size_formatted": format_file_size(file_size),
 833	                "total_subtitles": total_lines,
 834	                "total_words": total_words,
 835	                "total_chars": total_chars,
 836	                "avg_line_length": round(avg_line_length, 1),
 837	                "longest_line": longest_line,
 838	                "longest_line_content": longest_line_content,
 839	                "samples": [
 840	                    {
 841	                        "index": s.get('index', '?'),
 842	                        "time": f"{s.get('start_time', '00:00:00')} --> {s.get('end_time', '00:00:00')}",
 843	                        "text": s.get('text', '')
 844	                    } for s in samples
 845	                ],
 846	                "content_preview": content[:1000] + ("..." if len(content) > 1000 else "")
 847	            }
 848	            
 849	            return jsonify(report)
 850	            
 851	        except Exception as e:
 852	            logger.error(f"Error analyzing subtitle file {filename}: {e}")
 853	            return jsonify({
 854	                "success": True,
 855	                "filename": safe_filename,
 856	                "source_language": source_lang,
 857	                "target_language": target_lang,
 858	                "creation_time": creation_time,
 859	                "file_size_bytes": file_size,
 860	                "file_size_formatted": format_file_size(file_size),
 861	                "error": f"Could not fully analyze file: {str(e)}",
 862	                "content_preview": content[:1000] + ("..." if len(content) > 1000 else "") if 'content' in locals() else "Error reading file"
 863	            })
 864	    
 865	    except Exception as e:
 866	        logger.error(f"Error generating translation report for {filename}: {str(e)}")
 867	        return jsonify({"success": False, "message": f"Error generating report: {str(e)}"}), 500
 868	
 869	def format_file_size(size_bytes):
 870	    """Convert bytes to human-readable file size."""
 871	    if size_bytes < 1024:
 872	        return f"{size_bytes} bytes"
 873	    elif size_bytes < 1024 * 1024:
 874	        return f"{size_bytes/1024:.1f} KB"
 875	    else:
 876	        return f"{size_bytes/(1024*1024):.1f} MB"
 877	
 878	# Helper functions
 879	
 880	def get_recent_translations():
 881	    """Get list of recent translations and transcriptions."""
 882	    recent_files = []
 883	    for job_id, job in translation_jobs.items():
 884	        # Ensure job is completed and has an end_time before processing
 885	        if job.get('status') == 'completed' and job.get('end_time') is not None:
 886	            entry = {
 887	                'id': job_id,
 888	                'name': job.get('original_filename', 'Unknown File'), # Default for name
 889	                'date': datetime.fromtimestamp(job['end_time']).strftime('%Y-%m-%d %H:%M:%S'),
 890	            }
 891	            
 892	            job_type = job.get('type')
 893	            
 894	            if job_type == 'transcription':
 895	                entry['source_language'] = job.get('language', 'N/A') # Video's language
 896	                entry['target_language'] = '(Transcription)'
 897	                recent_files.append(entry)
 898	            elif 'source_language' in job and 'target_language' in job: # Assumed to be a translation
 899	                entry['source_language'] = job['source_language']
 900	                entry['target_language'] = job['target_language']
 901	                recent_files.append(entry)
 902	            else:
 903	                # This job is completed but doesn't fit the expected structures.
 904	                logger.warning(
 905	                    f"Job {job_id} (type: {job_type}) is completed but lacks expected language fields. Skipping from recent list."
 906	                )
 907	                # No append, so it's skipped
 908	
 909	    # Sort by date, newest first
 910	    recent_files.sort(key=lambda x: x['date'], reverse=True)
 911	    
 912	    # Limit to 10 most recent
 913	    return recent_files[:10]
 914	
 915	def get_log_files():
 916	    """Get list of available log files."""
 917	    log_dir = os.path.dirname(os.path.abspath(__file__))
 918	    log_files = [f for f in os.listdir(log_dir) if f.startswith('translator.log')]
 919	    return sorted(log_files)
 920	
 921	def get_log_content(log_file):
 922	    """Get content of a log file."""
 923	    log_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), log_file)
 924	    try:
 925	        with open(log_path, 'r', encoding='utf-8') as f:
 926	            return f.read()
 927	    except Exception as e:
 928	        logger.error(f"Error reading log file {log_file}: {str(e)}")
 929	        return f"Error reading log file: {str(e)}"
 930	
 931	def clear_log_file(log_file):
 932	    """Clear a log file."""
 933	    log_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), log_file)
 934	    try:
 935	        with open(log_path, 'w', encoding='utf-8') as f:
 936	            f.write(f"Log cleared at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
 937	        return True
 938	    except Exception as e:
 939	        logger.error(f"Error clearing log file {log_file}: {str(e)}")
 940	        return False
 941	
 942	def process_translation(job_id, cache_path, filename, source_language, target_language, special_meanings):
 943	    """Process a translation job, updating the global progress dictionary."""
 944	    # Create a job record if it doesn't exist already
 945	    with jobs_lock:
 946	        if job_id not in translation_jobs:
 947	            translation_jobs[job_id] = {
 948	                'status': 'queued',
 949	                'source_path': cache_path,
 950	                'original_filename': filename,
 951	                'source_language': source_language,
 952	                'target_language': target_language,
 953	                'progress': 0,
 954	                'message': 'Queued for translation',
 955	                'start_time': time.time(),
 956	                'end_time': None,
 957	                'special_meanings': special_meanings
 958	            }
 959	        
 960	        job = translation_jobs[job_id]
 961	    
 962	    logger.info(f"Starting translation job {job_id}: {job['original_filename']}")
 963	    
 964	    # Use the global progress dictionary for live status updates
 965	    global bulk_translation_progress
 966	    progress_dict = bulk_translation_progress
 967	    
 968	    try:
 969	        # Reset and update global progress status for this job
 970	        with progress_lock:
 971	            progress_dict.clear()
 972	            progress_dict.update({
 973	                "mode": "single",
 974	                "status": "processing",
 975	                "message": f'Starting translation for {job["original_filename"]}',
 976	            "current_file": job["original_filename"],
 977	            "total_lines": 0, # Will be updated by translate_srt
 978	            "current_line": 0,
 979	            "job_id": job_id # Add job_id for reference
 980	        })
 981	        
 982	        # Save progress state to file
 983	        save_progress_state()
 984	        
 985	        # Update job status in translation_jobs as well
 986	        job['status'] = 'processing'
 987	        job['message'] = 'Initializing...'
 988	        
 989	        # Initialize subtitle processor
 990	        subtitle_processor = SubtitleProcessor(logger) # Ensure subtitle_processor is initialized here
 991	        
 992	        # Get config
 993	        config = config_manager.get_config()
 994	        
 995	        # Update languages in config for this specific job
 996	        config.set('general', 'source_language', job['source_language'])
 997	        config.set('general', 'target_language', job['target_language'])
 998	        
 999	        # --- MODIFICATION START ---
1000	        # Construct the target path for the 'subs' folder (app.config['UPLOAD_FOLDER'])
1001	        original_filename_base, original_filename_ext = os.path.splitext(job['original_filename'])
1002	        
1003	        # Use secure_filename on the modified name
1004	        translated_filename_stem = f"{original_filename_base}_translated_{job['target_language']}"
1005	        # Preserve original extension if it's .ass or .vtt, otherwise default to .srt
1006	        # However, pysrt usually saves as .srt. If you want to ensure .srt:
1007	        # final_translated_filename = secure_filename(f"{translated_filename_stem}.srt")
1008	        # If you want to try and keep original extension (but pysrt might still save as srt):
1009	        output_extension = original_filename_ext if original_filename_ext.lower() in ['.ass', '.vtt'] else '.srt'
1010	        final_translated_filename = secure_filename(f"{translated_filename_stem}{output_extension}")
1011	
1012	        # Ensure UPLOAD_FOLDER (app.config['UPLOAD_FOLDER']) is used for the output path
1013	        final_output_path = os.path.join(app.config['UPLOAD_FOLDER'], final_translated_filename)
1014	        logger.info(f"Target save path for single translation will be: {final_output_path}")
1015	        # --- MODIFICATION END ---
1016	        
1017	        # Call translate_srt, passing the global progress dictionary
1018	        success = subtitle_processor.translate_srt(
1019	            job['source_path'],      # Source is still the cached file (cache_path)
1020	            final_output_path,       # <<<< MODIFIED: Save to 'subs' folder
1021	            config, 
1022	            progress_dict=progress_dict
1023	        )
1024	        
1025	        if success:
1026	            # Update job status upon successful completion
1027	            job['status'] = 'completed'
1028	            # Ensure job['target_path'] points to the new location in 'subs'
1029	            # progress_dict["output_path"] should be set by translate_srt to final_output_path
1030	            job['target_path'] = progress_dict.get("output_path", final_output_path) 
1031	            job['progress'] = 100 # Mark as 100% in job-specific dict
1032	            job['message'] = 'Translation completed'
1033	            job['end_time'] = time.time()
1034	            logger.info(f"Translation job {job_id} completed: {job['original_filename']}. Saved to: {job['target_path']}") # Log the correct save path
1035	            
1036	            # Update global progress status to completed
1037	            progress_dict["status"] = "completed"
1038	            progress_dict["message"] = f"Translation completed for {job['original_filename']}"
1039	            # Ensure the global progress also reflects the correct final path in 'subs'
1040	            progress_dict["output_path"] = job['target_path']
1041	            
1042	            # Save final progress state to file
1043	            save_progress_state()
1044	        else:
1045	            raise Exception(progress_dict.get("message", "Translation failed in subtitle_processor"))
1046	
1047	    except Exception as e:
1048	        error_message = f"Error in translation job {job_id}: {str(e)}"
1049	        logger.error(error_message)
1050	        import traceback
1051	        logger.error(traceback.format_exc())
1052	        
1053	        # Update job status in translation_jobs
1054	        job['status'] = 'failed'
1055	        job['message'] = error_message
1056	        job['progress'] = 0
1057	        job['end_time'] = time.time()
1058	        
1059	        # Update global progress status to failed
1060	        progress_dict["status"] = "failed"
1061	        progress_dict["message"] = error_message
1062	        
1063	        # Save error state to file
1064	        save_progress_state()
1065	    finally:
1066	        # Optionally clean up the original uploaded file from CACHE_DIR
1067	        # after successful translation and saving to UPLOAD_FOLDER.
1068	        # For example:
1069	        # if job.get('status') == 'completed' and os.path.exists(job['source_path']):
1070	        #     try:
1071	        #         os.remove(job['source_path'])
1072	        #         logger.info(f"Cleaned up cached source file: {job['source_path']}")
1073	        #     except Exception as e_clean:
1074	        #         logger.warning(f"Failed to clean up cached source file {job['source_path']}: {e_clean}")
1075	        pass # Keep final status until next job starts
1076	
1077	def clear_global_progress(progress_dict):
1078	    """Resets the global progress dict to idle state."""
1079	    with progress_lock:
1080	        progress_dict.clear()
1081	        progress_dict.update({
1082	            "mode": "idle",
1083	            "status": "idle", 
1084	            "message": "",
1085	            "current_file": "",
1086	            "done_files": 0,
1087	            "total_files": 0,
1088	            "zip_path": ""
1089	        })
1090	    logger.info("Global progress dictionary reset to idle.")
1091	
1092	def scan_and_translate_directory(root_dir, config, progress, logger):
1093	    """Scan a directory for subtitle files and translate them in bulk."""
1094	    try:
1095	        with progress_lock:
1096	            progress["status"] = "scanning"
1097	            progress["message"] = f"Scanning {root_dir} for subtitle files..."
1098	            # Initialize the current field for line-by-line data
1099	            progress["current"] = {}
1100	            # Create empty processed_lines history
1101	            progress["processed_lines"] = []
1102	            # Save progress state to file after status change
1103	            save_progress_state()
1104	        
1105	        # Get language settings
1106	        src_lang = config.get("general", "source_language", fallback="en")
1107	        tgt_lang = config.get("general", "target_language", fallback="da")
1108	        
1109	        # Initialize subtitle processor
1110	        from py.subtitle_processor import SubtitleProcessor
1111	        subtitle_processor = SubtitleProcessor(logger)
1112	        
1113	        # Find all subtitle files in the directory - including both .srt and .ass files
1114	        all_subtitle_files = []
1115	        all_video_files = []
1116	        
1117	        # Temporary directory for extracted subtitles
1118	        import tempfile
1119	        temp_extract_dir = tempfile.mkdtemp(prefix="subtitle_extracted_")
1120	        logger.info(f"Created temporary directory for extracted subtitles: {temp_extract_dir}")
1121	        
1122	        # First pass: Find all subtitle and video files
1123	        for root, _, files in os.walk(root_dir):
1124	            for file in files:
1125	                file_path = os.path.join(root, file)
1126	                if file.lower().endswith(('.srt', '.ass')):
1127	                    all_subtitle_files.append(file_path)
1128	                elif subtitle_processor.is_video_file(file_path):
1129	                    all_video_files.append(file_path)
1130	        
1131	        logger.info(f"Found {len(all_subtitle_files)} total subtitle files (.srt and .ass) in {root_dir}")
1132	        logger.info(f"Found {len(all_video_files)} video files that may contain embedded subtitles")
1133	        
1134	        # Update progress to show we're extracting subtitles
1135	        progress["status"] = "extracting"
1136	        progress["message"] = f"Scanning {len(all_video_files)} video files for embedded subtitles..."
1137	        save_progress_state()
1138	        
1139	        # Get source language code (convert full language name to ISO code if needed)
1140	        src_lang_code = src_lang.lower()
1141	        if src_lang_code in ["english", "danish", "spanish", "german", "french"]:
1142	            # Convert common language names to codes
1143	            lang_map = {"english": "en", "danish": "da", "spanish": "es", "german": "de", "french": "fr"}
1144	            src_lang_code = lang_map.get(src_lang_code, src_lang_code)
1145	            logger.debug(f"Converted source language '{src_lang}' to language code '{src_lang_code}'")
1146	        
1147	        # Do the same for target language
1148	        tgt_lang_code = tgt_lang.lower()
1149	        if tgt_lang_code in ["english", "danish", "spanish", "german", "french"]:
1150	            lang_map = {"english": "en", "danish": "da", "spanish": "es", "german": "de", "french": "fr"}
1151	            tgt_lang_code = lang_map.get(tgt_lang_code, tgt_lang_code)
1152	            logger.debug(f"Converted target language '{tgt_lang}' to language code '{tgt_lang_code}'")
1153	        
1154	        # Also handle potential 3-letter language codes in the embedded subtitles
1155	        src_lang_code_3letter = None
1156	        if src_lang_code == "en":
1157	            src_lang_code_3letter = "eng"
1158	        elif src_lang_code == "da":
1159	            src_lang_code_3letter = "dan"
1160	        elif src_lang_code == "es":
1161	            src_lang_code_3letter = "spa"
1162	        elif src_lang_code == "de":
1163	            src_lang_code_3letter = "deu" 
1164	        elif src_lang_code == "fr":
1165	            src_lang_code_3letter = "fre"
1166	            
1167	        logger.debug(f"Using source language code '{src_lang_code}' and 3-letter code '{src_lang_code_3letter}'")
1168	        
1169	        # Process video files to extract embedded subtitles
1170	        extracted_subtitle_files = []
1171	        
1172	        for i, video_file in enumerate(all_video_files):
1173	            with progress_lock:
1174	                progress["message"] = f"Extracting subtitles from video file {i+1}/{len(all_video_files)}: {os.path.basename(video_file)}"
1175	                save_progress_state()
1176	            
1177	            try:
1178	                # Extract embedded subtitles matching source language
1179	                extracted_files = subtitle_processor.detect_and_extract_embedded_subtitles(
1180	                    video_file, 
1181	                    temp_extract_dir,
1182	                    src_lang_code
1183	                )
1184	                
1185	                if extracted_files:
1186	                    logger.info(f"Extracted {len(extracted_files)} subtitle files from {os.path.basename(video_file)}")
1187	                    extracted_subtitle_files.extend(extracted_files)
1188	                    
1189	                    # Add extracted language information to each file for proper translation queue handling
1190	                    for extracted_file in extracted_files:
1191	                        # The filename should contain language info from the extraction process
1192	                        file_basename = os.path.basename(extracted_file)
1193	                        if src_lang_code in file_basename.lower() or (src_lang_code_3letter and src_lang_code_3letter in file_basename.lower()):
1194	                            logger.info(f"Marking extracted file as source language: {file_basename}")
1195	                        else:
1196	                            # If source language not in filename, check if it's in the extracted file's content
1197	                            # For now, trust the extraction process which should have properly detected languages
1198	                            logger.debug(f"Assuming extracted file is source language: {file_basename}")
1199	                else:
1200	                    logger.info(f"No matching subtitles found in {os.path.basename(video_file)}")
1201	            except Exception as e:
1202	                logger.error(f"Error extracting subtitles from {os.path.basename(video_file)}: {e}")
1203	        
1204	        # Add extracted subtitle files to the main list
1205	        logger.info(f"Total extracted subtitle files: {len(extracted_subtitle_files)}")
1206	        all_subtitle_files.extend(extracted_subtitle_files)
1207	        
1208	        # Update progress status to show we're now processing the regular subtitle files
1209	        progress["status"] = "scanning"
1210	        progress["message"] = f"Processing {len(all_subtitle_files)} subtitle files..."
1211	        save_progress_state()
1212	        
1213	        # Group files by their base name (removing language codes)
1214	        # This helps us identify which files already have translations
1215	        file_groups = {}
1216	        
1217	        # Various language code patterns that might appear in filenames
1218	        lang_patterns = [
1219	            # More specific patterns for complex subtitle filenames
1220	            r'\.([a-z]{2,3})\..*\.(srt|ass)$',    # matches .en.anything.srt or .eng.anything.srt or .en.anything.ass
1221	            r'\.([a-z]{2,3})\.(srt|ass)$',        # matches .en.srt or .eng.srt or .en.ass
1222	            r'\.([a-z]{2,3})\.hi\.(srt|ass)$',    # matches .en.hi.srt specifically
1223	            r'\.([a-z]{2,3})-hi\.(srt|ass)$',     # matches .en-hi.srt
1224	            
1225	            # Inside filename patterns
1226	            r'\.([a-z]{2,3})\.(?!(srt|ass)$)',    # .en. or .eng. followed by something other than srt/ass at the end
1227	            r'\.([a-z]{2,3})-(?!(srt|ass)$)',     # .en- or .eng- followed by something
1228	            r'\.([a-z]{2,3})_(?!(srt|ass)$)',     # .en_ or .eng_ followed by something
1229	            r'_([a-z]{2,3})_',                    # _en_ or _eng_ (surrounded by underscores)
1230	            r'-([a-z]{2,3})-',                    # -en- or -eng- (surrounded by hyphens)
1231	            
1232	            # Added for subtle variations
1233	            r'([a-z]{2,3})\.(?!(srt|ass)$)',      # en. or eng. (at the start of filename or after a separator)
1234	            r'([a-z]{2,3})-(?!(srt|ass)$)',       # en- or eng- (similar to above)
1235	            r'(?<![a-z])([a-z]{2,3})(?![a-z])'    # standalone en or eng (if surrounded by non-letters)
1236	        ]
1237	        
1238	        # Track files that don't match any pattern
1239	        unmatched_files = []
1240	        
1241	        # This tracks which files we should skip based on language patterns
1242	        skip_these_files = []
1243	        
1244	        # Process each file and group them
1245	        for file_path in all_subtitle_files:
1246	            file_name = os.path.basename(file_path)
1247	            file_dir = os.path.dirname(file_path)
1248	            
1249	            # Check if this is one of our extracted subtitle files - handle them specially
1250	            is_extracted = file_path in extracted_subtitle_files
1251	            
1252	            # If this is an extracted file, apply special handling
1253	            if is_extracted:
1254	                # For extracted files, we can rely on the extraction process to have named files correctly
1255	                # They should be named with language code in format: filename.lang.streamX.title.srt
1256	                
1257	                # If it contains our source language, mark it for translation
1258	                if src_lang_code in file_name.lower() or (src_lang_code_3letter and src_lang_code_3letter in file_name.lower()):
1259	                    # Get the base part of the filename to use as a group key
1260	                    # For extracted files, just use the video filename part as base
1261	                    base_parts = file_name.split('.')
1262	                    if len(base_parts) > 2:
1263	                        base_name = '.'.join(base_parts[:-3])  # Remove lang, stream and extension
1264	                    else:
1265	                        base_name = base_parts[0]  # Just use the first part as base
1266	                        
1267	                    # Create a group key that differentiates extracted files from regular files
1268	                    group_key = f"extracted:{file_dir}/{base_name}"
1269	                    
1270	                    if group_key not in file_groups:
1271	                        file_groups[group_key] = {}
1272	                    
1273	                    # Store this as source language file
1274	                    file_groups[group_key][src_lang_code] = file_path
1275	                    logger.debug(f"Added extracted file to group '{group_key}' as source language: {file_name}")
1276	                    
1277	                # Skip any non-source language extracted files - we only want to translate source language
1278	                elif tgt_lang_code in file_name.lower() or (tgt_lang_code == "da" and "dan" in file_name.lower()):
1279	                    skip_these_files.append(file_path)
1280	                    logger.debug(f"Skipping extracted file with target language: {file_name}")
1281	                else:
1282	                    # For other languages, just skip them
1283	                    skip_these_files.append(file_path)
1284	                    logger.debug(f"Skipping extracted file with non-target language: {file_name}")
1285	                    
1286	                # Continue to next file after handling extracted file
1287	                continue
1288	            
1289	            # Standard processing for non-extracted files...
1290	            
1291	            # Critical fix: Special case for target language files with complex patterns
1292	            # This explicitly checks for target language files first and marks them for skipping
1293	            if f".{tgt_lang_code}." in file_name.lower():
1294	                logger.debug(f"Skipping file with target language code in filename: {file_name}")
1295	                skip_these_files.append(file_path)
1296	                continue
1297	                
1298	            # Try to extract language code from filename
1299	            detected_lang = None
1300	            matching_pattern = None
1301	            
1302	            for pattern in lang_patterns:
1303	                match = re.search(pattern, file_name.lower())
1304	                if match:
1305	                    detected_lang = match.group(1)
1306	                    matching_pattern = pattern
1307	                    logger.debug(f"Detected language '{detected_lang}' in file: {file_name} using pattern {pattern}")
1308	                    break
1309	            
1310	            # If we couldn't detect a language, track it but continue to next file
1311	            if not detected_lang:
1312	                unmatched_files.append(file_path)
1313	                logger.debug(f"No language detected in file: {file_name}")
1314	                continue
1315	            
1316	            # Check for 3-letter codes and convert them to 2-letter for consistency
1317	            if detected_lang == "eng":
1318	                detected_lang = "en"
1319	            elif detected_lang == "dan":
1320	                detected_lang = "da"
1321	            elif detected_lang == "spa":
1322	                detected_lang = "es"
1323	            elif detected_lang == "deu" or detected_lang == "ger":
1324	                detected_lang = "de"
1325	            elif detected_lang == "fre":
1326	                detected_lang = "fr"
1327	            
1328	            # Skip if the language doesn't match either source or target language
1329	            if detected_lang != src_lang_code and detected_lang != tgt_lang_code:
1330	                logger.debug(f"Skipping file with non-relevant language '{detected_lang}': {file_name}")
1331	                continue
1332	                
1333	            # If it's a target language file, skip it immediately - we don't want to translate these
1334	            if detected_lang == tgt_lang_code:
1335	                logger.debug(f"Skipping file with target language code: {file_name}")
1336	                skip_these_files.append(file_path)
1337	                continue
1338	                
1339	            # Create a normalized base name for grouping related files
1340	            # For complex patterns, we'll use a more aggressive replacement approach
1341	            
1342	            # Start with filename as base
1343	            base_name = file_name.lower()
1344	            
1345	            # For files matching complex patterns like .en.hi.srt, remove the language code and any additional markers
1346	            if ".hi." in base_name or "-hi." in base_name:
1347	                # Remove language code with hi marker
1348	                base_name = re.sub(r'\.(' + re.escape(detected_lang) + r')\.hi\.', '.*.hi.', base_name)
1349	                base_name = re.sub(r'\.(' + re.escape(detected_lang) + r')-hi\.', '.*-hi.', base_name)
1350	            else:
1351	            # Standard replacements for other patterns
1352	                base_name = re.sub(r'\.(' + re.escape(detected_lang) + r')\.', '.*.', base_name)
1353	                base_name = re.sub(r'\.(' + re.escape(detected_lang) + r')-', '.*-', base_name)
1354	                base_name = re.sub(r'\.(' + re.escape(detected_lang) + r')_', '.*_', base_name)
1355	                base_name = re.sub(r'_(' + re.escape(detected_lang) + r')_', '_*_', base_name)
1356	                base_name = re.sub(r'-(' + re.escape(detected_lang) + r')-', '-*-', base_name)
1357	                # For languages at the start of filename
1358	                base_name = re.sub(r'^(' + re.escape(detected_lang) + r')\.', '*.', base_name)
1359	                base_name = re.sub(r'^(' + re.escape(detected_lang) + r')-', '*-', base_name)
1360	            
1361	            # Use a combination of directory and base name as the group key
1362	            # This handles cases where the same filename appears in different directories
1363	            group_key = os.path.join(file_dir, base_name)
1364	            
1365	            if group_key not in file_groups:
1366	                file_groups[group_key] = {}
1367	            
1368	            file_groups[group_key][detected_lang] = file_path
1369	        
1370	        # Log summary of unmatched files
1371	        if unmatched_files:
1372	            logger.info(f"Found {len(unmatched_files)} files without detectable language code")
1373	            if len(unmatched_files) < 10:  # Only log details if there are a few files
1374	                for file_path in unmatched_files:
1375	                    logger.debug(f"Unmatched file: {os.path.basename(file_path)}")
1376	        
1377	        # Log summary of files we're skipping because they already have target language
1378	        if skip_these_files:
1379	            logger.info(f"Found {len(skip_these_files)} files that already have target language '{tgt_lang_code}'")
1380	            if len(skip_these_files) < 10:  # Only log details if there are a few files
1381	                for file_path in skip_these_files:
1382	                    logger.debug(f"Skipping target language file: {os.path.basename(file_path)}")
1383	        
1384	        # Now select files for translation (source lang exists, target lang doesn't)
1385	        srt_files = []
1386	        skipped_files = []
1387	        
1388	        for group_key, lang_files in file_groups.items():
1389	            # Check if we have a source language file but no target language file
1390	            if src_lang_code in lang_files and tgt_lang_code not in lang_files:
1391	                source_file = lang_files[src_lang_code]
1392	                # Double-check we haven't already flagged this file to skip
1393	                if source_file not in skip_these_files:
1394	                    logger.info(f"Adding {os.path.basename(lang_files[src_lang_code])} to translation queue")
1395	                    srt_files.append(lang_files[src_lang_code])
1396	                else:
1397	                    logger.info(f"Skipping {os.path.basename(lang_files[src_lang_code])} - flagged as target language file")
1398	                    skipped_files.append(lang_files[src_lang_code])
1399	            elif src_lang_code in lang_files and tgt_lang_code in lang_files:
1400	                logger.info(f"Skipping {os.path.basename(lang_files[src_lang_code])} - target version already exists: {os.path.basename(lang_files[tgt_lang_code])}")
1401	                skipped_files.append(lang_files[src_lang_code])
1402	            elif src_lang_code not in lang_files and tgt_lang_code in lang_files:
1403	                logger.debug(f"Skipping {os.path.basename(lang_files[tgt_lang_code])} - target only, no source")
1404	                # Not counted as skipped since we don't have a source file
1405	        
1406	        if not srt_files:
1407	            if skipped_files:
1408	                progress["status"] = "completed"
1409	                progress["message"] = f"No new subtitle files to translate. {len(skipped_files)} files already have target language versions."
1410	            else:
1411	                progress["status"] = "completed"
1412	                progress["message"] = f"No subtitle files found in {root_dir}"
1413	            # Save progress state to file after status change
1414	            save_progress_state()
1415	            # Cleanup temp directory
1416	            try:
1417	                import shutil
1418	                shutil.rmtree(temp_extract_dir)
1419	                logger.info(f"Cleaned up temporary extraction directory: {temp_extract_dir}")
1420	            except Exception as e:
1421	                logger.warning(f"Failed to clean up temporary directory {temp_extract_dir}: {e}")
1422	            return
1423	        
1424	        # Initialize translation components
1425	        subtitle_processor = SubtitleProcessor(logger)
1426	        
1427	        # Update progress
1428	        progress["total_files"] = len(srt_files)
1429	        progress["status"] = "translating"
1430	        progress["message"] = f"Found {len(srt_files)} files to translate. Skipped {len(skipped_files)} files that already have {tgt_lang} versions."
1431	        # Save progress state to file after status change
1432	        save_progress_state()
1433	        
1434	        # Create a temporary directory for the translated files
1435	        temp_dir = tempfile.mkdtemp(prefix="srt_translate_")
1436	        translated_files = []
1437	        
1438	        # Translate each file
1439	        for i, srt_file in enumerate(srt_files):
1440	            file_name = os.path.basename(srt_file)
1441	            with progress_lock:
1442	                progress["current_file"] = file_name
1443	                progress["message"] = f"Translating {file_name} ({i+1}/{len(srt_files)})"
1444	                # Reset current and processed_lines for the new file
1445	                progress["current"] = {}
1446	                progress["processed_lines"] = []
1447	                # Save progress state to file at the start of each file
1448	                save_progress_state()
1449	            
1450	            try:
1451	                # Generate translated filename
1452	                base, ext = os.path.splitext(file_name)
1453	                
1454	                # Determine if this is an extracted file (extract from the path, not the filename)
1455	                is_extracted = srt_file in extracted_subtitle_files
1456	                
1457	                # Different filename handling for extracted vs regular files
1458	                if is_extracted:
1459	                    # For extracted files, replace the language code directly
1460	                    if src_lang_code in base.lower():
1461	                        out_base = base.replace(src_lang_code, tgt_lang_code)
1462	                    elif src_lang_code_3letter and src_lang_code_3letter in base.lower():
1463	                        # Handle 3-letter codes like 'eng' to 'dan'
1464	                        tgt_lang_code_3letter = "dan" if tgt_lang_code == "da" else tgt_lang_code 
1465	                        out_base = base.replace(src_lang_code_3letter, tgt_lang_code_3letter)
1466	                    else:
1467	                        # If can't find language code, just append target language
1468	                        out_base = f"{base}.{tgt_lang_code}"
1469	                else:
1470	                    # Try to replace language code in filename if it exists
1471	                    out_base = base
1472	                    replaced = False
1473	                    patterns = [
1474	                        f'.{src_lang}.', f'.{src_lang}-', f'.{src_lang}_',
1475	                        f'{src_lang}.', f'-{src_lang}.', f'_{src_lang}.'
1476	                    ]
1477	                    for pat in patterns:
1478	                        if pat in base.lower():
1479	                            newpat = pat.replace(src_lang, tgt_lang)
1480	                            out_base = re.sub(pat, newpat, base, flags=re.IGNORECASE)
1481	                            replaced = True
1482	                            break
1483	                    if not replaced:
1484	                        out_base = f"{base}.{tgt_lang}"
1485	                
1486	                translated_filename = secure_filename(f"{out_base}{ext}")
1487	                output_path = os.path.join(temp_dir, translated_filename)
1488	                archive_path = os.path.join(app.config['UPLOAD_FOLDER'], translated_filename)
1489	                
1490	                # Check if the output file already exists in the archive
1491	                if (os.path.exists(archive_path)):
1492	                    logger.info(f"Output file {translated_filename} already exists in archive, skipping translation")
1493	                    # Copy the existing file to the temp directory for inclusion in the zip
1494	                    import shutil
1495	                    shutil.copy2(archive_path, output_path)
1496	                    translated_files.append(output_path)
1497	                    progress["done_files"] += 1
1498	                    progress["message"] = f"Skipped {file_name}: target version already exists in archive"
1499	                    save_progress_state()
1500	                    continue
1501	                
1502	                # Use the translate_srt method which handles detailed progress reporting
1503	                success = subtitle_processor.translate_srt(
1504	                    srt_file,
1505	                    archive_path,
1506	                    config,
1507	                    progress_dict=progress  # Pass the progress dict for detailed tracking
1508	                )
1509	                
1510	                if success:
1511	                    # Copy the file to the temporary directory for the ZIP file
1512	                    import shutil
1513	                    shutil.copy2(archive_path, output_path)
1514	                    
1515	                    # NEW CODE: Also save alongside the original file
1516	                    original_dir = os.path.dirname(srt_file)
1517	                    alongside_path = os.path.join(original_dir, translated_filename)
1518	                    try:
1519	                        # Copy the translated file to the original directory
1520	                        shutil.copy2(archive_path, alongside_path)
1521	                        logger.info(f"Also saved translation alongside original: {alongside_path}")
1522	                    except Exception as e:
1523	                        logger.error(f"Failed to save alongside original: {e}")
1524	                    
1525	                    translated_files.append(output_path)
1526	                    with progress_lock:
1527	                        progress["done_files"] += 1
1528	                        # Save progress state after completing each file
1529	                        save_progress_state()
1530	                else:
1531	                    logger.error(f"Failed to translate {file_name}")
1532	                    with progress_lock:
1533	                        progress["message"] = f"Error translating {file_name}"
1534	                        save_progress_state()
1535	                
1536	            except Exception as e:
1537	                error_msg = f"Error translating {file_name}: {str(e)}"
1538	                logger.error(error_msg)
1539	                with progress_lock:
1540	                    progress["message"] = error_msg
1541	                    # Save progress state after error
1542	                    save_progress_state()
1543	                # Continue with next file
1544	        
1545	        # Create ZIP file with all translated subtitles
1546	        if translated_files:
1547	            zip_path = os.path.join(tempfile.gettempdir(), f"translated_subtitles_{int(time.time())}.zip")
1548	            
1549	            with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
1550	                for file in translated_files:
1551	                    zipf.write(file, os.path.basename(file))
1552	            
1553	            # Update progress
1554	            with progress_lock:
1555	                progress["status"] = "completed"
1556	                progress["message"] = f"Translated {progress['done_files']} subtitle files. Skipped {len(skipped_files)} files that already had {tgt_lang} versions."
1557	                progress["zip_path"] = zip_path
1558	                # Save final progress state to file
1559	                save_progress_state()
1560	        else:
1561	            with progress_lock:
1562	                progress["status"] = "completed"
1563	                progress["message"] = "No files were successfully translated"
1564	                # Save final progress state to file
1565	                save_progress_state()
1566	        
1567	        # Cleanup temp directories
1568	        try:
1569	            import shutil
1570	            shutil.rmtree(temp_extract_dir)
1571	            logger.info(f"Cleaned up temporary extraction directory: {temp_extract_dir}")
1572	            
1573	            # Only remove the temp_dir after we've created the zip file
1574	            if 'temp_dir' in locals():
1575	                shutil.rmtree(temp_dir)
1576	                logger.info(f"Cleaned up temporary translation directory: {temp_dir}")
1577	        except Exception as e:
1578	            logger.warning(f"Failed to clean up temporary directories: {e}")
1579	        
1580	    except Exception as e:
1581	        error_msg = f"Error during bulk translation: {str(e)}"
1582	        logger.error(error_msg)
1583	        progress["status"] = "failed"
1584	        progress["message"] = error_msg
1585	        # Save error state to file
1586	        save_progress_state()
1587	        
1588	        # Cleanup any temp directories even on error
1589	        try:
1590	            import shutil
1591	            if 'temp_extract_dir' in locals():
1592	                shutil.rmtree(temp_extract_dir)
1593	            if 'temp_dir' in locals():
1594	                shutil.rmtree(temp_dir)
1595	        except Exception as cleanup_err:
1596	            logger.warning(f"Failed to clean up temporary directories: {cleanup_err}")
1597	
1598	@app.route('/api/special_meanings', methods=['GET'])
1599	def api_special_meanings():
1600	    """API endpoint to get special word meanings from the file."""
1601	    try:
1602	        # Initialize translation service to load meanings
1603	        config = config_manager.get_config()
1604	        translation_service = TranslationService(config, logger)
1605	        
1606	        # Get meanings from the translation service
1607	        meanings = translation_service.special_meanings
1608	        if not meanings:
1609	            # Try to load directly from file as fallback
1610	            meanings_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'files', 'meaning.json')
1611	            if os.path.exists(meanings_file):
1612	                with open(meanings_file, 'r', encoding='utf-8') as f:
1613	                    meanings = json.load(f)
1614	            else:
1615	                meanings = []
1616	                
1617	        logger.info(f"Retrieved {len(meanings)} special meanings from file")
1618	        return jsonify({"success": True, "meanings": meanings})
1619	    except Exception as e:
1620	        logger.error(f"Error retrieving special meanings: {str(e)}")
1621	        return jsonify({"success": False, "message": str(e)}), 500
1622	
1623	@app.route('/api/special_meanings', methods=['POST'])
1624	def api_update_special_meanings():
1625	    """API endpoint to update special word meanings in the file."""
1626	    try:
1627	        meanings = request.json.get('meanings', [])
1628	        
1629	        # Initialize translation service
1630	        config = config_manager.get_config()
1631	        translation_service = TranslationService(config, logger)
1632	        
1633	        # Save to file
1634	        success = translation_service.save_special_meanings(meanings)
1635	        
1636	        # Update the in-memory meanings
1637	        translation_service.special_meanings = meanings
1638	        
1639	        if success:
1640	            logger.info(f"Updated {len(meanings)} special meanings")
1641	            return jsonify({"success": True})
1642	        else:
1643	            return jsonify({"success": False, "message": "Failed to save meanings"}), 500
1644	    except Exception as e:
1645	        logger.error(f"Error updating special meanings: {str(e)}")
1646	        return jsonify({"success": False, "message": str(e)}), 500
1647	
1648	@app.route('/api/browse_videos', methods=['GET'])
1649	def api_browse_videos():
1650	    """API endpoint to list video files in a directory for the host file browser."""
1651	    parent_path = request.args.get("path", "")
1652	    
1653	    # Get secure browser instance
1654	    secure_browser = get_secure_browser()
1655	    
1656	    # If no allowed paths configured, restrict access
1657	    if not secure_browser.allowed_paths:
1658	        logger.warning("Video file browsing attempted but no 'allowed_paths' configured in [file_browser] section.")
1659	        return jsonify({"error": "File browsing is not configured or no paths are allowed."}), 403
1660	    
1661	    # If no path provided, return configured allowed_paths as root entries
1662	    if not parent_path:
1663	        roots = [{"name": os.path.basename(p) or p, "path": p} for p in secure_browser.allowed_paths]
1664	        resp = jsonify({"directories": roots, "files": [], "current_path": "", "parent_path": ""})
1665	        resp.headers["X-Content-Type-Options"] = "nosniff"
1666	        resp.headers["X-Frame-Options"] = "DENY"
1667	        return resp
1668	    
1669	    try:
1670	        # Validate the requested path
1671	        if not secure_browser.is_path_allowed(parent_path):
1672	            logger.warning(f"Access denied for path: {parent_path}. Not within allowed bases.")
1673	            return jsonify({"error": "Access to this path is restricted."}), 403
1674	        
1675	        # Normalize path
1676	        requested_abs_path = os.path.abspath(os.path.normpath(parent_path))
1677	        
1678	        # Get the parent path if navigation is allowed
1679	        parent_of_parent = secure_browser.get_safe_parent_path(requested_abs_path)
1680	        
1681	        # List all items in the parent path
1682	        files = []
1683	        dirs = []
1684	        
1685	        if os.path.isdir(requested_abs_path):
1686	            # Get all items in the directory
1687	            items = os.listdir(requested_abs_path)
1688	            
1689	            # Filter items based on security rules
1690	            filtered_items = secure_browser.filter_items(requested_abs_path, items)
1691	            
1692	            # Video file extensions
1693	            video_extensions = ('.mp4', '.mkv', '.avi', '.mov', '.wmv', '.flv', '.webm', '.m4v', '.mpg', '.mpeg', 
1694	                              '.ts', '.mts', '.m2ts', '.vob', '.3gp', '.ogv', '.divx', '.xvid')
1695	            
1696	            for item in filtered_items:
1697	                full_path = os.path.join(requested_abs_path, item)
1698	                
1699	                if os.path.isdir(full_path):
1700	                    dirs.append({"name": item, "path": full_path})
1701	                else:
1702	                    # Only include video files
1703	                    if item.lower().endswith(video_extensions):
1704	                        files.append({"name": item, "path": full_path})
1705	            
1706	            # Sort directories and files by name
1707	            dirs.sort(key=lambda x: x["name"].lower())
1708	            files.sort(key=lambda x: x["name"].lower())
1709	            
1710	            # Add security headers
1711	            resp = jsonify({
1712	                "files": files,
1713	                "directories": dirs,
1714	                "current_path": requested_abs_path,
1715	                "parent_path": parent_of_parent
1716	            })
1717	            resp.headers["X-Content-Type-Options"] = "nosniff"
1718	            resp.headers["X-Frame-Options"] = "DENY"
1719	            return resp
1720	        else:
1721	            return jsonify({"error": "Not a valid directory"}), 400
1722	    except PermissionError:
1723	        logger.warning(f"Permission denied accessing directory: {parent_path}")
1724	        return jsonify({"error": "Permission denied accessing this directory"}), 403
1725	    except Exception as e:
1726	        logger.error(f"Error browsing files in directory {parent_path}: {str(e)}")
1727	        return jsonify({"error": f"Error accessing directory: {str(e)}"}), 500
1728	
1729	@app.route('/api/video_to_srt', methods=['POST'])
1730	def api_video_to_srt():
1731	    """API endpoint to transcribe a video file to SRT format using faster-whisper."""
1732	    try:
1733	        # Check if a host file path was provided
1734	       
1735	        video_file_path = request.form.get('video_file_path', '')
1736	        
1737	        if not video_file_path:
1738	            return jsonify({"error": "No video file path provided"}), 400
1739	        
1740	        # Get a secure browser instance for path validation
1741	        secure_browser = get_secure_browser()
1742	        
1743	        # Normalize the path before validation
1744	        normalized_path = os.path.abspath(os.path.normpath(video_file_path))
1745	        
1746	        # Validate the path is allowed using our secure browser
1747	        if not secure_browser.is_path_allowed(normalized_path):
1748	            logger.warning(f"Access denied for video file: {normalized_path}. Not within allowed bases or matches denied pattern.")
1749	            return jsonify({"error": "Access to this file is restricted."}), 403
1750	        
1751	        # After validation, use the normalized path
1752	        requested_abs_path = normalized_path
1753	            
1754	        if not os.path.isfile(requested_abs_path):
1755	            return jsonify({"error": "Invalid file path or file does not exist"}), 400
1756	            
1757	        # Check if it's a video file
1758	        if not requested_abs_path.lower().endswith(('.mp4', '.mkv', '.avi', '.mov', '.wmv', '.flv', '.webm', '.m4v')):
1759	            return jsonify({"error": "Only video files are supported"}), 400
1760	            
1761	        # Get the filename without path
1762	        filename = os.path.basename(requested_abs_path)
1763	        
1764	        # Create a job ID based on the filename and timestamp
1765	        timestamp = int(time.time())
1766	        job_id = f"whisper_{timestamp}_{filename}"
1767	        
1768	        # Get language if provided (optional)
1769	        language = request.form.get('language', None)
1770	        
1771	        # Create/update the job record
1772	        translation_jobs[job_id] = {
1773	            'status': 'queued',
1774	            'source_path': requested_abs_path,
1775	            'original_filename': filename,
1776	            'progress': 0,
1777	            'message': 'Queued for transcription with faster-whisper',
1778	            'start_time': time.time(),
1779	            'end_time': None,
1780	            'language': language,
1781	            'type': 'transcription'  # Mark this as a transcription job
1782	        }
1783	        
1784	        # Start the transcription in a background thread
1785	        threading.Thread(
1786	            target=process_video_transcription,
1787	            args=(job_id, video_file_path, language)
1788	        ).start()
1789	
1790	        return jsonify({
1791	            "status": "success",
1792	            "message": "Video queued for transcription",
1793	            "job_id": job_id
1794	        })
1795	
1796	    except Exception as e:
1797	        logger.exception("Error in video transcription")
1798	        return jsonify({"error": str(e)}), 500
1799	
1800	@app.route('/api/whisper/check_server', methods=['GET'])
1801	def api_check_whisper_server():
1802	    """API endpoint to check if the faster-whisper server is reachable."""
1803	    try:
1804	        # Get server URL from config
1805	        config = config_manager.get_config()
1806	        whisper_server = config.get('whisper', 'server_url', fallback='http://10.0.10.23:10300')
1807	        
1808	        # Initialize transcriber and check server
1809	        transcriber = VideoTranscriber(server_url=whisper_server, logger=logger)
1810	        success, message = transcriber.ping_server()
1811	        
1812	        # If the TCP check passes but HTTP health check fails, still consider it a partial success
1813	        if not success and "TCP connection" in message:
1814	            # This is a total connectivity failure
1815	            logger.error(f"Failed to connect to whisper server: {message}")
1816	            return jsonify({
1817	                "success": False,
1818	                "message": message,
1819	                "server_url": whisper_server
1820	            })
1821	        elif "port is open but" in message:
1822	            # TCP connection succeeded but HTTP check failed - consider this a partial success
1823	            logger.warning(f"Partial connection to whisper server: {message}")
1824	            return jsonify({
1825	                "success": True,
1826	                "message": message,
1827	                "server_url": whisper_server,
1828	                "partial": True  # Flag to indicate partial connectivity
1829	            })
1830	        elif success:
1831	            # Full success
1832	            logger.info(f"Successfully connected to whisper server at {whisper_server}")
1833	            return jsonify({
1834	                "success": True,
1835	                "message": message,
1836	                "server_url": whisper_server
1837	            })
1838	        else:
1839	            # Any other failure
1840	            logger.error(f"Failed to connect to whisper server: {message}")
1841	            return jsonify({
1842	                "success": False,
1843	                "message": message,
1844	                "server_url": whisper_server
1845	            })
1846	    except Exception as e:
1847	        logger.exception(f"Error checking whisper server: {str(e)}")
1848	        return jsonify({
1849	            "success": False,
1850	            "message": f"Error checking server: {str(e)}",
1851	            "error_type": "exception"
1852	        }), 500
1853	
1854	def process_video_transcription(job_id, video_path, language=None):
1855	    """Process a video transcription job using faster-whisper."""
1856	    with jobs_lock:
1857	        job = translation_jobs[job_id]
1858	    logger.info(f"Starting transcription job {job_id}: {job['original_filename']}")
1859	    
1860	    # Use the global progress dictionary for status updates
1861	    global bulk_translation_progress
1862	    
1863	    # Define a callback to update the main progress dictionary
1864	    def update_main_progress_dict(percent, message, status, current_job_id):
1865	        if current_job_id == job_id: # Ensure we're updating for the correct job
1866	            with progress_lock:
1867	                bulk_translation_progress["percent"] = percent
1868	                bulk_translation_progress["message"] = message
1869	                bulk_translation_progress["status"] = status
1870	                # current_file and mode should already be set
1871	                save_progress_state() # Persist changes
1872	            logger.debug(f"Callback updated bulk_translation_progress for {job_id}: {percent}% - {message} - {status}")
1873	
1874	    try:
1875	        # Reset and update global progress status for this job
1876	        # This is the initial setup for bulk_translation_progress for this job
1877	        with progress_lock:
1878	            bulk_translation_progress.clear()
1879	            bulk_translation_progress.update({
1880	                "mode": "transcription",
1881	                "status": "queued", # Will be updated by the transcriber almost immediately
1882	                "message": f'Queued transcription for {job["original_filename"]}',
1883	            "current_file": job["original_filename"],
1884	            "job_id": job_id,
1885	            "percent": 0,
1886	            # Ensure other fields are reset or initialized if needed
1887	            "current_line": 0,
1888	            "total_lines": 0, 
1889	            "done_files": 0,
1890	            "total_files": 0,
1891	            "current": {},
1892	            "processed_lines": []
1893	        })
1894	        
1895	        # Save initial progress state to file
1896	        save_progress_state()
1897	        
1898	        # Update job status in translation_jobs (this is the job-specific dict)
1899	        job['status'] = 'queued' 
1900	        job['message'] = 'Queued for transcription'
1901	        
1902	        # Initialize the video transcriber
1903	        current_config = config_manager.get_config() # Ensure fresh config
1904	        whisper_server = current_config.get('whisper', 'server_url', fallback='http://10.0.10.23:10300')
1905	        transcriber = VideoTranscriber(server_url=whisper_server, logger=logger)
1906	        
1907	        file_base = os.path.splitext(job['original_filename'])[0]
1908	        output_filename = f"{file_base}_whisper.srt"
1909	        output_path = os.path.join(app.config['UPLOAD_FOLDER'], secure_filename(output_filename))
1910	        
1911	        # Pass the callback to the transcriber
1912	        transcribe_success, transcribe_message = transcriber.transcribe_video_to_srt(
1913	            video_path,
1914	            output_path,
1915	            language=language,
1916	            job_id=job_id,
1917	            external_progress_updater=update_main_progress_dict # Pass the callback here
1918	        )
1919	        
1920	        # Final update to bulk_translation_progress is handled by the callback
1921	        # from the last step in transcribe_video_to_srt.
1922	
1923	        if transcribe_success:
1924	            job['status'] = 'completed'
1925	            job['target_path'] = output_path
1926	            job['output_filename'] = output_filename
1927	            job['message'] = 'Transcription completed successfully'
1928	            job['progress'] = 100 # This is for the job-specific dict
1929	            job['end_time'] = time.time()
1930	            logger.info(f"Transcription job {job_id} completed successfully: {output_path}")
1931	            # bulk_translation_progress should be 'complete' and 100% via callback
1932	        else:
1933	            # The callback in transcribe_video_to_srt's except/finally block should have set error status
1934	            job['status'] = 'failed'
1935	            job['message'] = transcribe_message # Error message from transcriber
1936	            job['progress'] = bulk_translation_progress.get("percent", 0) # Reflect last known percent
1937	            job['end_time'] = time.time()
1938	            logger.error(f"Transcription job {job_id} failed: {transcribe_message}")
1939	
1940	    except Exception as e:
1941	        error_message = f"Unhandled error in process_video_transcription for job {job_id}: {str(e)}"
1942	        logger.error(error_message)
1943	        logger.error(traceback.format_exc())
1944	        
1945	        job['status'] = 'failed'
1946	        job['message'] = error_message
1947	        job['progress'] = bulk_translation_progress.get("percent", 0)
1948	        job['end_time'] = time.time()
1949	        
1950	        # Ensure bulk_translation_progress reflects the error state
1951	        bulk_translation_progress["status"] = "failed"
1952	        bulk_translation_progress["message"] = error_message
1953	        # bulk_translation_progress["percent"] will be its last updated value
1954	        save_progress_state()
1955	    finally:
1956	        # The bulk_translation_progress state is saved by the callback or at the end of try/except.
1957	        # No need to clear it here, it will be overwritten by the next job.
1958	        pass
1959	
1960	@app.route('/api/job_status/<job_id>', methods=['GET'])
1961	def get_job_status(job_id):
1962	    """API endpoint for checking translation job status."""
1963	    # Check bulk_translation_progress first if it's for the requested job_id and is a transcription
1964	    with progress_lock:
1965	        is_active_transcription = (bulk_translation_progress.get('job_id') == job_id and 
1966	                                   bulk_translation_progress.get('mode') == 'transcription' and
1967	                                   bulk_translation_progress.get('status') in ['processing', 'queued'])
1968	        
1969	        if is_active_transcription:
1970	            # If the job is active in bulk_translation_progress, report from there
1971	            # as it's the most up-to-date for transcriptions.
1972	            logger.debug(f"Job {job_id} is an active transcription. Reporting from bulk_translation_progress.")
1973	            return jsonify({
1974	                'success': True,
1975	                'status': bulk_translation_progress['status'],
1976	                'progress': bulk_translation_progress.get('percent', 0),
1977	                'message': bulk_translation_progress.get('message', 'Processing transcription...')
1978	            })
1979	
1980	    # Fallback to checking translation_jobs or if bulk_translation_progress is not for this active transcription
1981	    with jobs_lock:
1982	        if job_id not in translation_jobs:
1983	            # This case handles if job is not in translation_jobs but was caught by the above block
1984	            # or if it's genuinely not found anywhere.
1985	            logger.warning(f"Job {job_id} not found in translation_jobs dictionary.")
1986	            return jsonify({'success': False, 'message': 'Job not found'})
1987	
1988	        job = translation_jobs[job_id]
1989	    
1990	    # If it's a transcription job, and the bulk progress is for THIS job,
1991	    # we might need to cross-reference with bulk_translation_progress for the latest state
1992	    with progress_lock, jobs_lock:
1993	        is_transcription = (job.get('type') == 'transcription' and 
1994	                           bulk_translation_progress.get('job_id') == job_id and 
1995	                           bulk_translation_progress.get('mode') == 'transcription')
1996	        
1997	        if is_transcription:
1998	            # This will mostly catch 'completed' or 'failed' states from bulk if job object is lagging
1999	            logger.debug(f"Job {job_id} is a transcription. Cross-referencing with bulk_translation_progress for final state if needed.")
2000	            return jsonify({
2001	                'success': True,
2002	                'status': bulk_translation_progress.get('status', job['status']), # Prefer bulk if available
2003	                'progress': bulk_translation_progress.get('percent', job['progress']), # Prefer bulk if available
2004	                'message': bulk_translation_progress.get('message', job['message']) # Prefer bulk if available
2005	            })
2006	
2007	    # Default return for non-transcription jobs, or if no specific active transcription logic applied.
2008	    logger.debug(f"Job {job_id} (type: {job.get('type')}) reporting from translation_jobs.")
2009	    return jsonify({
2010	        'success': True,
2011	        'status': job['status'],
2012	        'progress': job['progress'],
2013	        'message': job['message']
2014	    })
2015	
2016	def allowed_file(filename):
2017	    """Check if file has an allowed extension."""
2018	    return '.' in filename and \
2019	           filename.lower().endswith(('.srt', '.ass', '.vtt'))
2020	
2021	# Initialize global objects - use the already initialized config_manager from above
2022	subtitle_processor = SubtitleProcessor()
2023	
2024	# Global storage for translation progress
2025	bulk_translation_progress = {}
2026	translation_jobs = {}
2027	
2028	# Locks for thread safety
2029	progress_lock = threading.Lock()
2030	jobs_lock = threading.Lock()
2031	
2032	# Create secure file browser instance
2033	def get_secure_browser():
2034	    """Initialize and return a SecureFileBrowser instance with config settings."""
2035	    config = config_manager.get_config()
2036	    
2037	    # Get allowed paths
2038	    allowed_paths_str = config.get('file_browser', 'allowed_paths', fallback='')
2039	    allowed_paths = [p.strip() for p in allowed_paths_str.split(',') if p.strip()]
2040	    
2041	    # Get denied patterns
2042	    denied_patterns_str = config.get('file_browser', 'denied_patterns', fallback='')
2043	    denied_patterns = [p.strip() for p in denied_patterns_str.split(',') if p.strip()]
2044	    
2045	    # Get security settings
2046	    enable_parent = config.getboolean('file_browser', 'enable_parent_navigation', fallback=True)
2047	    max_depth = config.getint('file_browser', 'max_depth', fallback=10)
2048	    hide_dot_files = config.getboolean('file_browser', 'hide_dot_files', fallback=True)
2049	    restrict_to_media = config.getboolean('file_browser', 'restrict_to_media_dirs', fallback=False)
2050	    
2051	    return SecureFileBrowser(
2052	        allowed_paths=allowed_paths,
2053	        denied_patterns=denied_patterns,
2054	        enable_parent_navigation=enable_parent,
2055	        max_depth=max_depth,
2056	        hide_dot_files=hide_dot_files,
2057	        restrict_to_media_dirs=restrict_to_media
2058	    )
2059	
2060	# Set up security middleware
2061	@app.after_request
2062	def add_security_headers(response):
2063	    """Add security headers to all responses."""
2064	    # Prevent clickjacking
2065	    response.headers["X-Frame-Options"] = "DENY"
2066	    # Prevent MIME type sniffing
2067	    response.headers["X-Content-Type-Options"] = "nosniff"
2068	    # Enable XSS protection in browsers
2069	    response.headers["X-XSS-Protection"] = "1; mode=block"
2070	    # Restrict access to the current domain
2071	    response.headers["Content-Security-Policy"] = "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:;"
2072	    return response
2073	
2074	@app.errorhandler(404)
2075	def handle_404(error):
2076	    logger.error(f"404 error: {error}")
2077	    return jsonify({'error': 'Resource not found'}), 404
2078	
2079	@app.errorhandler(500)
2080	def handle_500(error):
2081	    logger.error(f"500 error: {error}")
2082	    return jsonify({'error': 'Internal server error'}), 500
2083	
2084	if __name__ == '__main__':
2085	    # Define the config file path
2086	    config_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'config.ini')
2087	    
2088	    # Create default config if it doesn't exist
2089	    if not os.path.exists(config_file_path):
2090	        # Initialize a ConfigManager instance specifically for creating the default config
2091	        temp_config_manager = ConfigManager(config_file_path)
2092	        temp_config_manager.create_default_config()
2093	    
2094	    # Get host and port from config using the already initialized global config_manager
2095	    config = config_manager.get_config()
2096	    host = config.get('general', 'host', fallback='127.0.0.1')
2097	    port = config.getint('general', 'port', fallback=5089)
2098	    debug = config.getboolean('webui', 'debug', fallback=False)
2099	    
2100	    # Start the app with a more accurate welcome message
2101	    print("==========================================")
2102	    print("Starting Subtitle Translator...")
2103	    print("==========================================")
2104	    print(f"If your browser doesn't open automatically, navigate to http://{host}:{port}")
2105	    print("Press Ctrl+C to stop the application.")
2106	    print("==========================================")
2107	    
2108	    # Start the app
2109	    app.run(host=host, port=port, debug=debug)

--- File: cache/wikis/95599_terminology.json ---
   1	{
   2	  "wiki_url": "https://kipo.fandom.com/",
   3	  "wiki_summary": "Kipo and the Age of Wonderbeasts is an animated series created by Radford Sechrist, developed for TV by Bill Wolkoff, and produced by DreamWorks Animation for Netflix.\n After spending her entire life living in an underground burrow, a young girl named Kipo is thrust into an adventure on the surface of a fantastical post-apocalyptic Earth. She joins a ragtag group of survivors as they embark on a journey through a vibrant wonderland where everything trying to kill them is downright adorable.\n \n",
   4	  "terms": [],
   5	  "last_updated": 1745315911.8668563
   6	}

--- File: config.ini.example ---
   1	[general]
   2	source_language = english
   3	target_language = danish
   4	context_size_before = 10
   5	context_size_after = 10
   6	use_deepl = false
   7	use_google = true
   8	use_libretranslate = true
   9	use_mymemory = true
  10	host = 127.0.0.1
  11	port = 5089
  12	temperature = 0.2
  13	debug_mode = false # Set to true for verbose logging, including full LLM prompts
  14	
  15	[whisper]
  16	# Configuration for faster-whisper transcription server
  17	use_remote_whisper = false
  18	server_url = http://10.0.0.1:10300
  19	
  20	[translation]
  21	# Configure the service priority (comma-separated list)
  22	# Services will be tried in this order
  23	service_priority = deepl,google,libretranslate,mymemory
  24	
  25	# Retry settings for translation services
  26	max_retries = 3
  27	base_delay = 2
  28	
  29	[logging]
  30	file_enabled = true
  31	log_file = translator.log
  32	max_size_mb = 5
  33	backup_count = 2
  34	log_live_status = false # Set to true to enable detailed logging of live status responses
  35	
  36	[ollama]
  37	enabled = true
  38	server_url = http://localhost:11434
  39	endpoint = /api/generate
  40	model = gemma3:27b-it-qat
  41	# Performance settings for Ollamal
  42	#num_gpu = 1      # Number of GPUs to use (increase for multi-GPU systems)
  43	#num_thread = 4   # Number of threads to use for computation
  44	#num_ctx = 4096   # Context window size (token limit for input+output)
  45	#use_mmap = true  # Memory-map the model (usually improves performance)
  46	#use_mlock = true # Lock the model in RAM (prevents swapping to disk)
  47	
  48	[lmstudio]
  49	enabled = false
  50	server_url = http://localhost:1234
  51	model = gemma-3-27b-it-qat
  52	temperature = 0.7
  53	context_length = 8000
  54	
  55	[openai]
  56	enabled = false
  57	api_key = YOUR_OPENAI_KEY
  58	api_base_url = https://api.openai.com/v1
  59	model = gpt-3.5-turbo
  60	
  61	[deepl]
  62	enabled = false
  63	api_key = YOUR_DEEPL_API_KEY
  64	api_url = https://api-free.deepl.com/v2/translate
  65	
  66	[libretranslate]
  67	api_url = https://libretranslate.de/translate
  68	
  69	[tmdb]
  70	# Get a free API key from https://www.themoviedb.org/settings/api
  71	enabled = false
  72	api_key = YOUR_TMDB_API_KEY_V3
  73	
  74	[wiki_terminology]
  75	# Enable/disable fetching terminology from fan wikis
  76	enabled = true
  77	# Number of days to cache terminology before refreshing
  78	cache_expiry_days = 7
  79	# Maximum number of terms to include in translation prompts
  80	max_terms = 10
  81	# Override wiki URL manually for shows where automatic detection fails
  82	# Example: manual_wiki_override = https://kipo.fandom.com
  83	
  84	[critic]
  85	enabled = true
  86	service = ollama      # Currently only 'ollama' and 'lmstudio' is supported
  87	model = gemma3:12b    # Uses the ollama model if not specified
  88	temperature = 0.1     # Lower temperature for more consistent evaluations
  89	min_score = 6.0       # Minimum acceptable score (0-10) for translations
  90	generate_report = true  # Generate a report of translation quality
  91	
  92	[agent_critic]
  93	enabled = false
  94	temperature = 0.2
  95	
  96	[multi_critic]
  97	enabled = false
  98	num_passes = 2
  99	
 100	[critic_pass_1]
 101	enabled = false
 102	type = grammar
 103	temperature = 0.2
 104	description = Grammar Critic - focuses on improving grammar and syntax
 105	
 106	[critic_pass_2]
 107	enabled = false
 108	type = cultural
 109	temperature = 0.2
 110	description = Cultural Critic - focuses on improving idioms and cultural references
 111	
 112	[critic_pass_3]
 113	enabled = false
 114	type = consistency
 115	temperature = 0.2
 116	description = Consistency Critic - focuses on terminology consistency across subtitle lines
 117	
 118	[file_browser]
 119	# Comma-separated list of absolute base paths allowed for browsing
 120	# Example for Linux: allowed_paths = /home/user/media,/mnt/videos
 121	# Example for Windows: allowed_paths = D:\media,C:\Users\user\Videos
 122	# Example for macOS: allowed_paths = /Users/user/Movies,/Volumes/media
 123	allowed_paths = /srv/subtitle_translator_files
 124	# Default to a restrictive path or leave empty to disable if not set
 125	
 126	# Optional: Comma-separated list of paths or patterns explicitly denied 
 127	# even if they're within an allowed path (e.g., system directories)
 128	# Example: denied_patterns = /etc,/var,/boot,/root,/home/*/.*,*password*,*config*
 129	denied_patterns = 
 130	
 131	# Security settings
 132	enable_parent_navigation = true  # Set to false to disable "up one level" navigation
 133	max_depth = 10                   # Maximum directory depth to prevent deep traversal
 134	hide_dot_files = true            # Hide files and directories that start with a dot
 135	restrict_to_media_dirs = false   # Only show directories likely to contain media
 136	
 137	[extraction]
 138	# Set to true to extract all subtitle streams from video files regardless of language
 139	extract_all_subtitles = false


--- File: dump.sh ---
   1	#!/bin/bash
   2	
   3	# --- Configuration ---
   4	OUTPUT_FILE="project_snapshot_bash.txt"
   5	# MAX_TEXT_FILE_SIZE_KB=5120 # Example: 5MB limit for text file content (optional, currently not strictly enforced for text files)
   6	
   7	# --- Helper Functions ---
   8	get_os_type() {
   9	    case "$(uname -s)" in
  10	        Linux*)     echo "Linux";;
  11	        Darwin*)    echo "Darwin";;
  12	        CYGWIN*|MINGW*|MSYS*) echo "Windows";; # Or handle as Linux-like if using bash on Windows
  13	        *)          echo "Unknown";;
  14	    esac
  15	}
  16	
  17	get_file_size_kb() {
  18	    local file_path="$1"
  19	    local size_bytes=0
  20	    local os_type
  21	    os_type=$(get_os_type)
  22	
  23	    if [ ! -e "$file_path" ]; then
  24	        echo "0" # Should not happen if file_path comes from a valid list
  25	        return
  26	    fi
  27	
  28	    if [ "$os_type" == "Linux" ]; then
  29	        size_bytes=$(stat -c%s "$file_path" 2>/dev/null) || size_bytes=0
  30	    elif [ "$os_type" == "Darwin" ]; then
  31	        size_bytes=$(stat -f%z "$file_path" 2>/dev/null) || size_bytes=0
  32	    else # Fallback for other systems or if stat fails
  33	        size_bytes=$(wc -c < "$file_path" | awk '{print $1}') || size_bytes=0
  34	    fi
  35	    echo $((size_bytes / 1024))
  36	}
  37	
  38	# --- Sanity Checks ---
  39	if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
  40	    echo "Error: This script must be run from within a Git repository." >&2
  41	    exit 1
  42	fi
  43	
  44	for cmd in git file nl tr sort awk grep stat wc mktemp uname basename date cat rm; do
  45	    if ! command -v "$cmd" > /dev/null 2>&1; then
  46	        echo "Error: Required command '$cmd' not found. Please install it." >&2
  47	        exit 1
  48	    fi
  49	done
  50	
  51	# --- Main Logic ---
  52	echo "Starting project snapshot generation..."
  53	
  54	# Temporary files
  55	TMP_FILE_LIST_RAW=$(mktemp)
  56	TMP_FILE_LIST_FILTERED=$(mktemp) # For list after removing OUTPUT_FILE
  57	TMP_FILE_LIST_SORTED=$(mktemp)   # For final sorted list to process
  58	
  59	# Get list of files from git: tracked and untracked (respecting .gitignore)
  60	git ls-files -co --exclude-standard --full-name -z > "$TMP_FILE_LIST_RAW"
  61	
  62	# **CRITICAL FIX**: Filter out the OUTPUT_FILE itself from the list of files to process
  63	# This prevents the script from reading and appending its own output file.
  64	# grep -vxF: -v (invert match), -x (match whole line), -F (fixed string)
  65	# This ensures that if OUTPUT_FILE is "project_snapshot_bash.txt", it matches exactly that line.
  66	tr '\0' '\n' < "$TMP_FILE_LIST_RAW" | \
  67	    grep -vxF "$OUTPUT_FILE" | \
  68	    tr '\n' '\0' > "$TMP_FILE_LIST_FILTERED"
  69	rm "$TMP_FILE_LIST_RAW" # Clean up raw list
  70	
  71	# Sort and unique the filtered file list
  72	if LC_ALL=C sort -zu "$TMP_FILE_LIST_FILTERED" -o "$TMP_FILE_LIST_SORTED" >/dev/null 2>&1; then
  73	    echo "Sorted filtered file list using sort -z."
  74	else
  75	    echo "sort -z not available or failed, using tr fallback for sorting filtered list."
  76	    tr '\0' '\n' < "$TMP_FILE_LIST_FILTERED" | LC_ALL=C sort -u | tr '\n' '\0' > "$TMP_FILE_LIST_SORTED"
  77	fi
  78	rm "$TMP_FILE_LIST_FILTERED" # Clean up filtered list
  79	
  80	# Start writing to the output file (truncate or create)
  81	{
  82	    echo "Project Snapshot"
  83	    echo "Root: $(basename "$(git rev-parse --show-toplevel)")"
  84	    echo "Generated: $(date)"
  85	    echo "Mode: Bash Script (Corrected)"
  86	    echo ""
  87	    echo "========================================"
  88	    echo "Included Files (respecting .gitignore, excluding '$OUTPUT_FILE'):"
  89	    echo "----------------------------------------"
  90	    if [ -s "$TMP_FILE_LIST_SORTED" ]; then
  91	        tr '\0' '\n' < "$TMP_FILE_LIST_SORTED" | awk 'NF' # awk NF to skip potential empty lines
  92	    else
  93	        echo "[No files to include based on git ls-files, .gitignore rules, and exclusion of '$OUTPUT_FILE']"
  94	    fi
  95	    echo ""
  96	    echo "========================================"
  97	    echo "File Contents:"
  98	    echo "========================================"
  99	    echo ""
 100	} > "$OUTPUT_FILE"
 101	
 102	# Process each file from the sorted list
 103	if [ -s "$TMP_FILE_LIST_SORTED" ]; then # Check if there are any files to process
 104	    while IFS= read -r -d $'\0' file_path; do
 105	        if [ -z "$file_path" ]; then # Should not happen with -d $'\0' but as a safeguard
 106	            continue
 107	        fi
 108	
 109	        # Append current file's processed content to the main output file
 110	        {
 111	            echo "--- File: $file_path ---"
 112	
 113	            if [ ! -f "$file_path" ] && [ ! -L "$file_path" ]; then
 114	                echo "[File listed by git but not found or not a regular file/symlink at processing time]"
 115	            elif [ ! -s "$file_path" ]; then
 116	                echo "[Empty file]"
 117	            else
 118	                mime_type=$(file -L -b --mime-type "$file_path")
 119	                is_binary=0
 120	
 121	                case "$mime_type" in
 122	                    text/*|application/json|application/xml|application/javascript|application/rss+xml|application/atom+xml|image/svg+xml|application/ld+json|application/schema+json|application/geo+json|application/manifest+json|application/x-sh|application/x-python*|application/x-perl*|application/x-ruby*|inode/x-empty|application/x-empty)
 123	                        is_binary=0
 124	                        ;;
 125	                    application/octet-stream|image/png|image/jpeg|image/gif|image/bmp|image/tiff|audio/*|video/*|application/pdf|application/zip|application/gzip|application/x-tar|application/java-archive|application/vnd.*|application/x-dosexec|application/x-sqlite3|font/*|application/wasm)
 126	                        if [ "$mime_type" = "image/svg+xml" ]; then is_binary=0; else is_binary=1; fi
 127	                        ;;
 128	                    *)
 129	                        if [ "$(tr -cd '\0' < "$file_path" | wc -c)" -gt 0 ]; then
 130	                            is_binary=1
 131	                            mime_type="$mime_type (heuristic: contains NULL bytes)"
 132	                        elif [ "$mime_type" = "data" ]; then
 133	                            is_binary=1
 134	                            mime_type="$mime_type (heuristic: 'data' MIME type)"
 135	                        else
 136	                            is_binary=0
 137	                            echo "[Note: Ambiguous MIME type '$mime_type' processed as text]"
 138	                        fi
 139	                        ;;
 140	                esac
 141	
 142	                if [ "$is_binary" -eq 1 ]; then
 143	                    size_kb=$(get_file_size_kb "$file_path")
 144	                    echo "[Binary file (MIME: ${mime_type:-unknown}, Size: ${size_kb}KB) - content not included]"
 145	                else
 146	                    if nl -b a -w 4 -s $'\t' "$file_path"; then
 147	                        :
 148	                    else
 149	                        echo "[Warning: 'nl' command failed for this file. Attempting with awk...]"
 150	                        awk '{printf "%04d\t%s\n", NR, $0}' "$file_path" || \
 151	                        echo "[Error: Both 'nl' and 'awk' failed to process this file. Content omitted.]"
 152	                    fi
 153	                fi
 154	            fi
 155	            echo ""
 156	            echo ""
 157	        } >> "$OUTPUT_FILE"
 158	    done < "$TMP_FILE_LIST_SORTED"
 159	fi
 160	
 161	# Clean up
 162	rm "$TMP_FILE_LIST_SORTED"
 163	
 164	echo ""
 165	echo "Project snapshot generation complete: $OUTPUT_FILE"
 166	echo "IMPORTANT: Please review '$OUTPUT_FILE' for any sensitive information (API keys, passwords, etc.) before sharing."


--- File: files/meaning.json ---
   1	[
   2	  {
   3	    "word": "Mutes",
   4	    "meaning": "Mutated animals in the show with enhanced intelligence and abilities"
   5	  },
   6	  {
   7	    "word": "Burrow",
   8	    "meaning": "Underground shelters where humans live to escape Mutes on the surface"
   9	  },
  10	  {
  11	    "word": "Mega",
  12	    "meaning": "Giant-sized Mutes that are much larger than normal animals"
  13	  },
  14	  {
  15	    "word": "Mandu",
  16	    "meaning": "A blue mutant pig that is one of Kipo's companions"
  17	  },
  18	  {
  19	    "word": "Surface",
  20	    "meaning": "The post-apocalyptic world above ground dominated by Mutes"
  21	  },
  22	  {
  23	    "word": "Pheromone collar",
  24	    "meaning": "Device used to control Mutes by Dr. Emilia and the human resistance"
  25	  }
  26	]

--- File: live_translation_viewer.py ---
   1	#!/usr/bin/env python3
   2	"""
   3	Live Translation Viewer - Enhanced terminal display for subtitle translation
   4	
   5	This script is designed to work alongside the subtitle-translator application
   6	to provide enhanced real-time visualization of the translation process in the terminal.
   7	It uses ANSI color codes and clear formatting to make the translation process more visible.
   8	"""
   9	
  10	import os
  11	import sys
  12	import platform
  13	import time
  14	import re
  15	import json
  16	
  17	# Define ANSI color codes for terminal output
  18	class Colors:
  19	    """Terminal color codes for pretty output."""
  20	    HEADER = '\033[95m'
  21	    BLUE = '\033[94m'
  22	    CYAN = '\033[96m'
  23	    GREEN = '\033[92m'
  24	    YELLOW = '\033[93m'
  25	    RED = '\033[91m'
  26	    ENDC = '\033[0m'
  27	    BOLD = '\033[1m'
  28	    UNDERLINE = '\033[4m'
  29	    
  30	    # Additional colors
  31	    BRIGHT_BLUE = '\033[94;1m'
  32	    BRIGHT_GREEN = '\033[92;1m'
  33	    BRIGHT_YELLOW = '\033[93;1m'
  34	    BRIGHT_CYAN = '\033[96;1m'
  35	    MAGENTA = '\033[35m'
  36	    BRIGHT_MAGENTA = '\033[35;1m'
  37	    
  38	    @staticmethod
  39	    def terminal_supports_color():
  40	        """Check if the terminal supports color."""
  41	        if platform.system() == 'Windows':
  42	            try:
  43	                # Windows 10 version 1607 or later supports ANSI escape sequences
  44	                # through the Windows Console
  45	                import ctypes
  46	                kernel32 = ctypes.windll.kernel32
  47	                kernel32.SetConsoleMode(kernel32.GetStdHandle(-11), 7)
  48	                return True
  49	            except:
  50	                return False
  51	        else:
  52	            return sys.stdout.isatty()
  53	    
  54	    @staticmethod
  55	    def format(text, color_code):
  56	        """Apply color to text if supported by terminal."""
  57	        if Colors.terminal_supports_color():
  58	            return f"{color_code}{text}{Colors.ENDC}"
  59	        return text
  60	
  61	def clear_screen():
  62	    """Clear the terminal screen for a fresh display."""
  63	    if platform.system() == 'Windows':
  64	        os.system('cls')
  65	    else:
  66	        os.system('clear')
  67	
  68	def display_translation_status(line_number, original, translations, current_result=None, first_pass=None, critic=None, final=None):
  69	    """
  70	    Display translation status for a single line in the requested format.
  71	    
  72	    Args:
  73	        line_number: The current line number being processed
  74	        original: The original text
  75	        translations: Dictionary of translations from different services
  76	        current_result: Current translation result (if any)
  77	        first_pass: First pass translation (if any)
  78	        critic: Critic-revised translation (if any)
  79	        final: Final translation (if any)
  80	    """
  81	    # Define ANSI color codes
  82	    RESET = "\033[0m"
  83	    BOLD = "\033[1m"
  84	    GREEN = "\033[32m"
  85	    BLUE = "\033[34m"
  86	    YELLOW = "\033[33m"
  87	    CYAN = "\033[36m"
  88	    MAGENTA = "\033[35m"
  89	    RED = "\033[31m"
  90	    
  91	    # Check if terminal supports color
  92	    supports_color = Colors.terminal_supports_color()
  93	    if not supports_color:
  94	        # Fall back to plain text if color isn't supported
  95	        RESET = BOLD = GREEN = BLUE = YELLOW = CYAN = MAGENTA = RED = ""
  96	    
  97	    # Create a separator line
  98	    separator = f"{CYAN}{'-' * 60}{RESET}"
  99	    
 100	    # Print line header
 101	    print(separator)
 102	    print(f"Line {line_number}:")
 103	    print(f"  Original: \"{original}\"")
 104	    
 105	    # Print translations from different services
 106	    for service, translation in translations.items():
 107	        if translation:
 108	            service_name = service.capitalize()
 109	            print(f"  {service_name}: \"{translation}\"")
 110	    
 111	    # Print first pass translation if available
 112	    if first_pass:
 113	        print(f"  First pass: \"{first_pass}\"")
 114	    
 115	    # Print critic evaluation if available with (CHANGED) indication if it differs from first_pass
 116	    if critic:
 117	        critic_changed = critic != first_pass if first_pass else False
 118	        change_indicator = " (CHANGED)" if critic_changed else ""
 119	        print(f"  Critic: \"{critic}\"{change_indicator}")
 120	    
 121	    # Print final translation if available
 122	    if final:
 123	        print(f"  Final: \"{final}\"")
 124	    
 125	    print(separator)
 126	    sys.stdout.flush()
 127	
 128	def live_stream_translation_info(stage, original, translation, current_idx, total_lines, translations=None, first_pass=None, critic=None, final=None):
 129	    """Display live translation information in requested format."""
 130	    # Get dictionary of translations or create empty one
 131	    translations = translations or {}
 132	    
 133	    # Clear screen for a clean display
 134	    clear_screen()
 135	    
 136	    # Display translation status in the requested format
 137	    display_translation_status(
 138	        current_idx, 
 139	        original, 
 140	        translations,
 141	        translation,
 142	        first_pass,
 143	        critic,
 144	        final
 145	    )
 146	    
 147	    # Force flush stdout to ensure immediate display
 148	    sys.stdout.flush()
 149	
 150	def show_translation_comparison(original, stages, source_lang="", target_lang=""):
 151	    """
 152	    Show a comparison of all stages of translation in a clear, visual way.
 153	    
 154	    Args:
 155	        original: The original text
 156	        stages: Dictionary of translation stages and their outputs
 157	        source_lang: Source language code
 158	        target_lang: Target language code
 159	    """
 160	    # Define ANSI color codes
 161	    RESET = "\033[0m"
 162	    BOLD = "\033[1m"
 163	    GREEN = "\033[32m"
 164	    BLUE = "\033[34m"
 165	    YELLOW = "\033[33m"
 166	    CYAN = "\033[36m"
 167	    MAGENTA = "\033[35m"
 168	    RED = "\033[31m"
 169	    
 170	    clear_screen()
 171	    
 172	    # Create a header
 173	    print(f"{CYAN}{'=' * 80}{RESET}")
 174	    print(f"{BOLD}{CYAN}SUBTITLE TRANSLATION STAGES COMPARISON{RESET}")
 175	    if source_lang and target_lang:
 176	        print(f"{BOLD}Language: {BLUE}{source_lang}{RESET} ‚Üí {GREEN}{target_lang}{RESET}")
 177	    print(f"{CYAN}{'=' * 80}{RESET}\n")
 178	    
 179	    # Original text
 180	    print(f"{BOLD}ORIGINAL TEXT:{RESET}")
 181	    print(f"{BLUE}{original}{RESET}\n")
 182	    
 183	    # Show each stage of translation
 184	    for stage_name, text in stages.items():
 185	        if text:  # Only show non-empty stages
 186	            print(f"{BOLD}{stage_name.upper()}:{RESET}")
 187	            # Use different colors for different stages
 188	            if "deepl" in stage_name.lower() or "google" in stage_name.lower():
 189	                print(f"{YELLOW}{text}{RESET}\n")
 190	            elif "critic" in stage_name.lower():
 191	                print(f"{RED}{text}{RESET}\n")
 192	            elif "final" in stage_name.lower():
 193	                print(f"{GREEN}{text}{RESET}\n")
 194	            else:
 195	                print(f"{MAGENTA}{text}{RESET}\n")
 196	    
 197	    # Footer
 198	    print(f"{CYAN}{'=' * 80}{RESET}")
 199	    print(f"{BOLD}{CYAN}END OF TRANSLATION COMPARISON{RESET}")
 200	    print(f"{CYAN}{'=' * 80}{RESET}")
 201	    sys.stdout.flush()
 202	
 203	def read_translation_report(report_path="translation_report.txt"):
 204	    """
 205	    Parse the translation report file and display key insights
 206	    in a visually appealing way.
 207	    """
 208	    if not os.path.exists(report_path):
 209	        print(f"Error: Report file not found at {report_path}")
 210	        return
 211	    
 212	    try:
 213	        with open(report_path, 'r', encoding='utf-8') as f:
 214	            content = f.read()
 215	            
 216	        # Extract basic statistics
 217	        stats = {}
 218	        for line in content.split('\n'):
 219	            if ':' in line:
 220	                key, value = line.split(':', 1)
 221	                stats[key.strip()] = value.strip()
 222	        
 223	        # Extract individual translations
 224	        translations = []
 225	        
 226	        # Now display the report in a colorful way
 227	        clear_screen()
 228	        print(f"{Colors.BRIGHT_CYAN}{'=' * 80}{Colors.ENDC}")
 229	        print(f"{Colors.BOLD}{Colors.BRIGHT_CYAN}SUBTITLE TRANSLATION REPORT SUMMARY{Colors.ENDC}")
 230	        print(f"{Colors.BRIGHT_CYAN}{'=' * 80}{Colors.ENDC}\n")
 231	        
 232	        # Print key statistics
 233	        print(f"{Colors.BOLD}BASIC INFORMATION:{Colors.ENDC}")
 234	        for key in ['Input file', 'Output file', 'Source language', 'Target language']:
 235	            if key in stats:
 236	                print(f"  {Colors.BOLD}{key}:{Colors.ENDC} {Colors.GREEN}{stats[key]}{Colors.ENDC}")
 237	        
 238	        # Print performance statistics
 239	        print(f"\n{Colors.BOLD}PERFORMANCE STATISTICS:{Colors.ENDC}")
 240	        for key in ['Total lines translated', 'DeepL suggestions used', 'Standard Critic changes']:
 241	            if key in stats:
 242	                print(f"  {Colors.BOLD}{key}:{Colors.ENDC} {Colors.YELLOW}{stats[key]}{Colors.ENDC}")
 243	        
 244	        # Print processing time if available
 245	        if 'Total processing time' in stats:
 246	            print(f"  {Colors.BOLD}Total processing time:{Colors.ENDC} {Colors.BRIGHT_MAGENTA}{stats['Total processing time']}{Colors.ENDC}")
 247	        
 248	        print(f"\n{Colors.BRIGHT_CYAN}{'=' * 80}{Colors.ENDC}")
 249	        print(f"{Colors.BOLD}Report file available at: {Colors.UNDERLINE}{report_path}{Colors.ENDC}")
 250	        print(f"{Colors.BRIGHT_CYAN}{'=' * 80}{Colors.ENDC}")
 251	        
 252	    except Exception as e:
 253	        print(f"Error reading report: {e}")
 254	
 255	def monitor_log_file(log_path="translator.log", refresh_interval=1.0):
 256	    """
 257	    Monitor the translator log file in real-time and display colorized output.
 258	    This is useful for seeing the translation process as it happens.
 259	    
 260	    Args:
 261	        log_path: Path to the log file
 262	        refresh_interval: How often to check for new log lines (in seconds)
 263	    """
 264	    if not os.path.exists(log_path):
 265	        print(f"Error: Log file not found at {log_path}")
 266	        return
 267	    
 268	    print(f"{Colors.GREEN}Starting log monitor for {log_path}{Colors.ENDC}")
 269	    print(f"{Colors.CYAN}Press Ctrl+C to stop monitoring{Colors.ENDC}\n")
 270	    
 271	    # Track the last position we read from
 272	    last_position = 0
 273	    
 274	    try:
 275	        while True:
 276	            file_size = os.path.getsize(log_path)
 277	            
 278	            # If file has grown, read the new content
 279	            if file_size > last_position:
 280	                with open(log_path, 'r', encoding='utf-8') as f:
 281	                    f.seek(last_position)
 282	                    new_content = f.read()
 283	                    
 284	                # Process and display new log lines
 285	                for line in new_content.split('\n'):
 286	                    if line.strip():
 287	                        # Colorize log levels
 288	                        if '[ERROR]' in line:
 289	                            line = line.replace('[ERROR]', f"{Colors.RED}[ERROR]{Colors.ENDC}")
 290	                        elif '[WARNING]' in line:
 291	                            line = line.replace('[WARNING]', f"{Colors.YELLOW}[WARNING]{Colors.ENDC}")
 292	                        elif '[INFO]' in line:
 293	                            line = line.replace('[INFO]', f"{Colors.GREEN}[INFO]{Colors.ENDC}")
 294	                        elif '[DEBUG]' in line:
 295	                            line = line.replace('[DEBUG]', f"{Colors.BLUE}[DEBUG]{Colors.ENDC}")
 296	                        
 297	                        # Highlight translation progress
 298	                        if 'Translation for line' in line:
 299	                            line = Colors.BRIGHT_CYAN + line + Colors.ENDC
 300	                        
 301	                        # Highlight deepL references
 302	                        if 'DeepL Reference' in line:
 303	                            line = Colors.BRIGHT_YELLOW + line + Colors.ENDC
 304	                            
 305	                        print(line)
 306	                
 307	                # Update the last position
 308	                last_position = file_size
 309	            
 310	            # Wait before checking again
 311	            time.sleep(refresh_interval)
 312	    
 313	    except KeyboardInterrupt:
 314	        print(f"\n{Colors.GREEN}Log monitoring stopped.{Colors.ENDC}")
 315	
 316	def print_usage():
 317	    """Print usage information for this script."""
 318	    script_name = os.path.basename(__file__)
 319	    print(f"{Colors.BOLD}Live Translation Viewer{Colors.ENDC}")
 320	    print(f"Usage: python {script_name} [command]")
 321	    print("\nCommands:")
 322	    print(f"  {Colors.CYAN}monitor{Colors.ENDC}    - Monitor the translator.log file in real-time")
 323	    print(f"  {Colors.CYAN}report{Colors.ENDC}     - Show a summary of the translation report")
 324	    print(f"  {Colors.CYAN}help{Colors.ENDC}       - Show this help message")
 325	    print("\nExamples:")
 326	    print(f"  python {script_name} monitor")
 327	    print(f"  python {script_name} report")
 328	
 329	if __name__ == "__main__":
 330	    if len(sys.argv) < 2:
 331	        print_usage()
 332	        sys.exit(0)
 333	    
 334	    command = sys.argv[1].lower()
 335	    
 336	    if command == "monitor":
 337	        log_path = sys.argv[2] if len(sys.argv) > 2 else "translator.log"
 338	        monitor_log_file(log_path)
 339	    elif command == "report":
 340	        report_path = sys.argv[2] if len(sys.argv) > 2 else "translation_report.txt"
 341	        read_translation_report(report_path)
 342	    elif command == "help":
 343	        print_usage()
 344	    else:
 345	        print(f"{Colors.RED}Unknown command: {command}{Colors.ENDC}")
 346	        print_usage()
 347	        sys.exit(1)

--- File: py/config_manager.py ---
   1	import os
   2	import configparser
   3	
   4	class ConfigManager:
   5	    """
   6	    Manager class for handling configuration settings for the subtitle translator.
   7	    Handles reading, writing, and creating default configurations.
   8	    """
   9	    
  10	    def __init__(self, config_path):
  11	        """
  12	        Initialize the ConfigManager with the path to the config file.
  13	        
  14	        Args:
  15	            config_path (str): Path to the configuration file
  16	        """
  17	        self.config_path = config_path
  18	        self.config = configparser.ConfigParser()
  19	        
  20	        # Read the config if it exists
  21	        if os.path.exists(config_path):
  22	            self.config.read(config_path)
  23	        
  24	    def get_config(self):
  25	        """
  26	        Get the current configuration object.
  27	        
  28	        Returns:
  29	            configparser.ConfigParser: The configuration object
  30	        """
  31	        return self.config
  32	    
  33	    def get_config_as_dict(self):
  34	        """
  35	        Convert the current configuration to a dictionary.
  36	        
  37	        Returns:
  38	            dict: The configuration as a nested dictionary
  39	        """
  40	        config_dict = {}
  41	        for section in self.config.sections():
  42	            config_dict[section] = {}
  43	            for key, value in self.config[section].items():
  44	                config_dict[section][key] = value
  45	        return config_dict
  46	    
  47	    def save_config(self, config_dict):
  48	        """
  49	        Save a configuration dictionary to the config file.
  50	        
  51	        Args:
  52	            config_dict (dict): Configuration as a nested dictionary
  53	        """
  54	        # Create a new ConfigParser
  55	        new_config = configparser.ConfigParser()
  56	        
  57	        # Add sections and options from the dictionary
  58	        for section, options in config_dict.items():
  59	            if not new_config.has_section(section):
  60	                new_config.add_section(section)
  61	            
  62	            for key, value in options.items():
  63	                new_config.set(section, key, str(value))
  64	        
  65	        # Save to file
  66	        with open(self.config_path, 'w') as f:
  67	            new_config.write(f)
  68	        
  69	        # Update our config
  70	        self.config = new_config
  71	    
  72	    def create_default_config(self):
  73	        """
  74	        Create a default configuration file.
  75	        """
  76	        config = configparser.ConfigParser()
  77	        
  78	        # General section
  79	        config.add_section('general')
  80	        config.set('general', 'default_source_language', 'en')
  81	        config.set('general', 'default_target_language', 'es')
  82	        
  83	        # WebUI section
  84	        config.add_section('webui')
  85	        config.set('webui', 'host', '127.0.0.1')
  86	        config.set('webui', 'port', '5000')
  87	        config.set('webui', 'debug', 'false')
  88	        
  89	        # Translation service section
  90	        config.add_section('translation')
  91	        config.set('translation', 'service', 'google')
  92	        config.set('translation', 'api_key', '')
  93	        config.set('translation', 'use_cache', 'true')
  94	        config.set('translation', 'cache_dir', 'translation_cache')
  95	        
  96	        # Save to file
  97	        with open(self.config_path, 'w') as f:
  98	            config.write(f)
  99	        
 100	        # Update our config
 101	        self.config = config

--- File: py/critic_service.py ---
   1	import os
   2	import json
   3	import requests
   4	import time
   5	import re
   6	from typing import Dict, List, Any, Optional, Union
   7	
   8	class CriticService:
   9	    """
  10	    Service for evaluating the quality of translations using local LLM services (Ollama or LM Studio).
  11	    This service analyzes translation quality, provides scores, and generates
  12	    quality reports for subtitle translations.
  13	    """
  14	    
  15	    def __init__(self, config, logger):
  16	        """
  17	        Initialize the critic service.
  18	        
  19	        Args:
  20	            config: The configuration object from ConfigManager
  21	            logger: The application logger
  22	        """
  23	        self.config = config
  24	        self.logger = logger
  25	        
  26	        # Get critic configuration
  27	        # Read from 'agent_critic' section instead of 'critic'
  28	        self.enabled = config.getboolean('agent_critic', 'enabled', fallback=False)
  29	        self.service = config.get('agent_critic', 'service', fallback='ollama')  # Default to ollama instead of auto
  30	        self.model = config.get('agent_critic', 'model', fallback=config.get('ollama', 'model', fallback='llama3')) # Read model from agent_critic first
  31	        self.temperature = config.getfloat('agent_critic', 'temperature', fallback=0.1)
  32	        self.min_score = config.getfloat('agent_critic', 'min_score', fallback=0.6) # Assuming min_score might be defined here
  33	        self.generate_report = config.getboolean('agent_critic', 'generate_report', fallback=False) # Assuming generate_report might be defined here
  34	        
  35	        # Check for LM Studio configuration
  36	        self.lmstudio_enabled = config.has_section('lmstudio') and config.getboolean('lmstudio', 'enabled', fallback=False)
  37	        
  38	        # Only auto-detect if explicitly set to 'auto'
  39	        if self.service == 'auto':
  40	            if self.lmstudio_enabled:
  41	                self.service = 'lmstudio'
  42	                self.logger.info("Auto-detected LM Studio as the critic service")
  43	            else:
  44	                self.service = 'ollama'
  45	                self.logger.info("Auto-detected Ollama as the critic service")
  46	        
  47	        # Get LM Studio-specific configuration if enabled
  48	        if self.lmstudio_enabled or self.service == 'lmstudio':
  49	            self.lmstudio_server_url = config.get('lmstudio', 'server_url', fallback='http://localhost:1234')
  50	            self.lmstudio_model = config.get('lmstudio', 'model', fallback=self.model)
  51	            # Build the complete API URL for LM Studio
  52	            self.lmstudio_api_url = f"{self.lmstudio_server_url.rstrip('/')}/v1/chat/completions"
  53	        
  54	        # Get Ollama-specific configuration
  55	        self.ollama_server_url = config.get('ollama', 'server_url', fallback='http://localhost:11434')
  56	        self.ollama_endpoint = config.get('ollama', 'endpoint', fallback='/api/generate')
  57	        
  58	        # Remove leading slash from endpoint if present to avoid double slashes
  59	        if self.ollama_endpoint.startswith('/'):
  60	            self.ollama_endpoint = self.ollama_endpoint[1:]
  61	            
  62	        # Build the complete API URL
  63	        self.ollama_api_url = f"{self.ollama_server_url.rstrip('/')}/{self.ollama_endpoint}"
  64	        
  65	        # Performance parameters - properly handle commented-out options
  66	        if config.has_option('ollama', 'num_gpu'):
  67	            value = config.get('ollama', 'num_gpu', fallback=None)
  68	            if value is not None and str(value).strip() != "":
  69	                self.num_gpu = config.getint('ollama', 'num_gpu')
  70	            else:
  71	                self.num_gpu = None
  72	        else:
  73	            self.num_gpu = None
  74	
  75	        if config.has_option('ollama', 'num_thread'):
  76	            value = config.get('ollama', 'num_thread', fallback=None)
  77	            if value is not None and str(value).strip() != "":
  78	                self.num_thread = config.getint('ollama', 'num_thread')
  79	            else:
  80	                self.num_thread = None
  81	        else:
  82	            self.num_thread = None
  83	            
  84	        if config.has_option('ollama', 'num_ctx'):
  85	            value = config.get('ollama', 'num_ctx', fallback=None)
  86	            if value is not None and str(value).strip() != "":
  87	                self.num_ctx = config.getint('ollama', 'num_ctx')
  88	            else:
  89	                self.num_ctx = None
  90	        else:
  91	            self.num_ctx = None
  92	
  93	        if config.has_option('ollama', 'use_mmap'):
  94	            value = config.get('ollama', 'use_mmap', fallback=None)
  95	            if value is not None and str(value).strip() != "":
  96	                self.use_mmap = config.getboolean('ollama', 'use_mmap')
  97	            else:
  98	                self.use_mmap = None
  99	        else:
 100	            self.use_mmap = None
 101	
 102	        if config.has_option('ollama', 'use_mlock'):
 103	            value = config.get('ollama', 'use_mlock', fallback=None)
 104	            if value is not None and str(value).strip() != "":
 105	                self.use_mlock = config.getboolean('ollama', 'use_mlock')
 106	            else:
 107	                self.use_mlock = None
 108	        else:
 109	            self.use_mlock = None
 110	        
 111	        # Initialize cache for evaluation results
 112	        self.evaluation_cache = {}
 113	        
 114	        self.logger.info(f"CriticService initialized. Enabled: {self.enabled}, Service: {self.service}, Model: {self.model}")
 115	        if self.service == 'ollama':
 116	            self.logger.debug(f"Ollama API URL: {self.ollama_api_url}")
 117	        elif self.service == 'lmstudio':
 118	            self.logger.debug(f"LM Studio API URL: {self.lmstudio_api_url}")
 119	    
 120	    def evaluate_translation(self, source_text: str, translated_text: str, source_lang: str, target_lang: str) -> Dict[str, Any]:
 121	        """
 122	        Evaluate the quality of a translation.
 123	        
 124	        Args:
 125	            source_text: The original text in the source language
 126	            translated_text: The translated text
 127	            source_lang: The source language code
 128	            target_lang: The target language code
 129	            
 130	        Returns:
 131	            Dictionary containing evaluation results including score and feedback
 132	        """
 133	        if not self.enabled:
 134	            return {"score": 1.0, "feedback": "Translation quality evaluation is disabled"}
 135	        
 136	        # Generate a cache key
 137	        cache_key = f"{source_lang}:{target_lang}:{hash(source_text)}:{hash(translated_text)}"
 138	        
 139	        # Check if we have this evaluation cached
 140	        if cache_key in self.evaluation_cache:
 141	            self.logger.debug(f"Using cached evaluation for translation")
 142	            return self.evaluation_cache[cache_key]
 143	        
 144	        try:
 145	            # Use the appropriate service for evaluation
 146	            if self.service == 'ollama':
 147	                result = self._evaluate_with_ollama(source_text, translated_text, source_lang, target_lang)
 148	            elif self.service == 'lmstudio':
 149	                result = self._evaluate_with_lmstudio(source_text, translated_text, source_lang, target_lang)
 150	            else:
 151	                self.logger.warning(f"Unsupported critic service: {self.service}, defaulting to basic evaluation")
 152	                result = self._basic_evaluation(source_text, translated_text)
 153	            
 154	            # Cache the result
 155	            self.evaluation_cache[cache_key] = result
 156	            return result
 157	            
 158	        except Exception as e:
 159	            self.logger.error(f"Error in translation evaluation: {e}")
 160	            return {"score": 0.5, "feedback": f"Error evaluating translation: {str(e)}"}
 161	    
 162	    def _evaluate_with_lmstudio(self, source_text: str, translated_text: str, source_lang: str, target_lang: str) -> Dict[str, Any]:
 163	        """
 164	        Evaluate translation quality using LM Studio's OpenAI-compatible API.
 165	        
 166	        Args:
 167	            source_text: The original text in the source language
 168	            translated_text: The translated text
 169	            source_lang: The source language code
 170	            target_lang: The target language code
 171	            
 172	        Returns:
 173	            Dictionary with evaluation score and feedback
 174	        """
 175	        # Create language names from codes
 176	        source_lang_name = self._get_language_name(source_lang)
 177	        target_lang_name = self._get_language_name(target_lang)
 178	        
 179	        # Build the system message
 180	        system_message = f"""You are a translation critic and improver. Your task is to review translations from {source_lang_name} to {target_lang_name} and provide detailed feedback."""
 181	        
 182	        # Build the user message
 183	        user_message = f"""Review this translation:
 184	
 185	Original text ({source_lang_name}): {source_text}
 186	
 187	Attempted translation ({target_lang_name}): {translated_text}
 188	
 189	Your task:
 190	1. Rate the translation quality on a scale of 1-10
 191	2. Identify any errors or issues in the translation
 192	3. MOST IMPORTANTLY: Provide a corrected/improved version of the translation (ONLY ONE DEFINITIVE REVISED VERSION)
 193	
 194	Return your response in this JSON format:
 195	{{
 196	  "score": <number between 1 and 10>,
 197	  "feedback": "<your critique with specific improvement suggestions>",
 198	  "revised_translation": "<your corrected version of the translation>"
 199	}}
 200	
 201	Only return the JSON object, no other text."""
 202	        
 203	        try:
 204	            # Prepare request payload in OpenAI Chat Completions format
 205	            headers = {
 206	                "Content-Type": "application/json"
 207	            }
 208	            
 209	            temperature = self.config.getfloat("lmstudio", "temperature", fallback=self.temperature)
 210	            
 211	            data = {
 212	                "model": self.lmstudio_model,
 213	                "messages": [
 214	                    {"role": "system", "content": system_message},
 215	                    {"role": "user", "content": user_message}
 216	                ],
 217	                "temperature": temperature,
 218	                "max_tokens": self.config.getint("lmstudio", "context_length", fallback=4096),
 219	                "stream": False
 220	            }
 221	            
 222	            # Make request with retries
 223	            max_retries = 3
 224	            retry_delay = 2  # seconds
 225	            
 226	            for attempt in range(max_retries):
 227	                try:
 228	                    self.logger.debug(f"Sending evaluation request to LM Studio for {self.lmstudio_model} at {self.lmstudio_api_url}")
 229	                    
 230	                    # Increase timeout for more complex evaluations (300 seconds = 5 minutes)
 231	                    response = requests.post(self.lmstudio_api_url, json=data, headers=headers, timeout=300)
 232	                    response.raise_for_status()
 233	                    
 234	                    # Parse the response
 235	                    result = response.json()
 236	                    self.logger.debug(f"Received LM Studio critic response: {json.dumps(result)[:200]}...")
 237	                    
 238	                    # Extract the response content from the OpenAI API format
 239	                    if "choices" in result and len(result["choices"]) > 0:
 240	                        response_text = result["choices"][0]["message"]["content"].strip()
 241	                        
 242	                        # Extract the JSON part from the response
 243	                        try:
 244	                            evaluation = json.loads(response_text)
 245	                        except json.JSONDecodeError:
 246	                            # If that fails, try to extract JSON-like content
 247	                            self.logger.debug("Couldn't parse response as JSON directly, trying to extract JSON object")
 248	                            try:
 249	                                json_str = self._extract_json_from_text(response_text)
 250	                                evaluation = json.loads(json_str)
 251	                            except (json.JSONDecodeError, ValueError):
 252	                                self.logger.warning(f"Failed to extract JSON from response: {response_text[:100]}...")
 253	                                # Fallback: create a basic result based on the text
 254	                                evaluation = self._analyze_non_json_response(response_text)
 255	                        
 256	                        # Ensure score is within bounds
 257	                        if 'score' in evaluation:
 258	                            # Score might be on 1-10 scale, convert to 0-1
 259	                            if evaluation['score'] > 1.0:
 260	                                normalized_score = float(evaluation['score']) / 10.0
 261	                                self.logger.debug(f"Normalizing score from {evaluation['score']} to {normalized_score}")
 262	                                evaluation['score'] = normalized_score
 263	                            evaluation['score'] = min(max(float(evaluation['score']), 0.0), 1.0)
 264	                        else:
 265	                            evaluation['score'] = 0.5
 266	                            
 267	                        if 'feedback' not in evaluation:
 268	                            evaluation['feedback'] = "No feedback provided by the evaluation model"
 269	                        
 270	                        self.logger.info(f"Translation evaluation result: Score {evaluation['score']:.2f}")
 271	                        self.logger.debug(f"Evaluation feedback: {evaluation['feedback']}")
 272	                        
 273	                        return evaluation
 274	                    else:
 275	                        self.logger.warning(f"LM Studio API returned unexpected response format on attempt {attempt+1}")
 276	                        if attempt < max_retries - 1:
 277	                            time.sleep(retry_delay)
 278	                            continue
 279	                
 280	                except requests.exceptions.Timeout:
 281	                    self.logger.warning(f"LM Studio API request timed out on attempt {attempt+1}")
 282	                    if attempt < max_retries - 1:
 283	                        time.sleep(retry_delay)
 284	                        continue
 285	                except requests.RequestException as e:
 286	                    self.logger.error(f"Error making request to LM Studio API: {e}")
 287	                    if attempt < max_retries - 1:
 288	                        time.sleep(retry_delay)
 289	                        continue
 290	            
 291	            # If we get here, all retries failed
 292	            return {"score": 0.5, "feedback": "Failed to get evaluation from LM Studio after multiple attempts"}
 293	                
 294	        except Exception as e:
 295	            self.logger.error(f"Error in LM Studio evaluation: {str(e)}")
 296	            import traceback
 297	            self.logger.debug(f"Full error details: {traceback.format_exc()}")
 298	            return {"score": 0.5, "feedback": f"Error processing evaluation: {str(e)}"}
 299	    
 300	    def _evaluate_with_ollama(self, source_text: str, translated_text: str, source_lang: str, target_lang: str) -> Dict[str, Any]:
 301	        """
 302	        Evaluate translation quality using Ollama LLM.
 303	        
 304	        Args:
 305	            source_text: The original text in the source language
 306	            translated_text: The translated text
 307	            source_lang: The source language code
 308	            target_lang: The target language code
 309	            
 310	        Returns:
 311	            Dictionary with evaluation score and feedback
 312	        """
 313	        # Create language names from codes
 314	        source_lang_name = self._get_language_name(source_lang)
 315	        target_lang_name = self._get_language_name(target_lang)
 316	        
 317	        # Build the prompt for the LLM
 318	        prompt = f"""You are a translation critic and improver. Review this translation from {source_lang} to {target_lang}.
 319	
 320	Original text ({source_lang}): {source_text}
 321	
 322	Attempted translation ({target_lang}): {translated_text}
 323	
 324	Your task:
 325	1. Rate the translation quality on a scale of 1-10
 326	2. Identify any errors or issues in the translation
 327	3. MOST IMPORTANTLY: Provide a corrected/improved version of the translation (ONLY ONE DEFINITIVE REVISED VERSION)
 328	
 329	Return your response in this JSON format:
 330	{{
 331	  "score": <number between 1 and 10>,
 332	  "feedback": "<your critique with specific improvement suggestions>",
 333	  "revised_translation": "<your corrected version of the translation>"
 334	}}
 335	
 336	Only return the JSON object, no other text.
 337	"""
 338	        
 339	        try:
 340	            # Build the API request
 341	            data = {
 342	                "model": self.model,
 343	                "prompt": prompt,
 344	                "stream": False,
 345	                "options": {
 346	                    "temperature": self.temperature
 347	                }
 348	            }
 349	            
 350	            # Only add performance options if they are explicitly defined in the config
 351	            options = {}
 352	            
 353	            # Process numeric options (num_gpu, num_thread, num_ctx)
 354	            for option_name in ["num_gpu", "num_thread", "num_ctx"]:
 355	                if self.config.has_option("ollama", option_name):
 356	                    # Get the raw value and check if it's actually set and not commented out
 357	                    raw_value = self.config.get("ollama", option_name, fallback=None)
 358	                    if raw_value is not None and str(raw_value).strip() and not str(raw_value).strip().startswith('#'):
 359	                        try:
 360	                            # Only include options with valid integer values
 361	                            options[option_name] = self.config.getint("ollama", option_name)
 362	                            self.logger.debug(f"Including Ollama option in critic request: {option_name}={options[option_name]}")
 363	                        except ValueError:
 364	                            self.logger.warning(f"Invalid value for Ollama option '{option_name}': {raw_value}")
 365	            
 366	            # Process boolean options (use_mmap, use_mlock)
 367	            for option_name in ["use_mmap", "use_mlock"]:
 368	                if self.config.has_option("ollama", option_name):
 369	                    raw_value = self.config.get("ollama", option_name, fallback=None)
 370	                    if raw_value is not None and str(raw_value).strip() and not str(raw_value).strip().startswith('#'):
 371	                        try:
 372	                            # Only include options with valid boolean values
 373	                            options[option_name] = self.config.getboolean("ollama", option_name)
 374	                            self.logger.debug(f"Including Ollama option in critic request: {option_name}={options[option_name]}")
 375	                        except ValueError:
 376	                            self.logger.warning(f"Invalid value for Ollama option '{option_name}': {raw_value}")
 377	            
 378	            # Add options to the request only if we found valid ones
 379	            if options:
 380	                data["options"].update(options)
 381	                self.logger.debug(f"Sending Ollama critic options: {json.dumps(options)}")
 382	                
 383	            self.logger.debug(f"Sending evaluation request to Ollama for {self.model} at {self.ollama_api_url}")
 384	            
 385	            # Make the API call with retries
 386	            max_retries = 3
 387	            retry_delay = 2  # seconds
 388	            
 389	            for attempt in range(max_retries):
 390	                try:
 391	                    # Increase timeout for more complex evaluations (300 seconds = 5 minutes)
 392	                    response = requests.post(self.ollama_api_url, json=data, timeout=300)
 393	                    response.raise_for_status()
 394	                    
 395	                    # Parse the response
 396	                    result = response.json()
 397	                    self.logger.debug(f"Received Ollama critic response: {json.dumps(result)[:200]}...")
 398	                    response_text = result.get('response', '')
 399	                    
 400	                    # Apply think tags filter to remove thinking content
 401	                    response_text = self.remove_think_tags(response_text)
 402	                    
 403	                    # Extract the JSON part from the response
 404	                    # First, try to parse the response as JSON directly
 405	                    try:
 406	                        evaluation = json.loads(response_text)
 407	                    except json.JSONDecodeError:
 408	                        # If that fails, try to extract JSON-like content
 409	                        self.logger.debug("Couldn't parse response as JSON directly, trying to extract JSON object")
 410	                        try:
 411	                            json_str = self._extract_json_from_text(response_text)
 412	                            evaluation = json.loads(json_str)
 413	                        except (json.JSONDecodeError, ValueError):
 414	                            self.logger.warning(f"Failed to extract JSON from response: {response_text[:100]}...")
 415	                            # Fallback: create a basic result based on the text
 416	                            evaluation = self._analyze_non_json_response(response_text)
 417	                    
 418	                    # Ensure score is within bounds
 419	                    if 'score' in evaluation:
 420	                        # Score might be on 1-10 scale, convert to 0-1
 421	                        if evaluation['score'] > 1.0:
 422	                            normalized_score = float(evaluation['score']) / 10.0
 423	                            self.logger.debug(f"Normalizing score from {evaluation['score']} to {normalized_score}")
 424	                            evaluation['score'] = normalized_score
 425	                        evaluation['score'] = min(max(float(evaluation['score']), 0.0), 1.0)
 426	                    else:
 427	                        evaluation['score'] = 0.5
 428	                        
 429	                    if 'feedback' not in evaluation:
 430	                        evaluation['feedback'] = "No feedback provided by the evaluation model"
 431	                    
 432	                    self.logger.info(f"Translation evaluation result: Score {evaluation['score']:.2f}")
 433	                    self.logger.debug(f"Evaluation feedback: {evaluation['feedback']}")
 434	                    
 435	                    return evaluation
 436	                
 437	                except requests.exceptions.Timeout:
 438	                    self.logger.warning(f"Ollama API request timed out on attempt {attempt+1}")
 439	                    if attempt < max_retries - 1:
 440	                        time.sleep(retry_delay)
 441	                        continue
 442	                    raise
 443	                except requests.RequestException as e:
 444	                    self.logger.error(f"Error making request to Ollama API: {e}")
 445	                    if attempt < max_retries - 1:
 446	                        time.sleep(retry_delay)
 447	                        continue
 448	                    raise
 449	            
 450	            # If we get here, all retries failed
 451	            return {"score": 0.5, "feedback": "Failed to get evaluation after multiple attempts"}
 452	                
 453	        except Exception as e:
 454	            self.logger.error(f"Error in Ollama evaluation: {str(e)}")
 455	            import traceback
 456	            self.logger.debug(f"Full error details: {traceback.format_exc()}")
 457	            return {"score": 0.5, "feedback": f"Error processing evaluation: {str(e)}"}
 458	    
 459	    def _extract_json_from_text(self, text: str) -> str:
 460	        """
 461	        Extract a JSON object from a text string.
 462	        
 463	        Args:
 464	            text: Text possibly containing a JSON object
 465	        
 466	        Returns:
 467	            JSON string extracted from the text
 468	        
 469	        Raises:
 470	            ValueError: If no valid JSON object is found
 471	        """
 472	        # Try to find content between curly braces
 473	        import re
 474	        json_match = re.search(r'(\{.*\})', text, re.DOTALL)
 475	        if json_match:
 476	            return json_match.group(1)
 477	        
 478	        # If no JSON object is found
 479	        raise ValueError("No JSON object found in response")
 480	    
 481	    def _analyze_non_json_response(self, text: str) -> Dict[str, Any]:
 482	        """
 483	        Create an evaluation result from non-JSON response by analysis.
 484	        
 485	        Args:
 486	            text: The response text to analyze
 487	        
 488	        Returns:
 489	            Dictionary with estimated score and feedback
 490	        """
 491	        # Look for numeric scores in the text
 492	        import re
 493	        
 494	        # Look for patterns like "score: 0.8" or "score of 0.8"
 495	        score_matches = re.findall(r'score:?\s*(\d+\.\d+|\d+)', text, re.IGNORECASE)
 496	        if score_matches:
 497	            try:
 498	                score = float(score_matches[0])
 499	                # Ensure score is between 0 and 1
 500	                if score > 1 and score <= 10:
 501	                    score = score / 10  # Convert 0-10 scale to 0-1
 502	                score = min(max(score, 0.0), 1.0)
 503	            except ValueError:
 504	                score = 0.5
 505	        else:
 506	            # Try to infer score from text sentiment
 507	            score = 0.5
 508	            positive_indicators = ['excellent', 'good', 'accurate', 'fluent', 'perfect']
 509	            negative_indicators = ['poor', 'bad', 'incorrect', 'error', 'issue', 'problem']
 510	            
 511	            positive_count = sum(1 for word in positive_indicators if word.lower() in text.lower())
 512	            negative_count = sum(1 for word in negative_indicators if word.lower() in text.lower())
 513	            
 514	            if positive_count > negative_count:
 515	                score = 0.7 + (0.3 * min(positive_count / 5, 1))
 516	            elif negative_count > positive_count:
 517	                score = 0.3 - (0.3 * min(negative_count / 5, 1))
 518	        
 519	        return {
 520	            "score": score,
 521	            "feedback": text[:200] + ('...' if len(text) > 200 else '')
 522	        }
 523	    
 524	    def _basic_evaluation(self, source_text: str, translated_text: str) -> Dict[str, Any]:
 525	        """
 526	        Basic evaluation method when no advanced service is available.
 527	        Uses simple heuristics to estimate translation quality.
 528	        
 529	        Args:
 530	            source_text: The original text
 531	            translated_text: The translated text
 532	            
 533	        Returns:
 534	            Dictionary with a basic quality score and generic feedback
 535	        """
 536	        # Very basic length-based check
 537	        source_length = len(source_text.split())
 538	        translated_length = len(translated_text.split())
 539	        
 540	        # Calculate length ratio - translations shouldn't be wildly different in length
 541	        if source_length == 0:
 542	            length_ratio = 1.0  # Avoid division by zero
 543	        else:
 544	            length_ratio = translated_length / source_length
 545	        
 546	        # Score based on length ratio
 547	        if 0.5 <= length_ratio <= 2.0:
 548	            score = 0.8  # Reasonable length ratio
 549	        elif 0.3 <= length_ratio <= 3.0:
 550	            score = 0.5  # Questionable length ratio
 551	        else:
 552	            score = 0.2  # Very suspicious length ratio
 553	        
 554	        feedback = f"Basic evaluation based on text length. Source has {source_length} words, translation has {translated_length} words."
 555	        
 556	        return {"score": score, "feedback": feedback}
 557	    
 558	    def _get_language_name(self, lang_code: str) -> str:
 559	        """
 560	        Convert a language code to a language name.
 561	        
 562	        Args:
 563	            lang_code: ISO language code (e.g., 'en', 'fr')
 564	            
 565	        Returns:
 566	            Full language name (e.g., 'English', 'French')
 567	        """
 568	        language_map = {
 569	            'en': 'English',
 570	            'es': 'Spanish',
 571	            'fr': 'French',
 572	            'de': 'German',
 573	            'it': 'Italian',
 574	            'pt': 'Portuguese',
 575	            'ru': 'Russian',
 576	            'ja': 'Japanese',
 577	            'ko': 'Korean',
 578	            'zh': 'Chinese',
 579	            'da': 'Danish',
 580	            'nl': 'Dutch',
 581	            'fi': 'Finnish',
 582	            'sv': 'Swedish',
 583	            'no': 'Norwegian',
 584	            'hi': 'Hindi'
 585	        }
 586	        
 587	        return language_map.get(lang_code.lower(), lang_code)
 588	    
 589	    def generate_quality_report(self, evaluations: List[Dict[str, Any]], source_lang: str, target_lang: str) -> str:
 590	        """
 591	        Generate a quality report based on a collection of evaluations.
 592	        
 593	        Args:
 594	            evaluations: List of evaluation results
 595	            source_lang: Source language code
 596	            target_lang: Target language code
 597	            
 598	        Returns:
 599	            Text report with quality statistics and insights
 600	        """
 601	        if not self.generate_report or not evaluations:
 602	            return ""
 603	        
 604	        # Calculate statistics
 605	        scores = [e.get('score', 0) for e in evaluations]
 606	        avg_score = sum(scores) / len(scores)
 607	        min_score = min(scores)
 608	        max_score = max(scores)
 609	        
 610	        # Count problematic translations (below minimum score threshold)
 611	        problematic = [e for e in evaluations if e.get('score', 0) < self.min_score]
 612	        
 613	        # Format the report
 614	        source_lang_name = self._get_language_name(source_lang)
 615	        target_lang_name = self._get_language_name(target_lang)
 616	        
 617	        report = f"""# Translation Quality Report
 618	* **Source Language**: {source_lang_name}
 619	* **Target Language**: {target_lang_name}
 620	* **Evaluated Segments**: {len(evaluations)}
 621	* **Average Quality Score**: {avg_score:.2f} / 1.00
 622	* **Quality Range**: {min_score:.2f} - {max_score:.2f}
 623	* **Problematic Segments**: {len(problematic)} ({len(problematic)/len(evaluations)*100:.1f}%)
 624	
 625	## Quality Assessment
 626	This report provides an automated assessment of translation quality using computational linguistic analysis.
 627	Scores close to 1.00 indicate high-quality translations that preserve the original meaning
 628	while maintaining natural language flow in the target language.
 629	
 630	"""
 631	        
 632	        # Add section with examples of issues if there are problematic translations
 633	        if problematic:
 634	            report += "\n## Problematic Translations\n"
 635	            # Include up to 5 examples of problematic translations
 636	            for i, example in enumerate(problematic[:5]):
 637	                report += f"\n### Example {i+1} (Score: {example.get('score', 0):.2f})\n"
 638	                report += f"**Source**: {example.get('source_text', 'N/A')}\n"
 639	                report += f"**Translation**: {example.get('translated_text', 'N/A')}\n"
 640	                report += f"**Feedback**: {example.get('feedback', 'No feedback available')}\n"
 641	        
 642	        # Add timestamp
 643	        report += f"\n\nReport generated: {time.strftime('%Y-%m-%d %H:%M:%S')}"
 644	        
 645	        return report
 646	    
 647	    def save_report_to_file(self, report: str, base_filename: str) -> str:
 648	        """
 649	        Save a translation quality report to a file.
 650	        
 651	        Args:
 652	            report: The report text
 653	            base_filename: Base name for the report file
 654	            
 655	        Returns:
 656	            Path to the saved report file
 657	        """
 658	        if not report:
 659	            return ""
 660	            
 661	        try:
 662	            # Determine the output filename
 663	            base_path = os.path.dirname(base_filename)
 664	            base_name = os.path.splitext(os.path.basename(base_filename))[0]
 665	            report_path = os.path.join(base_path, f"{base_name}_quality_report.txt")
 666	            
 667	            # Write the report to file
 668	            with open(report_path, 'w', encoding='utf-8') as f:
 669	                f.write(report)
 670	                
 671	            self.logger.info(f"Translation quality report saved to {report_path}")
 672	            return report_path
 673	            
 674	        except Exception as e:
 675	            self.logger.error(f"Error saving quality report: {e}")
 676	            return ""
 677	
 678	    def remove_think_tags(self, text: str) -> str:
 679	        """
 680	        Remove content between <think> and </think> tags.
 681	        This allows models to include their thinking process without it showing up in the final output.
 682	        
 683	        Args:
 684	            text: The text to process
 685	            
 686	        Returns:
 687	            Text with the thinking content removed
 688	        """
 689	        if not text:
 690	            return ""
 691	            
 692	        # Use regex to remove anything between <think> and </think> tags, including the tags
 693	        cleaned_text = re.sub(r'<think>.*?</think>', '', text, flags=re.DOTALL)
 694	        
 695	        # If debug mode is enabled, log when thinking content was removed
 696	        debug_mode = self.config.getboolean('agent_critic', 'debug', fallback=False)
 697	        if debug_mode and text != cleaned_text:
 698	            self.logger.debug(f"Removed thinking content from critic response (original length: {len(text)}, new length: {len(cleaned_text)})")
 699	            
 700	        return cleaned_text.strip()

--- File: py/local_whisper.py ---
   1	#!/usr/bin/env python3
   2	
   3	import os
   4	import sys
   5	import logging
   6	import time
   7	import tempfile
   8	import shutil
   9	from typing import Dict, Any, Optional, List, Tuple
  10	
  11	class LocalWhisperTranscriber:
  12	    """
  13	    Handles transcription using local Whisper models without requiring an external server.
  14	    This allows for more stable transcription by avoiding the connection reset issues.
  15	    """
  16	    
  17	    def __init__(self, model_size="medium", device="cpu", compute_type=None, logger=None):
  18	        """
  19	        Initialize the local Whisper transcriber.
  20	        
  21	        Args:
  22	            model_size (str): Whisper model size to use: tiny, base, small, medium, large
  23	            device (str): Device to use for inference: cpu, cuda, mps
  24	            compute_type (str): Compute type to use: float32, float16, int8
  25	            logger: Optional logger instance
  26	        """
  27	        self.model_size = model_size
  28	        self.device = device
  29	        # Auto-select compute type based on device if not specified
  30	        self.compute_type = compute_type
  31	        self.logger = logger or logging.getLogger(__name__)
  32	        self._whisper = None
  33	        self._model = None
  34	        
  35	    def log(self, level, message):
  36	        """Helper function to log messages with the appropriate level."""
  37	        if self.logger:
  38	            if level == 'debug':
  39	                self.logger.debug(message)
  40	            elif level == 'info':
  41	                self.logger.info(message)
  42	            elif level == 'warning':
  43	                self.logger.warning(message)
  44	            elif level == 'error':
  45	                self.logger.error(message)
  46	            else:
  47	                self.logger.info(message)
  48	    
  49	    def _ensure_dependencies_installed(self):
  50	        """Ensure that the required dependencies are installed."""
  51	        try:
  52	            # Try to import faster_whisper
  53	            import faster_whisper
  54	            return True
  55	        except ImportError:
  56	            self.log('warning', "faster_whisper not installed. Attempting to install...")
  57	            try:
  58	                import subprocess
  59	                
  60	                # Make sure pip is up to date first
  61	                self.log('info', "Updating pip...")
  62	                subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])
  63	                
  64	                # Make sure wheel is installed first (required for faster-whisper installation)
  65	                self.log('info', "Installing wheel package...")
  66	                subprocess.check_call([sys.executable, "-m", "pip", "install", "wheel"])
  67	                
  68	                # Install CT2 first as required by faster-whisper
  69	                self.log('info', "Installing CTranslate2...")
  70	                subprocess.check_call([sys.executable, "-m", "pip", "install", "ctranslate2>=3.16.0"])
  71	                
  72	                # Install faster-whisper with increased timeout
  73	                self.log('info', "Installing faster-whisper package...")
  74	                subprocess.check_call([sys.executable, "-m", "pip", "install", "--timeout", "180", "faster-whisper>=0.9.0"])
  75	                
  76	                # Verify installation worked
  77	                try:
  78	                    import faster_whisper
  79	                    self.log('info', "faster-whisper installed successfully.")
  80	                    return True
  81	                except ImportError as verify_err:
  82	                    self.log('error', f"Installation appeared to succeed but import still failed: {str(verify_err)}")
  83	                    return False
  84	                    
  85	            except subprocess.CalledProcessError as e:
  86	                self.log('error', f"Failed to install faster-whisper: Command '{e.cmd}' returned error ({e.returncode}): {e.output if hasattr(e, 'output') else 'No output'}")
  87	                return False
  88	            except Exception as e:
  89	                self.log('error', f"Failed to install faster-whisper: {str(e)}")
  90	                return False
  91	    
  92	    def _determine_compute_type(self):
  93	        """Determine the appropriate compute type based on the device."""
  94	        if self.compute_type:
  95	            return self.compute_type
  96	            
  97	        # If compute_type wasn't specified, select based on device
  98	        if self.device == "cpu":
  99	            # CPU always supports float32
 100	            return "float32"
 101	        elif self.device == "cuda":
 102	            # Try to detect if GPU supports float16
 103	            try:
 104	                import torch
 105	                if torch.cuda.is_available():
 106	                    capabilities = torch.cuda.get_device_capability()
 107	                    # NVIDIA GPUs with compute capability 7.0+ support efficient float16
 108	                    if capabilities[0] >= 7:
 109	                        return "float16"
 110	            except:
 111	                pass
 112	            # Default to float32 which is universally supported
 113	            return "float32"
 114	        else:
 115	            # For other devices (like MPS on Mac), use float32
 116	            return "float32"
 117	    
 118	    def _load_model(self):
 119	        """Load the Whisper model."""
 120	        if not self._ensure_dependencies_installed():
 121	            self.log('error', "Failed to ensure local dependencies are installed. Local transcription cannot proceed.")
 122	            return False
 123	        
 124	        try:
 125	            from faster_whisper import WhisperModel
 126	            
 127	            # Determine the best compute type for the current device
 128	            compute_type = self._determine_compute_type()
 129	            self.log('info', f"Loading Whisper model '{self.model_size}' on {self.device} using {compute_type}...")
 130	            
 131	            # Try 3 times with progressively safer options if there are failures
 132	            attempts = 0
 133	            max_attempts = 3
 134	            
 135	            while attempts < max_attempts:
 136	                try:
 137	                    start_time = time.time()
 138	                    
 139	                    self._model = WhisperModel(
 140	                        self.model_size,
 141	                        device=self.device,
 142	                        compute_type=compute_type,
 143	                        download_root=os.path.join(os.path.expanduser("~"), ".cache", "whisper")
 144	                    )
 145	                    
 146	                    elapsed = time.time() - start_time
 147	                    self.log('info', f"Model loaded in {elapsed:.2f} seconds")
 148	                    return True
 149	                    
 150	                except ValueError as e:
 151	                    attempts += 1
 152	                    error_msg = str(e).lower()
 153	                    
 154	                    if "compute type" in error_msg and attempts < max_attempts:
 155	                        # If there's a compute type error, fall back to float32
 156	                        self.log('warning', f"Failed with compute_type={compute_type}: {str(e)}")
 157	                        compute_type = "float32"
 158	                        self.log('info', f"Trying again with compute_type={compute_type}")
 159	                        continue
 160	                    elif attempts < max_attempts:
 161	                        # Try on CPU if device was CUDA
 162	                        if self.device == "cuda":
 163	                            self.log('warning', f"Failed on {self.device}: {str(e)}")
 164	                            self.device = "cpu"
 165	                            compute_type = "float32"
 166	                            self.log('info', f"Falling back to CPU with float32")
 167	                            continue
 168	                    
 169	                    # If all retries fail or it's an unhandled error type
 170	                    raise
 171	                    
 172	                except Exception as e:
 173	                    if attempts < max_attempts:
 174	                        attempts += 1
 175	                        self.log('warning', f"Attempt {attempts} failed: {str(e)}, retrying...")
 176	                        # If device is cuda, try falling back to CPU
 177	                        if self.device == "cuda":
 178	                            self.device = "cpu"
 179	                            compute_type = "float32"
 180	                            self.log('info', "Falling back to CPU for transcription")
 181	                        continue
 182	                    raise
 183	                    
 184	        except Exception as e:
 185	            self.log('error', f"Failed to load Whisper model: {str(e)}")
 186	            import traceback
 187	            self.log('error', traceback.format_exc())
 188	            return False
 189	    
 190	    def transcribe_file(self, audio_path: str, language: Optional[str] = None, 
 191	                       task: str = "transcribe", beam_size: int = 5, 
 192	                       word_timestamps: bool = True) -> Dict[str, Any]:
 193	        """
 194	        Transcribe an audio file using the local Whisper model.
 195	        
 196	        Args:
 197	            audio_path (str): Path to the audio file
 198	            language (str, optional): Language code for transcription
 199	            task (str): Task to perform: transcribe or translate
 200	            beam_size (int): Beam size for decoding
 201	            word_timestamps (bool): Whether to include word-level timestamps
 202	            
 203	        Returns:
 204	            dict: Transcription result with text and segments
 205	        """
 206	        # Now try to load model if needed
 207	        if self._model is None:
 208	            if not self._load_model():
 209	                # If model loading failed (e.g. deps missing and couldn't install, or model file issue)
 210	                return {
 211	                    "error": "Failed to initialize local Whisper model. Dependencies might be missing or model download failed.",
 212	                    "text": ""
 213	                }
 214	        
 215	        try:
 216	            # If we get here, we either have a loaded model or we're about to fail
 217	            if self._model is None: # Should be caught by the block above, but as a safeguard
 218	                return {
 219	                    "error": "No local transcription model available and initialization failed.",
 220	                    "text": ""
 221	                }
 222	                
 223	            start_time = time.time()
 224	            self.log('info', f"Transcribing audio with local model: {audio_path}")
 225	            
 226	            # Configure transcription options
 227	            options = {
 228	                "beam_size": beam_size,
 229	                "word_timestamps": word_timestamps,
 230	                "best_of": beam_size,
 231	                "language": language,
 232	                "task": task,
 233	                "vad_filter": True,
 234	                "vad_parameters": {"threshold": 0.5}
 235	            }
 236	            
 237	            # Remove None values
 238	            options = {k: v for k, v in options.items() if v is not None}
 239	            
 240	            # Perform transcription
 241	            segments, info = self._model.transcribe(audio_path, **options)
 242	            
 243	            # Collect results
 244	            all_segments = []
 245	            full_text = ""
 246	            
 247	            for segment in segments:
 248	                segment_dict = {
 249	                    "start": segment.start,
 250	                    "end": segment.end,
 251	                    "text": segment.text
 252	                }
 253	                
 254	                # Add word-level timestamps if available
 255	                if word_timestamps and segment.words:
 256	                    segment_dict["words"] = [
 257	                        {"word": word.word, "start": word.start, "end": word.end, "probability": word.probability}
 258	                        for word in segment.words
 259	                    ]
 260	                
 261	                all_segments.append(segment_dict)
 262	                full_text += segment.text + " "
 263	            
 264	            elapsed = time.time() - start_time
 265	            self.log('info', f"Transcription completed in {elapsed:.2f} seconds")
 266	            
 267	            result = {
 268	                "text": full_text.strip(),
 269	                "segments": all_segments,
 270	                "language": info.language,
 271	                "duration": elapsed
 272	            }
 273	            
 274	            return result
 275	        except Exception as e:
 276	            self.log('error', f"Transcription error: {str(e)}")
 277	            import traceback
 278	            self.log('error', traceback.format_exc())
 279	            return {"error": str(e), "text": ""}
 280	    
 281	    def transcribe_audio_segments(self, audio_segments: List[str], language: Optional[str] = None) -> List[Dict]:
 282	        """
 283	        Transcribe multiple audio segments and return results for each.
 284	        
 285	        Args:
 286	            audio_segments (List[str]): List of paths to audio files
 287	            language (str, optional): Language code for transcription
 288	        
 289	        Returns:
 290	            List[Dict]: List of transcription results for each segment
 291	        """
 292	        results = []
 293	        
 294	        for i, segment_path in enumerate(audio_segments):
 295	            self.log('info', f"Processing segment {i+1}/{len(audio_segments)}: {os.path.basename(segment_path)}")
 296	            try:
 297	                result = self.transcribe_file(segment_path, language)
 298	                results.append({
 299	                    "chunk": i+1,
 300	                    "path": segment_path,
 301	                    "result": result
 302	                })
 303	            except Exception as e:
 304	                self.log('error', f"Error transcribing segment {i+1}: {str(e)}")
 305	                results.append({
 306	                    "chunk": i+1,
 307	                    "path": segment_path,
 308	                    "result": {"text": f"[Error: {str(e)}]", "error": str(e)}
 309	                })
 310	        
 311	        return results
 312	
 313	# Simple test if run directly
 314	if __name__ == "__main__":
 315	    import argparse
 316	    
 317	    # Set up logging
 318	    logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')
 319	    
 320	    # Parse command line arguments
 321	    parser = argparse.ArgumentParser(description="Transcribe audio with local Whisper model")
 322	    parser.add_argument('audio_path', help='Path to audio file')
 323	    parser.add_argument('--model', default='medium', help='Whisper model size (tiny, base, small, medium, large)')
 324	    parser.add_argument('--device', default='cpu', help='Device to use for inference (cpu, cuda)')
 325	    parser.add_argument('--language', help='Language code')
 326	    parser.add_argument('--compute_type', help='Compute type (float32, float16, int8) - if not specified, will automatically select')
 327	    
 328	    args = parser.parse_args()
 329	    
 330	    # Create transcriber
 331	    transcriber = LocalWhisperTranscriber(
 332	        model_size=args.model,
 333	        device=args.device,
 334	        compute_type=args.compute_type
 335	    )
 336	    
 337	    # Transcribe audio
 338	    result = transcriber.transcribe_file(args.audio_path, args.language)
 339	    
 340	    # Print results
 341	    print(f"\nTranscription Result:")
 342	    print(f"-------------------")
 343	    print(result['text'])
 344	    print(f"\nDetected language: {result.get('language', 'unknown')}")
 345	    print(f"Duration: {result.get('duration', 0):.2f} seconds")
 346	    print(f"Segments: {len(result.get('segments', []))}")

--- File: py/logger.py ---
   1	import os
   2	import logging
   3	from logging.handlers import RotatingFileHandler
   4	
   5	def setup_logger(name, log_file, level=logging.INFO, max_size_mb=5, backup_count=3):
   6	    """
   7	    Set up a logger with file and console handlers.
   8	    
   9	    Args:
  10	        name: Logger name
  11	        log_file: Path to log file
  12	        level: Logging level
  13	        max_size_mb: Maximum size of log file in MB
  14	        backup_count: Number of backup files to keep
  15	        
  16	    Returns:
  17	        Logger instance
  18	    """
  19	    # Create logger
  20	    logger = logging.getLogger(name)
  21	    logger.setLevel(level)
  22	    
  23	    # Create formatter
  24	    formatter = logging.Formatter('%(asctime)s [%(levelname)s] %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
  25	    
  26	    # Create console handler
  27	    console_handler = logging.StreamHandler()
  28	    console_handler.setFormatter(formatter)
  29	    logger.addHandler(console_handler)
  30	    
  31	    # Create file handler
  32	    file_handler = RotatingFileHandler(
  33	        log_file,
  34	        maxBytes=max_size_mb * 1024 * 1024,
  35	        backupCount=backup_count
  36	    )
  37	    file_handler.setFormatter(formatter)
  38	    logger.addHandler(file_handler)
  39	    
  40	    return logger
  41	
  42	def get_logger(name=None):
  43	    """
  44	    Get an existing logger by name.
  45	    
  46	    Args:
  47	        name: Logger name (defaults to root logger)
  48	        
  49	    Returns:
  50	        Logger instance
  51	    """
  52	    return logging.getLogger(name)

--- File: py/secure_browser.py ---
   1	"""
   2	Enhanced file browser security utilities.
   3	Provides functions for secure file system operations and access validation.
   4	"""
   5	import os
   6	import re
   7	import logging
   8	from typing import List, Tuple, Optional, Set
   9	
  10	logger = logging.getLogger(__name__)
  11	
  12	class SecureFileBrowser:
  13	    """A secure file browser utility that prevents unauthorized directory access."""
  14	    
  15	    def __init__(
  16	        self, 
  17	        allowed_paths: List[str], 
  18	        denied_patterns: Optional[List[str]] = None,
  19	        enable_parent_navigation: bool = True,
  20	        max_depth: int = 10,
  21	        hide_dot_files: bool = True,
  22	        restrict_to_media_dirs: bool = False
  23	    ):
  24	        """
  25	        Initialize the secure file browser.
  26	        
  27	        Args:
  28	            allowed_paths: List of allowed base paths
  29	            denied_patterns: Optional list of glob patterns or paths that should be denied
  30	            enable_parent_navigation: Whether to allow "up one level" navigation
  31	            max_depth: Maximum directory depth to prevent deep traversal
  32	            hide_dot_files: Whether to hide files and directories that start with a dot
  33	            restrict_to_media_dirs: Whether to only show directories likely to contain media
  34	        """
  35	        self.allowed_paths = [os.path.abspath(p) for p in allowed_paths if p.strip()]
  36	        self.denied_patterns = denied_patterns or []
  37	        self.enable_parent_navigation = enable_parent_navigation
  38	        self.max_depth = max_depth
  39	        self.hide_dot_files = hide_dot_files
  40	        self.restrict_to_media_dirs = restrict_to_media_dirs
  41	        
  42	        # Compile denied patterns into regexes for faster matching
  43	        self._denied_regexes = []
  44	        for pattern in self.denied_patterns:
  45	            try:
  46	                # Convert glob patterns to regex
  47	                pattern = pattern.replace('.', r'\.')  # Escape dots
  48	                pattern = pattern.replace('*', r'.*')  # Convert * to regex equivalent
  49	                self._denied_regexes.append(re.compile(pattern))
  50	            except Exception as e:
  51	                logger.warning(f"Invalid denied pattern '{pattern}': {str(e)}")
  52	        
  53	        # Set of common media file extensions
  54	        self.media_extensions = {
  55	            '.mp4', '.mkv', '.avi', '.mov', '.wmv', '.flv', '.webm', '.m4v', '.mpg', '.mpeg', 
  56	            '.ts', '.mts', '.m2ts', '.vob', '.3gp', '.ogv', '.divx', '.xvid'
  57	        }
  58	    
  59	    def is_path_allowed(self, path: str) -> bool:
  60	        """
  61	        Check if a path is allowed based on the configured allowed paths.
  62	        
  63	        Args:
  64	            path: The path to check
  65	            
  66	        Returns:
  67	            bool: True if the path is allowed, False otherwise
  68	        """
  69	        try:
  70	            if not path or not self.allowed_paths:
  71	                return False
  72	            
  73	            # Normalize the path to prevent directory traversal
  74	            abs_path = os.path.abspath(os.path.normpath(path))
  75	            
  76	            # Check path depth to prevent excessive nesting
  77	            if self._get_path_depth(abs_path) > self.max_depth:
  78	                logger.warning(f"Path exceeds maximum depth: {abs_path}")
  79	                return False
  80	            
  81	            # Check if path is within any allowed base path
  82	            is_allowed = False
  83	            for allowed_base in self.allowed_paths:
  84	                try:
  85	                    # Using commonpath is safer than just string operations
  86	                    if os.path.commonpath([abs_path, allowed_base]) == allowed_base:
  87	                        is_allowed = True
  88	                        break
  89	                except ValueError:
  90	                    # This happens when paths are on different drives in Windows
  91	                    continue
  92	            
  93	            if not is_allowed:
  94	                logger.warning(f"Path not within allowed bases: {abs_path}")
  95	                return False
  96	            
  97	            # Check against denied patterns
  98	            for regex in self._denied_regexes:
  99	                if regex.search(abs_path):
 100	                    logger.warning(f"Path matches denied pattern: {abs_path}")
 101	                    return False
 102	            
 103	            return True
 104	        except Exception as e:
 105	            logger.error(f"Error validating path {path}: {str(e)}")
 106	            return False
 107	    
 108	    def get_safe_parent_path(self, path: str) -> Optional[str]:
 109	        """
 110	        Get the parent path if it's allowed to navigate up.
 111	        
 112	        Args:
 113	            path: The current path
 114	            
 115	        Returns:
 116	            Optional[str]: The parent path if allowed, None otherwise
 117	        """
 118	        if not self.enable_parent_navigation:
 119	            return None
 120	        
 121	        parent_path = os.path.dirname(path)
 122	        
 123	        # If we're already at the root of an allowed path, don't go higher
 124	        if parent_path == path or not self.is_path_allowed(parent_path):
 125	            return None
 126	        
 127	        return parent_path
 128	    
 129	    def filter_items(self, path: str, items: List[str]) -> List[str]:
 130	        """
 131	        Filter directory items based on security rules.
 132	        
 133	        Args:
 134	            path: The base path
 135	            items: List of filenames or directory names
 136	            
 137	        Returns:
 138	            List[str]: Filtered list of items
 139	        """
 140	        filtered = []
 141	        for item in items:
 142	            # Skip hidden files/dirs if configured
 143	            if self.hide_dot_files and item.startswith('.'):
 144	                continue
 145	                
 146	            full_path = os.path.join(path, item)
 147	            
 148	            # Always check if the full path is allowed
 149	            if not self.is_path_allowed(full_path):
 150	                continue
 151	                
 152	            # For directories, additional checks
 153	            if os.path.isdir(full_path):
 154	                # No special restrictions for directories
 155	                filtered.append(item)
 156	            else:
 157	                # For files, check media extensions if restrict_to_media_dirs is enabled
 158	                _, ext = os.path.splitext(item.lower())
 159	                if not self.restrict_to_media_dirs or ext in self.media_extensions:
 160	                    filtered.append(item)
 161	        
 162	        return filtered
 163	    
 164	    def _get_path_depth(self, path: str) -> int:
 165	        """
 166	        Calculate the depth of a path.
 167	        
 168	        Args:
 169	            path: The path to check
 170	            
 171	        Returns:
 172	            int: The depth of the path
 173	        """
 174	        norm_path = os.path.normpath(path)
 175	        return len(norm_path.split(os.sep))


--- File: py/subtitle_processor.py ---
   1	import os
   2	import re
   3	import time
   4	import json
   5	import logging
   6	import requests
   7	from typing import Dict, List, Optional, Tuple, Any
   8	import sys
   9	import importlib.util
  10	
  11	# Import live_translation_viewer if available
  12	try:
  13	    # First, try to import directly (if module is in path)
  14	    try:
  15	        from live_translation_viewer import display_translation_status
  16	    except ImportError:
  17	        # If that fails, try to import from parent directory
  18	        spec = importlib.util.spec_from_file_location(
  19	            "live_translation_viewer", 
  20	            os.path.join(os.path.dirname(os.path.dirname(__file__)), "live_translation_viewer.py")
  21	        )
  22	        if spec and spec.loader:
  23	            live_translation_viewer = importlib.util.module_from_spec(spec)
  24	            spec.loader.exec_module(live_translation_viewer)
  25	            display_translation_status = live_translation_viewer.display_translation_status
  26	        else:
  27	            # Fallback display function if module can't be imported
  28	            def display_translation_status(line_number, original, translations, current_result=None, first_pass=None, critic=None, final=None):
  29	                print(f"Line {line_number}: \"{original}\" -> \"{final or current_result or ''}\"")
  30	except Exception as e:
  31	    # Fallback display function if any error occurs
  32	    def display_translation_status(line_number, original, translations, current_result=None, first_pass=None, critic=None, final=None):
  33	        print(f"Line {line_number}: \"{original}\" -> \"{final or current_result or ''}\"")
  34	
  35	# Language mapping dictionary
  36	LANGUAGE_MAPPING = {
  37	    "english": "en",
  38	    "danish": "da",
  39	    "spanish": "es",
  40	    "german": "de",
  41	    "french": "fr",
  42	    "italian": "it",
  43	    "portuguese": "pt",
  44	    "dutch": "nl",
  45	    "swedish": "sv",
  46	    "norwegian": "no",
  47	    "finnish": "fi",
  48	    "polish": "pl",
  49	    "russian": "ru",
  50	    "japanese": "ja",
  51	    "chinese": "zh",
  52	    "korean": "ko",
  53	    "arabic": "ar",
  54	    "hindi": "hi",
  55	    "turkish": "tr",
  56	}
  57	
  58	class SubtitleProcessor:
  59	    """
  60	    Class responsible for processing and translating subtitle files.
  61	    """
  62	    
  63	    def __init__(self, logger=None):
  64	        """Initialize the subtitle processor with optional custom logger."""
  65	        self.logger = logger or logging.getLogger(__name__)
  66	        self.config = None
  67	        
  68	    def set_config(self, config):
  69	        """Set the configuration object for this processor."""
  70	        self.config = config
  71	        
  72	    def get_iso_code(self, language_name: str) -> str:
  73	        """Convert a language name to its ISO code."""
  74	        language_name = language_name.lower().strip('"\' ')
  75	        return LANGUAGE_MAPPING.get(language_name, language_name)
  76	    
  77	    def detect_and_extract_embedded_subtitles(self, video_file_path: str, output_dir: str, 
  78	                                             source_lang_code: str = None) -> List[str]:
  79	        """
  80	        Detect and extract embedded subtitles from a video file.
  81	        
  82	        Args:
  83	            video_file_path: Path to the video file
  84	            output_dir: Directory to save extracted subtitle files
  85	            source_lang_code: Source language code to filter subtitles (optional)
  86	            
  87	        Returns:
  88	            List of paths to extracted subtitle files
  89	        """
  90	        import subprocess
  91	        import shlex
  92	        import re
  93	        
  94	        self.logger.info(f"Detecting embedded subtitles in: {os.path.basename(video_file_path)}")
  95	        self.logger.info(f"Source language code to match: '{source_lang_code}'")
  96	        
  97	        # Ensure output directory exists
  98	        os.makedirs(output_dir, exist_ok=True)
  99	        
 100	        # Get setting for extraction mode from config if provided, otherwise default to False
 101	        extract_all_for_debug = False
 102	        if self.config:
 103	            extract_all_for_debug = self.config.getboolean('extraction', 'extract_all_subtitles', fallback=False)
 104	        if self.config:
 105	            extract_all_for_debug = self.config.getboolean('extraction', 'extract_all_subtitles', fallback=False)
 106	        
 107	        # Use a more detailed ffprobe command to get complete information
 108	        try:
 109	            # Get a detailed dump of the video file structure for debugging
 110	            ffprobe_debug_cmd = f"ffprobe -v error -show_format -show_streams {shlex.quote(video_file_path)}"
 111	            self.logger.debug(f"Running debug ffprobe command: {ffprobe_debug_cmd}")
 112	            
 113	            try:
 114	                debug_output = subprocess.check_output(
 115	                    ffprobe_debug_cmd, 
 116	                    shell=True, 
 117	                    stderr=subprocess.STDOUT
 118	                ).decode('utf-8')
 119	                
 120	                # Log full file structure for debugging
 121	                self.logger.debug(f"Full video file structure:\n{debug_output}")
 122	            except Exception as e:
 123	                self.logger.warning(f"Debug probe failed: {e}")
 124	            
 125	            # Now run the actual subtitle detection command
 126	            ffprobe_all_cmd = f"ffprobe -v quiet -print_format json -show_streams -select_streams s {shlex.quote(video_file_path)}"
 127	            self.logger.debug(f"Running ffprobe command: {ffprobe_all_cmd}")
 128	            
 129	            ffprobe_all_output = subprocess.check_output(
 130	                ffprobe_all_cmd, 
 131	                shell=True, 
 132	                stderr=subprocess.STDOUT
 133	            ).decode('utf-8')
 134	            
 135	            # Log raw ffprobe output for debugging
 136	            self.logger.debug(f"Raw ffprobe output: {ffprobe_all_output}")
 137	            
 138	            # Parse the output to get all subtitle streams
 139	            all_subtitles_info = json.loads(ffprobe_all_output)
 140	            
 141	            # Log total number of subtitle streams found
 142	            if 'streams' in all_subtitles_info and all_subtitles_info['streams']:
 143	                stream_count = len(all_subtitles_info['streams'])
 144	                self.logger.info(f"Found {stream_count} subtitle streams in the video file")
 145	                
 146	                # Log detail about each stream for diagnostic purposes
 147	                for idx, stream in enumerate(all_subtitles_info['streams']):
 148	                    stream_idx = stream.get('index')
 149	                    stream_lang = stream.get('tags', {}).get('language', 'und')
 150	                    codec_name = stream.get('codec_name', 'unknown')
 151	                    title = stream.get('tags', {}).get('title', 'untitled')
 152	                    
 153	                    # ENHANCEMENT: Log complete stream info as JSON for debugging
 154	                    self.logger.info(f"Stream {stream_idx} details: lang={stream_lang}, codec={codec_name}, title={title}")
 155	                    self.logger.debug(f"FULL STREAM DATA: {json.dumps(stream, indent=2)}")
 156	                
 157	                # If we found streams but no source language provided, or it's empty, extract all
 158	                extract_all = source_lang_code is None or source_lang_code == "" or extract_all_for_debug
 159	                
 160	                # Process each subtitle stream
 161	                extracted_files = []
 162	                
 163	                for stream in all_subtitles_info['streams']:
 164	                    stream_idx = stream.get('index')
 165	                    stream_lang = stream.get('tags', {}).get('language', 'und')
 166	                    codec_name = stream.get('codec_name', 'unknown')
 167	                    codec_type = stream.get('codec_type')
 168	                    title = stream.get('tags', {}).get('title', 'No title')
 169	                    
 170	                    # Skip if not a subtitle stream
 171	                    if codec_type != 'subtitle':
 172	                        self.logger.debug(f"Stream {stream_idx} is not a subtitle stream, type: {codec_type}")
 173	                        continue
 174	                    
 175	                    # ENHANCEMENT: For debugging, print whether this stream would be skipped normally
 176	                    if not extract_all and stream_lang != source_lang_code and stream_lang != 'und':
 177	                        self.logger.info(f"Stream {stream_idx} language '{stream_lang}' doesn't match source '{source_lang_code}', but extracting anyway for debug")
 178	                    
 179	                    # Format output filename
 180	                    video_basename = os.path.basename(video_file_path)
 181	                    video_name = os.path.splitext(video_basename)[0]
 182	                    title_suffix = f".{re.sub(r'[^\w\-\.]', '_', title)}" if title and title != "No title" else ""
 183	                    out_filename = f"{video_name}.{stream_lang}.stream{stream_idx}{title_suffix}.srt"
 184	                    out_path = os.path.join(output_dir, out_filename)
 185	                    
 186	                    # Choose extraction method based on codec
 187	                    extraction_methods = []
 188	                    
 189	                    # Method 1: Standard extraction (works for most text-based formats)
 190	                    extraction_methods.append({
 191	                        'name': 'standard',
 192	                        'cmd': f"ffmpeg -i {shlex.quote(video_file_path)} -map 0:{stream_idx} -c:s srt {shlex.quote(out_path)} -y"
 193	                    })
 194	                    
 195	                    # Method 2: Extract with format specified (sometimes helps)
 196	                    extraction_methods.append({
 197	                        'name': 'format_specified',
 198	                        'cmd': f"ffmpeg -i {shlex.quote(video_file_path)} -map 0:{stream_idx} -f srt {shlex.quote(out_path)} -y"
 199	                    })
 200	                    
 201	                    # Method 3: Extract to ASS then convert (for some complex formats)
 202	                    temp_ass_path = out_path.replace('.srt', '.ass')
 203	                    extraction_methods.append({
 204	                        'name': 'ass_conversion',
 205	                        'cmd': f"ffmpeg -i {shlex.quote(video_file_path)} -map 0:{stream_idx} {shlex.quote(temp_ass_path)} -y && ffmpeg -i {shlex.quote(temp_ass_path)} {shlex.quote(out_path)} -y && rm {shlex.quote(temp_ass_path)}"
 206	                    })
 207	                    
 208	                    # Try each method until one works
 209	                    success = False
 210	                    for method in extraction_methods:
 211	                        if success:
 212	                            break
 213	                            
 214	                        self.logger.info(f"Trying extraction method '{method['name']}' for stream {stream_idx} ({stream_lang}/{codec_name})")
 215	                        self.logger.debug(f"Command: {method['cmd']}")
 216	                        
 217	                        try:
 218	                            # Run the extraction command with increased verbosity
 219	                            process = subprocess.run(
 220	                                method['cmd'],
 221	                                shell=True,
 222	                                check=False,
 223	                                stdout=subprocess.PIPE,
 224	                                stderr=subprocess.PIPE,
 225	                                timeout=60
 226	                            )
 227	                            
 228	                            # Log complete output for debugging
 229	                            stdout = process.stdout.decode('utf-8', errors='ignore')
 230	                            stderr = process.stderr.decode('utf-8', errors='ignore')
 231	                            
 232	                            self.logger.debug(f"STDOUT: {stdout}")
 233	                            self.logger.debug(f"STDERR: {stderr}")
 234	                            
 235	                            if process.returncode != 0:
 236	                                self.logger.warning(f"Method '{method['name']}' failed with return code {process.returncode}")
 237	                                continue
 238	                            
 239	                            # Check if file was created and has content
 240	                            if os.path.exists(out_path) and os.path.getsize(out_path) > 0:
 241	                                # Validate SRT file by checking for timestamps
 242	                                with open(out_path, 'r', encoding='utf-8', errors='ignore') as f:
 243	                                    content = f.read()
 244	                                    # Log the first few lines of content for debugging
 245	                                    self.logger.debug(f"First 200 chars of extracted content: {content[:200]}")
 246	                                    
 247	                                    # Basic check for SRT format: contains timestamps like 00:00:00,000 --> 00:00:00,000
 248	                                    if re.search(r'\d{2}:\d{2}:\d{2},\d{3} --> \d{2}:\d{2}:\d{2},\d{3}', content):
 249	                                        self.logger.info(f"Successfully extracted subtitles to {out_filename} using method '{method['name']}'")
 250	                                        extracted_files.append(out_path)
 251	                                        success = True
 252	                                    else:
 253	                                        self.logger.warning(f"Extracted file doesn't have valid SRT format. Content starts with: {content[:100]}")
 254	                                        # Clean up invalid file
 255	                                        os.remove(out_path)
 256	                            else:
 257	                                if os.path.exists(out_path):
 258	                                    self.logger.warning(f"Extraction produced empty file ({os.path.getsize(out_path)} bytes)")
 259	                                    os.remove(out_path)
 260	                                else:
 261	                                    self.logger.warning(f"Extraction did not produce a file at {out_path}")
 262	                                
 263	                        except subprocess.TimeoutExpired:
 264	                            self.logger.error(f"Method '{method['name']}' timed out")
 265	                            continue
 266	                        except Exception as e:
 267	                            self.logger.error(f"Method '{method['name']}' failed with error: {e}")
 268	                            continue
 269	                    
 270	                    if not success:
 271	                        self.logger.warning(f"All extraction methods failed for stream {stream_idx}")
 272	                
 273	                # If we extracted some files, return them
 274	                if extracted_files:
 275	                    return extracted_files
 276	                
 277	                # If we get here, no streams were successfully extracted
 278	                # Try a simplified method as last resort
 279	                self.logger.info("Trying simplified extraction approach")
 280	                simplified_extract_cmd = f"ffmpeg -i {shlex.quote(video_file_path)} -map 0:s -c:s srt {shlex.quote(os.path.join(output_dir, os.path.splitext(os.path.basename(video_file_path))[0]))}_%d.srt -y"
 281	                self.logger.debug(f"Simplified command: {simplified_extract_cmd}")
 282	                
 283	                try:
 284	                    process = subprocess.run(
 285	                        simplified_extract_cmd,
 286	                        shell=True,
 287	                        check=False,
 288	                        stdout=subprocess.PIPE,
 289	                        stderr=subprocess.PIPE,
 290	                        timeout=120
 291	                    )
 292	                    
 293	                    # Log complete output
 294	                    stdout = process.stdout.decode('utf-8', errors='ignore')
 295	                    stderr = process.stderr.decode('utf-8', errors='ignore')
 296	                    self.logger.debug(f"Simplified STDOUT: {stdout}")
 297	                    self.logger.debug(f"Simplified STDERR: {stderr}")
 298	                    
 299	                    # Check for created files
 300	                    import glob
 301	                    pattern = os.path.join(output_dir, f"{os.path.splitext(os.path.basename(video_file_path))[0]}_*.srt")
 302	                    extracted_files = []
 303	                    
 304	                    for file_path in glob.glob(pattern):
 305	                        if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
 306	                            # Validate file
 307	                            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
 308	                                content = f.read()
 309	                                if re.search(r'\d{2}:\d{2}:\d{2},\d{3} --> \d{2}:\d{2}:\d{2},\d{3}', content):
 310	                                    self.logger.info(f"Simplified extraction success: {os.path.basename(file_path)}")
 311	                                    extracted_files.append(file_path)
 312	                                else:
 313	                                    self.logger.warning(f"Simplified extraction produced invalid file: {os.path.basename(file_path)}")
 314	                                    os.remove(file_path)
 315	                    
 316	                    if extracted_files:
 317	                        return extracted_files
 318	                    
 319	                except Exception as e:
 320	                    self.logger.error(f"Simplified extraction failed: {e}")
 321	                
 322	                # Last resort: Try direct copy of subtitle stream
 323	                self.logger.info("Trying direct stream copy as last resort")
 324	                for stream in all_subtitles_info['streams']:
 325	                    stream_idx = stream.get('index')
 326	                    if stream.get('codec_type') == 'subtitle':
 327	                        direct_copy_cmd = f"ffmpeg -v verbose -i {shlex.quote(video_file_path)} -map 0:{stream_idx} -c copy {shlex.quote(os.path.join(output_dir, f'direct_copy_{stream_idx}.{stream.get('codec_name')}'))} -y"
 328	                        self.logger.debug(f"Direct copy command: {direct_copy_cmd}")
 329	                        
 330	                        try:
 331	                            process = subprocess.run(
 332	                                direct_copy_cmd,
 333	                                shell=True,
 334	                                check=False,
 335	                                stdout=subprocess.PIPE,
 336	                                stderr=subprocess.PIPE,
 337	                                timeout=30
 338	                            )
 339	                            
 340	                            # Log output
 341	                            stderr = process.stderr.decode('utf-8', errors='ignore')
 342	                            self.logger.debug(f"Direct copy STDERR: {stderr}")
 343	                        except Exception as e:
 344	                            self.logger.error(f"Direct copy failed: {e}")
 345	                
 346	                self.logger.warning(f"All extraction methods failed for all streams. No subtitles extracted.")
 347	                self.logger.info(f"No matching subtitles found in {os.path.basename(video_file_path)}")
 348	                return []
 349	            else:
 350	                self.logger.info(f"No subtitle streams found in {os.path.basename(video_file_path)}")
 351	                return []
 352	        except Exception as e:
 353	            self.logger.error(f"Error detecting subtitle streams: {e}")
 354	            import traceback
 355	            self.logger.error(f"Stack trace: {traceback.format_exc()}")
 356	            return []
 357	    
 358	    def is_video_file(self, file_path: str) -> bool:
 359	        """
 360	        Check if a file is a video file based on its extension.
 361	        
 362	        Args:
 363	            file_path: Path to the file
 364	            
 365	        Returns:
 366	            True if it's a video file, False otherwise
 367	        """
 368	        video_extensions = {
 369	            '.mp4', '.mkv', '.avi', '.mov', '.wmv', '.flv', '.webm', 
 370	            '.m4v', '.mpg', '.mpeg', '.3gp', '.ts', '.mts', '.m2ts'
 371	        }
 372	        
 373	        _, ext = os.path.splitext(file_path.lower())
 374	        return ext in video_extensions
 375	
 376	    def call_translation_service_with_retry(self, translate_func, *args, max_retries=3, 
 377	                                           base_delay=2, service_name=None, **kwargs) -> str:
 378	        """
 379	        Generic retry wrapper for translation service calls with exponential backoff.
 380	        
 381	        Args:
 382	            translate_func: The translation function to call
 383	            max_retries: Maximum number of retry attempts
 384	            base_delay: Initial delay in seconds (will be multiplied exponentially)
 385	            service_name: Optional name of the service for better logging
 386	            *args, **kwargs: Arguments to pass to the translation function
 387	        
 388	        Returns:
 389	            The translation result or empty string if all retries fail
 390	        """
 391	        import random
 392	        import time
 393	        
 394	        service_label = f"[{service_name}]" if service_name else ""
 395	        
 396	        for attempt in range(max_retries + 1):
 397	            try:
 398	                result = translate_func(*args, **kwargs)
 399	                if result:  # If we got a valid result, return it
 400	                    return result
 401	                
 402	                # If the result is empty but no exception occurred, we might still want to retry
 403	                if attempt < max_retries:
 404	                    self.logger.warning(f"{service_label} Empty result from translation service. Retrying ({attempt + 1}/{max_retries})...")
 405	                else:
 406	                    self.logger.warning(f"{service_label} Empty result from translation service after {max_retries} retries.")
 407	                    return ""
 408	                    
 409	            except Exception as e:
 410	                if "429" in str(e) or "Too Many Requests" in str(e):
 411	                    if attempt < max_retries:
 412	                        # Calculate delay with exponential backoff and jitter
 413	                        delay = base_delay * (2 ** attempt) + random.uniform(0, 1)
 414	                        self.logger.warning(f"{service_label} Rate limit exceeded. Retrying in {delay:.2f} seconds ({attempt + 1}/{max_retries})...")
 415	                        time.sleep(delay)
 416	                    else:
 417	                        self.logger.error(f"{service_label} Rate limit exceeded after {max_retries} retries.")
 418	                        return ""
 419	                else:
 420	                    # For other types of errors, we might still want to retry
 421	                    if attempt < max_retries:
 422	                        delay = base_delay * (2 ** attempt) + random.uniform(0, 1)
 423	                        self.logger.warning(f"{service_label} Translation error: {e}. Retrying in {delay:.2f} seconds ({attempt + 1}/{max_retries})...")
 424	                        time.sleep(delay)
 425	                    else:
 426	                        self.logger.error(f"{service_label} Translation failed after {max_retries} retries: {e}")
 427	                        return ""
 428	        
 429	        return ""
 430	    
 431	    def call_deepl(self, api_key: str, api_url: str, text: str, source_lang: str, target_lang: str) -> str:
 432	        """Call DeepL translation API."""
 433	        source_iso = self.get_iso_code(source_lang)
 434	        target_iso = self.get_iso_code(target_lang)
 435	        params = {
 436	            "auth_key": api_key,
 437	            "text": text,
 438	            "source_lang": source_iso.upper(),
 439	            "target_lang": target_iso.upper(),
 440	        }
 441	        self.logger.debug(f"Calling DeepL: {api_url} / {source_iso} -> {target_iso}")
 442	        try:
 443	            response = requests.post(api_url, params=params, timeout=30)
 444	            response.raise_for_status()
 445	            result = response.json()
 446	            
 447	            if "translations" in result and len(result["translations"]) > 0:
 448	                return result["translations"][0]["text"]
 449	            return ""
 450	        except requests.exceptions.Timeout:
 451	            self.logger.error("DeepL translation timed out")
 452	            return ""
 453	        except requests.exceptions.RequestException as e:
 454	            self.logger.error(f"DeepL translation error: {e}")
 455	            return ""
 456	        except json.JSONDecodeError as e:
 457	            self.logger.error(f"DeepL invalid JSON response: {e}")
 458	            return ""
 459	    
 460	    def call_google_translate(self, text: str, source_lang: str, target_lang: str) -> str:
 461	        """
 462	        Uses the Google Translate API (free web API approach) for translation.
 463	        """
 464	        import urllib.parse
 465	        source_iso = self.get_iso_code(source_lang)
 466	        target_iso = self.get_iso_code(target_lang)
 467	        
 468	        self.logger.debug(f"Calling Google Translate: {source_iso} -> {target_iso}")
 469	        
 470	        base_url = "https://translate.googleapis.com/translate_a/single"
 471	        
 472	        params = {
 473	            "client": "gtx",
 474	            "sl": source_iso,
 475	            "tl": target_iso,
 476	            "dt": "t",
 477	            "q": text
 478	        }
 479	        
 480	        url = f"{base_url}?{urllib.parse.urlencode(params)}"
 481	        
 482	        try:
 483	            response = requests.get(url, timeout=10)
 484	            response.raise_for_status()
 485	            result = response.json()
 486	            
 487	            # Extract translation from Google's response
 488	            translation = ""
 489	            if result and isinstance(result, list) and len(result) > 0:
 490	                # Concatenate all translated parts
 491	                for part in result[0]:
 492	                    if part and isinstance(part, list) and len(part) > 0:
 493	                        translation += part[0]
 494	            
 495	            return translation
 496	        except requests.exceptions.RequestException as e:
 497	            self.logger.error(f"Google translation error: {e}")
 498	            return ""
 499	        except (ValueError, KeyError, IndexError) as e:
 500	            self.logger.error(f"Google translation parsing error: {e}")
 501	            return ""
 502	    
 503	    def call_openai(self, api_key: str, api_base_url: str, model: str, prompt: str, temperature: float = 0.2) -> str:
 504	        """Call OpenAI API for text generation."""
 505	        url = f"{api_base_url.rstrip('/')}/chat/completions"
 506	        self.logger.debug(f"Calling OpenAI: POST {url} | Model: {model} | Temperature: {temperature}")
 507	        headers = {"Content-Type": "application/json", "Authorization": f"Bearer {api_key}"}
 508	        data = {
 509	            "model": model,
 510	            "messages": [{"role": "user", "content": prompt}],
 511	            "temperature": temperature
 512	        }
 513	
 514	        try:
 515	            response = requests.post(url, headers=headers, json=data, timeout=60)
 516	            response.raise_for_status()
 517	            result = response.json()
 518	            
 519	            if "choices" in result and len(result["choices"]) > 0:
 520	                return result["choices"][0]["message"]["content"].strip()
 521	            return ""
 522	        except requests.exceptions.Timeout:
 523	            self.logger.error("OpenAI request timed out")
 524	            return ""
 525	        except requests.exceptions.RequestException as e:
 526	            self.logger.error(f"OpenAI API error: {e}")
 527	            return ""
 528	        except json.JSONDecodeError as e:
 529	            self.logger.error(f"OpenAI invalid JSON response: {e}")
 530	            return ""
 531	    
 532	    def call_ollama(self, server_url: str, endpoint_path: str, model: str, prompt: str, temperature: float = 0.2, cfg=None) -> str:
 533	        """Call Ollama API for text generation."""
 534	        url = f"{server_url.rstrip('/')}/{endpoint_path.lstrip('/')}"
 535	
 536	        # Start payload with mandatory fields
 537	        payload = {
 538	            "model": model,
 539	            "prompt": prompt,
 540	            "stream": False,
 541	            "options": {} # Initialize options dictionary
 542	        }
 543	
 544	        # Set default temperature initially
 545	        current_temperature = temperature
 546	
 547	        # Load options from config if available
 548	        if cfg is not None and cfg.has_section("ollama"):
 549	            # Override temperature if specified in config
 550	            current_temperature = cfg.getfloat("ollama", "temperature", fallback=temperature)
 551	
 552	            # Initialize options dict with the determined temperature
 553	            payload["options"]["temperature"] = current_temperature
 554	
 555	            # Add other parameters ONLY if they exist and have valid values in the config
 556	            optional_params = {
 557	                "num_gpu": "getint",
 558	                "num_thread": "getint",
 559	                "num_ctx": "getint",
 560	                "use_mmap": "getboolean",
 561	                "use_mlock": "getboolean"
 562	            }
 563	
 564	            for param, getter_method in optional_params.items():
 565	                if cfg.has_option("ollama", param):
 566	                    try:
 567	                        # Check if the value is actually set and not commented out
 568	                        value = cfg.get("ollama", param, fallback=None)
 569	                        if value is not None and str(value).strip() != "":
 570	                            # Use the appropriate getter method (getint or getboolean)
 571	                            getter = getattr(cfg, getter_method)
 572	                            value = getter("ollama", param)
 573	                            payload["options"][param] = value
 574	                            self.logger.debug(f"Adding Ollama option from config: {param} = {value}")
 575	                    except ValueError:
 576	                        self.logger.warning(f"Invalid value for '{param}' in config. Ignoring.")
 577	                    except Exception as e:
 578	                         self.logger.warning(f"Could not read Ollama option '{param}' from config: {e}. Ignoring.")
 579	        else:
 580	             # If no config or no [ollama] section, just set the default temperature
 581	             payload["options"]["temperature"] = current_temperature
 582	
 583	
 584	        # Log the final options being sent
 585	        options_list = ', '.join([f"{k}: {v}" for k, v in payload["options"].items()])
 586	        self.logger.debug(f"Calling Ollama: POST {url} | Model: {model} | Options: {options_list}")
 587	
 588	
 589	        try:
 590	            # Increased timeout to 120 seconds to allow for longer processing times
 591	            response = requests.post(url, json=payload, timeout=120)
 592	            response.raise_for_status()
 593	            result = response.json()
 594	
 595	            # Ollama response has a 'response' field with the generated text
 596	            if "response" in result:
 597	                return result["response"].strip()
 598	            return ""
 599	        except requests.exceptions.Timeout:
 600	            self.logger.error(f"Ollama API request timed out after 120 seconds")
 601	            return ""
 602	        except requests.exceptions.RequestException as e:
 603	            self.logger.error(f"Ollama API error: {e}")
 604	            # Log the response body if available for more details
 605	            try:
 606	                error_details = response.text
 607	                self.logger.error(f"Ollama API response body: {error_details}")
 608	            except:
 609	                pass # Ignore if response object doesn't exist or has no text
 610	            return ""
 611	    
 612	    def sanitize_text(self, text: str) -> str:
 613	        """Clean subtitle text by removing HTML tags and standardizing special content."""
 614	        text = re.sub(r'<font[^>]*>(.*?)</font>', r'\1', text)
 615	        text = re.sub(r'<[^>]*>', '', text)
 616	        text = re.sub(r'\[(.*?)\]', r'#BRACKET_OPEN#\1#BRACKET_CLOSE#', text)
 617	        text = re.sub(r' +', ' ', text)
 618	        text.replace('\r\n', '\n').replace('\r', '\n')
 619	        return text.strip()
 620	    
 621	    def preprocess_subtitle(self, text: str) -> str:
 622	        """
 623	        Pre-process subtitle text to normalize and protect special content
 624	        before translation.
 625	        """
 626	        # Handle bracket content consistently
 627	        text = re.sub(r'\[(.*?)\]', r'#BRACKET_OPEN#\1#BRACKET_CLOSE#', text)
 628	        
 629	        # Handle HTML tags properly
 630	        text = re.sub(r'<font[^>]*>(.*?)</font>', r'\1', text)
 631	        text = re.sub(r'<[^>]*>', '', text)
 632	        
 633	        # Normalize whitespace
 634	        text = re.sub(r'\s+', ' ', text).strip()
 635	        
 636	        # Handle special characters
 637	        text = text.replace('\r\n', '\n').replace('\r', '\n')
 638	        
 639	        return text.strip()
 640	
 641	    def postprocess_translation(self, text: str) -> str:
 642	        """
 643	        Post-process translated text to restore formatting and fix common issues.
 644	        """
 645	        # Restore brackets (case-insensitive)
 646	        text = re.sub(r'#BRACKET_OPEN#', '[', text, flags=re.IGNORECASE)
 647	        text = re.sub(r'#BRACKET_CLOSE#', ']', text, flags=re.IGNORECASE)
 648	        
 649	        # Fix common Danish punctuation issues
 650	        text = text.replace(' ,', ',').replace(' .', '.')
 651	        text = text.replace(' !', '!').replace(' ?', '?')
 652	        text = text.replace(' :', ':').replace(' ;', ';')
 653	        
 654	        # Ensure proper spacing after punctuation
 655	        text = re.sub(r'([,.!?;:])([^\s])', r'\1 \2', text)
 656	        
 657	        # Fix common spacing issues with quotation marks
 658	        text = re.sub(r'"\s+', '" ', text)
 659	        text = re.sub(r'\s+"', ' "', text)
 660	        
 661	        # Fix capitalization issues
 662	        text = re.sub(r'^([a-z√¶√∏√•])', lambda m: m.group(1).upper(), text)
 663	        
 664	        # Fix common Danish specific issues
 665	        text = text.replace("Jeg er", "Jeg er").replace("Du er", "Du er")
 666	        
 667	        return text.strip()
 668	    
 669	    def translate_srt(self, input_path, output_path, cfg, progress_dict=None):
 670	        """Translate subtitle file with proper Ollama waiting and live status."""
 671	        import pysrt
 672	        from py.translation_service import TranslationService
 673	        
 674	        # Store config for use in other methods
 675	        self.set_config(cfg)
 676	        
 677	        start_time = time.time() # Initialize overall start time
 678	        
 679	        # Initialize progress history if needed
 680	        if progress_dict is not None and "processed_lines" not in progress_dict:
 681	            progress_dict["processed_lines"] = []
 682	            
 683	        # Make sure current dict is initialized
 684	        if progress_dict is not None and "current" not in progress_dict:
 685	            progress_dict["current"] = {}
 686	            
 687	        # Log the progress dictionary structure at start
 688	        if progress_dict is not None:
 689	            self.logger.debug(f"Progress dict initialized: {json.dumps(progress_dict, default=str)}")
 690	
 691	        try:
 692	            # Import display function - ensure this works first
 693	            try:
 694	                from live_translation_viewer import display_translation_status
 695	                has_display = True
 696	                self.logger.info("Live translation viewer imported successfully.")
 697	            except ImportError as e:
 698	                has_display = False
 699	                self.logger.warning(f"Could not import live_translation_viewer - live display disabled: {e}")
 700	
 701	            # Start processing
 702	            self.logger.info(f"Parsing subtitle file: {os.path.basename(input_path)}")
 703	            subs = pysrt.open(input_path, encoding='utf-8')
 704	            total_lines = len(subs)
 705	            self.logger.info(f"Parsed {total_lines} subtitle entries")
 706	            
 707	            # Setup translation service
 708	            translation_service = TranslationService(cfg, self.logger)
 709	            
 710	            # Get languages
 711	            source_lang = cfg.get("general", "source_language", fallback="en")
 712	            target_lang = cfg.get("general", "target_language", fallback="da")
 713	            
 714	            # Initialize critics if enabled
 715	            agent_critic_enabled = cfg.getboolean("agent_critic", "enabled", fallback=False)
 716	            critic_service = None
 717	            if agent_critic_enabled:
 718	                try:
 719	                    from py.critic_service import CriticService
 720	                    critic_service = CriticService(cfg, self.logger)
 721	                    self.logger.info("Agent Critic enabled and initialized")
 722	                except Exception as e:
 723	                    self.logger.error(f"Failed to initialize critic service: {e}")
 724	            
 725	            # Get context size from config
 726	            context_size_before = cfg.getint("general", "context_size_before", fallback=15)
 727	            context_size_after = cfg.getint("general", "context_size_after", fallback=15)
 728	            
 729	            # Get TMDB information if enabled
 730	            media_info = None
 731	            if cfg.getboolean("tmdb", "enabled", fallback=False):
 732	                try:
 733	                    # Extract show/movie name from filename
 734	                    file_basename = os.path.basename(input_path)
 735	                    media_title = self.extract_item_name(file_basename)
 736	                    self.logger.info(f"Fetching TMDB data for: {media_title}")
 737	                    
 738	                    # Extract season and episode numbers if present
 739	                    season_num, episode_num = self.extract_season_episode(file_basename)
 740	                    if season_num and episode_num:
 741	                        self.logger.info(f"Detected S{season_num:02d}E{episode_num:02d} in filename")
 742	                    
 743	                    # Get media information from TMDB, passing the filename as well
 744	                    media_info = translation_service.get_media_info(media_title, original_filename=file_basename, 
 745	                                                                  season=season_num, episode=episode_num)
 746	                    if media_info:
 747	                        self.logger.info(f"TMDB data found for: {media_info.get('title', '')}")
 748	                        if media_info.get('has_episode_data', False):
 749	                            self.logger.info(f"Episode info found: {media_info.get('episode_title', 'Unknown')}")
 750	                    else:
 751	                        self.logger.warning(f"No TMDB data found for: {media_title}")
 752	                except Exception as e:
 753	                    self.logger.error(f"Error fetching TMDB data: {str(e)}")
 754	            
 755	            # Update global progress information before starting the line-by-line translation
 756	            if progress_dict is not None:
 757	                progress_dict["status"] = "translating"
 758	                progress_dict["current_file"] = os.path.basename(input_path)
 759	                progress_dict["total_lines"] = total_lines
 760	                progress_dict["current_line"] = 0
 761	                # Save progress state if there's a save function
 762	                if 'save_progress_state' in globals():
 763	                    save_progress_state()
 764	                # Manually log the progress dict structure
 765	                self.logger.debug(f"Progress dict before translation: {json.dumps(progress_dict, default=str)}")
 766	            
 767	            # Process each subtitle line
 768	            for i, sub in enumerate(subs):
 769	                line_number = i + 1
 770	                line_start_time = time.time()  # Track per-line timing
 771	                
 772	                # Skip empty lines
 773	                if not sub.text.strip() or sub.text.strip() == '&nbsp;':
 774	                    continue
 775	                
 776	                original_text = self.preprocess_subtitle(sub.text)
 777	                
 778	                # Initialize data for this line
 779	                translations = {}
 780	                first_pass = None
 781	                critic_result = None
 782	                final_result = None
 783	                
 784	                # Initialize timing dict for this line
 785	                timing = {
 786	                    "start": time.time(),
 787	                    "preprocessing": 0,
 788	                    "first_pass": 0,
 789	                    "critic": 0,
 790	                    "total": 0
 791	                }
 792	                
 793	                # Update progress dictionary *before* translation starts for this line
 794	                if progress_dict is not None:
 795	                    progress_dict["current_line"] = line_number
 796	                    progress_dict["status"] = "translating"  # Ensure status is set correctly
 797	                    if "current" not in progress_dict:
 798	                        progress_dict["current"] = {}
 799	                    progress_dict["current"].update({
 800	                        "line_number": line_number,
 801	                        "original": original_text,
 802	                        "suggestions": {},
 803	                        "first_pass": None,
 804	                        "standard_critic": None,
 805	                        "final": None,
 806	                        "timing": timing
 807	                    })
 808	                    # Manually log the line's progress data - important for debugging
 809	                    self.logger.debug(f"Line {line_number} progress before translation: {json.dumps(progress_dict['current'], default=str)}")
 810	                    # Save progress state after updating if there's a save function
 811	                    if 'save_progress_state' in globals():
 812	                        save_progress_state()
 813	                
 814	                # Build context from surrounding subtitles
 815	                context_before = []
 816	                for j in range(max(0, i - context_size_before), i):
 817	                    context_before.append(f"Line {j+1}: {subs[j].text}")
 818	                
 819	                context_after = []
 820	                for j in range(i + 1, min(len(subs), i + 1 + context_size_after)):
 821	                    context_after.append(f"Line {j+1}: {subs[j].text}")
 822	                
 823	                context_text = ""
 824	                if context_before:
 825	                    context_text += "PREVIOUS LINES:\n" + "\n".join(context_before) + "\n\n"
 826	                if context_after:
 827	                    context_text += "FOLLOWING LINES:\n" + "\n".join(context_after)
 828	                
 829	                # Get special meanings from progress_dict if available
 830	                special_meanings = None
 831	                if progress_dict is not None and "special_meanings" in progress_dict:
 832	                    special_meanings = progress_dict["special_meanings"]
 833	                    if special_meanings:
 834	                        self.logger.info(f"Using {len(special_meanings)} special word meanings for translation")
 835	                
 836	                # Record time before first pass translation
 837	                first_pass_start = time.time()
 838	                
 839	                # Pass context, media_info, and special meanings to translation service
 840	                translation_details = translation_service.translate(
 841	                    original_text, 
 842	                    source_lang, 
 843	                    target_lang,
 844	                    context=context_text,
 845	                    media_info=media_info,
 846	                    special_meanings=special_meanings  # Pass special meanings to translation service
 847	                )
 848	                
 849	                # Calculate first pass timing
 850	                timing["first_pass"] = time.time() - first_pass_start
 851	                
 852	                # Extract results
 853	                translations = translation_details.get("collected_translations", {})
 854	                first_pass = translation_details.get("first_pass_text")
 855	                current_result = translation_details.get("final_text") # This is the result after the main translation logic
 856	                
 857	                # Update progress dict with collected translations and first pass
 858	                if progress_dict is not None:
 859	                    progress_dict["current"]["suggestions"] = translations
 860	                    progress_dict["current"]["first_pass"] = first_pass
 861	                    progress_dict["current"]["timing"]["first_pass"] = timing["first_pass"]
 862	                    # Save progress state after first pass if there's a save function
 863	                    if 'save_progress_state' in globals():
 864	                        save_progress_state()
 865	                    # Manually log the translation status after first pass
 866	                    self.logger.debug(f"Line {line_number} after first pass: {first_pass}")
 867	
 868	                # Display initial status (original, suggestions, first pass) - Only if using live viewer
 869	                if has_display:
 870	                    display_translation_status(
 871	                        line_number, 
 872	                        original_text, 
 873	                        translations, 
 874	                        None, # current_result not shown yet
 875	                        first_pass
 876	                    )
 877	                # Fallback console print is moved to the end
 878	                
 879	                # Apply critic if enabled and we have a result
 880	                critic_result_str = None # Store critic's string result or None
 881	                critic_feedback = None # Store critic's feedback if available
 882	                critic_changed = False
 883	                
 884	                # Record critic start time
 885	                critic_start_time = time.time()
 886	                
 887	                if current_result and agent_critic_enabled and critic_service:
 888	                    self.logger.info("Applying critic to translation")
 889	                    critic_eval_result = critic_service.evaluate_translation(
 890	                        original_text, current_result, source_lang, target_lang
 891	                    )
 892	                    
 893	                    # Check if critic returned a dict with score and feedback
 894	                    if isinstance(critic_eval_result, dict):
 895	                        critic_feedback = critic_eval_result.get('feedback', 'No feedback provided.')
 896	                        # Check if critic provided a revised translation (optional feature, not standard)
 897	                        if 'revised_translation' in critic_eval_result:
 898	                             critic_result_str = critic_eval_result['revised_translation']
 899	                             critic_changed = critic_result_str != current_result
 900	                             self.logger.info(f"Critic suggested revision: {critic_result_str}")
 901	                        else:
 902	                             # Standard critic just provides score/feedback
 903	                             self.logger.info(f"Critic evaluation: Score {critic_eval_result.get('score', 'N/A')}, Feedback: {critic_feedback}")
 904	                             critic_result_str = None # No revision provided
 905	                             critic_changed = False
 906	                    else:
 907	                        # Handle unexpected critic result format
 908	                        self.logger.warning(f"Critic returned unexpected result format: {critic_eval_result}")
 909	                        critic_result_str = None
 910	                        critic_changed = False
 911	                        critic_feedback = f"Unexpected result: {critic_eval_result}"
 912	                    
 913	                    # Record critic timing
 914	                    timing["critic"] = time.time() - critic_start_time
 915	
 916	                    # Update progress dict with critic result, timing, and action
 917	                    if progress_dict is not None:
 918	                        progress_dict["current"]["standard_critic"] = critic_result_str or current_result  # Use current_result if critic didn't change
 919	                        progress_dict["current"]["critic_changed"] = critic_changed
 920	                        progress_dict["current"]["critic_action"] = {
 921	                            "score": critic_eval_result.get('score') if isinstance(critic_eval_result, dict) else None,
 922	                            "feedback": critic_feedback,
 923	                            "changed": critic_changed,
 924	                            "timing": timing["critic"]
 925	                        }
 926	                        progress_dict["current"]["timing"]["critic"] = timing["critic"]
 927	                        # Save progress state after critic if there's a save function
 928	                        if 'save_progress_state' in globals():
 929	                            save_progress_state()
 930	                        # Manually log the translation status after critic
 931	                        self.logger.debug(f"Line {line_number} after critic: {critic_result_str or current_result}")
 932	                    
 933	                    # Display status after critic - Only if using live viewer
 934	                    if has_display:
 935	                        display_translation_status(
 936	                            line_number,
 937	                            original_text,
 938	                            translations,
 939	                            None, # current_result not shown yet
 940	                            first_pass,
 941	                            critic_result_str # Display the string result or None
 942	                        )
 943	                    # Fallback console print moved to the end
 944	                    
 945	                    # Use critic result only if it's a valid string and different
 946	                    if critic_result_str and critic_changed:
 947	                        current_result = critic_result_str # Update the main result
 948	                        self.logger.info("Using critic's revised translation.")
 949	                    elif critic_result_str:
 950	                         self.logger.info("Critic agreed or provided same translation.")
 951	                    # If critic_result_str is None or not changed, we keep the previous current_result
 952	                
 953	                # Final result is the current result after all processing
 954	                final_result = current_result
 955	                
 956	                # Calculate total time for this line
 957	                timing["total"] = time.time() - line_start_time
 958	                
 959	                # Update progress dict with final result and timing
 960	                if progress_dict is not None:
 961	                    progress_dict["current"]["final"] = final_result
 962	                    progress_dict["current"]["timing"]["total"] = timing["total"]
 963	                    
 964	                    # Add to processed lines history (limited to last 10)
 965	                    line_history_item = {
 966	                        "line_number": line_number,
 967	                        "original": original_text,
 968	                        "first_pass": first_pass,
 969	                        "critic": critic_result_str,
 970	                        "critic_changed": critic_changed,
 971	                        "final": final_result,
 972	                        "timing": {k: round(v, 2) for k, v in timing.items() if v > 0}  # Round timings for display
 973	                    }
 974	                    
 975	                    # Add to history and keep only last 10
 976	                    progress_dict["processed_lines"].append(line_history_item)
 977	                    if len(progress_dict["processed_lines"]) > 10:
 978	                        progress_dict["processed_lines"] = progress_dict["processed_lines"][-10:]
 979	                    
 980	                    # Save progress state after line is complete if there's a save function
 981	                    if 'save_progress_state' in globals():
 982	                        save_progress_state()
 983	                    # Manually log the final translation status
 984	                    self.logger.debug(f"Line {line_number} complete translation: {final_result}")
 985	                
 986	                # Display final status - Only if using live viewer
 987	                if has_display:
 988	                    display_translation_status(
 989	                        line_number,
 990	                        original_text,
 991	                        translations,
 992	                        None, # current_result not shown
 993	                        first_pass,
 994	                        critic_result_str, # Pass critic's string result
 995	                        final_result
 996	                    )
 997	                else: # Fallback console print - Consolidated output at the end
 998	                    separator = "-" * 60
 999	                    print(separator)
1000	                    print(f"Line {line_number}:")
1001	                    print(f"  Original: \"{original_text}\"")
1002	                    # Print collected translations
1003	                    for service_name, translation_text in translations.items():
1004	                        print(f"  {service_name}: \"{translation_text}\"")
1005	                    # Print first pass result (e.g., from Ollama final)
1006	                    if first_pass:
1007	                        print(f"  First pass: \"{first_pass}\" ({timing['first_pass']:.2f}s)")
1008	                    # Print critic feedback if available
1009	                    if critic_feedback:
1010	                        change_indicator = " (REVISED)" if critic_changed and critic_result_str else ""
1011	                        print(f"  Critic: \"{critic_feedback}\"{change_indicator} ({timing['critic']:.2f}s)")
1012	                        if critic_result_str and critic_changed:
1013	                            print(f"    -> Revision: \"{critic_result_str}\"")
1014	                    # Print final result
1015	                    if final_result:
1016	                        print(f"  Final: \"{final_result}\" (Total: {timing['total']:.2f}s)")
1017	                    print(separator) # Print separator at the end for fallback
1018	                
1019	                # Update subtitle text
1020	                if final_result:
1021	                    sub.text = self.postprocess_translation(final_result)
1022	                else:
1023	                    # If translation failed completely, keep original but log warning
1024	                    self.logger.warning(f"Translation failed for line {line_number}, keeping original text: {original_text}")
1025	                    sub.text = original_text # Keep original if final_result is None or empty
1026	
1027	            # Save translated subs
1028	            self.logger.info(f"Saving translated subtitles to {output_path}")
1029	            subs.save(output_path, encoding='utf-8')
1030	            self.logger.info(f"Saved translated subtitles to {output_path}")
1031	            
1032	            # Calculate overall process time
1033	            total_process_time = time.time() - start_time
1034	            
1035	            # Update final progress status
1036	            if progress_dict is not None:
1037	                progress_dict["status"] = "completed"
1038	                progress_dict["message"] = f"Translation completed for {os.path.basename(input_path)} in {total_process_time:.2f}s"
1039	                progress_dict["current_line"] = total_lines
1040	                progress_dict["total_process_time"] = total_process_time
1041	                # Store output path for reference
1042	                progress_dict["output_path"] = output_path
1043	                # Save final progress state if there's a save function
1044	                if 'save_progress_state' in globals():
1045	                    save_progress_state()
1046	                # Log final progress state
1047	                self.logger.debug(f"Translation complete. Final progress state: {json.dumps(progress_dict, default=str)}")
1048	
1049	            return True
1050	            
1051	        except Exception as e:
1052	            self.logger.error(f"Error translating subtitle file {input_path}: {e}")
1053	            import traceback
1054	            self.logger.error(traceback.format_exc())
1055	            # Update progress status on error
1056	            if progress_dict is not None:
1057	                progress_dict["status"] = "failed"
1058	                progress_dict["message"] = f"Error translating subtitle: {e}"
1059	            return False
1060	        finally:
1061	            end_time = time.time()
1062	            # Check if start_time was defined (it should be now)
1063	            if 'start_time' in locals():
1064	                time_taken = f"{end_time - start_time:.2f}s"
1065	                self.logger.info(f"Translation process for {os.path.basename(input_path)} finished in {time_taken}.")
1066	            else:
1067	                self.logger.warning(f"Translation process for {os.path.basename(input_path)} finished, but start_time was not recorded.")
1068	    
1069	    def _get_language_full_name(self, language_code):
1070	        """Get the full language name from a language code."""
1071	        # Reverse language mapping
1072	        reverse_mapping = {v: k.capitalize() for k, v in LANGUAGE_MAPPING.items()}
1073	        return reverse_mapping.get(language_code, language_code)
1074	
1075	    def generate_translation_report(self, stats, output_path):
1076	        """Generate a detailed translation report with comprehensive statistics."""
1077	        with open(output_path, 'w', encoding='utf-8') as f:
1078	            f.write("=== Subtitle Translation Report ===\n\n")
1079	            f.write(f"Source Language: {stats['source_language']}\n")
1080	            f.write(f"Target Language: {stats['target_language']}\n")
1081	            f.write(f"Total Lines: {stats['total_lines']}\n")
1082	            f.write(f"Processing Time: {stats.get('processing_time', 0):.2f} seconds\n\n")
1083	            
1084	            f.write("=== Translation Services ===\n")
1085	            # In a real implementation, we would include details about which services were used
1086	            f.write("Services used: [This would show actual services used]\n\n")
1087	            
1088	            f.write("=== Critic Information ===\n")
1089	            f.write(f"Standard Critic Enabled: {stats['standard_critic_enabled']}\n")
1090	            if stats['standard_critic_enabled']:
1091	                f.write(f"Standard Critic Changes: {stats['standard_critic_changes']}\n")
1092	            f.write(f"Multi-Critic Enabled: {stats['multi_critic_enabled']}\n\n")
1093	            
1094	            f.write("=== Sample Translations ===\n")
1095	            # In a real implementation, we would include sample translations
1096	            f.write("[This would show sample translations from the process]\n")
1097	
1098	    def extract_item_name(self, filename: str) -> str:
1099	        """Extract a clean name from a subtitle filename.
1100	        
1101	        This function attempts to extract show or movie names 
1102	        from common subtitle filename patterns.
1103	        
1104	        Args:
1105	            filename: The subtitle filename
1106	            
1107	        Returns:
1108	            A cleaned name suitable for TMDB search
1109	        """
1110	        # Common patterns for TV shows (S01E01) and movies (YEAR)
1111	        _SERIES_RE = re.compile(r"^(?P<title>.+?)\.S\d{2}E\d{2}", re.I)
1112	        _MOVIE_RE = re.compile(r"^(?P<title>.+?)\.(19|20)\d{2}")
1113	        
1114	        # Strip file extension and directory path
1115	        base = os.path.basename(filename)
1116	        base = os.path.splitext(base)[0]
1117	        
1118	        # Try to match as a TV show first, then as a movie
1119	        m = _SERIES_RE.match(base) or _MOVIE_RE.match(base)
1120	        
1121	        if m:
1122	            # Get the title from the match and clean it
1123	            # Replace both dots AND underscores with spaces
1124	            clean_name = m.group("title").replace('.', ' ').replace('_', ' ').strip()
1125	            self.logger.debug(f"Extracted media name '{clean_name}' from filename '{filename}'")
1126	            return clean_name
1127	        
1128	        # Fallback: just clean up the filename as best we can
1129	        # Replace both dots AND underscores with spaces
1130	        clean_name = base.replace('.', ' ').replace('_', ' ').split(' ')[0].strip()
1131	        self.logger.debug(f"No pattern match - using cleaned name '{clean_name}' from filename '{filename}'")
1132	        return clean_name
1133	
1134	    def extract_season_episode(self, filename: str) -> tuple:
1135	        """Extract season and episode numbers from a subtitle filename.
1136	        
1137	        Args:
1138	            filename: The subtitle filename
1139	            
1140	        Returns:
1141	            Tuple of (season_num, episode_num) or (None, None) if not found
1142	        """
1143	        # Look for common S01E01 pattern
1144	        season_episode_match = re.search(r'S(\d{1,2})E(\d{1,2})', filename, re.IGNORECASE)
1145	        
1146	        if season_episode_match:
1147	            season_num = int(season_episode_match.group(1))
1148	            episode_num = int(season_episode_match.group(2))
1149	            self.logger.debug(f"Extracted S{season_num:02d}E{episode_num:02d} from filename '{filename}'")
1150	            return (season_num, episode_num)
1151	        
1152	        # Alternative formats could be added here (e.g., "1x01", "Season 1 Episode 1")
1153	        
1154	        self.logger.debug(f"No season/episode pattern found in filename '{filename}'")
1155	        return (None, None)
1156	        
1157	    def parse_file(self, file_path: str) -> list:
1158	        """
1159	        Parse a subtitle file and return a list of subtitle dictionaries.
1160	        
1161	        Args:
1162	            file_path: Path to the subtitle file
1163	            
1164	        Returns:
1165	            List of dictionaries with subtitle data
1166	        """
1167	        import pysrt
1168	        
1169	        self.logger.info(f"Parsing subtitle file: {os.path.basename(file_path)}")
1170	        
1171	        try:
1172	            # Load subtitles using pysrt
1173	            subs = pysrt.open(file_path, encoding='utf-8')
1174	            
1175	            # Convert to list of dictionaries
1176	            subtitle_list = []
1177	            for sub in subs:
1178	                if not sub.text.strip() or sub.text.strip() == '&nbsp;':
1179	                    continue
1180	                    
1181	                subtitle_dict = {
1182	                    'index': sub.index,
1183	                    'start': str(sub.start),
1184	                    'end': str(sub.end),
1185	                    'text': sub.text.strip(),
1186	                    'position': sub.position,
1187	                }
1188	                subtitle_list.append(subtitle_dict)
1189	            
1190	            self.logger.info(f"Parsed {len(subtitle_list)} subtitle entries")
1191	            return subtitle_list
1192	            
1193	        except Exception as e:
1194	            self.logger.error(f"Error parsing subtitle file: {str(e)}")
1195	            raise
1196	    
1197	    def write_file(self, file_path: str, subtitles: list) -> None:
1198	        """
1199	        Write subtitles to a file.
1200	        
1201	        Args:
1202	            file_path: Path to save the subtitle file
1203	            subtitles: List of subtitle dictionaries
1204	        """
1205	        import pysrt
1206	        
1207	        self.logger.info(f"Writing subtitle file: {os.path.basename(file_path)}")
1208	        
1209	        try:
1210	            # Create a new SubRipFile
1211	            subs = pysrt.SubRipFile()
1212	            
1213	            # Convert dictionaries back to SubRipItem objects
1214	            for subtitle in subtitles:
1215	                item = pysrt.SubRipItem(
1216	                    index=subtitle['index'],
1217	                    start=pysrt.SubRipTime.from_string(subtitle['start']),
1218	                    end=pysrt.SubRipTime.from_string(subtitle['end']),
1219	                    text=subtitle['text']
1220	                )
1221	                
1222	                # Set position if available
1223	                if 'position' in subtitle and subtitle['position']:
1224	                    item.position = subtitle['position']
1225	                
1226	                subs.append(item)
1227	            
1228	            # Make sure the directory exists
1229	            os.makedirs(os.path.dirname(file_path), exist_ok=True)
1230	            
1231	            # Save to file
1232	            subs.save(file_path, encoding='utf-8')
1233	            
1234	            self.logger.info(f"Successfully wrote {len(subtitles)} subtitles to {os.path.basename(file_path)}")
1235	            
1236	        except Exception as e:
1237	            self.logger.error(f"Error writing subtitle file: {str(e)}")
1238	            raise

--- File: py/translation_service.py ---
   1	import requests
   2	import json
   3	import time
   4	import logging
   5	import re
   6	import os
   7	from typing import Dict, Optional, Any
   8	
   9	class TranslationService:
  10	    """
  11	    Service class for handling translations using various translation APIs.
  12	    Acts as a facade for multiple translation providers.
  13	    """
  14	    
  15	    def __init__(self, config, logger=None):
  16	        """
  17	        Initialize the translation service with configuration.
  18	        
  19	        Args:
  20	            config: Configuration object (configparser.ConfigParser)
  21	            logger: Optional logger instance
  22	        """
  23	        self.config = config
  24	        self.logger = logger or logging.getLogger(__name__)
  25	        
  26	        # Initialize wiki terminology service if enabled
  27	        self.wiki_terminology = None
  28	        try:
  29	            if config.has_section("wiki_terminology") and config.getboolean("wiki_terminology", "enabled", fallback=False):
  30	                from py.wiki_terminology import WikiTerminologyService
  31	                self.wiki_terminology = WikiTerminologyService(config, logger)
  32	                self.logger.info("Wiki terminology service initialized")
  33	            else:
  34	                self.logger.info("Wiki terminology service disabled or not configured")
  35	        except Exception as e:
  36	            self.logger.warning(f"Failed to initialize wiki terminology service: {str(e)}")
  37	        
  38	        # Initialize special meanings from file
  39	        self.special_meanings = self.load_special_meanings()
  40	        
  41	        # Language mapping for reference
  42	        self.language_mapping = {
  43	            "english": "en",
  44	            "danish": "da",
  45	            "spanish": "es",
  46	            "german": "de",
  47	            "french": "fr",
  48	            "italian": "it",
  49	            "portuguese": "pt",
  50	            "dutch": "nl",
  51	            "swedish": "sv",
  52	            "norwegian": "no",
  53	            "finnish": "fi",
  54	            "polish": "pl",
  55	            "russian": "ru",
  56	            "japanese": "ja",
  57	            "chinese": "zh",
  58	            "korean": "ko",
  59	            "arabic": "ar",
  60	            "hindi": "hi",
  61	            "turkish": "tr",
  62	        }
  63	
  64	        # Add TMDB API key
  65	        self.tmdb_api_key = config.get("tmdb", "api_key", fallback=None)
  66	        self.use_tmdb = config.getboolean("tmdb", "enabled", fallback=False)
  67	        self.tmdb_language = config.get("tmdb", "language", fallback="en-US")
  68	    
  69	    def get_iso_code(self, language_name: str) -> str:
  70	        """Convert a language name to its ISO code."""
  71	        language_name = language_name.lower().strip('"\' ')
  72	        return self.language_mapping.get(language_name, language_name)
  73	    
  74	    def translate(self, text: str, source_lang: str, target_lang: str, context=None, media_info=None, special_meanings=None) -> Dict[str, Any]:
  75	        """
  76	        Translate text from source language to target language.
  77	        Uses the configured translation services in order of priority.
  78	        
  79	        Args:
  80	            text: Text to translate
  81	            source_lang: Source language code
  82	            target_lang: Target language code
  83	            context: Optional context text (surrounding subtitles)
  84	            media_info: Optional media information from TMDB
  85	            special_meanings: Optional list of special word meanings defined by the user
  86	            
  87	        Returns:
  88	            Dictionary containing:
  89	            - 'final_text': The final translated text (str)
  90	            - 'collected_translations': Dictionary of translations from each service (Dict[str, str])
  91	            - 'first_pass_text': The result after the first pass (e.g., from Ollama final) (Optional[str])
  92	        """
  93	        if not text.strip():
  94	            return {"final_text": text, "collected_translations": {}, "first_pass_text": None}
  95	        
  96	        # Default return structure
  97	        result_details = {
  98	            "final_text": text, # Default to original if all fails
  99	            "collected_translations": {},
 100	            "first_pass_text": None
 101	        }
 102	
 103	        # If special_meanings weren't explicitly provided, use the ones loaded from file
 104	        if special_meanings is None:
 105	            special_meanings = self.special_meanings
 106	            if special_meanings:
 107	                self.logger.info(f"Using {len(special_meanings)} special meanings from file")
 108	
 109	        # Check if Ollama is enabled and should be used as final translator
 110	        ollama_enabled = self.config.getboolean("ollama", "enabled", fallback=False)
 111	        use_ollama_as_final = self.config.getboolean("ollama", "use_as_final_translator", fallback=True) if ollama_enabled else False
 112	        
 113	        # Get service priority from config
 114	        service_priority = []
 115	        # Get configured priority if available
 116	        if self.config.has_option("translation", "service_priority"):
 117	            priority_string = self.config.get("translation", "service_priority")
 118	            # Split by comma and filter empty strings
 119	            all_services = [s.strip() for s in priority_string.split(",") if s.strip()]
 120	            
 121	            # Only include enabled services in the priority list
 122	            for service in all_services:
 123	                if ((service == "deepl" and self.config.getboolean("general", "use_deepl", fallback=False)) or
 124	                    (service == "openai" and self.config.getboolean("openai", "enabled", fallback=False)) or
 125	                    (service == "ollama" and self.config.getboolean("ollama", "enabled", fallback=True)) or
 126	                    (service == "google" and self.config.getboolean("general", "use_google", fallback=True)) or
 127	                    (service == "libretranslate" and self.config.getboolean("general", "use_libretranslate", fallback=False)) or
 128	                    (service == "mymemory" and self.config.getboolean("general", "use_mymemory", fallback=False))):
 129	                    service_priority.append(service)
 130	        
 131	        # Default priority if not specified or empty
 132	        if not service_priority:
 133	            default_priority = "google,ollama"
 134	            self.logger.warning(f"No valid service priority configured, using default: {default_priority}")
 135	            service_priority = [s.strip() for s in default_priority.split(",")]
 136	            
 137	        self.logger.info(f"Using translation service priority: {service_priority}")
 138	        
 139	        # --- Ollama as Final Translator Logic ---
 140	        if use_ollama_as_final:
 141	            self.logger.info("Ollama will be used as final translator. Collecting translations from all services.")
 142	            collected_translations = {}
 143	            
 144	            # Collect translations from online services
 145	            for service in service_priority:
 146	                if service == "ollama": continue # Skip Ollama itself in collection phase
 147	                
 148	                try:
 149	                    translation = None
 150	                    if service == "deepl" and self.config.getboolean("deepl", "enabled", fallback=False):
 151	                        self.logger.info(f"Collecting translation from {service} service")
 152	                        translation = self._translate_with_deepl(text, source_lang, target_lang)
 153	                    elif service == "openai" and self.config.getboolean("openai", "enabled", fallback=False):
 154	                        self.logger.info(f"Collecting translation from {service} service")
 155	                        translation = self._translate_with_openai(text, source_lang, target_lang)
 156	                    elif service == "google" and self.config.getboolean("general", "use_google", fallback=True):
 157	                        self.logger.info(f"Collecting translation from {service} service")
 158	                        translation = self._translate_with_google(text, source_lang, target_lang)
 159	                    
 160	                    if translation:
 161	                        collected_translations[service.capitalize()] = translation # Use capitalized name for display
 162	                        
 163	                except Exception as e:
 164	                    self.logger.error(f"Error collecting translation from {service}: {str(e)}")
 165	
 166	            result_details["collected_translations"] = collected_translations
 167	
 168	            # If we collected any translations, use Ollama to make final decision
 169	            if collected_translations:
 170	                self.logger.info(f"Collected {len(collected_translations)} translations. Using Ollama to make final decision.")
 171	                start_time = time.time()
 172	                ollama_final_result = self._translate_with_ollama_as_final(text, source_lang, target_lang, 
 173	                                                                          collected_translations,
 174	                                                                          context_before=context, 
 175	                                                                          context_after=context, 
 176	                                                                          media_info=media_info,
 177	                                                                          special_meanings=special_meanings)
 178	                end_time = time.time()
 179	                
 180	                if ollama_final_result:
 181	                    self.logger.info(f"Ollama successfully provided the final translation in {end_time - start_time:.2f} seconds")
 182	                    result_details["final_text"] = ollama_final_result
 183	                    result_details["first_pass_text"] = ollama_final_result # In this flow, Ollama's result is the first pass
 184	                    return result_details
 185	                else:
 186	                     self.logger.warning("Ollama final translation failed. Falling back to priority list.")
 187	                     # Fall through to the standard priority logic below
 188	            else:
 189	                self.logger.warning("No translations collected from online services. Falling back to regular translation flow.")
 190	                # Fall through to the standard priority logic below
 191	
 192	        # --- Standard Priority Logic (Fallback or if Ollama not final) ---
 193	        self.logger.info("Attempting translation using service priority list.")
 194	        for service in service_priority:
 195	            if ((service == "deepl" and self.config.getboolean("general", "use_deepl", fallback=False)) or
 196	                (service == "openai" and self.config.getboolean("openai", "enabled", fallback=False)) or
 197	                (service == "ollama" and self.config.getboolean("ollama", "enabled", fallback=True)) or
 198	                (service == "google" and self.config.getboolean("general", "use_google", fallback=True)) or
 199	                (service == "libretranslate" and self.config.getboolean("general", "use_libretranslate", fallback=False)) or
 200	                (service == "mymemory" and self.config.getboolean("general", "use_mymemory", fallback=False))):
 201	                self.logger.info(f"Attempting translation with {service} service")
 202	            else:
 203	                self.logger.debug(f"Skipping disabled service: {service}")
 204	                continue
 205	
 206	            try:
 207	                translation = None
 208	                
 209	                if service == "deepl" and self.config.getboolean("deepl", "enabled", fallback=False):
 210	                    translation = self._translate_with_deepl(text, source_lang, target_lang)
 211	                elif service == "openai" and self.config.getboolean("openai", "enabled", fallback=False):
 212	                    translation = self._translate_with_openai(text, source_lang, target_lang)
 213	                elif service == "ollama" and ollama_enabled:
 214	                     # If Ollama is used here, it's the primary translation, not the final decision maker
 215	                    translation = self._translate_with_ollama(text, source_lang, target_lang, context=context, media_info=media_info)
 216	                elif service == "google" and self.config.getboolean("general", "use_google", fallback=True):
 217	                    translation = self._translate_with_google(text, source_lang, target_lang)
 218	
 219	                if translation:
 220	                    self.logger.info(f"Successfully translated using {service}.")
 221	                    # Store the first successful translation
 222	                    result_details["final_text"] = translation
 223	                    result_details["first_pass_text"] = translation # This is the first successful result
 224	                    # Add this successful translation to collected_translations if not already there
 225	                    if service.capitalize() not in result_details["collected_translations"]:
 226	                         result_details["collected_translations"][service.capitalize()] = translation
 227	                    return result_details # Return on first success
 228	
 229	            except Exception as e:
 230	                self.logger.error(f"Error using {service} translation service: {str(e)}")
 231	
 232	        # If all services fail
 233	        self.logger.warning("All translation services failed, returning original text")
 234	        return result_details # Return default structure with original text
 235	
 236	    def _translate_with_deepl(self, text: str, source_lang: str, target_lang: str) -> str:
 237	        """Translate text using DeepL API."""
 238	        if not self.config.has_section("deepl"):
 239	            self.logger.warning("DeepL API configuration not found")
 240	            return ""
 241	        
 242	        api_key = self.config.get("deepl", "api_key", fallback="")
 243	        if not api_key:
 244	            self.logger.warning("DeepL API key not configured")
 245	            return ""
 246	        
 247	        # Get API URL from config
 248	        api_url = self.config.get("deepl", "api_url", fallback="https://api-free.deepl.com/v2/translate")
 249	        
 250	        # Convert language codes to DeepL format
 251	        source_iso = self.get_iso_code(source_lang).upper()
 252	        target_iso = self.get_iso_code(target_lang).upper()
 253	        
 254	        # Prepare request
 255	        params = {
 256	            "auth_key": api_key,
 257	            "text": text,
 258	            "source_lang": source_iso,
 259	            "target_lang": target_iso,
 260	        }
 261	        
 262	        # Make request
 263	        try:
 264	            self.logger.debug(f"Calling DeepL API: {source_iso} -> {target_iso}")
 265	            response = requests.post(api_url, params=params, timeout=30)
 266	            response.raise_for_status()
 267	            result = response.json()
 268	            
 269	            if "translations" in result and len(result["translations"]) > 0:
 270	                return result["translations"][0]["text"]
 271	            
 272	            self.logger.warning("DeepL API returned no translations")
 273	            return ""
 274	            
 275	        except requests.exceptions.RequestException as e:
 276	            self.logger.error(f"DeepL API request failed: {str(e)}")
 277	            return ""
 278	    
 279	    def _translate_with_openai(self, text: str, source_lang: str, target_lang: str) -> str:
 280	        """Translate text using OpenAI API."""
 281	        if not self.config.has_section("openai"):
 282	            self.logger.warning("OpenAI API configuration not found")
 283	            return ""
 284	        
 285	        api_key = self.config.get("openai", "api_key", fallback="")
 286	        if not api_key:
 287	            self.logger.warning("OpenAI API key not configured")
 288	            return ""
 289	        
 290	        model = self.config.get("openai", "model", fallback="gpt-3.5-turbo")
 291	        api_base_url = self.config.get("openai", "api_base_url", 
 292	                                      fallback="https://api.openai.com/v1")
 293	        
 294	        # Get full language names for clearer prompt
 295	        source_full = self._get_language_full_name(source_lang)
 296	        target_full = self._get_language_full_name(target_lang)
 297	        
 298	        # Create prompt for translation
 299	        prompt = (
 300	            f"Translate the following text from {source_full} to {target_full}. "
 301	            f"Maintain the same formatting, tone, and meaning as closely as possible. "
 302	            f"Return ONLY the translated text without explanations or quotation marks.\n\n"
 303	            f"Text to translate: {text}"
 304	        )
 305	        
 306	        # Prepare request
 307	        url = f"{api_base_url.rstrip('/')}/chat/completions"
 308	        headers = {
 309	            "Content-Type": "application/json",
 310	            "Authorization": f"Bearer {api_key}"
 311	        }
 312	        
 313	        temperature = self.config.getfloat("general", "temperature", fallback=0.3)
 314	        
 315	        data = {
 316	            "model": model,
 317	            "messages": [{"role": "user", "content": prompt}],
 318	            "temperature": temperature
 319	        }
 320	        
 321	        # Make request
 322	        try:
 323	            self.logger.debug(f"Calling OpenAI API with model {model}")
 324	            response = requests.post(url, headers=headers, json=data, timeout=60)
 325	            response.raise_for_status()
 326	            result = response.json()
 327	            
 328	            if "choices" in result and len(result["choices"]) > 0:
 329	                return result["choices"][0]["message"]["content"].strip()
 330	            
 331	            self.logger.warning("OpenAI API returned no choices")
 332	            return ""
 333	            
 334	        except requests.exceptions.RequestException as e:
 335	            self.logger.error(f"OpenAI API request failed: {str(e)}")
 336	            return ""
 337	    
 338	    def _translate_with_ollama(self, text: str, source_lang: str, target_lang: str, context=None, media_info=None, special_meanings=None) -> str:
 339	        """Translate text using local Ollama service or LM Studio."""
 340	        # Check if LM Studio is enabled
 341	        lmstudio_enabled = self.config.has_section("lmstudio") and self.config.getboolean("lmstudio", "enabled", fallback=False)
 342	        
 343	        if lmstudio_enabled:
 344	            self.logger.info("Using LM Studio for translation")
 345	            return self._translate_with_lmstudio(text, source_lang, target_lang, context, media_info, special_meanings)
 346	        else:
 347	            # Check if Ollama is enabled
 348	            if not self.config.has_section("ollama"):
 349	                self.logger.warning("Neither Ollama nor LM Studio configuration found")
 350	                return ""
 351	                
 352	            ollama_enabled = self.config.getboolean("ollama", "enabled", fallback=True)
 353	            if not ollama_enabled:
 354	                self.logger.warning("Both Ollama and LM Studio are disabled")
 355	                return ""
 356	                
 357	            self.logger.info("Using Ollama for translation")
 358	            return self._translate_with_ollama_original(text, source_lang, target_lang, context, media_info, special_meanings)
 359	            
 360	    def _translate_with_lmstudio(self, text: str, source_lang: str, target_lang: str, context=None, media_info=None, special_meanings=None) -> str:
 361	        """Translate text using LM Studio's OpenAI-compatible API."""
 362	        server_url = self.config.get("lmstudio", "server_url", fallback="http://localhost:1234")
 363	        model = self.config.get("lmstudio", "model", fallback="")
 364	        
 365	        if not model:
 366	            self.logger.warning("LM Studio model not configured")
 367	            return ""
 368	        
 369	        # Get full language names for clearer prompt
 370	        source_full = self._get_language_full_name(source_lang)
 371	        target_full = self._get_language_full_name(target_lang)
 372	        
 373	        # Create system message with instructions
 374	        system_message = f"You are an expert translator from {source_full} to {target_full}. "
 375	        
 376	        # Add media info if available
 377	        if media_info:
 378	            system_message += f"These subtitles are for: {media_info['title']}. "
 379	            system_message += f"Plot summary: {media_info['overview']}. "
 380	            system_message += f"Genre: {media_info['genres']}. "
 381	            system_message += f"Main cast: {media_info['cast']}. "
 382	        
 383	        # Add wiki terminology to system message if available
 384	        try:
 385	            if self.wiki_terminology and media_info:
 386	                self.logger.info(f"Attempting to get wiki terminology for: {media_info.get('title', 'Unknown title')}")
 387	                terminology = self.wiki_terminology.get_terminology(media_info)
 388	                
 389	                if terminology and terminology.get('terms'):
 390	                    terms = terminology['terms']
 391	                    max_terms = self.config.getint("wiki_terminology", "max_terms", fallback=10)
 392	                    
 393	                    if terms:
 394	                        system_message += "IMPORTANT SHOW-SPECIFIC TERMINOLOGY: "
 395	                        for term in terms[:max_terms]:
 396	                            system_message += f"'{term['term']}' means '{term['definition']}'. "
 397	                        
 398	                        self.logger.info(f"Added {min(len(terms), max_terms)} wiki terminology entries to LM Studio system message")
 399	        except Exception as e:
 400	            self.logger.error(f"Error adding wiki terminology to LM Studio prompt: {str(e)}", exc_info=True)
 401	        
 402	        # Add user-defined special meanings if available
 403	        if special_meanings and len(special_meanings) > 0:
 404	            try:
 405	                system_message += "USER-DEFINED SPECIAL MEANINGS: "
 406	                for meaning in special_meanings:
 407	                    if 'word' in meaning and 'meaning' in meaning:
 408	                        system_message += f"'{meaning['word']}' means '{meaning['meaning']}'. "
 409	                
 410	                self.logger.info(f"Added {len(special_meanings)} user-defined special meanings to LM Studio system message")
 411	            except Exception as e:
 412	                self.logger.error(f"Error adding user-defined special meanings to LM Studio prompt: {str(e)}")
 413	        
 414	        # Create user message with text to translate and context
 415	        user_message = f"Translate this text from {source_full} to {target_full}: {text}"
 416	        if context:
 417	            user_message += f"\n\nContext from surrounding subtitles:\n{context}"
 418	        
 419	        # Prepare request payload in OpenAI Chat Completions format
 420	        url = f"{server_url.rstrip('/')}/v1/chat/completions"
 421	        headers = {
 422	            "Content-Type": "application/json"
 423	        }
 424	        
 425	        temperature = self.config.getfloat("lmstudio", "temperature", fallback=0.7)
 426	        
 427	        data = {
 428	            "model": model,
 429	            "messages": [
 430	                {"role": "system", "content": system_message},
 431	                {"role": "user", "content": user_message}
 432	            ],
 433	            "temperature": temperature,
 434	            "max_tokens": self.config.getint("lmstudio", "context_length", fallback=4096),
 435	            "stream": False
 436	        }
 437	        
 438	        # Make request with retries
 439	        max_retries = self.config.getint("translation", "max_retries", fallback=3)
 440	        retry_delay = self.config.getint("translation", "base_delay", fallback=2)
 441	        
 442	        for attempt in range(max_retries):
 443	            try:
 444	                self.logger.debug(f"Calling LM Studio API with model {model} (attempt {attempt+1}/{max_retries})")
 445	                
 446	                # Increase timeout for large or complex translations (300 seconds = 5 minutes)
 447	                timeout = 300
 448	                response = requests.post(url, json=data, headers=headers, timeout=timeout)
 449	                
 450	                # Log response details for debugging
 451	                self.logger.debug(f"LM Studio response status: {response.status_code}")
 452	                
 453	                response.raise_for_status()
 454	                result = response.json()
 455	                
 456	                # Extract translation from the response
 457	                if "choices" in result and len(result["choices"]) > 0:
 458	                    translated_text = result["choices"][0]["message"]["content"].strip()
 459	                    
 460	                    self.logger.debug(f"Received LM Studio translation response (len={len(translated_text)})")
 461	                    
 462	                    if translated_text:
 463	                        # Clean up response - remove extra quotes or markdown
 464	                        translated_text = translated_text.strip(' "\'\n`')
 465	                        
 466	                        # Remove potential prefixes that the model might add
 467	                        prefixes_to_remove = [
 468	                            "Translation:", 
 469	                            "Translated text:", 
 470	                            "Here's the translation:"
 471	                        ]
 472	                        for prefix in prefixes_to_remove:
 473	                            if translated_text.startswith(prefix):
 474	                                translated_text = translated_text[len(prefix):].strip()
 475	                        
 476	                        self.logger.debug(f"LM Studio translation successful: {translated_text[:50]}...")
 477	                        return translated_text
 478	                
 479	                self.logger.warning(f"LM Studio API returned no translatable content in attempt {attempt+1}")
 480	                if attempt < max_retries - 1:
 481	                    time.sleep(retry_delay)
 482	                    continue
 483	                return ""
 484	                
 485	            except requests.exceptions.Timeout:
 486	                self.logger.warning(f"LM Studio API request timed out after {timeout} seconds on attempt {attempt+1}")
 487	                if attempt < max_retries - 1:
 488	                    time.sleep(retry_delay)
 489	                    continue
 490	                return ""
 491	            except requests.exceptions.RequestException as e:
 492	                self.logger.error(f"LM Studio API request failed on attempt {attempt+1}: {str(e)}")
 493	                if attempt < max_retries - 1:
 494	                    time.sleep(retry_delay)
 495	                    continue
 496	                return ""
 497	            except json.JSONDecodeError as e:
 498	                self.logger.error(f"Error parsing LM Studio response on attempt {attempt+1}: {str(e)}")
 499	                if attempt < max_retries - 1:
 500	                    time.sleep(retry_delay)
 501	                    continue
 502	                return ""
 503	        
 504	        self.logger.error("All LM Studio translation attempts failed")
 505	        return ""
 506	        
 507	    def _translate_with_ollama_original(self, text: str, source_lang: str, target_lang: str, context=None, media_info=None, special_meanings=None) -> str:
 508	        """Original method to translate text using local Ollama service."""
 509	        if not self.config.has_section("ollama"):
 510	            self.logger.warning("Ollama configuration not found")
 511	            return ""
 512	        
 513	        server_url = self.config.get("ollama", "server_url", fallback="http://localhost:11434")
 514	        model = self.config.get("ollama", "model", fallback="")
 515	        
 516	        if not model:
 517	            self.logger.warning("Ollama model not configured")
 518	            return ""
 519	        
 520	        # Get full language names for clearer prompt
 521	        source_full = self._get_language_full_name(source_lang)
 522	        target_full = self._get_language_full_name(target_lang)
 523	        
 524	        # Create prompt for translation with clear instructions
 525	        if media_info:
 526	            prompt = (
 527	                f"You are an expert translator from {source_full} to {target_full}.\n"
 528	                f"These subtitles are for: {media_info['title']}\n"
 529	                f"Plot summary: {media_info['overview']}\n"
 530	                f"Genre: {media_info['genres']}\n"
 531	                f"Main cast: {media_info['cast']}\n"
 532	            )
 533	            
 534	            # Get and add wiki terminology if available
 535	            try:
 536	                if self.wiki_terminology:
 537	                    self.logger.info(f"Attempting to get wiki terminology for: {media_info.get('title', 'Unknown title')}")
 538	                    terminology = self.wiki_terminology.get_terminology(media_info)
 539	                    
 540	                    if not terminology:
 541	                        self.logger.warning("Wiki terminology returned None - feature may be disabled or wiki not found")
 542	                    elif not terminology.get('terms'):
 543	                        self.logger.warning(f"Wiki terminology found but no terms were extracted. Wiki URL: {terminology.get('wiki_url', 'Unknown')}")
 544	                    else:
 545	                        terms = terminology['terms']
 546	                        max_terms = self.config.getint("wiki_terminology", "max_terms", fallback=10)
 547	                        
 548	                        if terms:
 549	                            self.logger.info(f"Found {len(terms)} wiki terminology entries from {terminology.get('wiki_url', 'Unknown')}")
 550	                            prompt += f"\nIMPORTANT SHOW-SPECIFIC TERMINOLOGY:\n"
 551	                            prompt += f"The following terms have special meanings in this show and must be translated appropriately:\n"
 552	                            # Add up to max_terms terms
 553	                            for term in terms[:max_terms]:
 554	                                prompt += f"- {term['term']}: {term['definition']}\n"
 555	                            
 556	                            self.logger.info(f"Added {min(len(terms), max_terms)} wiki terminology entries to Ollama translation prompt")
 557	                        else:
 558	                            self.logger.warning("Wiki terminology returned empty terms list")
 559	                else:
 560	                    self.logger.debug("Wiki terminology service not initialized, skipping terminology lookup")
 561	            except Exception as e:
 562	                self.logger.error(f"Error adding wiki terminology to Ollama prompt: {str(e)}", exc_info=True)
 563	            
 564	            # Add user-defined special meanings if available
 565	            if special_meanings and len(special_meanings) > 0:
 566	                try:
 567	                    prompt += f"\nUSER-DEFINED SPECIAL MEANINGS:\n"
 568	                    prompt += f"The following terms have special meanings defined by the user and must be translated appropriately:\n"
 569	                    
 570	                    for meaning in special_meanings:
 571	                        if 'word' in meaning and 'meaning' in meaning:
 572	                            prompt += f"- {meaning['word']}: {meaning['meaning']}\n"
 573	                    
 574	                    self.logger.info(f"Added {len(special_meanings)} user-defined special meanings to Ollama translation prompt")
 575	                except Exception as e:
 576	                    self.logger.error(f"Error adding user-defined special meanings to Ollama prompt: {str(e)}")
 577	            
 578	            prompt += (
 579	                f"\nConsider this context from surrounding subtitles:\n\n"
 580	                f"CONTEXT:\n{context or 'No context available'}\n\n"
 581	                f"Translate this text: {text}\n\n"
 582	                f"Maintain the same formatting, tone, and meaning. Return ONLY the translated text."
 583	            )
 584	        else:
 585	            prompt = (
 586	                f"You are an expert translator from {source_full} to {target_full}.\n"
 587	                f"Maintain the same formatting, tone, and meaning as closely as possible.\n"
 588	                f"Return ONLY the translated text without explanations, quotation marks, or additional commentary.\n\n"
 589	                f"Text to translate: {text}"
 590	            )
 591	
 592	        # If context is available, add it:
 593	        if context and not media_info:
 594	            prompt = (
 595	                f"You are an expert translator from {source_full} to {target_full}.\n"
 596	                f"Consider this context from surrounding subtitles:\n\n"
 597	                f"CONTEXT:\n{context}\n\n"
 598	                f"Translate this text: {text}\n\n"
 599	                f"Maintain the same formatting, tone, and meaning. Return ONLY the translated text."
 600	            )
 601	        
 602	        # --- Revert to reading endpoint from config, fallback to /api/generate --- 
 603	        endpoint = self.config.get("ollama", "endpoint", fallback="/api/generate") 
 604	        url = f"{server_url.rstrip('/')}/{endpoint.lstrip('/')}"
 605	        # --- End endpoint change ---
 606	        
 607	        temperature = self.config.getfloat("general", "temperature", fallback=0.3)
 608	        
 609	        # --- Use /api/generate payload structure --- 
 610	        # Combine system-like instructions with the main prompt
 611	        system_instructions = "You are a professional translator. Translate the text accurately and return only the translation."
 612	        full_prompt = f"{system_instructions}\n\n{prompt}"
 613	        
 614	        data = {
 615	            "model": model,
 616	            "prompt": full_prompt, # Use 'prompt' key
 617	            "stream": False,
 618	            "options": {
 619	                "temperature": temperature
 620	            }
 621	        }
 622	        # --- End /api/generate payload ---
 623	        
 624	        # Add additional Ollama options if configured
 625	        options = {}
 626	        for option_name in ["num_gpu", "num_thread", "num_ctx"]:
 627	            if self.config.has_option("ollama", option_name):
 628	                # Extra-strict check - only proceed if option exists AND has a non-empty value
 629	                raw_value = self.config.get("ollama", option_name, fallback=None)
 630	                if raw_value is not None and str(raw_value).strip() != "" and not str(raw_value).strip().startswith('#'):
 631	                    try:
 632	                        options[option_name] = int(raw_value)
 633	                        self.logger.debug(f"Adding {option_name}={raw_value} to Ollama request")
 634	                    except ValueError:
 635	                        self.logger.warning(f"Invalid value for ollama.{option_name}, skipping")
 636	                else:
 637	                    self.logger.debug(f"Not adding {option_name} - empty or commented out value: '{raw_value}'")
 638	            else:
 639	                self.logger.debug(f"Option {option_name} not found in config")
 640	                
 641	        for option_name in ["use_mmap", "use_mlock"]:
 642	            if self.config.has_option("ollama", option_name):
 643	                value = self.config.get("ollama", option_name, fallback=None)
 644	                if value is not None and str(value).strip() != "":
 645	                    try:
 646	                        options[option_name] = self.config.getboolean("ollama", option_name)
 647	                        self.logger.debug(f"Adding {option_name}={value} to Ollama request")
 648	                    except ValueError:
 649	                        self.logger.warning(f"Invalid value for ollama.{option_name}, skipping")
 650	        if options:
 651	            data["options"].update(options)
 652	            self.logger.debug(f"Sending Ollama options: {json.dumps(options)}")
 653	        
 654	        # Make request with retries
 655	        max_retries = 3
 656	        retry_delay = 2  # seconds
 657	        
 658	        for attempt in range(max_retries):
 659	            try:
 660	                self.logger.debug(f"Calling Ollama API with model {model} at URL {url} (attempt {attempt+1}/{max_retries})")
 661	                self.logger.debug(f"Request data: {json.dumps(data)}")
 662	                
 663	                # Increase timeout for large or complex translations (300 seconds = 5 minutes)
 664	                timeout = 300
 665	                self.logger.debug(f"Setting Ollama request timeout to {timeout} seconds")
 666	                response = requests.post(url, json=data, timeout=timeout)
 667	                
 668	                # Log response details for debugging
 669	                self.logger.debug(f"Ollama response status: {response.status_code}")
 670	                self.logger.debug(f"Ollama response content: {response.text[:500]}...")
 671	                
 672	                response.raise_for_status()
 673	                result = response.json()
 674	                
 675	                # --- Parse /api/generate response structure --- 
 676	                translated_text = ""
 677	                if "response" in result:
 678	                    translated_text = result["response"].strip()
 679	                    self.logger.debug(f"Received Ollama translation response (len={len(translated_text)})")
 680	                    
 681	                    # Apply think tags filter to remove thinking content
 682	                    translated_text = self.remove_think_tags(translated_text)
 683	                # --- End /api/generate response parsing ---
 684	                
 685	                if translated_text:
 686	                    # Clean up response - Ollama sometimes adds extra quotes or markdown
 687	                    translated_text = translated_text.strip(' "\'\n`')
 688	                    
 689	                    # Remove potential prefixes that the model might add
 690	                    prefixes_to_remove = [
 691	                        "Translation:", 
 692	                        "Translated text:", 
 693	                        "Here's the translation:"
 694	                    ]
 695	                    for prefix in prefixes_to_remove:
 696	                        if translated_text.startswith(prefix):
 697	                            translated_text = translated_text[len(prefix):].strip()
 698	                    
 699	                    self.logger.debug(f"Ollama translation successful: {translated_text[:50]}...")
 700	                    return translated_text
 701	                else:
 702	                    self.logger.warning(f"Ollama API returned no translatable content in attempt {attempt+1}")
 703	                    if attempt < max_retries - 1:
 704	                        time.sleep(retry_delay)
 705	                        continue
 706	                    return ""
 707	                
 708	            except requests.exceptions.Timeout:
 709	                self.logger.warning(f"Ollama API request timed out after {timeout} seconds on attempt {attempt+1}")
 710	                if attempt < max_retries - 1:
 711	                    time.sleep(retry_delay)
 712	                    continue
 713	                return ""
 714	            except requests.exceptions.RequestException as e:
 715	                self.logger.error(f"Ollama API request failed on attempt {attempt+1}: {str(e)}")
 716	                if attempt < max_retries - 1:
 717	                    time.sleep(retry_delay)
 718	                    continue
 719	                return ""
 720	            except json.JSONDecodeError as e:
 721	                self.logger.error(f"Error parsing Ollama response on attempt {attempt+1}: {str(e)}")
 722	                if attempt < max_retries - 1:
 723	                    time.sleep(retry_delay)
 724	                    continue
 725	                return ""
 726	        
 727	        self.logger.error("All Ollama translation attempts failed")
 728	        return ""
 729	    
 730	    def _translate_with_google(self, text: str, source_lang: str, target_lang: str) -> str:
 731	        """
 732	        Translate text using Google Translate API (free web API).
 733	        Note: This uses the unofficial API and may be rate limited or blocked.
 734	        """
 735	        # Convert language codes
 736	        source_iso = self.get_iso_code(source_lang)
 737	        target_iso = self.get_iso_code(target_lang)
 738	        
 739	        # Prepare request
 740	        import urllib.parse
 741	        base_url = "https://translate.googleapis.com/translate_a/single"
 742	        params = {
 743	            "client": "gtx",
 744	            "sl": source_iso,
 745	            "tl": target_iso,
 746	            "dt": "t",  # return translated text
 747	            "q": text
 748	        }
 749	        
 750	        url = f"{base_url}?{urllib.parse.urlencode(params)}"
 751	        
 752	        # Make request
 753	        try:
 754	            self.logger.debug(f"Calling Google Translate API: {source_iso} -> {target_iso}")
 755	            response = requests.get(url, timeout=30)
 756	            response.raise_for_status()
 757	            result = response.json()
 758	            
 759	            # Extract translation from Google's response format
 760	            if result and isinstance(result, list) and len(result) > 0:
 761	                translation = ""
 762	                for sentence_data in result[0]:
 763	                    if sentence_data and isinstance(sentence_data, list) and len(sentence_data) > 0:
 764	                        translation += sentence_data[0]
 765	                
 766	                return translation
 767	            
 768	            self.logger.warning("Google Translate API returned unexpected format")
 769	            return ""
 770	            
 771	        except requests.exceptions.RequestException as e:
 772	            self.logger.error(f"Google Translate API request failed: {str(e)}")
 773	            return ""
 774	        except (ValueError, KeyError, IndexError) as e:
 775	            self.logger.error(f"Error parsing Google Translate response: {str(e)}")
 776	            return ""
 777	    
 778	    def _get_language_full_name(self, language_code: str) -> str:
 779	        """Convert language code to full name."""
 780	        # Reverse mapping from code to name
 781	        reverse_mapping = {v: k for k, v in self.language_mapping.items()}
 782	        return reverse_mapping.get(language_code.lower(), language_code)
 783	
 784	    def _translate_with_ollama_as_final(self, text: str, source_lang: str, target_lang: str, translations: dict, context_before=None, context_after=None, media_info=None, special_meanings=None) -> Optional[str]:
 785	        try:
 786	            # Improved prompt with clearer instructions and structure
 787	            prompt = f"""You are a subtitle translation expert. Your task is to translate ONLY the line marked as "TEXT TO TRANSLATE" below.
 788	
 789	IMPORTANT INSTRUCTIONS:
 790	- Translate ONLY the text marked "TEXT TO TRANSLATE" from {self._get_language_full_name(source_lang)} to {self._get_language_full_name(target_lang)}
 791	- Do NOT translate any of the context lines - they are for understanding the scene only
 792	- Return ONLY your final translation, without quotes, explanations, or notes
 793	- Maintain formatting (especially HTML tags if present)
 794	"""
 795	
 796	            # Add media info from TMDB if available
 797	            if media_info:
 798	                prompt += f"""
 799	MOVIE/SHOW INFORMATION:
 800	Title: {media_info.get('title', media_info.get('name', 'Unknown'))}
 801	Overview: {media_info.get('overview', 'No description available')}
 802	Genres: {media_info.get('genres', 'Unknown')}
 803	Cast: {media_info.get('cast', 'Unknown')}
 804	"""
 805	                # Add episode-specific information if available
 806	                if media_info.get('has_episode_data', False):
 807	                    prompt += f"""
 808	EPISODE INFORMATION:
 809	Title: {media_info.get('episode_title', 'Unknown')}
 810	Season/Episode: S{media_info.get('season_number', 0):02d}E{media_info.get('episode_number', 0):02d}
 811	Overview: {media_info.get('episode_overview', 'No description available')}
 812	Air Date: {media_info.get('air_date', 'Unknown')}
 813	"""
 814	                
 815	                # Get and add wiki terminology if available
 816	                try:
 817	                    self.logger.info(f"Attempting to get wiki terminology for: {media_info.get('title', 'Unknown title')}")
 818	                    
 819	                    if self.wiki_terminology:
 820	                        terminology = self.wiki_terminology.get_terminology(media_info)
 821	                        
 822	                        if terminology:
 823	                            # Always add wiki summary if available
 824	                            if terminology.get('wiki_summary'):
 825	                                wiki_summary = terminology.get('wiki_summary')
 826	                                prompt += f"\nSHOW WIKI SUMMARY:\n{wiki_summary}\n"
 827	                                self.logger.info(f"Added wiki summary from {terminology.get('wiki_url', 'Unknown')}")
 828	                            
 829	                            # Add terms if available
 830	                            if terminology.get('terms') and len(terminology.get('terms', [])) > 0:
 831	                                terms = terminology['terms']
 832	                                max_terms = self.config.getint("wiki_terminology", "max_terms", fallback=10)
 833	                                
 834	                                prompt += f"\nIMPORTANT SHOW-SPECIFIC TERMINOLOGY:\n"
 835	                                prompt += f"The following terms have special meanings in this show and must be translated appropriately:\n"
 836	                                
 837	                                # Add up to max_terms terms
 838	                                for term in terms[:max_terms]:
 839	                                    if isinstance(term, dict) and 'term' in term and 'definition' in term:
 840	                                        prompt += f"- {term['term']}: {term['definition']}\n"
 841	                                
 842	                                self.logger.info(f"Added {min(len(terms), max_terms)} wiki terminology entries to prompt")
 843	                            else:
 844	                                self.logger.warning(f"Wiki terminology found but no terms were extracted. Wiki URL: {terminology.get('wiki_url', 'Unknown')}")
 845	                        else:
 846	                            self.logger.warning("No wiki terminology found for this media")
 847	                    else:
 848	                        self.logger.debug("Wiki terminology service not initialized, skipping terminology lookup")
 849	                except Exception as e:
 850	                    self.logger.error(f"Error adding wiki terminology to prompt: {str(e)}", exc_info=True)
 851	                    
 852	            # Add user-defined special meanings if provided
 853	            # Check if special_meanings was explicitly passed as a parameter
 854	            if special_meanings:
 855	                if isinstance(special_meanings, list) and len(special_meanings) > 0:
 856	                    prompt += f"""
 857	USER-DEFINED SPECIAL MEANINGS:
 858	The following terms have special meanings defined by the user and must be translated appropriately:
 859	"""
 860	                    for meaning in special_meanings:
 861	                        if isinstance(meaning, dict) and 'word' in meaning and 'meaning' in meaning:
 862	                            prompt += f"- {meaning['word']}: {meaning['meaning']}\n"
 863	                    
 864	                    self.logger.info(f"Added {len(special_meanings)} user-defined special meanings to Ollama prompt")
 865	            # Legacy format check - in case we still receive specialMeanings through the translations dictionary
 866	            elif isinstance(translations, dict) and isinstance(translations.get('specialMeanings'), list):
 867	                special_meanings = translations.get('specialMeanings')
 868	                if len(special_meanings) > 0:
 869	                    prompt += f"""
 870	USER-DEFINED SPECIAL MEANINGS:
 871	The following terms have special meanings defined by the user and must be translated appropriately:
 872	"""
 873	                    for meaning in special_meanings:
 874	                        if isinstance(meaning, dict) and 'word' in meaning and 'meaning' in meaning:
 875	                            prompt += f"- {meaning['word']}: {meaning['meaning']}\n"
 876	                    
 877	                    self.logger.info(f"Added {len(special_meanings)} user-defined special meanings to Ollama prompt (from translations dict)")
 878	
 879	            # Add context lines before if available
 880	            if context_before and len(context_before) > 0:
 881	                prompt += f"""
 882	CONTEXT (PREVIOUS LINES):
 883	{context_before}
 884	"""
 885	
 886	            # Add the line being translated with clear marking
 887	            prompt += f"""
 888	-----------------------------------------------------
 889	TEXT TO TRANSLATE: {text}
 890	-----------------------------------------------------
 891	"""
 892	
 893	            # Add context lines after if available
 894	            if context_after and len(context_after) > 0:
 895	                prompt += f"""
 896	CONTEXT (FOLLOWING LINES):
 897	{context_after}
 898	"""
 899	
 900	            # Add available translations for reference
 901	            prompt += f"""
 902	AVAILABLE TRANSLATIONS:
 903	"""
 904	            
 905	            for service, translation in translations.items():
 906	                if service != 'specialMeanings':  # Skip the special meanings entry if it exists
 907	                    prompt += f"{service.upper()}: {translation}\n"
 908	
 909	            # Add final reminder
 910	            prompt += """
 911	IMPORTANT: Return ONLY your translation of the text between the dotted lines. Do not include explanations, notes, or the original text.
 912	"""
 913	
 914	            # Debug output
 915	            debug_mode = self.config.getboolean('general', 'debug_mode', fallback=False)
 916	            if debug_mode:
 917	                self.logger.debug(f"Sending request to Ollama final translator with prompt: {prompt}")
 918	            else:
 919	                self.logger.debug(f"Sending request to Ollama final translator with prompt: {prompt[:100]}...") # Log truncated prompt
 920	
 921	            # Now add the actual API call to Ollama (copying from _translate_with_ollama method)
 922	            server_url = self.config.get("ollama", "server_url", fallback="http://localhost:11434")
 923	            model = self.config.get("ollama", "model", fallback="")
 924	            endpoint = self.config.get("ollama", "endpoint", fallback="/api/generate")
 925	            url = f"{server_url.rstrip('/')}/{endpoint.lstrip('/')}"
 926	            temperature = self.config.getfloat("general", "temperature", fallback=0.3)
 927	            
 928	            # Create request data with only the essential parameters
 929	            data = {
 930	                "model": model,
 931	                "prompt": prompt,
 932	                "stream": False,
 933	                "options": {
 934	                    "temperature": temperature
 935	                }
 936	            }
 937	            
 938	            # Add additional Ollama performance options ONLY if they are explicitly set in config
 939	            # This ensures we don't send any default values that weren't in config.ini
 940	            options = {}
 941	            for option_name in ["num_gpu", "num_thread", "num_ctx"]:
 942	                if self.config.has_option("ollama", option_name):
 943	                    # Verify the option is actually set and not commented out
 944	                    raw_value = self.config.get("ollama", option_name, fallback=None)
 945	                    if raw_value is not None and str(raw_value).strip() and not str(raw_value).strip().startswith('#'):
 946	                        try:
 947	                            # Only include numeric options with valid integer values
 948	                            options[option_name] = self.config.getint("ollama", option_name)
 949	                            self.logger.debug(f"Including Ollama option from config: {option_name}={options[option_name]}")
 950	                        except ValueError:
 951	                            self.logger.warning(f"Invalid value for Ollama option '{option_name}': {raw_value}")
 952	            
 953	            # Add boolean options with the same careful checking
 954	            for option_name in ["use_mmap", "use_mlock"]:
 955	                if self.config.has_option("ollama", option_name):
 956	                    raw_value = self.config.get("ollama", option_name, fallback=None)
 957	                    if raw_value is not None and str(raw_value).strip() and not str(raw_value).strip().startswith('#'):
 958	                        try:
 959	                            # Only include boolean options with valid values
 960	                            options[option_name] = self.config.getboolean("ollama", option_name)
 961	                            self.logger.debug(f"Including Ollama option from config: {option_name}={options[option_name]}")
 962	                        except ValueError:
 963	                            self.logger.warning(f"Invalid value for Ollama option '{option_name}': {raw_value}")
 964	            
 965	            # Only update the options in the request if we have valid options
 966	            if options:
 967	                data["options"].update(options)
 968	                self.logger.debug(f"Sending Ollama options: {json.dumps(options)}")
 969	            
 970	            # Make request with retry logic
 971	            max_retries = 3
 972	            
 973	            for attempt in range(max_retries):
 974	                self.logger.info(f"Waiting for Ollama final response (attempt {attempt+1}/{max_retries})...")
 975	                try:
 976	                    response = requests.post(url, json=data, timeout=180)
 977	                    self.logger.debug(f"Ollama final translator response status: {response.status_code}")
 978	                    
 979	                    response.raise_for_status()
 980	                    result = response.json()
 981	                    
 982	                    if "response" in result:
 983	                        translated_text = result["response"].strip()
 984	                        
 985	                        # Apply think tags filter to remove thinking content
 986	                        translated_text = self.remove_think_tags(translated_text)
 987	                        
 988	                        # Clean up response - removing quotes, prefixes, etc.
 989	                        translated_text = translated_text.strip(' "\'\n`')
 990	                        
 991	                        # Remove potential prefixes the model might add
 992	                        prefixes_to_remove = [
 993	                            "Translation:", 
 994	                            "Translated text:", 
 995	                            "Here's the translation:",
 996	                            "Final translation:"
 997	                        ]
 998	                        for prefix in prefixes_to_remove:
 999	                            if translated_text.lower().startswith(prefix.lower()):
1000	                                translated_text = translated_text[len(prefix):].strip()
1001	                        
1002	                        # Fix one-character-per-line issue with HTML tags
1003	                        if '\n' in translated_text and '<' in translated_text and '>' in translated_text:
1004	                            # More robust HTML tag detection 
1005	                            lines = translated_text.split('\n')
1006	                            # Check if a significant number of lines are single characters
1007	                            single_char_lines = sum(1 for line in lines if len(line.strip()) == 1)
1008	                            
1009	                            # If more than 30% of lines are single characters, or we detect a broken HTML tag
1010	                            if (single_char_lines / len(lines) > 0.3) or any('<' in ''.join(lines[:5]) and '>' in ''.join(lines) for i in range(len(lines))):
1011	                                translated_text = translated_text.replace('\n', '')
1012	                                self.logger.debug("Fixed multi-line HTML tag in translation")
1013	                        
1014	                        return translated_text
1015	                    
1016	                    self.logger.warning(f"Ollama final translator returned no translatable content in attempt {attempt+1}")
1017	                    time.sleep(2)  # Wait before retrying
1018	                    
1019	                except Exception as e:
1020	                    self.logger.error(f"Error in Ollama final translator attempt {attempt+1}: {str(e)}")
1021	                    if attempt < max_retries - 1:
1022	                        time.sleep(2)
1023	            
1024	            return None
1025	        except Exception as e:
1026	            self.logger.error(f"Error using Ollama as final translator: {str(e)}")
1027	            return None
1028	
1029	    def get_media_info(self, title, year=None, original_filename=None, season=None, episode=None):
1030	        """Get movie or TV show information from TMDB API by trying both types.
1031	        
1032	        Args:
1033	            title: The title of the media
1034	            year: Optional year of release
1035	            original_filename: Original filename with potential season/episode info
1036	            season: Optional season number extracted from filename
1037	            episode: Optional episode number extracted from filename
1038	        """
1039	        if not self.use_tmdb or not self.tmdb_api_key:
1040	            self.logger.warning("TMDB is disabled or API key not set")
1041	            return None
1042	            
1043	        try:
1044	            self.logger.debug(f"Searching TMDB for: '{title}' (Year: {year or 'Any'})")
1045	            
1046	            # First try as a TV show
1047	            tv_info = self._fetch_media_info(title, year, "tv")
1048	            if tv_info:
1049	                self.logger.info(f"Found TV show information for '{title}'")
1050	                
1051	                # Check if season/episode numbers were provided
1052	                # Use the explicit season/episode parameters if provided
1053	                if season and episode:
1054	                    self.logger.debug(f"Using provided season/episode: S{season:02d}E{episode:02d}")
1055	                    episode_info = self._fetch_episode_info(tv_info["tmdb_id"], season, episode)
1056	                    if episode_info:
1057	                        # Combine show and episode information
1058	                        tv_info.update(episode_info)
1059	                        self.logger.info(f"Enhanced TV info with episode data: S{season:02d}E{episode:02d} - {episode_info.get('episode_title', 'Unknown')}")
1060	                
1061	                return tv_info
1062	                
1063	            # If no TV show found, try as a movie
1064	            movie_info = self._fetch_media_info(title, year, "movie")
1065	            if movie_info:
1066	                self.logger.info(f"Found movie information for '{title}'")
1067	                return movie_info
1068	                
1069	            self.logger.warning(f"No TMDB results found for '{title}' as either TV show or movie")
1070	            return None
1071	            
1072	        except Exception as e:
1073	            self.logger.error(f"Error getting media info from TMDB: {str(e)}")
1074	            import traceback
1075	            self.logger.debug(f"TMDB error details: {traceback.format_exc()}")
1076	            return None
1077	            
1078	    def _fetch_media_info(self, title, year=None, media_type="movie"):
1079	        """Internal method to fetch media info from TMDB for a specific type."""
1080	        try:
1081	            self.logger.debug(f"Searching TMDB for '{title}' as {media_type}")
1082	            
1083	            # Search for the media item
1084	            search_url = f"https://api.themoviedb.org/3/search/{media_type}"
1085	            params = {
1086	                "api_key": self.tmdb_api_key,
1087	                "query": title,
1088	                "language": self.tmdb_language
1089	            }
1090	            if year:
1091	                params["year" if media_type == "movie" else "first_air_date_year"] = year
1092	            
1093	            self.logger.debug(f"TMDB API call: GET {search_url} with params: {params}")
1094	            response = requests.get(search_url, params=params)
1095	            
1096	            # Log response status
1097	            self.logger.debug(f"TMDB {media_type} search response status: {response.status_code}")
1098	            
1099	            if response.status_code != 200:
1100	                self.logger.warning(f"TMDB {media_type} search failed: {response.status_code} - {response.text}")
1101	                return None
1102	                
1103	            search_results = response.json()
1104	            
1105	            # Log search results summary
1106	            result_count = len(search_results.get("results", []))
1107	            self.logger.debug(f"TMDB {media_type} search found {result_count} results")
1108	            
1109	            if not search_results.get("results"):
1110	                self.logger.debug(f"No TMDB {media_type} results found for: {title}")
1111	                return None
1112	                
1113	            # Get the first result
1114	            media_id = search_results["results"][0]["id"]
1115	            result_title = search_results["results"][0].get("title" if media_type == "movie" else "name", "Unknown")
1116	            
1117	            # Log the selected result
1118	            self.logger.debug(f"Selected TMDB {media_type} result: ID {media_id}, Title: {result_title}")
1119	            
1120	            # Get detailed information
1121	            details_url = f"https://api.themoviedb.org/3/{media_type}/{media_id}"
1122	            details_params = {
1123	                "api_key": self.tmdb_api_key,
1124	                "language": self.tmdb_language,
1125	                "append_to_response": "credits"
1126	            }
1127	            
1128	            self.logger.debug(f"TMDB {media_type} details API call: GET {details_url}")
1129	            details_response = requests.get(details_url, params=details_params)
1130	            
1131	            # Log details response status
1132	            self.logger.debug(f"TMDB {media_type} details response status: {details_response.status_code}")
1133	            
1134	            if details_response.status_code != 200:
1135	                self.logger.warning(f"TMDB {media_type} details fetch failed: {details_response.status_code} - {details_response.text}")
1136	                return None
1137	                
1138	            details = details_response.json()
1139	            
1140	            # Build summary
1141	            info = {
1142	                "type": media_type,
1143	                "title": details.get("title", details.get("name", "")),
1144	                "overview": details.get("overview", ""),
1145	                "genres": ", ".join([genre["name"] for genre in details.get("genres", [])]),
1146	                "release_date": details.get("release_date", details.get("first_air_date", "")),
1147	                "cast": ", ".join([cast["name"] for cast in details.get("credits", {}).get("cast", [])[:5]]),
1148	                "id": media_id,  # Store the media ID with a consistent key name
1149	                "tmdb_id": media_id  # Also include the original key name for backward compatibility
1150	            }
1151	            
1152	            self.logger.info(f"Successfully retrieved TMDB data for '{info['title']}' ({media_type})")
1153	            self.logger.debug(f"TMDB data details: {json.dumps(info)}")
1154	            return info
1155	            
1156	        except Exception as e:
1157	            self.logger.error(f"Error fetching {media_type} info from TMDB: {str(e)}")
1158	            return None
1159	
1160	    def _fetch_episode_info(self, tv_id, season_number, episode_number):
1161	        """Fetch details for a specific episode of a TV show."""
1162	        try:
1163	            self.logger.debug(f"Fetching episode info for TV ID {tv_id}, S{season_number:02d}E{episode_number:02d}")
1164	            
1165	            # API URL for episode information
1166	            url = f"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
1167	            params = {
1168	                "api_key": self.tmdb_api_key,
1169	                "language": self.tmdb_language
1170	            }
1171	            
1172	            self.logger.debug(f"TMDB episode API call: GET {url}")
1173	            response = requests.get(url, params=params)
1174	            
1175	            # Log response status
1176	            self.logger.debug(f"TMDB episode info response status: {response.status_code}")
1177	            
1178	            if response.status_code != 200:
1179	                self.logger.warning(f"TMDB episode info fetch failed: {response.status_code} - {response.text}")
1180	                return None
1181	                
1182	            episode_data = response.json()
1183	            
1184	            # Extract relevant episode information
1185	            episode_info = {
1186	                "episode_title": episode_data.get("name", ""),
1187	                "episode_overview": episode_data.get("overview", ""),
1188	                "episode_number": episode_data.get("episode_number", 0),
1189	                "season_number": episode_data.get("season_number", 0),
1190	                "air_date": episode_data.get("air_date", ""),
1191	                "has_episode_data": True
1192	            }
1193	            
1194	            self.logger.info(f"Successfully retrieved episode data: '{episode_info['episode_title']}'")
1195	            return episode_info
1196	            
1197	        except Exception as e:
1198	            self.logger.error(f"Error fetching episode info: {str(e)}")
1199	            return None
1200	
1201	    def load_special_meanings(self):
1202	        """
1203	        Load special word meanings from the JSON file.
1204	        
1205	        Returns:
1206	            List of dictionaries containing word meanings or empty list if file doesn't exist
1207	        """
1208	        meanings_file = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 
1209	                                    'files', 'meaning.json')
1210	        try:
1211	            if os.path.exists(meanings_file):
1212	                self.logger.info(f"Loading special meanings from {meanings_file}")
1213	                with open(meanings_file, 'r', encoding='utf-8') as f:
1214	                    meanings = json.load(f)
1215	                self.logger.info(f"Loaded {len(meanings)} special meanings from file")
1216	                return meanings
1217	            else:
1218	                self.logger.warning(f"Special meanings file not found: {meanings_file}")
1219	                return []
1220	        except Exception as e:
1221	            self.logger.error(f"Error loading special meanings: {str(e)}")
1222	            return []
1223	            
1224	    def save_special_meanings(self, meanings):
1225	        """
1226	        Save special word meanings to the JSON file.
1227	        
1228	        Args:
1229	            meanings: List of dictionaries containing word meanings
1230	        
1231	        Returns:
1232	            Boolean indicating success or failure
1233	        """
1234	        meanings_file = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 
1235	                                    'files', 'meaning.json')
1236	        try:
1237	            # Ensure the directory exists
1238	            os.makedirs(os.path.dirname(meanings_file), exist_ok=True)
1239	            
1240	            with open(meanings_file, 'w', encoding='utf-8') as f:
1241	                json.dump(meanings, f, ensure_ascii=False, indent=2)
1242	            self.logger.info(f"Saved {len(meanings)} special meanings to {meanings_file}")
1243	            return True
1244	        except Exception as e:
1245	            self.logger.error(f"Error saving special meanings: {str(e)}")
1246	            return False
1247	
1248	    def remove_think_tags(self, text: str) -> str:
1249	        """
1250	        Remove content between <think> and </think> tags.
1251	        This allows models to include their thinking process without it showing up in the final output.
1252	        
1253	        Args:
1254	            text: The text to process
1255	            
1256	        Returns:
1257	            Text with the thinking content removed
1258	        """
1259	        if not text:
1260	            return ""
1261	            
1262	        # Use regex to remove anything between <think> and </think> tags, including the tags
1263	        cleaned_text = re.sub(r'<think>.*?</think>', '', text, flags=re.DOTALL)
1264	        
1265	        # If debug mode is enabled, log when thinking content was removed
1266	        debug_mode = self.config.getboolean('general', 'debug_mode', fallback=False)
1267	        if debug_mode and text != cleaned_text:
1268	            self.logger.debug(f"Removed thinking content from response (original length: {len(text)}, new length: {len(cleaned_text)})")
1269	            
1270	        return cleaned_text.strip()

--- File: py/video_transcriber.py ---
   1	import os
   2	import requests
   3	import logging
   4	import json
   5	import time
   6	import socket
   7	import tempfile
   8	import subprocess
   9	import shutil
  10	import uuid
  11	import struct
  12	import importlib.util
  13	import textwrap
  14	import re
  15	from datetime import timedelta
  16	from typing import Dict, Any, Optional, Tuple, List, BinaryIO, Union
  17	from urllib.parse import urlparse
  18	import wave  # add missing import for WAV handling
  19	
  20	class VideoTranscriber:
  21	    """
  22	    Class for handling video transcription using faster-whisper API or Wyoming protocol.
  23	    If external services fail, falls back to local transcription.
  24	    """
  25	    
  26	    # Class variable to store progress information
  27	    _progress_data: Dict[str, Dict[str, Any]] = {}
  28	    
  29	    def __init__(self, server_url="http://10.0.10.23:10300", logger=None):
  30	        """
  31	        Initialize the VideoTranscriber.
  32	        
  33	        Args:
  34	            server_url (str): URL of the faster-whisper API server
  35	            logger: Logger instance for logging
  36	        """
  37	        # Try to read server_url from config if it exists
  38	        self.use_remote_whisper = True # Default to true
  39	        try:
  40	            import configparser
  41	            import os
  42	            config = configparser.ConfigParser()
  43	            config_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'config.ini')
  44	            if os.path.exists(config_path):
  45	                config.read(config_path)
  46	                if 'whisper' in config:
  47	                    if 'server_url' in config['whisper']:
  48	                        server_url = config['whisper']['server_url']
  49	                    self.use_remote_whisper = config['whisper'].getboolean('use_remote_whisper', True)
  50	        except Exception:
  51	            # If anything goes wrong, use the provided default
  52	            pass
  53	            
  54	        self.server_url = server_url.rstrip('/')
  55	        self.logger = logger or logging.getLogger(__name__)
  56	        self.log('info', f"VideoTranscriber initialized with server URL: {self.server_url}")
  57	        
  58	        # Extract host and port from server_url for Wyoming protocol
  59	        parsed_url = urlparse(self.server_url)
  60	        self.server_host = parsed_url.hostname or "10.0.10.23"
  61	        self.server_port = parsed_url.port or 10300
  62	        
  63	        # Initialize local whisper transcriber to None - will be created on-demand
  64	        self._local_transcriber = None
  65	        
  66	        # Check if the server is available
  67	        self.check_server_availability()
  68	        
  69	    def log(self, level, message):
  70	        """Helper method to log messages if a logger is available."""
  71	        if self.logger:
  72	            if level == 'debug':
  73	                self.logger.debug(message)
  74	            elif level == 'info':
  75	                self.logger.info(message)
  76	            elif level == 'warning':
  77	                self.logger.warning(message)
  78	            elif level == 'error':
  79	                self.logger.error(message)
  80	    
  81	    def check_server_availability(self):
  82	        """Check if the transcription server is available."""
  83	        try:
  84	            with socket.create_connection((self.server_host, self.server_port), timeout=5) as s:
  85	                self.log('info', f"TCP connection to {self.server_host}:{self.server_port} successful")
  86	                return True
  87	        except Exception as e:
  88	            self.log('warning', f"TCP connection to {self.server_host}:{self.server_port} failed: {e}")
  89	            
  90	            # Try HTTP fallback
  91	            try:
  92	                response = requests.get(f"{self.server_url}/ping", timeout=5)
  93	                if response.status_code < 500:
  94	                    return True
  95	            except:
  96	                pass
  97	                
  98	            self.log('warning', f"Server at {self.server_url} might not be available")
  99	            # Don't return False yet - we'll still try to use the server
 100	            return True  # Return True anyway to avoid local fallback
 101	    
 102	    def _wyoming_send_event(self, sock: socket.socket, event_dict: dict, payload: bytes = None) -> None:
 103	        """Send a Wyoming protocol event over a socket.
 104	        The event_dict is the base header. If it contains a 'data' key, 
 105	        that 'data' object is serialized as a separate JSON segment.
 106	        """
 107	        header_fields = {key: value for key, value in event_dict.items() if key != 'data'}
 108	        data_segment_bytes = b""
 109	
 110	        if 'data' in event_dict and event_dict['data'] is not None:
 111	            # Serialize the data field as a separate JSON string
 112	            data_segment_bytes = json.dumps(event_dict['data']).encode('utf-8')
 113	            header_fields['data_length'] = len(data_segment_bytes)
 114	        else:
 115	            # Ensure data_length is 0 if no data field or data is None
 116	            header_fields['data_length'] = 0
 117	
 118	        if payload:
 119	            header_fields['payload_length'] = len(payload)
 120	        else:
 121	            header_fields['payload_length'] = 0
 122	
 123	        # Serialize the header fields
 124	        header_line_bytes = json.dumps(header_fields).encode('utf-8') + b'\n'
 125	
 126	        # Send header line
 127	        sock.sendall(header_line_bytes)
 128	
 129	        # Send data segment if it exists
 130	        if header_fields['data_length'] > 0:
 131	            sock.sendall(data_segment_bytes)
 132	
 133	        # Send payload if it exists
 134	        if header_fields['payload_length'] > 0:
 135	            sock.sendall(payload)
 136	
 137	    def _wyoming_receive_event(self, sock, timeout=30):
 138	        """Receive and parse a Wyoming event from the socket.
 139	        
 140	        Args:
 141	            sock (socket.socket): The socket to receive from
 142	            timeout (float, optional): Timeout in seconds. Defaults to 30.
 143	            
 144	        Returns:
 145	            dict: The received event or None if failed
 146	        """
 147	        try:
 148	            # Save original timeout and set new one
 149	            original_timeout = sock.gettimeout()
 150	            sock.settimeout(timeout)
 151	            
 152	            try:
 153	                # Wyoming protocol uses JSON lines format
 154	                # Read until newline character with better error handling
 155	                data = b''
 156	                line_read_start = time.time()
 157	                max_line_time = 30  # Maximum time to wait for a complete line
 158	                
 159	                while time.time() - line_read_start < max_line_time:
 160	                    try:
 161	                        chunk = sock.recv(1)
 162	                        if not chunk:  # Connection closed
 163	                            # If we have some data but connection closed before newline, 
 164	                            # wait briefly and try again
 165	                            if data:
 166	                                time.sleep(0.5)
 167	                                continue
 168	                            self.log('warning', "Connection closed while receiving event header")
 169	                            return None
 170	                            
 171	                        data += chunk
 172	                        if chunk == b'\n':
 173	                            break
 174	                    except socket.timeout:
 175	                        # Small timeout, continue trying to read
 176	                        if data:
 177	                            self.log('debug', f"Timeout during header read with partial data ({len(data)} bytes)")
 178	                        continue
 179	                
 180	                # Check if we got a complete line
 181	                if not data.endswith(b'\n'):
 182	                    self.log('warning', f"Incomplete header received after {max_line_time}s: {data[:100]}")
 183	                    return None
 184	                
 185	                # Parse the JSON data
 186	                try:
 187	                    event = json.loads(data.decode('utf-8'))
 188	                    
 189	                    # Validate event structure
 190	                    if not isinstance(event, dict):
 191	                        self.log('warning', f"Event is not a dictionary: {event}")
 192	                        return None
 193	                        
 194	                    if 'type' not in event:
 195	                        self.log('warning', f"Event has no type field: {event}")
 196	                        return None
 197	                    
 198	                    # If the event has data_length, we need to read the data segment
 199	                    if 'data_length' in event and event['data_length'] > 0:
 200	                        data_bytes = self._wyoming_receive_exactly(sock, event['data_length'])
 201	                        if data_bytes:
 202	                            try:
 203	                                event['data'] = json.loads(data_bytes.decode('utf-8'))
 204	                            except json.JSONDecodeError:
 205	                                self.log('warning', f"Failed to decode data segment: {data_bytes[:100]}")
 206	                                # Keep the event without data
 207	                        else:
 208	                            self.log('warning', "Failed to receive data segment")
 209	                    
 210	                    # If the event has payload_length, we need to read the payload
 211	                    if 'payload_length' in event and event['payload_length'] > 0:
 212	                        payload = self._wyoming_receive_exactly(sock, event['payload_length'])
 213	                        if payload:
 214	                            event['payload'] = payload
 215	                        else:
 216	                            self.log('warning', "Failed to receive payload")
 217	                    
 218	                    self.log('debug', f"Successfully received event of type: {event.get('type')}")
 219	                    return event
 220	                    
 221	                except json.JSONDecodeError as e:
 222	                    self.log('warning', f"Failed to decode JSON: {data[:100]}, error: {str(e)}")
 223	                    return None
 224	            finally:
 225	                # Restore original timeout
 226	                sock.settimeout(original_timeout)
 227	                
 228	        except socket.timeout:
 229	            self.log('warning', "Socket timeout while receiving event")
 230	            return None
 231	        except ConnectionError as e:
 232	            self.log('warning', f"Connection error: {e}")
 233	            return None
 234	        except Exception as e:
 235	            self.log('warning', f"Error receiving Wyoming event: {e}")
 236	            import traceback
 237	            self.log('debug', traceback.format_exc())
 238	            return None
 239	
 240	    def _wyoming_receive_exactly(self, sock, length):
 241	        """Helper method to receive exactly N bytes from socket
 242	        
 243	        Args:
 244	            sock (socket.socket): The socket to receive from
 245	            length (int): Number of bytes to receive
 246	            
 247	        Returns:
 248	            bytes: The received data or None if failed
 249	        """
 250	        data = b''
 251	        start_time = time.time()
 252	        max_recv_time = 60  # Maximum time to receive the data
 253	        
 254	        # Get current timeout to restore later
 255	        original_timeout = sock.gettimeout()
 256	        
 257	        try:
 258	            # Use shorter timeouts for receiving chunks
 259	            sock.settimeout(5)
 260	            
 261	            while len(data) < length and (time.time() - start_time) < max_recv_time:
 262	                try:
 263	                    # Try to receive remaining bytes
 264	                    remaining = length - len(data)
 265	                    chunk = sock.recv(min(4096, remaining))
 266	                    
 267	                    if not chunk:  # Connection closed
 268	                        if data:  # If we have partial data, wait briefly and retry
 269	                            time.sleep(0.5)
 270	                            continue
 271	                        self.log('warning', f"Connection closed while receiving data ({len(data)}/{length} bytes)")
 272	                        return None
 273	                    
 274	                    data += chunk
 275	                except socket.timeout:
 276	                    # Small timeout, continue trying
 277	                    continue
 278	            
 279	            # Check if we got all the data
 280	            if len(data) < length:
 281	                self.log('warning', f"Incomplete data received: got {len(data)}/{length} bytes after {max_recv_time}s")
 282	                return None
 283	                
 284	            return data
 285	            
 286	        finally:
 287	            # Restore original timeout
 288	            sock.settimeout(original_timeout)
 289	
 290	    def _wyming_send_event_with_timeout(self, sock: socket.socket, event: dict, payload: bytes = None, timeout: float = 10.0) -> None:
 291	        """Send a Wyoming protocol event over a socket with a timeout."""
 292	        # Set socket timeout
 293	        original_timeout = sock.gettimeout()
 294	        sock.settimeout(timeout)
 295	        
 296	        try:
 297	            # Convert the event to JSON bytes
 298	            event_bytes = json.dumps(event).encode("utf-8") + b"\n"
 299	            
 300	            # Send the event header
 301	            sock.sendall(event_bytes)
 302	            
 303	            # Send the payload if any
 304	            if payload:
 305	                sock.sendall(payload)
 306	        finally:
 307	            # Restore original timeout
 308	            sock.settimeout(original_timeout)
 309	
 310	    def _transcribe_audio_chunk_wyoming(self, audio_path: str, language: str = None) -> tuple:
 311	        """
 312	        Transcribe audio chunk using official Wyoming client (AsyncTcpClient, Transcribe, AudioStart, AudioChunk, AudioStop).
 313	        This avoids custom protocol mismatch and leverages tested library code.
 314	        Force CPU device to avoid GPU/CuDNN errors.
 315	        """
 316	        import asyncio
 317	        from wyoming.client import AsyncTcpClient
 318	        from wyoming.asr import Transcribe, Transcript
 319	        from wyoming.audio import AudioStart, AudioChunk, AudioStop
 320	
 321	        async def _wyoming_job():
 322	            try:
 323	                async with AsyncTcpClient(self.server_host, self.server_port) as client:
 324	                    # Create a Transcribe object with only the parameters it accepts
 325	                    transcribe_kwargs = {}  # Remove device and compute_type
 326	                    if language and language != "auto":
 327	                        transcribe_kwargs["language"] = language
 328	                        
 329	                    # DON'T include model name from config.ini - use the already loaded model on the server
 330	                    # This avoids trying to download a new model when one is already loaded
 331	                    
 332	                    # Send the Transcribe event with valid parameters
 333	                    await client.write_event(Transcribe(**transcribe_kwargs).event())
 334	
 335	                    # 2) start audio stream
 336	                    await client.write_event(
 337	                        AudioStart(rate=16000, width=2, channels=1).event()
 338	                    )
 339	
 340	                    # 3) stream audio chunks
 341	                    with open(audio_path, 'rb') as f:
 342	                        f.seek(44)  # skip WAV header if present
 343	                        while True:
 344	                            data = f.read(4096)
 345	                            if not data:
 346	                                break
 347	                            await client.write_event(
 348	                                AudioChunk(rate=16000, width=2, channels=1, audio=data).event()
 349	                            )
 350	
 351	                    # 4) stop audio
 352	                    await client.write_event(AudioStop().event())
 353	
 354	                    # 5) read events until transcript
 355	                    while True:
 356	                        event = await client.read_event()
 357	                        if event is None:
 358	                            break
 359	                        if Transcript.is_type(event.type):
 360	                            text = Transcript.from_event(event).text
 361	                            return True, "Transcription successful", {"text": text}
 362	                    return False, "No transcript received", {}
 363	            except Exception as e:
 364	                self.log('error', f"Wyoming AsyncTcpClient error: {e}")
 365	                return False, f"Wyoming protocol error: {e}", {}
 366	
 367	        try:
 368	            return asyncio.run(_wyoming_job())
 369	        except Exception as e:
 370	            self.log('error', f"Async transcription error: {e}")
 371	            return False, f"Async transcription error: {e}", {}
 372	
 373	    def extract_audio(self, video_path):
 374	        """
 375	        Extract audio from a video file using FFmpeg.
 376	        
 377	        Args:
 378	            video_path (str): Path to the video file
 379	            
 380	        Returns:
 381	            tuple: (success, message, audio_path)
 382	                - success (bool): True if audio extraction was successful
 383	                - message (str): Status or error message
 384	                - audio_path (str): Path to the extracted audio file or None if failed
 385	        """
 386	        try:
 387	            # Check if FFmpeg is installed
 388	            try:
 389	                result = subprocess.run(['which', 'ffmpeg'], capture_output=True, text=True)
 390	                if not result.stdout:
 391	                    self.log('error', "FFmpeg not found. Please install FFmpeg.")
 392	                    return False, "FFmpeg not found. Please install FFmpeg.", None
 393	            except Exception as e:
 394	                self.log('error', f"Error checking FFmpeg installation: {str(e)}")
 395	                return False, f"Error checking FFmpeg installation: {str(e)}", None
 396	                
 397	            # Create a temporary directory for audio extraction
 398	            temp_dir = tempfile.mkdtemp(prefix="whisper_audio_")
 399	            self.log('debug', f"Created temporary directory for audio extraction: {temp_dir}")
 400	            
 401	            # Generate a temporary file path for the audio
 402	            audio_filename = os.path.splitext(os.path.basename(video_path))[0] + ".wav"
 403	            audio_path = os.path.join(temp_dir, audio_filename)
 404	            
 405	            # Extract audio using FFmpeg - optimize for speech recognition
 406	            self.log('info', f"Extracting audio from video: {video_path}")
 407	            cmd = [
 408	                'ffmpeg',
 409	                '-i', video_path,               # Input video
 410	                '-vn',                           # Disable video
 411	                '-acodec', 'pcm_s16le',         # Convert to WAV
 412	                '-ar', '16000',                 # 16kHz sample rate (optimal for STT)
 413	                '-ac', '1',                     # Convert to mono
 414	                '-y',                           # Overwrite output file if it exists
 415	                audio_path                      # Output audio file
 416	            ]
 417	            
 418	            self.log('debug', f"Running command: {' '.join(cmd)}")
 419	            process = subprocess.run(cmd, capture_output=True, text=True)
 420	            
 421	            if process.returncode != 0:
 422	                self.log('error', f"FFmpeg error: {process.stderr}")
 423	                # Clean up the temp directory
 424	                shutil.rmtree(temp_dir, ignore_errors=True)
 425	                return False, f"FFmpeg error: {process.stderr}", None
 426	                
 427	            self.log('info', f"Audio extracted successfully: {audio_path}")
 428	            return True, "Audio extracted successfully", audio_path
 429	            
 430	        except Exception as e:
 431	            self.log('error', f"Error extracting audio: {str(e)}")
 432	            import traceback
 433	            self.log('error', traceback.format_exc())
 434	            # Try to clean up temp dir if it was created
 435	            if 'temp_dir' in locals():
 436	                shutil.rmtree(temp_dir, ignore_errors=True)
 437	            return False, f"Error extracting audio: {str(e)}", None
 438	    
 439	    def split_audio_into_chunks(self, audio_path, chunk_duration_seconds=30):
 440	        """
 441	        Split a large audio file into smaller chunks for easier processing.
 442	        
 443	        Args:
 444	            audio_path (str): Path to the audio file
 445	            chunk_duration_seconds (int): Length of each chunk in seconds
 446	            
 447	        Returns:
 448	            tuple: (success, message, chunk_paths)
 449	                - success (bool): True if splitting was successful
 450	                - message (str): Status or error message
 451	                - chunk_paths (list): List of paths to the audio chunks
 452	        """
 453	        try:
 454	            # Get audio duration using ffprobe
 455	            cmd = [
 456	                'ffprobe', 
 457	                '-v', 'error',
 458	                '-show_entries', 'format=duration',
 459	                '-of', 'default=noprint_wrappers=1:nokey=1',
 460	                audio_path
 461	            ]
 462	            
 463	            self.log('debug', f"Getting audio duration: {' '.join(cmd)}")
 464	            result = subprocess.run(cmd, capture_output=True, text=True)
 465	            
 466	            if result.returncode != 0:
 467	                self.log('error', f"Error getting audio duration: {result.stderr}")
 468	                return False, f"Error getting audio duration: {result.stderr}", []
 469	                
 470	            # Parse the duration
 471	            try:
 472	                duration = float(result.stdout.strip())
 473	                self.log('info', f"Audio duration: {duration:.2f} seconds")
 474	            except ValueError:
 475	                self.log('error', f"Could not parse audio duration: {result.stdout}")
 476	                return False, f"Could not parse audio duration: {result.stdout}", []
 477	                
 478	            # If duration is short, no need to split
 479	            if duration <= chunk_duration_seconds:
 480	                self.log('info', f"Audio duration ({duration:.2f}s) is less than chunk size ({chunk_duration_seconds}s). No splitting needed.")
 481	                return True, "Audio file is short enough, no splitting needed", [audio_path]
 482	                
 483	            # Calculate number of chunks
 484	            num_chunks = int(duration / chunk_duration_seconds) + 1
 485	            self.log('info', f"Splitting audio into {num_chunks} chunks of {chunk_duration_seconds}s each")
 486	            
 487	            # Create output directory for chunks
 488	            temp_dir = os.path.dirname(audio_path)
 489	            base_filename = os.path.splitext(os.path.basename(audio_path))[0]
 490	            
 491	            # Split the audio file into chunks
 492	            chunk_paths = []
 493	            
 494	            for i in range(num_chunks):
 495	                start_time = i * chunk_duration_seconds
 496	                
 497	                # Generate output filename for this chunk
 498	                chunk_path = os.path.join(temp_dir, f"{base_filename}_chunk{i:03d}.wav")
 499	                chunk_paths.append(chunk_path)
 500	                
 501	                # Use FFmpeg to extract this chunk
 502	                cmd = [
 503	                    'ffmpeg',
 504	                    '-ss', str(start_time),                # Start time
 505	                    '-t', str(chunk_duration_seconds),     # Duration
 506	                    '-i', audio_path,                      # Input file
 507	                    '-acodec', 'pcm_s16le',               # Audio codec
 508	                    '-ar', '16000',                        # Sample rate
 509	                    '-ac', '1',                            # Mono
 510	                    '-y',                                  # Overwrite
 511	                    chunk_path                             # Output file
 512	                ]
 513	                
 514	                self.log('debug', f"Creating chunk {i+1}/{num_chunks}: {' '.join(cmd)}")
 515	                result = subprocess.run(cmd, capture_output=True, text=True)
 516	                
 517	                if result.returncode != 0:
 518	                    self.log('error', f"Error creating chunk {i+1}: {result.stderr}")
 519	                    # Continue with other chunks even if one fails
 520	            
 521	            self.log('info', f"Created {len(chunk_paths)} audio chunks")
 522	            return True, f"Split audio into {len(chunk_paths)} chunks", chunk_paths
 523	            
 524	        except Exception as e:
 525	            self.log('error', f"Error splitting audio: {str(e)}")
 526	            import traceback
 527	            self.log('error', traceback.format_exc())
 528	            return False, f"Error splitting audio: {str(e)}", []
 529	    
 530	    def _fallback_to_local_transcription(self, audio_path: str, language: str = None) -> Tuple[bool, str, Dict]:
 531	        """
 532	        Fallback to local transcription when server methods fail.
 533	        
 534	        Args:
 535	            audio_path (str): Path to the audio file
 536	            language (str, optional): Language code
 537	            
 538	        Returns:
 539	            tuple: (success, message, result)
 540	                - success (bool): True if successful
 541	                - message (str): Status message
 542	                - result (dict): Transcription result
 543	        """
 544	        self.log('info', f"Falling back to local transcription for {audio_path}")
 545	        
 546	        # Import LocalWhisperTranscriber only when needed
 547	        if self._local_transcriber is None:
 548	            try:
 549	                # Check if local_whisper.py exists in the same directory
 550	                current_dir = os.path.dirname(os.path.abspath(__file__))
 551	                local_whisper_path = os.path.join(current_dir, 'local_whisper.py')
 552	                
 553	                if os.path.exists(local_whisper_path):
 554	                    # Import directly from the file using importlib
 555	                    spec = importlib.util.spec_from_file_location("local_whisper", local_whisper_path)
 556	                    local_whisper = importlib.util.module_from_spec(spec)
 557	                    spec.loader.exec_module(local_whisper)
 558	                    
 559	                    # Try to read settings from config.ini
 560	                    whisper_model = "large-v3-turbo"  # Default to the requested model
 561	                    whisper_device = "cuda"           # Default to CUDA
 562	                    whisper_compute_type = "float16"  # Default to float16
 563	                    whisper_beam = 10                 # Default to beam size 10
 564	                    whisper_lang = "en"               # Default to English
 565	                    
 566	                    # Try to read from config file
 567	                    try:
 568	                        import configparser
 569	                        config = configparser.ConfigParser()
 570	                        config_path = os.path.join(os.path.dirname(current_dir), 'config.ini')
 571	                        if os.path.exists(config_path):
 572	                            config.read(config_path)
 573	                            if 'whisper' in config:
 574	                                whisper_section = config['whisper']
 575	                                whisper_model = whisper_section.get('model', whisper_model)
 576	                                whisper_device = whisper_section.get('device', whisper_device)
 577	                                whisper_compute_type = whisper_section.get('compute_type', whisper_compute_type)
 578	                                whisper_beam = int(whisper_section.get('beam_size', whisper_beam))
 579	                                whisper_lang = whisper_section.get('language', whisper_lang) if not language else language
 580	                                self.log('info', f"Using Whisper settings from config.ini: model={whisper_model}, device={whisper_device}, compute_type={whisper_compute_type}, beam={whisper_beam}")
 581	                    except Exception as config_error:
 582	                        self.log('warning', f"Failed to read from config.ini: {str(config_error)}. Using default settings.")
 583	                    
 584	                    # Override language with parameter if provided
 585	                    if language:
 586	                        whisper_lang = language
 587	                    
 588	                    # Create LocalWhisperTranscriber instance with settings from config
 589	                    self._local_transcriber = local_whisper.LocalWhisperTranscriber(
 590	                        model_size=whisper_model,      # Use configured model
 591	                        device=whisper_device,         # Use configured device
 592	                        compute_type=whisper_compute_type,  # Use configured compute type
 593	                        logger=self.logger
 594	                    )
 595	                    self.log('info', f"Created local whisper transcriber with model {whisper_model} on {whisper_device}")
 596	                else:
 597	                    self.log('error', f"Could not find local_whisper.py at {local_whisper_path}")
 598	                    return False, f"Local transcription module not found at {local_whisper_path}", {}
 599	            except Exception as e:
 600	                self.log('error', f"Error initializing local transcriber: {str(e)}")
 601	                import traceback
 602	                self.log('error', traceback.format_exc())
 603	                return False, f"Error initializing local transcriber: {str(e)}", {}
 604	        
 605	        # Transcribe using the local model
 606	        try:
 607	            self.log('info', f"Transcribing {audio_path} with local Whisper model")
 608	            
 609	            # Read beam_size and language from config if available
 610	            beam_size = 10  # Default
 611	            language_to_use = language
 612	            
 613	            # Try to read from config file again if needed
 614	            try:
 615	                import configparser
 616	                config = configparser.ConfigParser()
 617	                config_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'config.ini')
 618	                if os.path.exists(config_path):
 619	                    config.read(config_path)
 620	                    if 'whisper' in config:
 621	                        beam_size = int(config['whisper'].get('beam_size', beam_size))
 622	                        if not language_to_use and 'language' in config['whisper']:
 623	                            language_to_use = config['whisper']['language']
 624	            except Exception:
 625	                pass  # Use defaults if config can't be read
 626	            
 627	            # Call transcribe with beam_size from config
 628	            result = self._local_transcriber.transcribe_file(
 629	                audio_path, 
 630	                language=language_to_use, 
 631	                beam_size=beam_size
 632	            )
 633	            
 634	            if 'error' in result and result['error']:
 635	                self.log('error', f"Local transcription error: {result['error']}")
 636	                return False, f"Local transcription error: {result['error']}", {}
 637	            
 638	            self.log('info', f"Local transcription successful: {result['text'][:50]}...")
 639	            return True, "Local transcription successful", {"text": result['text']}
 640	            
 641	        except Exception as e:
 642	            self.log('error', f"Local transcription error: {str(e)}")
 643	            import traceback
 644	            self.log('error', traceback.format_exc())
 645	            return False, f"Local transcription error: {str(e)}", {}
 646	
 647	    def transcribe_audio_chunk(self, audio_path, language=None):
 648	        """
 649	        Send an audio chunk for transcription using Wyoming protocol first,
 650	        then falling back to HTTP APIs, then local transcription if all remote methods fail.
 651	        If use_remote_whisper is false, it will directly fall back to local whisper.
 652	        
 653	        Args:
 654	            audio_path (str): Path to the audio file
 655	            language (str, optional): Language code for transcription
 656	            
 657	        Returns:
 658	            tuple: (success, message, result)
 659	                - success (bool): True if the request was successful
 660	                - message (str): Status or error message
 661	                - result (dict): Response data from the server
 662	        """
 663	        if not self.use_remote_whisper:
 664	            self.log('info', "Remote whisper is disabled. Falling back to local transcription.")
 665	            return self._fallback_to_local_transcription(audio_path, language)
 666	
 667	        # First try Wyoming protocol (TCP-based)
 668	        try:
 669	            success, message, result = self._transcribe_audio_chunk_wyoming(audio_path, language)
 670	            if success:
 671	                return success, message, result
 672	            else:
 673	                self.log('warning', f"Wyoming protocol transcription failed: {message}. Trying HTTP fallback.")
 674	        except Exception as e:
 675	            self.log('warning', f"Wyoming protocol error: {str(e)}. Trying HTTP fallback.")
 676	            
 677	        # If Wyoming failed, try HTTP API fallbacks
 678	        try:
 679	            # Get audio file info for logging
 680	            file_size = os.path.getsize(audio_path) / (1024 * 1024)  # Size in MB
 681	            self.log('info', f"Transcribing audio chunk via HTTP: {audio_path} (Size: {file_size:.2f} MB)")
 682	            
 683	            # Based on the error logs, let's try a simple approach with a direct URL
 684	            endpoint = f"{self.server_url}/api/converttotext"
 685	            
 686	            try:
 687	                # Open the audio file
 688	                with open(audio_path, 'rb') as audio_file:
 689	                    # Extremely simplified request - just the audio file with generic name 'audio.wav'
 690	                    files = {'file': ('audio.wav', audio_file, 'audio/wav')}
 691	                    
 692	                    # Minimal data parameters
 693	                    data = {}
 694	                    
 695	                    # Add language if provided
 696	                    if language:
 697	                        data['language'] = language
 698	                        self.log('info', f"Using specified language: {language}")
 699	                    
 700	                    self.log('info', f"Sending audio to {endpoint} using direct file upload")
 701	                    
 702	                    # Send the request with increased timeout for larger files
 703	                    timeout_seconds = min(300, max(30, int(file_size * 10)))  # At least 30 seconds
 704	                    self.log('debug', f"Using timeout of {timeout_seconds} seconds for API call")
 705	                    
 706	                    # Attempt the request
 707	                    response = requests.post(
 708	                        endpoint, 
 709	                        files=files,
 710	                        data=data,
 711	                        timeout=timeout_seconds
 712	                    )
 713	                    
 714	                    # Handle the response
 715	                    if response.status_code == 200:
 716	                        try:
 717	                            result = response.json()
 718	                            self.log('info', f"Transcription response: {result}")
 719	                            return True, "Transcription succeeded", result
 720	                        except json.JSONDecodeError:
 721	                            # Try to handle plain text responses
 722	                            text = response.text.strip()
 723	                            self.log('info', f"Received text response: {text[:100]}...")
 724	                            return True, "Received text response", {"text": text}
 725	                    else:
 726	                        error_msg = f"Server error {response.status_code}: {response.text}"
 727	                        self.log('error', error_msg)
 728	                        # If HTTP request fails, fall back to local transcription
 729	                        return self._fallback_to_local_transcription(audio_path, language)
 730	                        
 731	            except requests.RequestException as req_error:
 732	                error_msg = f"Request error at {endpoint}: {str(req_error)}"
 733	                self.log('error', error_msg)
 734	                
 735	                # Try HomeAssistant-style STT endpoint as fallback
 736	                try:
 737	                    self.log('info', f"Trying fallback HomeAssistant STT endpoint")
 738	                    endpoint = f"{self.server_url}/api/speech-to-text"
 739	                    
 740	                    with open(audio_path, 'rb') as audio_file:
 741	                        # HomeAssistant format typically expects 'audio' parameter
 742	                        files = {'audio': ('audio.wav', audio_file, 'audio/wav')}
 743	                        
 744	                        response = requests.post(
 745	                            endpoint, 
 746	                            files=files,
 747	                            timeout=timeout_seconds
 748	                        )
 749	                        
 750	                        if response.status_code == 200:
 751	                            try:
 752	                                result = response.json()
 753	                                self.log('info', f"HomeAssistant STT response: {result}")
 754	                                
 755	                                # Format varies, so handle common patterns
 756	                                if isinstance(result, dict) and "text" in result:
 757	                                    return True, "Transcription succeeded", result
 758	                                elif isinstance(result, dict) and "result" in result:
 759	                                    return True, "Transcription succeeded", {"text": result["result"]}
 760	                                elif isinstance(result, str):
 761	                                    return True, "Transcription succeeded", {"text": result}
 762	                                else:
 763	                                    return True, "Transcription succeeded with unknown format", {"text": str(result)}
 764	                            except json.JSONDecodeError:
 765	                                text = response.text.strip()
 766	                                self.log('info', f"Received text response: {text[:100]}...")
 767	                                return True, "Received text response", {"text": text}
 768	                        else:
 769	                            error_msg = f"HomeAssistant STT error {response.status_code}: {response.text}"
 770	                            self.log('error', error_msg)
 771	                            # Fall back to local transcription
 772	                            return self._fallback_to_local_transcription(audio_path, language)
 773	                except Exception as ha_error:
 774	                    self.log('error', f"Both endpoints failed. HomeAssistant error: {str(ha_error)}")
 775	                    # Fall back to local transcription
 776	                    return self._fallback_to_local_transcription(audio_path, language)
 777	                
 778	        except Exception as e:
 779	            error_msg = f"Unexpected error: {str(e)}"
 780	            self.log('error', error_msg)
 781	            import traceback
 782	            self.log('error', traceback.format_exc())
 783	            # Fall back to local transcription as a last resort
 784	            return self._fallback_to_local_transcription(audio_path, language)
 785	
 786	    def transcribe_video(self, video_path, language=None, use_chunks=True, chunk_duration=15):
 787	        """
 788	        Send a video file to the faster-whisper API for transcription.
 789	        First extracts audio from the video, then sends audio to the API.
 790	        
 791	        Args:
 792	            video_path (str): Path to the video file
 793	            language (str, optional): Language code for transcription (e.g., 'en', 'fr')
 794	            use_chunks (bool): Whether to split audio into chunks (better for long files)
 795	            chunk_duration (int): Length of each chunk in seconds
 796	            
 797	        Returns:
 798	            tuple: (success, message, result)
 799	                - success (bool): True if the request was successful
 800	                - message (str): Status or error message
 801	                - result (dict): Response data from the server
 802	        """
 803	        if not os.path.exists(video_path):
 804	            self.log('error', f"Video file not found: {video_path}")
 805	            return False, "Video file not found", {}
 806	        
 807	        try:
 808	            # First, extract audio from video
 809	            self.log('info', f"Starting transcription process for video: {video_path}")
 810	            extract_success, extract_message, audio_path = self.extract_audio(video_path)
 811	            
 812	            if not extract_success or not audio_path:
 813	                self.log('error', f"Failed to extract audio: {extract_message}")
 814	                return False, f"Failed to extract audio: {extract_message}", {}
 815	            
 816	            self.log('info', f"Using extracted audio file: {audio_path}")
 817	            
 818	            try:
 819	                if use_chunks:
 820	                    # Split audio into manageable chunks
 821	                    split_success, split_message, chunk_paths = self.split_audio_into_chunks(
 822	                        audio_path, 
 823	                        chunk_duration_seconds=chunk_duration
 824	                    )
 825	                    
 826	                    if not split_success:
 827	                        self.log('error', f"Failed to split audio: {split_message}")
 828	                        return False, f"Failed to split audio: {split_message}", {}
 829	                    
 830	                    self.log('info', f"Processing {len(chunk_paths)} audio chunks")
 831	                    
 832	                    # Process each chunk and collect results
 833	                    all_transcriptions = []
 834	                    max_retries = 3
 835	                    
 836	                    for i, chunk_path in enumerate(chunk_paths):
 837	                        self.log('info', f"Processing chunk {i+1}/{len(chunk_paths)}: {os.path.basename(chunk_path)}")
 838	                        
 839	                        # Try with retries to handle transient failures
 840	                        retry_count = 0
 841	                        chunk_success = False
 842	                        
 843	                        while not chunk_success and retry_count < max_retries:
 844	                            # Transcribe this chunk
 845	                            chunk_success, chunk_message, chunk_result = self.transcribe_audio_chunk(
 846	                                chunk_path, 
 847	                                language
 848	                            )
 849	                            
 850	                            if chunk_success:
 851	                                all_transcriptions.append({
 852	                                    "chunk": i+1,
 853	                                    "path": chunk_path,
 854	                                    "result": chunk_result
 855	                                })
 856	                                break
 857	                            else:
 858	                                retry_count += 1
 859	                                if retry_count < max_retries:
 860	                                    self.log('warning', f"Failed to transcribe chunk {i+1}, attempt {retry_count}: {chunk_message}. Retrying...")
 861	                                    time.sleep(2)  # Wait before retrying
 862	                                else:
 863	                                    self.log('warning', f"Failed to transcribe chunk {i+1} after {max_retries} attempts: {chunk_message}")
 864	                    
 865	                    # Check if we got any successful transcriptions
 866	                    if not all_transcriptions:
 867	                        return False, "Failed to transcribe any audio chunks", {}
 868	                    
 869	                    # Return combined results
 870	                    result = {
 871	                        "transcription_type": "chunked",
 872	                        "num_chunks": len(chunk_paths),
 873	                        "successful_chunks": len(all_transcriptions),
 874	                        "chunks": all_transcriptions,
 875	                        "job_id": f"local_{int(time.time())}_{uuid.uuid4().hex[:8]}"
 876	                    }
 877	                    
 878	                    return True, "Chunked transcription completed", result
 879	                else:
 880	                    # Process the entire audio file at once
 881	                    return self.transcribe_audio_chunk(audio_path, language)
 882	            finally:
 883	                # Clean up temporary audio files
 884	                if 'audio_path' in locals() and audio_path:
 885	                    temp_dir = os.path.dirname(audio_path)
 886	                    self.log('debug', f"Cleaning up temporary audio files: {temp_dir}")
 887	                    try:
 888	                        shutil.rmtree(temp_dir, ignore_errors=True)
 889	                    except Exception as cleanup_error:
 890	                        self.log('warning', f"Failed to clean up temporary files: {str(cleanup_error)}")
 891	                    
 892	        except Exception as e:
 893	            error_msg = f"Transcription error: {str(e)}"
 894	            self.log('error', error_msg)
 895	            import traceback
 896	            self.log('error', traceback.format_exc())
 897	            return False, error_msg, {}
 898	    
 899	    def combine_chunk_transcriptions(self, chunks):
 900	        """
 901	        Combine transcription results from multiple chunks.
 902	        
 903	        Args:
 904	            chunks (list): List of chunk results
 905	            
 906	        Returns:
 907	            dict: Combined transcription result
 908	        """
 909	        try:
 910	            # Initialize combined text
 911	            combined_text = ""
 912	            segments = []
 913	            
 914	            # Process each chunk
 915	            for chunk in sorted(chunks, key=lambda c: c.get('chunk', 0)):
 916	                chunk_result = chunk.get('result', {})
 917	                
 918	                # Extract text based on different API response formats
 919	                if 'text' in chunk_result:
 920	                    # Simple text format
 921	                    combined_text += chunk_result['text'] + "\n"
 922	                elif 'segments' in chunk_result:
 923	                    # Segment format
 924	                    for segment in chunk_result['segments']:
 925	                        if 'text' in segment:
 926	                            segments.append(segment)
 927	                elif 'results' in chunk_result and 'transcripts' in chunk_result['results']:
 928	                    # Amazon Transcribe like format
 929	                    combined_text += chunk_result['results']['transcripts'][0]['transcript'] + "\n"
 930	                    
 931	            return {
 932	                "text": combined_text.strip(),
 933	                "segments": segments
 934	            }
 935	            
 936	        except Exception as e:
 937	            self.log('error', f"Error combining transcriptions: {str(e)}")
 938	            return {"text": "Error combining transcriptions", "error": str(e)}
 939	    
 940	    def get_transcription_status(self, job_id):
 941	        """
 942	        Check the status of a transcription job.
 943	        
 944	        Args:
 945	            job_id (str): The ID of the transcription job
 946	            
 947	        Returns:
 948	            tuple: (success, message, result)
 949	                - success (bool): True if the status check was successful
 950	                - message (str): Status or error message
 951	                - result (dict): Response data from the server
 952	        """
 953	        try:
 954	            # Check if this is a local job ID (from chunked processing)
 955	            if job_id.startswith('local_'):
 956	                return True, "Local transcription completed", {"status": "completed"}
 957	                
 958	            # Try common status endpoint patterns
 959	            endpoints = [
 960	                f"{self.server_url}/jobs/{job_id}",
 961	                f"{self.server_url}/status/{job_id}",
 962	                f"{self.server_url}/job/{job_id}"
 963	            ]
 964	            
 965	            for endpoint in endpoints:
 966	                try:
 967	                    self.log('debug', f"Checking job status at {endpoint}")
 968	                    response = requests.get(endpoint, timeout=10)
 969	                    
 970	                    if response.status_code == 200:
 971	                        try:
 972	                            result = response.json()
 973	                            status = result.get('status', 'unknown')
 974	                            self.log('info', f"Job {job_id} status: {status}")
 975	                            return True, f"Job status: {status}", result
 976	                        except json.JSONDecodeError:
 977	                            continue  # Try next endpoint
 978	                except requests.RequestException:
 979	                    continue  # Try next endpoint
 980	            
 981	            # If we get here, all endpoints failed
 982	            self.log('error', f"Could not get status for job {job_id} from any endpoint")
 983	            return False, f"Could not get status for job {job_id}", {}
 984	            
 985	        except Exception as e:
 986	            error_msg = f"Error checking job status: {str(e)}"
 987	            self.log('error', error_msg)
 988	            return False, error_msg, {}
 989	    
 990	    def generate_srt_from_chunks(self, chunks_data):
 991	        """
 992	        Generate an SRT file from chunked transcription results.
 993	        
 994	        Args:
 995	            chunks_data (list): List of chunk results
 996	            
 997	        Returns:
 998	            str: SRT formatted string
 999	        """
1000	        try:
1001	            import datetime
1002	            import srt
1003	            
1004	            # Combine all segments from all chunks
1005	            all_segments = []
1006	            chunk_offset = 0  # Time offset for each chunk in seconds
1007	            
1008	            for chunk in sorted(chunks_data, key=lambda c: c.get('chunk', 0)):
1009	                chunk_result = chunk.get('result', {})
1010	                chunk_index = chunk.get('chunk', 0) - 1  # 0-based index
1011	                
1012	                # Check if there's a timestamp offset to apply to this chunk
1013	                # Based on chunk duration (typically 30 seconds per chunk)
1014	                chunk_offset = chunk_index * 30  # seconds
1015	                
1016	                # Parse segments based on response format
1017	                if 'segments' in chunk_result:
1018	                    segments = chunk_result['segments']
1019	                elif 'results' in chunk_result and 'items' in chunk_result['results']:
1020	                    # Format like Amazon Transcribe - need to convert to segments
1021	                    # This is just a placeholder; actual implementation would depend on the API
1022	                    segments = []
1023	                elif 'text' in chunk_result:
1024	                    # Simple text format - create a single segment
1025	                    segments = [{
1026	                        'start': 0,
1027	                        'end': 5,  # Assume 5 seconds if no timing
1028	                        'text': chunk_result['text']
1029	                    }]
1030	                else:
1031	                    # Unknown format
1032	                    continue
1033	                
1034	                # Process each segment
1035	                for segment in segments:
1036	                    # Adjust timestamps by adding the chunk offset
1037	                    start_time = segment.get('start', 0) + chunk_offset
1038	                    end_time = segment.get('end', start_time + 5) + chunk_offset
1039	                    
1040	                    all_segments.append({
1041	                        'start': start_time,
1042	                        'end': end_time,
1043	                        'text': segment.get('text', '').strip()
1044	                    })
1045	            
1046	            # Sort segments by start time
1047	            all_segments.sort(key=lambda s: s['start'])
1048	            
1049	            # Convert to SRT format
1050	            srt_segments = []
1051	            for i, segment in enumerate(all_segments):
1052	                # Convert seconds to timedelta
1053	                start_time = datetime.timedelta(seconds=segment['start'])
1054	                end_time = datetime.timedelta(seconds=segment['end'])
1055	                
1056	                # Skip empty segments
1057	                if not segment['text'].strip():
1058	                    continue
1059	                
1060	                # Create SRT subtitle
1061	                subtitle = srt.Subtitle(
1062	                    index=i+1,
1063	                    start=start_time,
1064	                    end=end_time,
1065	                    content=segment['text']
1066	                )
1067	                srt_segments.append(subtitle)
1068	            
1069	            # Generate SRT content
1070	            return srt.compose(srt_segments)
1071	            
1072	        except Exception as e:
1073	            self.log('error', f"Error generating SRT from chunks: {str(e)}")
1074	            import traceback
1075	            self.log('error', traceback.format_exc())
1076	            return f"# Error generating SRT: {str(e)}"
1077	    
1078	    def download_srt(self, job_id, output_path):
1079	        """
1080	        Download the SRT file for a completed transcription job.
1081	        For local job IDs, generates SRT from chunked results.
1082	        For server job IDs, tries to download from the server.
1083	        
1084	        Args:
1085	            job_id (str): The ID of the transcription job
1086	            output_path (str): Path where the SRT file should be saved
1087	            
1088	        Returns:
1089	            tuple: (success, message)
1090	                - success (bool): True if the download was successful
1091	                - message (str): Status or error message
1092	        """
1093	        try:
1094	            # Check if this is a local job ID from chunked processing
1095	            if job_id.startswith('local_'):
1096	                # Get the job data from translation_jobs
1097	                job_data = None
1098	                
1099	                try:
1100	                    # Try to get job data from app.translation_jobs
1101	                    import sys
1102	                    if 'app' in sys.modules:
1103	                        from app import translation_jobs
1104	                        if job_id in translation_jobs:
1105	                            job_data = translation_jobs[job_id]
1106	                    else:
1107	                        # We might be in an isolated call, try to find chunks directly
1108	                        job_data = {"chunks": [c for c in getattr(self, "_chunks_data", []) if c.get("job_id") == job_id]}
1109	                except ImportError:
1110	                    self.log('warning', "Could not import app module. Using any available chunk data.")
1111	                
1112	                # Check if we have the chunks data
1113	                chunks = []
1114	                if job_data and 'chunks' in job_data:
1115	                    chunks = job_data['chunks']
1116	                elif hasattr(self, '_chunks_data'):
1117	                    chunks = self._chunks_data
1118	                    
1119	                if chunks:
1120	                    # Generate SRT from chunks
1121	                    srt_content = self.generate_srt_from_chunks(chunks)
1122	                    
1123	                    # Handle empty SRT content
1124	                    if not srt_content or srt_content.strip() == "":
1125	                        self.log('warning', "Generated SRT is empty, creating basic placeholder")
1126	                        srt_content = "1\n00:00:00,000 --> 00:00:05,000\n[No transcription available]\n\n"
1127	                    
1128	                    # Save to the output path
1129	                    os.makedirs(os.path.dirname(output_path), exist_ok=True)
1130	                    with open(output_path, 'w', encoding='utf-8') as f:
1131	                        f.write(srt_content)
1132	                        
1133	                    self.log('info', f"Generated SRT from chunks and saved to {output_path}")
1134	                    return True, f"SRT generated from chunks and saved to {output_path}"
1135	                else:
1136	                    self.log('error', f"No chunk data found for job {job_id}")
1137	                    
1138	                    # Create a basic empty SRT file rather than failing
1139	                    os.makedirs(os.path.dirname(output_path), exist_ok=True)
1140	                    with open(output_path, 'w', encoding='utf-8') as f:
1141	                        f.write("1\n00:00:00,000 --> 00:00:05,000\n[No transcription available]\n\n")
1142	                        
1143	            
1144	            # Extract host and port from URL for direct socket test
1145	            parsed_url = urlparse(self.server_url)
1146	            host = parsed_url.hostname
1147	            port = parsed_url.port or (443 if parsed_url.scheme == 'https' else 80)
1148	            
1149	            # TCP connectivity check
1150	            self.log('debug', f"Testing TCP connectivity to {host}:{port}")
1151	            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
1152	            sock.settimeout(3)  # 3 second timeout for TCP connection
1153	            
1154	            try:
1155	                sock.connect((host, port))
1156	                self.log('info', f"TCP connection to {host}:{port} successful")
1157	                sock.close()
1158	            except socket.error as e:
1159	                self.log('error', f"TCP connection to {host}:{port} failed: {str(e)}")
1160	                return False, f"Cannot connect to server at {host}:{port}. Is the server running?"
1161	            
1162	            # Check for valid API endpoints
1163	            # Common endpoints for health checks or API status in transcription servers
1164	            endpoints = [
1165	                '/health',
1166	                '/status',
1167	                '/ready',
1168	                '/info',
1169	                '/'
1170	            ]
1171	            
1172	            for endpoint in endpoints:
1173	                try:
1174	                    self.log('debug', f"Checking API endpoint: {self.server_url}{endpoint}")
1175	                    response = requests.get(f"{self.server_url}{endpoint}", timeout=5)
1176	                    
1177	                    if response.status_code == 200:
1178	                        self.log('info', f"Server responded to {endpoint} with status 200")
1179	                        return True, "Server is reachable and responding to API requests"
1180	                except requests.RequestException:
1181	                    pass  # Continue with next endpoint
1182	            
1183	            # If TCP succeeded but HTTP checks failed, server might still be usable for transcription
1184	            self.log('info', "TCP connection successful, but HTTP endpoints not responding. Considering server available.")
1185	            return True, "Server is reachable via TCP but did not respond to health checks. The server may be ready only for transcription requests."
1186	            
1187	        except Exception as e:
1188	            error_msg = f"Error checking server: {str(e)}"
1189	            self.log('error', error_msg)
1190	            return False, error_msg
1191	
1192	    def connect_to_remote_faster_whisper(self, host=None, port=None, timeout=30):
1193	        """
1194	        Establish a connection to a remote faster-whisper server and test if it's responsive.
1195	        This method is optimized for the linuxserver/faster-whisper:gpu image.
1196	        
1197	        Args:
1198	            host (str, optional): Host address. If None, uses self.server_host
1199	            port (int, optional): Port number. If None, uses self.server_port
1200	            timeout (int, optional): Connection timeout in seconds
1201	            
1202	        Returns:
1203	            tuple: (success, message)
1204	                - success (bool): True if successfully connected
1205	                - message (str): Status or error message
1206	        """
1207	        host = host or self.server_host
1208	        port = port or self.server_port
1209	        
1210	        try:
1211	            self.log('info', f"Testing connection to remote faster-whisper at {host}:{port}")
1212	            
1213	            # Try establishing a TCP connection first
1214	            with socket.create_connection((host, port), timeout=timeout) as sock:
1215	                self.log('info', f"TCP connection to {host}:{port} established")
1216	                
1217	                # Send a simple describe event to test Wyoming protocol
1218	                try:
1219	                    # Set a shorter timeout for this test
1220	                    sock.settimeout(10)
1221	                    self._wyoming_send_event(sock, {"type": "describe"})
1222	                    
1223	                    # Try to get a response, ignoring any CUDA errors
1224	                    try:
1225	                        info_event = self._wyoming_receive_event(sock, timeout=10)
1226	                        if info_event and info_event.get("type") == "info":
1227	                            self.log('info', f"Wyoming protocol test successful: {info_event}")
1228	                            return True, "Wyoming protocol connection successful"
1229	                        else:
1230	                            self.log('warning', f"Wyoming server responded, but with unexpected event type: {info_event}")
1231	                            return True, "Wyoming server responded with unexpected event type"
1232	                    except socket.timeout:
1233	                        self.log('warning', "Wyoming describe command timed out, but TCP connection works")
1234	                        return True, "TCP connection works but Wyoming protocol timed out"
1235	                    except Exception as protocol_error:
1236	                        self.log('warning', f"Wyoming protocol test failed, but TCP connection works: {str(protocol_error)}")
1237	                        return True, "TCP connection works but Wyoming protocol test failed"
1238	                        
1239	                except Exception as e:
1240	                    self.log('warning', f"Failed to test Wyoming protocol: {str(e)}")
1241	                    return True, "TCP connection works but Wyoming protocol test failed"
1242	                    
1243	        except socket.timeout:
1244	            self.log('error', f"Connection to {host}:{port} timed out after {timeout} seconds")
1245	            return False, f"Connection timeout after {timeout} seconds"
1246	        except ConnectionRefusedError:
1247	            self.log('error', f"Connection to {host}:{port} refused. Is the server running?")
1248	            return False, "Connection refused"
1249	        except Exception as e:
1250	            self.log('error', f"Error connecting to {host}:{port}: {str(e)}")
1251	            return False, f"Connection error: {str(e)}"
1252	
1253	    def ping_server(self) -> Tuple[bool, str]:
1254	        """
1255	        Ping the Wyoming protocol server to check if it's available.
1256	        
1257	        Returns:
1258	            tuple: (success, message)
1259	                - success (bool): True if the server is reachable
1260	                - message (str): Status or error message
1261	        """
1262	        try:
1263	            self.log('info', f"Testing connection to faster-whisper server at {self.server_url}")
1264	            
1265	            # Try establishing a TCP connection first
1266	            parsed_url = urlparse(self.server_url)
1267	            host = parsed_url.hostname or "10.0.10.23"
1268	            port = parsed_url.port or 10300
1269	            
1270	            try:
1271	                with socket.create_connection((host, port), timeout=5) as sock:
1272	                    self.log('info', f"TCP connection to {host}:{port} successful")
1273	                    
1274	                    # For remote servers, just accepting a successful TCP connection is sufficient
1275	                    # Try a basic Wyoming protocol test but don't fail if it doesn't work as expected
1276	                    try:
1277	                        # Set a short timeout for this test
1278	                        sock.settimeout(3)
1279	                        self._wyoming_send_event(sock, {"type": "describe"})
1280	                        
1281	                        # Try to get a response
1282	                        try:
1283	                            info_event = self._wyoming_receive_event(sock, timeout=3)
1284	                            if info_event and info_event.get("type") == "info":
1285	                                self.log('info', f"Wyoming protocol test successful")
1286	                                return True, "Connection successful with full Wyoming protocol support"
1287	                        except socket.timeout:
1288	                            self.log('warning', "Wyoming protocol handshake timed out, but TCP connection works")
1289	                            return True, "TCP port is open but Wyoming protocol handshake timed out"
1290	                        except Exception as e:
1291	                            self.log('warning', f"Wyoming protocol test failed, but TCP connection works: {str(e)}")
1292	                            return True, f"TCP port is open but Wyoming protocol test failed: {str(e)}"
1293	                    except Exception as e:
1294	                        self.log('warning', f"Failed to test Wyoming protocol: {str(e)}")
1295	                        return True, f"TCP port is open but Wyoming protocol couldn't be tested: {str(e)}"
1296	                    
1297	                    # If we reach here, the TCP connection was successful but Wyoming protocol test failed
1298	                    return True, "TCP connection successful, but Wyoming protocol test failed"
1299	            except socket.timeout:
1300	                self.log('error', f"Connection to {host}:{port} timed out after 5 seconds")
1301	                return False, f"Connection timeout after 5 seconds"
1302	            except ConnectionRefusedError:
1303	                self.log('error', f"Connection to {host}:{port} refused. Is the server running?")
1304	                return False, "Connection refused. Is the server running?"
1305	            except Exception as e:
1306	                self.log('error', f"Error connecting to {host}:{port}: {str(e)}")
1307	                return False, f"TCP connection error: {str(e)}"
1308	                
1309	        except Exception as e:
1310	            self.log('error', f"Error pinging server at {self.server_url}: {str(e)}")
1311	            return False, f"Error checking server: {str(e)}"
1312	
1313	    def transcribe_audio_wyoming(self, audio_path, language=None, max_retries=3):
1314	        """Transcribe audio using Wyoming protocol."""
1315	        self.log('info', f"Using Home Assistant compatible Wyoming client for: {audio_path}")
1316	        
1317	        try:
1318	            port = 10300  # Use the port from the URL
1319	            host = "10.0.10.23"  # Use the host from the URL
1320	            
1321	            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
1322	                # Connect to the server
1323	                sock.connect((host, port))
1324	                
1325	                # Send audio info event
1326	                with wave.open(audio_path, "rb") as wav:
1327	                    audio_info = {
1328	                        "type": "audio-start",
1329	                        "data": {
1330	                            "rate": wav.getframerate(),
1331	                            "width": wav.getsampwidth() * 8,
1332	                            "channels": wav.getnchannels(),
1333	                        }
1334	                    }
1335	                    self._wyoming_send_event(sock, audio_info)
1336	                    
1337	                    # Send detect language event if we want auto-detection
1338	                    if language is None or language == "auto":
1339	                        detect_event = {
1340	                            "type": "detect-language",
1341	                            "data": {}
1342	                        }
1343	                        self._wyoming_send_event(sock, detect_event)
1344	                    else:
1345	                        # Send transcribe event with specified language
1346	                        transcribe_event = {
1347	                            "type": "transcribe",
1348	                            "data": {
1349	                                "language": language
1350	                            }
1351	                        }
1352	                        self._wyoming_send_event(sock, transcribe_event)
1353	                    
1354	                    # Stream audio data
1355	                    frames = wav.readframes(wav.getnframes())
1356	                    chunk_size = 4096
1357	                    for i in range(0, len(frames), chunk_size):
1358	                        chunk = frames[i:i + chunk_size]
1359	                        audio_event = {
1360	                            "type": "audio-chunk"
1361	                        }
1362	                        self._wyoming_send_event(sock, audio_event, chunk)
1363	                
1364	                # Send audio stop event
1365	                audio_stop = {
1366	                    "type": "audio-stop",
1367	                    "data": {}
1368	                }
1369	                self._wyoming_send_event(sock, audio_stop)
1370	                
1371	                # Wait for transcription result
1372	                results = []
1373	                transcript = ""
1374	                segments = []
1375	                
1376	                retry_count = 0
1377	                while retry_count < max_retries:
1378	                    event = self._wyoming_receive_event(sock)
1379	                    
1380	                    if event is None:
1381	                        retry_count += 1
1382	                        self.log('warning', f"Received None event, retry {retry_count}/{max_retries}")
1383	                        continue
1384	                    
1385	                    event_type = event.get('type')
1386	                    self.log('debug', f"Received event type: {event_type}")
1387	                    
1388	                    if event_type == "transcript":
1389	                        # Found our transcript!
1390	                        transcript_data = event.get('data', {})
1391	                        transcript = transcript_data.get('text', '')
1392	                        if transcript:
1393	                            self.log('debug', f"Got transcript: {transcript}")
1394	                            return {
1395	                                'text': transcript,
1396	                                'segments': [{
1397	                                    'text': transcript,
1398	                                    'start': 0,
1399	                                    'end': 0  # We don't know the duration
1400	                                }]
1401	                            }
1402	                    
1403	                    elif event_type == "transcript-segment":
1404	                        # Add segment to results
1405	                        segment_data = event.get('data', {})
1406	                        segment_text = segment_data.get('text', '')
1407	                        start = segment_data.get('start', 0)
1408	                        end = segment_data.get('end', 0)
1409	                        
1410	                        if segment_text:
1411	                            segments.append({
1412	                                'text': segment_text,
1413	                                'start': start,
1414	                                'end': end
1415	                            })
1416	                            transcript += segment_text + " "
1417	                            self.log('debug', f"Got segment: {segment_text}")
1418	                    
1419	                    elif event_type == "error":
1420	                        error_data = event.get('data', {})
1421	                        error_message = error_data.get('message', 'Unknown error')
1422	                        self.log('error', f"Wyoming server error: {error_message}")
1423	                        return None
1424	                    
1425	                    elif event_type == "transcribe-done":
1426	                        # Transcription complete
1427	                        if segments:
1428	                            return {
1429	                                'text': transcript.strip(),
1430	                                'segments': segments
1431	                            }
1432	                        elif transcript:
1433	                            return {
1434	                                'text': transcript.strip(),
1435	                                'segments': [{
1436	                                    'text': transcript.strip(),
1437	                                    'start': 0,
1438	                                    'end': 0
1439	                                }]
1440	                            }
1441	                        else:
1442	                            self.log('warning', "Transcription complete but no text found")
1443	                            return None
1444	                
1445	                # If we get here, we've exceeded our retry limit
1446	                self.log('error', f"Failed to get transcript after {max_retries} attempts")
1447	                return None
1448	                
1449	        except Exception as e:
1450	            self.log('error', f"Wyoming protocol transcription error: {str(e)}")
1451	            import traceback
1452	            self.log('debug', traceback.format_exc())
1453	            return None
1454	
1455	    def format_timestamp(self, seconds: float) -> str:
1456	        """Convert seconds to SRT timestamp format: HH:MM:SS,mmm"""
1457	        td = timedelta(seconds=seconds)
1458	        total_seconds = int(td.total_seconds())
1459	        hours = total_seconds // 3600
1460	        minutes = (total_seconds % 3600) // 60
1461	        seconds = total_seconds % 60
1462	        milliseconds = int((td.total_seconds() - total_seconds) * 1000)
1463	        return f"{hours:02d}:{minutes:02d}:{seconds:02d},{milliseconds:03d}"
1464	
1465	    def create_srt_block(self, index: int, text: str, start: float, end: float) -> str:
1466	        """Create a single SRT caption block"""
1467	        # Wrap text at approximately 40 characters
1468	        wrapped_text = textwrap.fill(text, width=40)
1469	        return f"{index}\n{self.format_timestamp(start)} --> {self.format_timestamp(end)}\n{wrapped_text}\n\n"
1470	
1471	    def detect_and_format_dialogue(self, text: str) -> str:
1472	        """
1473	        Detects possible dialogue in transcription text and formats it properly
1474	        for subtitle display with proper line breaks and attribution.
1475	        
1476	        Args:
1477	            text (str): The raw transcription text
1478	            
1479	        Returns:
1480	            str: Formatted text with properly formatted dialogue
1481	        """
1482	        
1483	        # Rule 0: Handle explicit dialogue patterns first (these are usually high confidence)
1484	        explicit_dialogue_patterns = [
1485	            # Pattern for quotes with attributions: "Text," speaker said.
1486	            (r'\"([^\"]+)\"[,.]? ([A-Z][a-z]+(?: [A-Z][a-z]+)?) (said|says|replied|added|mentioned|asked|exclaimed|shouted|whispered)', 
1487	             lambda m: f"{m.group(2)}:\n\"{m.group(1)}\""),
1488	            # Pattern for speaker: text
1489	            (r'([A-Z][a-z]+(?: [A-Z][a-z]+)?): (.*?)(?=$|\n|[.!?] [A-Z])', 
1490	             lambda m: f"{m.group(1)}:\n{m.group(2).strip()}"),
1491	        ]
1492	
1493	        for pattern, formatter in explicit_dialogue_patterns:
1494	            match = re.search(pattern, text)
1495	            if match:
1496	                # If an explicit pattern matches the whole text or a significant part,
1497	                # assume it's correctly formatted or can be formatted by the lambda.
1498	                # This part might need more sophisticated logic if multiple explicit patterns exist.
1499	                # For now, if a strong explicit pattern is found, we use it.
1500	                # This is a simplification; a full solution might try to find all such patterns.
1501	                return formatter(match) # Return early for high-confidence explicit dialogue
1502	
1503	        # Start with the original text for sequential modifications
1504	        processed_text = text
1505	
1506	        # Rule 1: Normalize text - attempt to fix run-on sentences often found in ASR output
1507	        # Add a period before a capital letter if preceded by a lowercase letter and a space, or just a lowercase letter.
1508	        processed_text = re.sub(r'([a-z])([A-Z])', r'\1. \2', processed_text) # wordWord -> word. Word
1509	        processed_text = re.sub(r'([a-z.,?!]) ([A-Z])', r'\1. \2', processed_text) # word. Word or word Word -> word. Word
1510	        processed_text = re.sub(r'\.([a-zA-Z])', r'. \1', processed_text) # Ensure space after period if missing
1511	
1512	        # Rule 2: Split before key interjections or turn-taking phrases (case-insensitive)
1513	        # These phrases often start a new speaker's turn.
1514	        # We insert a newline, ensuring not to add if already at line start or after another newline.
1515	        # Using a placeholder to manage iterative `re.sub` and then replacing it.
1516	        newline_placeholder = "[[NEWLINE_HERE]]"
1517	        
1518	        key_phrases_before = [
1519	            r"what about you",
1520	            r"and you",
1521	            r"am I understood",
1522	            r"are you sure",
1523	            r"can you tell me",
1524	            r"yes sir",
1525	            r"no sir",
1526	            r"yes ma'am",
1527	            r"no ma'am",
1528	            r"okay",
1529	            r"alright",
1530	            r"well", # Can start a new turn
1531	            r"actually", # Can start a new turn
1532	            # Names used as vocatives or to change subject - this is harder to generalize
1533	            # For the example: "Amelia", "Liam" - if they are followed by a shift.
1534	        ]
1535	        
1536	        # Temporarily mark potential split points before these phrases
1537	        for phrase in key_phrases_before:
1538	            processed_text = re.sub(fr'(?i)(?<=[a-z0-9.,?!])\s+(\b{phrase}\b)', fr'{newline_placeholder}\1', processed_text)
1539	        
1540	        # Rule 3: Pronoun shift based splitting (I/me/my vs. you/your)
1541	        # This rule applies after sentence normalization and key phrase splitting.
1542	        # It looks for transitions between sentences/clauses.
1543	        # Split "Sentence with I/my. Sentence with you/your." into two lines.
1544	        
1545	        # Pattern: (stuff ending with I/my/me PUNC) whitespace (you/your stuff)
1546	        processed_text = re.sub(fr'(?i)(\b(?:I|my|me)\b(?:[^.!?]|[.!?](?!\s+[A-Z]))*?[.!?])(\s+)(\b(?:you|your)\b)', fr'\1{newline_placeholder}\3', processed_text)
1547	        # Pattern: (stuff ending with you/your PUNC) whitespace (I/my/me stuff)
1548	        processed_text = re.sub(fr'(?i)(\b(?:you|your)\b(?:[^.!?]|[.!?](?!\s+[A-Z]))*?[.!?])(\s+)(\b(?:I|my|me)\b)', fr'\1{newline_placeholder}\3', processed_text)
1549	
1550	        # Rule 4: Splitting around specific names if they appear to mark a turn (context-dependent)
1551	        # Example: "... outbreak Amelia but it's a start" -> "... outbreak Amelia\nbut it's a start"
1552	        # Example: "... you Liam I scored" -> "... you Liam\nI scored"
1553	        # This is heuristic and can be error-prone if names are common words or part of longer names.
1554	        # For the given example, let's try to be specific.
1555	        # (This should ideally use a list of known speaker names if available)
1556	        speaker_names_in_example = [r"Amelia", r"Liam"]
1557	        for name in speaker_names_in_example:
1558	            # Split after "Name" if followed by a conjunction or different pronoun context
1559	            processed_text = re.sub(fr'(?i)(\b{name}\b[.,!?]?)\s+(?=(?:but|and|so|then|\b(?:I|my|me|you|your)\b))', fr'\1{newline_placeholder}', processed_text)
1560	
1561	        # Convert placeholders to actual newlines
1562	        processed_text = processed_text.replace(newline_placeholder, '\n')
1563	
1564	        # Rule 5: Clean up whitespace and multiple newlines
1565	        processed_text = re.sub(r'[ \t]*\n[ \t]*', '\n', processed_text) # Remove spaces around newlines
1566	        processed_text = re.sub(r'\n{2,}', '\n', processed_text) # Collapse multiple newlines to one
1567	        processed_text = processed_text.strip() # Remove leading/trailing whitespace
1568	
1569	        # If, after all this, the text is identical to original and has no newlines,
1570	        # and is very long, it might be a monologue.
1571	        # However, if it contains I/you, it's still suspicious.
1572	        if processed_text == text.strip() and '\n' not in processed_text and len(processed_text.split()) > 20:
1573	            # Last resort for long unpunctuated lines with mixed pronouns (very heuristic)
1574	            if re.search(r'\bI\b', processed_text, re.I) and re.search(r'\byou\b', processed_text, re.I):
1575	                # Try to find a split point around conjunctions or mid-sentence pronoun shifts
1576	                # This is complex and risky, so keeping it minimal or skipping for now.
1577	                # A simple split at a conjunction if one exists mid-way.
1578	                conjunction_split = re.match(r"(.*?\b(?:but|and|so)\b.*?)\s+(.*)", processed_text)
1579	                if conjunction_split and abs(len(conjunction_split.group(1)) - len(conjunction_split.group(2))) < len(processed_text) * 0.4 : # Reasonably balanced split
1580	                     processed_text = f"{conjunction_split.group(1)}\n{conjunction_split.group(2)}"
1581	
1582	        return processed_text
1583	
1584	    def split_into_captions(self, text: str, start_time: float, duration: float, 
1585	                           max_words_per_caption: int = 8,  # Changed from 14
1586	                           max_chars_per_caption: int = 50) -> list: # Changed from 80
1587	        """Split a transcript into multiple caption blocks with appropriate timing"""
1588	        captions = []
1589	        
1590	        # First process the text for potential dialogue formatting
1591	        text = self.detect_and_format_dialogue(text)
1592	        
1593	        # Now we'll work with the dialogue-enhanced text
1594	        
1595	        # Handle already line-broken text specially
1596	        if "\n" in text:
1597	            lines = text.split("\n")
1598	            line_count = len(lines)
1599	            time_per_line = duration / line_count if line_count > 0 else duration
1600	            
1601	            current_time = start_time
1602	            for i, line in enumerate(lines):
1603	                if not line.strip():
1604	                    continue
1605	                    
1606	                line_duration = min(time_per_line, 5.0)  # Cap at 5 seconds per line
1607	                end_time = current_time + line_duration
1608	                
1609	                captions.append((line.strip(), current_time, end_time))
1610	                current_time = end_time
1611	                
1612	            return captions
1613	        
1614	        # If no line breaks detected, fall back to original sentence splitting
1615	        sentences = re.split(r'(?<=[.!?]) +', text)
1616	        
1617	        # Estimate words per second from overall duration and word count
1618	        word_count = len(text.split())
1619	        words_per_second = word_count / duration if duration > 0 and word_count > 0 else 0.5
1620	        
1621	        current_caption = ""
1622	        current_word_count = 0
1623	        current_start = start_time
1624	        
1625	        for sentence in sentences:
1626	            words = sentence.split()
1627	            
1628	            # If adding this sentence would exceed our limits, add the current caption
1629	            if current_word_count + len(words) > max_words_per_caption or \
1630	               len(current_caption + " " + sentence) > max_chars_per_caption:
1631	                
1632	                # Only add if we have content
1633	                if current_caption:
1634	                    # Calculate end time based on word count and estimated words per second
1635	                    current_end = current_start + (current_word_count / words_per_second)
1636	                    captions.append((current_caption.strip(), current_start, current_end))
1637	                    
1638	                    # Start a new caption
1639	                    current_caption = sentence
1640	                    current_word_count = len(words)
1641	                    current_start = current_end
1642	            else:
1643	                # Add to current caption
1644	                if current_caption:
1645	                    current_caption += " " + sentence
1646	                else:
1647	                    current_caption = sentence
1648	                current_word_count += len(words)
1649	        
1650	        # Add the final caption if there's any content left
1651	        if current_caption:
1652	            current_end = min(start_time + duration, current_start + (current_word_count / words_per_second))
1653	            captions.append((current_caption.strip(), current_start, current_end))
1654	        
1655	        return captions
1656	
1657	    def create_srt_content(self, text: str, start_offset: float, duration: float) -> str:
1658	        """Create a complete SRT file content from transcript text"""
1659	        captions = self.split_into_captions(text, start_offset, duration)
1660	        
1661	        # If no captions were created, make a single caption for the whole chunk
1662	        if not captions:
1663	            captions = [(text, start_offset, start_offset + duration)]
1664	        
1665	        srt_content = ""
1666	        for i, (caption_text, start, end) in enumerate(captions, start=1):
1667	            srt_content += self.create_srt_block(i, caption_text, start, end)
1668	        
1669	        return srt_content
1670	
1671	    def process_chunk_to_srt(self, wav_path: str, offset: float = 0.0, 
1672	                           duration: float = 30.0, language: str = "en", 
1673	                           model: str = None) -> str:
1674	        """
1675	        Process a single WAV chunk and return SRT content
1676	        
1677	        Args:
1678	            wav_path: Path to the WAV file
1679	            offset: Start time offset in seconds for this chunk in the full video
1680	            duration: Duration of the chunk in seconds
1681	            language: Language code
1682	            model: Model name to use (optional)
1683	            
1684	        Returns:
1685	            str: SRT content for this chunk
1686	        """
1687	        self.log('info', f"Processing chunk {wav_path} with offset {offset}s to SRT")
1688	        
1689	        # Don't get model from config - let server use already loaded model
1690	        # This prevents downloading a new model when one is already loaded
1691	        
1692	        try:
1693	            from wyoming_client import WyomingClient # Moved import here
1694	            # Create Wyoming client
1695	            client = WyomingClient(host=self.server_host, port=self.server_port, logger=self.logger)
1696	            
1697	            # Transcribe audio - don't pass model parameter to use already loaded one
1698	            transcript = client.transcribe(wav_path, language=language)
1699	            
1700	            # Create SRT content
1701	            srt_content = self.create_srt_content(transcript, offset, duration)
1702	            
1703	            self.log('info', f"Generated SRT content with {srt_content.count('#')} caption blocks")
1704	            return srt_content
1705	        
1706	        except ModuleNotFoundError:
1707	            self.log('warning', "WyomingClient module not found. Skipping Wyoming STT.")
1708	            wyoming_transcript = None
1709	        except Exception as e:
1710	            self.log('error', f"Error during Wyoming STT: {e}")
1711	            wyoming_transcript = None
1712	        # Fall back to using our standard transcription and formatting it as SRT
1713	        try:
1714	            success, message, result = self.transcribe_audio_chunk(wav_path, language)
1715	            if success and 'text' in result:
1716	                return self.create_srt_content(result['text'], offset, duration)
1717	            else:
1718	                raise Exception(f"Transcription failed: {message}")
1719	        except Exception as fallback_error:
1720	            self.log('error', f"Fallback transcription failed: {str(fallback_error)}")
1721	            # Return a minimal SRT with error message
1722	            return f"1\n{self.format_timestamp(offset)} --> {self.format_timestamp(offset + duration)}\n[Transcription failed]\n\n"
1723	
1724	    def transcribe_video_to_srt(self, video_path: str, output_path: str, language: str = None, 
1725	                              chunk_duration: int = 30, model: str = None, job_id: str = None,
1726	                              external_progress_updater = None) -> Tuple[bool, str]:
1727	        """
1728	        Transcribe a video directly to an SRT file using Wyoming protocol
1729	        
1730	        Args:
1731	            video_path: Path to the video file
1732	            output_path: Path where to save the SRT file
1733	            language: Language code (e.g., 'en', 'fr')
1734	            chunk_duration: Duration of each chunk in seconds
1735	            model: Whisper model to use
1736	            job_id: Optional job ID for progress tracking
1737	            external_progress_updater: Optional callback function for updating progress externally
1738	            
1739	        Returns:
1740	            tuple: (success, message)
1741	                - success (bool): True if the transcription was successful
1742	                - message (str): Status or error message
1743	        """
1744	        if not os.path.exists(video_path):
1745	            self.log('error', f"Video file not found: {video_path}")
1746	            return False, "Video file not found"
1747	            
1748	        try:
1749	            # Generate job_id if not provided
1750	            if not job_id:
1751	                job_id = f"job_{uuid.uuid4().hex[:8]}"
1752	                
1753	            # Initialize progress
1754	            self._update_progress(job_id, 0, "Starting transcription...")
1755	            if external_progress_updater:
1756	                external_progress_updater(0, "Starting transcription...", "processing", job_id)
1757	            
1758	            # Extract audio from video
1759	            self._update_progress(job_id, 5, "Extracting audio from video...")
1760	            if external_progress_updater:
1761	                external_progress_updater(5, "Extracting audio from video...", "processing", job_id)
1762	                
1763	            extract_success, extract_message, audio_path = self.extract_audio(video_path)
1764	            
1765	            if not extract_success or not audio_path:
1766	                self.log('error', f"Failed to extract audio: {extract_message}")
1767	                self._update_progress(job_id, 100, f"Failed: {extract_message}", status="error")
1768	                if external_progress_updater:
1769	                    external_progress_updater(100, f"Failed: {extract_message}", "error", job_id)
1770	                return False, f"Failed to extract audio: {extract_message}"
1771	                
1772	            # Split audio into manageable chunks
1773	            self._update_progress(job_id, 15, "Splitting audio into chunks...")
1774	            if external_progress_updater:
1775	                external_progress_updater(15, "Splitting audio into chunks...", "processing", job_id)
1776	                
1777	            split_success, split_message, chunk_paths = self.split_audio_into_chunks(
1778	                audio_path, 
1779	                chunk_duration_seconds=chunk_duration
1780	            )
1781	            
1782	            if not split_success:
1783	                self.log('error', f"Failed to split audio: {split_message}")
1784	                self._update_progress(job_id, 100, f"Failed: {split_message}", status="error")
1785	                if external_progress_updater:
1786	                    external_progress_updater(100, f"Failed: {split_message}", "error", job_id)
1787	                return False, f"Failed to split audio: {split_message}"
1788	                
1789	            total_chunks = len(chunk_paths)
1790	            self.log('info', f"Processing {total_chunks} audio chunks for SRT generation")
1791	            self._update_progress(job_id, 20, f"Processing {total_chunks} audio chunks...")
1792	            if external_progress_updater:
1793	                external_progress_updater(20, f"Processing {total_chunks} audio chunks...", "processing", job_id)
1794	            
1795	            # Process each chunk and collect SRT contents
1796	            srt_chunks = []
1797	            
1798	            # Calculate how much progress each chunk represents (from 20% to 90%)
1799	            chunk_progress_total = 70  # 90-20
1800	            chunk_progress_each = chunk_progress_total / total_chunks if total_chunks > 0 else 0
1801	            
1802	            try:
1803	                for i, chunk_path in enumerate(chunk_paths):
1804	                    chunk_num = i + 1
1805	                    progress_pct = 20 + (i * chunk_progress_each)
1806	                    progress_message = f"Transcribing chunk {chunk_num}/{total_chunks} ({int((chunk_num/total_chunks)*100)}% done)"
1807	                    
1808	                    self._update_progress(job_id, int(progress_pct), progress_message)
1809	                    if external_progress_updater:
1810	                        external_progress_updater(int(progress_pct), progress_message, "processing", job_id)
1811	                        
1812	                    self.log('info', f"Processing chunk {chunk_num}/{total_chunks} to SRT")
1813	                    
1814	                    # Calculate offset for this chunk
1815	                    offset = i * chunk_duration
1816	                    
1817	                    # Process chunk and get SRT content
1818	                    srt_content = self.process_chunk_to_srt(
1819	                        chunk_path,
1820	                        offset=offset,
1821	                        duration=chunk_duration,
1822	                        language=language
1823	                        # Don't pass model parameter here to use already loaded model
1824	                    )
1825	                    
1826	                    srt_chunks.append(srt_content)
1827	                    
1828	                    # Update progress after each chunk with more detailed information
1829	                    current_progress = int(20 + ((i+1) * chunk_progress_each))
1830	                    chunk_percent = int(((i+1)/total_chunks)*100)
1831	                    progress_message = f"Completed chunk {chunk_num}/{total_chunks} ({chunk_percent}% complete)"
1832	                    
1833	                    self._update_progress(job_id, current_progress, progress_message)
1834	                    if external_progress_updater:
1835	                        external_progress_updater(current_progress, progress_message, "processing", job_id)
1836	            except Exception as chunk_error:
1837	                self.log('error', f"Error processing chunk {chunk_num}/{total_chunks}: {str(chunk_error)}")
1838	                # Continue with whatever chunks we have processed so far
1839	                if not srt_chunks:
1840	                    error_message = f"Failed to process any chunks: {str(chunk_error)}"
1841	                    if external_progress_updater:
1842	                        external_progress_updater(100, error_message, "error", job_id)
1843	                    raise Exception(error_message)
1844	                else:
1845	                    self.log('warning', f"Proceeding with {len(srt_chunks)}/{total_chunks} processed chunks")
1846	            
1847	            # Combine all SRT contents
1848	            self._update_progress(job_id, 90, "Combining transcription chunks...")
1849	            if external_progress_updater:
1850	                external_progress_updater(90, "Combining transcription chunks...", "processing", job_id)
1851	                
1852	            combined_srt = self._combine_srt_chunks(srt_chunks)
1853	            
1854	            # Write to output file
1855	            self._update_progress(job_id, 95, "Writing SRT file...")
1856	            if external_progress_updater:
1857	                external_progress_updater(95, "Writing SRT file...", "processing", job_id)
1858	                
1859	            os.makedirs(os.path.dirname(os.path.abspath(output_path)), exist_ok=True)
1860	            with open(output_path, 'w', encoding='utf-8') as f:
1861	                f.write(combined_srt)
1862	                
1863	            self.log('info', f"SRT file generated: {output_path}")
1864	            self._update_progress(job_id, 100, "Transcription complete!", status="complete")
1865	            if external_progress_updater:
1866	                external_progress_updater(100, "Transcription complete!", "completed", job_id)
1867	                
1868	            return True, f"SRT file generated: {output_path}"
1869	            
1870	        except Exception as e:
1871	            self.log('error', f"Error transcribing video to SRT: {str(e)}")
1872	            import traceback
1873	            self.log('error', traceback.format_exc())
1874	            self._update_progress(job_id, 100, f"Error: {str(e)}", status="error")
1875	            if external_progress_updater:
1876	                external_progress_updater(100, f"Error: {str(e)}", "failed", job_id)
1877	                
1878	            return False, f"Error transcribing video to SRT: {str(e)}"
1879	        finally:
1880	            # Clean up temporary files
1881	            if 'audio_path' in locals() and audio_path:
1882	                temp_dir = os.path.dirname(audio_path)
1883	                try:
1884	                    shutil.rmtree(temp_dir, ignore_errors=True)
1885	                except:
1886	                    pass
1887	
1888	    def _combine_srt_chunks(self, srt_chunks: List[str]) -> str:
1889	        """
1890	        Combine multiple SRT chunk contents into a single SRT file,
1891	        renumbering the indices to ensure they're sequential.
1892	        
1893	        Args:
1894	            srt_chunks: List of SRT file contents as strings
1895	            
1896	        Returns:
1897	            str: Combined SRT content with corrected indices
1898	        """
1899	        import re
1900	        
1901	        combined_content = ""
1902	        index = 1
1903	        
1904	        # SRT block pattern: index + timestamp line + text + blank line
1905	        pattern = r'(\d+)\n(\d{2}:\d{2}:\d{2},\d{3} --> \d{2}:\d{2}:\d{2},\d{3})\n([\s\S]*?)(?=\n\n|\Z)'
1906	        
1907	        for chunk in srt_chunks:
1908	            for match in re.finditer(pattern, chunk):
1909	                # Extract the timestamp line and text content
1910	                timestamp_line = match.group(2)
1911	                text_content = match.group(3).strip()
1912	                
1913	                # Create a new SRT block with the correct index
1914	                combined_content += f"{index}\n{timestamp_line}\n{text_content}\n\n"
1915	                index += 1
1916	        
1917	        return combined_content
1918	
1919	    def _update_progress(self, job_id: str, percent: int, message: str, status: str = "processing"):
1920	        """
1921	        Update progress information for a transcription job
1922	        
1923	        Args:
1924	            job_id: Unique identifier for the job
1925	            percent: Progress percentage (0-100)
1926	            message: Status message
1927	            status: Status indicator ("processing", "complete", "error")
1928	        """
1929	        progress_info = {
1930	            "job_id": job_id,
1931	            "percent": percent,
1932	            "message": message,
1933	            "status": status,
1934	            "updated": time.time()
1935	        }
1936	        
1937	        self.log('info', f"Progress update [{job_id}]: {percent}% - {message}")
1938	        VideoTranscriber._progress_data[job_id] = progress_info # Store in class variable
1939	
1940	        # If we have a Flask app with socketio, emit progress update
1941	        try:
1942	            import sys
1943	            if 'app' in sys.modules and hasattr(sys.modules['app'], 'socketio') and sys.modules['app'].socketio:
1944	                socketio = sys.modules['app'].socketio
1945	                # Emit to a room specific to the job_id for targeted updates
1946	                socketio.emit('transcription_progress', progress_info, room=job_id)
1947	                self.log('debug', f"Emitted progress via socketio to room {job_id}: {progress_info}")
1948	            elif 'app' in sys.modules and hasattr(sys.modules['app'], 'socketio'): # SocketIO might be None if not initialized
1949	                 self.log('debug', "socketio object exists in app module but is None, cannot emit.")
1950	            else:
1951	                self.log('debug', "socketio not available in app module for progress emission.")
1952	        except ImportError:
1953	            self.log('debug', "App module or socketio not available for emitting progress.")
1954	        except Exception as e:
1955	            self.log('debug', f"Could not emit socketio progress: {e}")
1956	
1957	    @classmethod
1958	    def get_progress(cls, job_id: str) -> Optional[Dict[str, Any]]: # Renamed from get_job_progress
1959	        """
1960	        Get progress information for a specific job
1961	        
1962	        Args:
1963	            job_id: Unique identifier for the job
1964	            
1965	        Returns:
1966	            dict: Progress information or None if not found
1967	        """
1968	        return cls._progress_data.get(job_id)
1969	
1970	def test_connection(server_url="http://10.0.10.23:10300"):
1971	    """
1972	    Test connection to a specified Wyoming protocol server.
1973	    This is a standalone function that can be called directly from the command line.
1974	    
1975	    Args:
1976	        server_url (str): URL of the server to test
1977	        
1978	    Returns:
1979	        bool: True if the connection was successful, False otherwise
1980	    """
1981	    # Create a transcriber instance with the specified URL
1982	    transcriber = VideoTranscriber(server_url=server_url)
1983	    
1984	    # Parse the URL to get host and port
1985	    parsed_url = urlparse(server_url)
1986	    host = parsed_url.hostname
1987	    port = parsed_url.port or 10300  # Default Wyoming protocol port
1988	    
1989	    # Test TCP connection first
1990	    print(f"Testing TCP connection to {host}:{port}...")
1991	    try:
1992	        with socket.create_connection((host, port), timeout=10) as sock:
1993	            print(f"‚úÖ TCP connection successful!")
1994	            
1995	            # Test Wyoming protocol
1996	            print("Testing Wyoming protocol...")
1997	            try:
1998	                transcriber._wyoming_send_event(sock, {"type": "describe"})
1999	                try:
2000	                    info_event = transcriber._wyoming_receive_event(sock, timeout=10)
2001	                    if info_event and info_event.get("type") == "info":
2002	                        print(f"‚úÖ Wyoming protocol successful!")
2003	                        print(f"Server info: {json.dumps(info_event, indent=2)}")
2004	                        return True
2005	                    else:
2006	                        print(f"‚ö†Ô∏è Server responded, but with unexpected event: {info_event}")
2007	                except socket.timeout:
2008	                    print(f"‚ö†Ô∏è Wyoming protocol timed out, but TCP connection works")
2009	                except Exception as e:
2010	                    print(f"‚ö†Ô∏è Wyoming protocol error: {str(e)}")
2011	            except Exception as e:
2012	                print(f"‚ö†Ô∏è Failed to send Wyoming protocol message: {str(e)}")
2013	    except socket.timeout:
2014	        print(f"‚ùå Connection timed out after 10 seconds")
2015	    except ConnectionRefusedError:
2016	        print(f"‚ùå Connection refused. Is the server running?")
2017	    except Exception as e:
2018	        print(f"‚ùå Connection error: {str(e)}")
2019	    
2020	    print("\nTrying HTTP endpoints as fallback...")
2021	    # Try some common HTTP endpoints
2022	    endpoints = ['/', '/health', '/status', '/info', '/v1', '/api']
2023	    for endpoint in endpoints:
2024	        try:
2025	            url = f"{server_url.rstrip('/')}{endpoint}"
2026	            print(f"Testing {url}...")
2027	            response = requests.get(url, timeout=5)
2028	            print(f"‚úÖ HTTP response: {response.status_code} {response.reason}")
2029	            return True
2030	        except requests.RequestException as e:
2031	            print(f"‚ùå HTTP error: {str(e)}")
2032	    
2033	    print("\nAll connection attempts failed.")
2034	    return False
2035	
2036	
2037	# Allow running as a standalone script for testing
2038	if __name__ == "__main__":
2039	    import argparse
2040	    
2041	    # Parse command line arguments
2042	    parser = argparse.ArgumentParser(description="Test connection to a Wyoming protocol server")
2043	    parser.add_argument("--url", default="http://10.0.10.23:10300", help="URL of the server to test")
2044	    args = parser.parse_args()
2045	    
2046	    # Run the connection test
2047	    success = test_connection(args.url)
2048	    
2049	    # Exit with appropriate status code
2050	    import sys
2051	    sys.exit(0 if success else 1)

--- File: py/wiki_terminology.py ---
   1	#!/usr/bin/env python3
   2	"""
   3	Wiki Terminology (and Summary) Service
   4	--------------------------------------
   5	Pulls *short lead‚Äësection summaries* plus any glossary‚Äëstyle terms
   6	from Fandom / MediaWiki wikis to prime an LLM subtitle‚Äëtranslator.
   7	"""
   8	
   9	import argparse, configparser, json, logging, os, re, time, urllib.parse
  10	from collections import OrderedDict
  11	
  12	import requests
  13	from bs4 import BeautifulSoup           # pip install beautifulsoup4
  14	import mwparserfromhell as mw           # pip install mwparserfromhell
  15	
  16	DDG_LITE = "https://lite.duckduckgo.com/50x.html"   # no‚ÄëJS endpoint :contentReference[oaicite:3]{index=3}
  17	# Expanded themed categories for better coverage of show-specific terminology
  18	THEMED_CATEGORIES = ["Mutes", "Packs", "Events", "Locations", "Characters", "Species", "Powers", "Abilities", "Weapons", "Technology", "Factions", "Groups", "Organizations", "Places", "Items"]
  19	HEADERS = {"User-Agent": "SubtitleTranslator/1.2 (https://github.com/you/sub)"}
  20	
  21	class WikiTerminologyService:
  22	    def __init__(self, config, logger=None):
  23	        self.cfg = config["wiki_terminology"]
  24	        self.enabled = self.cfg.getboolean("enabled", True)
  25	        self.max_terms = self.cfg.getint("max_terms", 15)
  26	        self.cache_dir = os.path.join(
  27	            os.path.dirname(os.path.abspath(__file__)), "..", "cache", "wikis"
  28	        )
  29	        os.makedirs(self.cache_dir, exist_ok=True)
  30	        self.cache_expiry = self.cfg.getint("cache_expiry_days", 7) * 86400
  31	        self.logger = logger or logging.getLogger(__name__)
  32	
  33	        # search endpoints (unified‚Äësearch first, then legacy, then DDG)
  34	        self.endpoints = [
  35	            "https://services.fandom.com/unified-search/community-search",  # 
  36	            "https://www.fandom.com/api/v1/Search/List",                    # legacy¬†‚Äì 404s on new wikis :contentReference[oaicite:4]{index=4}
  37	            "https://community.fandom.com/api/v1/Search/List",
  38	        ]
  39	
  40	        # regex patterns for bullet‚Äëstyle glossary lines (kept for completeness)
  41	        self.term_rx = re.compile(
  42	            r"^[\*\#]\s*'''?\s*([^':\n]+?)\s*'''?\s*[:\-‚Äì]\s*(.+)", re.IGNORECASE
  43	        )
  44	
  45	    # ---------- public entry point ---------- #
  46	    def get_terminology(self, media):
  47	        if not self.enabled:
  48	            return None
  49	
  50	        title, tmdb_id = media["title"], media.get("id") or media.get("tmdb_id")
  51	        cache_file = os.path.join(self.cache_dir, f"{tmdb_id}_terminology.json")
  52	
  53	        # Check force_refresh option first
  54	        force_refresh = self.cfg.getboolean("force_refresh", fallback=False)
  55	        
  56	        # use cache if fresh and not forcing refresh
  57	        if not force_refresh and self._maybe_fresh(cache_file):
  58	            self.logger.info("Using cached wiki summaries")
  59	            return json.load(open(cache_file, encoding="utf-8"))
  60	
  61	        base = self._locate_wiki(title,
  62	                                 self.cfg.get("manual_wiki_override", fallback=None))
  63	        
  64	        # If no wiki found, return None
  65	        if not base:
  66	            self.logger.warning(f"No wiki found for {title}")
  67	            return None
  68	        
  69	        # Extract wiki summary even if no specific terms are found
  70	        wiki_summary = self._get_wiki_summary(base)
  71	        
  72	        pages = self._candidate_pages(base)
  73	        self.logger.info("Pages considered: %s", pages[:10])
  74	
  75	        glossary = OrderedDict()
  76	        # -------- 1) short summaries via TextExtracts -------- #
  77	        summaries = self._quick_extracts(base, pages[:self.max_terms * 2])
  78	        for page, summ in summaries.items():
  79	            if summ and len(glossary) < self.max_terms:
  80	                glossary[page] = summ[:250]  # hard cap
  81	                
  82	        # -------- 2) bullet‚Äëstyle terms -------- #
  83	        # Process themed categories first to prioritize show-specific terms
  84	        themed_pages = [p for p in pages if any(cat.lower() in p.lower() for cat in THEMED_CATEGORIES)]
  85	        other_pages = [p for p in pages if p not in themed_pages]
  86	        
  87	        # Process themed pages first
  88	        for page in themed_pages + other_pages:
  89	            if len(glossary) >= self.max_terms:
  90	                break
  91	            glossary.update(self._bullet_terms(base, page))
  92	
  93	        # Create and return payload with wiki summary included
  94	        payload = {
  95	            "wiki_url": base,
  96	            "wiki_summary": wiki_summary,
  97	            "terms": [{"term": k, "definition": v} for k, v in list(glossary.items())[:self.max_terms]],
  98	            "last_updated": time.time(),
  99	        }
 100	        
 101	        # Save to cache
 102	        with open(cache_file, "w", encoding="utf-8") as f:
 103	            json.dump(payload, f, ensure_ascii=False, indent=2)
 104	        
 105	        return payload
 106	
 107	    def _get_wiki_summary(self, wiki_url):
 108	        """Extract a summary of the wiki itself"""
 109	        try:
 110	            self.logger.info(f"Fetching wiki summary from {wiki_url}")
 111	            response = requests.get(wiki_url, headers=HEADERS, timeout=10)
 112	            if response.status_code == 200:
 113	                soup = BeautifulSoup(response.text, 'html.parser')
 114	                
 115	                # Try to find the main description/summary
 116	                # First check for wiki description
 117	                desc = soup.select_one('meta[name="description"]')
 118	                if desc and desc.get('content'):
 119	                    return desc.get('content')
 120	                    
 121	                # Try main content area
 122	                main_content = soup.select_one('.page-content')
 123	                if main_content:
 124	                    paragraphs = main_content.select('p')
 125	                    if paragraphs:
 126	                        # Get first 2-3 paragraphs
 127	                        summary = ' '.join([p.text for p in paragraphs[:3]])
 128	                        return summary[:500]  # Limit to 500 chars
 129	                        
 130	                # Try first paragraph as fallback
 131	                first_p = soup.select_one('p')
 132	                if first_p:
 133	                    return first_p.text[:500]
 134	                    
 135	                return "No summary could be extracted from wiki."
 136	            else:
 137	                return f"Could not access wiki ({response.status_code})"
 138	        except Exception as e:
 139	            self.logger.error(f"Error fetching wiki summary: {str(e)}")
 140	            return "Error fetching wiki summary."
 141	
 142	    # ---------- helpers ---------- #
 143	    def _maybe_fresh(self, path):
 144	        return os.path.exists(path) and time.time() - os.path.getmtime(path) < self.cache_expiry
 145	
 146	    # wiki discovery --------------- #
 147	    def _locate_wiki(self, title, explicit=None):
 148	        if explicit:
 149	            return explicit.rstrip("/")
 150	        # 1) unified‚Äësearch JSON
 151	        for ep in self.endpoints:
 152	            try:
 153	                if "unified-search" in ep:
 154	                    r = requests.get(ep, params={"query": title, "lang": "en"},
 155	                                     headers=HEADERS, timeout=10)
 156	                    if r.ok:
 157	                        for res in r.json().get("results", []):
 158	                            return res["url"].split("/wiki")[0]
 159	                else:  # legacy
 160	                    r = requests.get(ep, params={"query": title, "limit": 5},
 161	                                     headers=HEADERS, timeout=10)
 162	                    if r.ok:
 163	                        for itm in r.json().get("items", []):
 164	                            m = re.match(r"https?://([^.]+\.fandom\.com)/", itm["url"])
 165	                            if m:
 166	                                return f"https://{m.group(1)}"
 167	            except requests.RequestException:
 168	                continue
 169	        # 2) DDG lite fallback
 170	        q = f'{title} site:fandom.com "wiki"'
 171	        r = requests.get(DDG_LITE, params={"q": q}, headers=HEADERS, timeout=10)
 172	        for link in re.findall(r'href="(https://[^"]+?\.fandom\.com)(?:/|\?|\")', r.text):
 173	            return link.rstrip("/")
 174	        raise RuntimeError("Could not locate a Fandom wiki")
 175	
 176	    # candidate page list ---------- #
 177	    def _candidate_pages(self, base):
 178	        pages = set()
 179	        wiki_name = base.split("//")[1].split(".")[0]
 180	        pages.add(wiki_name.replace("_", " ").title())
 181	
 182	        # First prioritize themed (show-specific) categories
 183	        themed_pages = []
 184	        for cat in THEMED_CATEGORIES:
 185	            try:
 186	                data = self._mw(base, action="query", list="categorymembers",
 187	                                cmtitle=f"Category:{cat}", cmlimit="10")
 188	                cat_pages = [p["title"] for p in data["query"]["categorymembers"]]
 189	                # Prioritize these by adding them to the start of our pages list
 190	                themed_pages.extend(cat_pages)
 191	                # Only log if there are actually pages in this category, to reduce log spam
 192	                if cat_pages:
 193	                    self.logger.debug("Found %d pages in themed category %s", len(cat_pages), cat)
 194	            except Exception:
 195	                pass
 196	        
 197	        # Add themed pages to our set
 198	        pages.update(themed_pages)
 199	
 200	        # Then add general glossary categories
 201	        for cat in ["Glossary", "Terminology", "Slang", "Dictionary"]:
 202	            try:
 203	                data = self._mw(base, action="query", list="categorymembers",
 204	                                cmtitle=f"Category:{cat}", cmlimit="5")
 205	                pages.update(p["title"] for p in data["query"]["categorymembers"])
 206	            except Exception:
 207	                pass
 208	
 209	        # Enhanced text search with more show-specific terms derived from themed categories
 210	        search_terms = " OR ".join(["glossary", "terminology", "dictionary"] + THEMED_CATEGORIES)
 211	        try:
 212	            data = self._mw(base, action="query", list="search",
 213	                            srsearch=search_terms,
 214	                            srlimit="10")
 215	            pages.update(hit["title"] for hit in data["query"]["search"])
 216	        except Exception:
 217	            pass
 218	
 219	        return list(pages)[:30]  # Increased limit to capture more potential pages
 220	
 221	    #  TextExtracts summaries ------- #
 222	    def _quick_extracts(self, base, pages):
 223	        titles = "|".join(pages[:20])  # API limit 20 :contentReference[oaicite:5]{index=5}
 224	        try:
 225	            data = self._mw(
 226	                base,
 227	                action="query",
 228	                prop="extracts",
 229	                explaintext=True,
 230	                exintro=True,
 231	                exlimit=len(pages),
 232	                titles=titles,
 233	            )
 234	            extracts = {}
 235	            for page in data["query"]["pages"].values():
 236	                if "missing" in page:
 237	                    continue
 238	                txt = page.get("extract", "").strip()
 239	                if txt:
 240	                    extracts[page["title"]] = re.sub(r"\s+", " ", txt)
 241	            return extracts
 242	        except Exception as e:
 243	            self.logger.debug("Extract API failed: %s", e)
 244	            return {}
 245	
 246	    #  bullet‚Äëstyle term parser ----- #
 247	    def _bullet_terms(self, base, page):
 248	        try:
 249	            data = self._mw(base, action="parse", page=page, prop="wikitext")
 250	            text = data["parse"]["wikitext"]["*"]
 251	            code = mw.parse(text)
 252	            terms = OrderedDict()
 253	            for line in code.strip_code().splitlines():
 254	                m = self.term_rx.match(line)
 255	                if m and len(terms) < self.max_terms:
 256	                    term, defi = m.groups()
 257	                    terms[term.strip()] = defi.strip()[:150]
 258	            return terms
 259	        except Exception:
 260	            return {}
 261	
 262	    # thin wrapper around API ------- #
 263	    def _mw(self, base, **params):
 264	        params.setdefault("format", "json")
 265	        url = f"{base}/api.php"
 266	        r = requests.get(url, params=params, headers=HEADERS, timeout=20)
 267	        r.raise_for_status()
 268	        return r.json()
 269	
 270	# ---------------- CLI driver ---------------- #
 271	def cli():
 272	    ap = argparse.ArgumentParser()
 273	    ap.add_argument("title", help="Show or movie title")
 274	    ap.add_argument("--wiki", help="Override wiki URL (e.g. https://kipo.fandom.com)")
 275	    ap.add_argument("--max-terms", type=int, help="Number of summaries/terms to return")
 276	    args = ap.parse_args()
 277	
 278	    cfg = configparser.ConfigParser()
 279	    cfg["wiki_terminology"] = {
 280	        "enabled": "true",
 281	        "cache_expiry_days": "7",
 282	        "max_terms": str(args.max_terms or 10),
 283	    }
 284	    if args.wiki:
 285	        cfg["wiki_terminology"]["manual_wiki_override"] = args.wiki
 286	
 287	    logging.basicConfig(level=logging.INFO,
 288	                        format="%(asctime)s %(levelname)s %(message)s")
 289	    service = WikiTerminologyService(cfg, logging.getLogger("wiki"))
 290	
 291	    media = {"title": args.title, "type": "tv", "id": "cli"}
 292	    out = service.get_terminology(media)
 293	    if out and out["terms"]:
 294	        print(f"‚úì {len(out['terms'])} items from {out['wiki_url']}")
 295	        print(json.dumps(out["terms"], indent=2, ensure_ascii=False))
 296	    else:
 297	        print("‚úó No data found")
 298	
 299	if __name__ == "__main__":
 300	    cli()


--- File: py/wyoming_client.py ---
   1	#!/usr/bin/env python3
   2	import asyncio
   3	import json
   4	import struct
   5	from typing import Optional, List, Dict, Any, Generator, AsyncGenerator
   6	import logging
   7	
   8	logger = logging.getLogger(__name__)
   9	
  10	class WyomingClient:
  11	    """Client for communicating with Wyoming protocol services"""
  12	    
  13	    def __init__(self, host: str = "localhost", port: int = 10300):
  14	        """Initialize Wyoming client with host and port"""
  15	        self.host = host
  16	        self.port = port
  17	        self.reader = None
  18	        self.writer = None
  19	        self.connected = False
  20	    
  21	    async def connect(self) -> bool:
  22	        """Connect to the Wyoming server"""
  23	        try:
  24	            self.reader, self.writer = await asyncio.open_connection(self.host, self.port)
  25	            self.connected = True
  26	            logger.info(f"Connected to Wyoming server at {self.host}:{self.port}")
  27	            return True
  28	        except Exception as e:
  29	            logger.error(f"Failed to connect to Wyoming server: {e}")
  30	            self.connected = False
  31	            return False
  32	    
  33	    async def disconnect(self) -> None:
  34	        """Disconnect from the Wyoming server"""
  35	        if self.writer:
  36	            try:
  37	                self.writer.close()
  38	                await self.writer.wait_closed()
  39	            except Exception as e:
  40	                logger.error(f"Error during disconnect: {e}")
  41	        self.connected = False
  42	        logger.info("Disconnected from Wyoming server")
  43	    
  44	    async def send_event(self, event_type: str, data: Dict[str, Any] = None) -> None:
  45	        """Send an event to the Wyoming server"""
  46	        if not self.connected:
  47	            raise RuntimeError("Not connected to Wyoming server")
  48	        
  49	        event = {"type": event_type}
  50	        if data:
  51	            event.update(data)
  52	        
  53	        event_json = json.dumps(event).encode("utf-8")
  54	        header = struct.pack("!I", len(event_json))
  55	        
  56	        self.writer.write(header + event_json)
  57	        await self.writer.drain()
  58	        logger.debug(f"Sent event: {event_type}")
  59	    
  60	    async def receive_event(self) -> Dict[str, Any]:
  61	        """Receive an event from the Wyoming server"""
  62	        if not self.connected:
  63	            raise RuntimeError("Not connected to Wyoming server")
  64	        
  65	        try:
  66	            header = await self.reader.readexactly(4)
  67	            event_length = struct.unpack("!I", header)[0]
  68	            event_json = await self.reader.readexactly(event_length)
  69	            event = json.loads(event_json.decode("utf-8"))
  70	            logger.debug(f"Received event: {event.get('type')}")
  71	            return event
  72	        except asyncio.IncompleteReadError:
  73	            logger.warning("Connection closed by server")
  74	            self.connected = False
  75	            raise
  76	        except Exception as e:
  77	            logger.error(f"Error receiving event: {e}")
  78	            raise
  79	    
  80	    async def audio_to_srt(self, audio_data: bytes, rate: int = 16000, language: str = "en") -> str:
  81	        """Convert audio data to SRT subtitles using Wyoming ASR service"""
  82	        if not self.connected:
  83	            await self.connect()
  84	        
  85	        # Set up ASR parameters
  86	        await self.send_event("asr-start", {
  87	            "language": language,
  88	            "sample_rate": rate,
  89	            "format": "wav",
  90	            "client": {"name": "subtitle-translator"}
  91	        })
  92	        
  93	        # Send audio data
  94	        await self.send_event("asr-audio", {"audio": audio_data})
  95	        
  96	        # Signal end of audio
  97	        await self.send_event("asr-stop")
  98	        
  99	        full_transcript = ""
 100	        transcript_parts = []
 101	        start_time = 0
 102	        
 103	        # Process ASR results
 104	        while True:
 105	            event = await self.receive_event()
 106	            event_type = event.get("type")
 107	            
 108	            if event_type == "asr-result":
 109	                transcript = event.get("text", "")
 110	                if transcript:
 111	                    full_transcript += transcript + " "
 112	                    
 113	                # Get timing information if available
 114	                if "start_time" in event:
 115	                    start_time = float(event["start_time"])
 116	                    end_time = float(event.get("end_time", start_time + 3.0))
 117	                    transcript_parts.append((transcript, start_time, end_time))
 118	                    
 119	            elif event_type == "asr-complete":
 120	                break
 121	        
 122	        return full_transcript.strip(), transcript_parts
 123	    
 124	    def transcribe(self, wav_path: str, language: Optional[str] = None, model: Optional[str] = None) -> str:
 125	        """Synchronous wrapper to transcribe WAV file via audio_to_srt"""
 126	        try:
 127	            with open(wav_path, 'rb') as f:
 128	                audio_data = f.read()
 129	        except Exception as e:
 130	            logger.error(f"Failed to read WAV file {wav_path}: {e}")
 131	            raise
 132	        # Run async audio_to_srt
 133	        transcript, _ = asyncio.run(self.audio_to_srt(audio_data, rate=16000, language=language or 'en'))
 134	        return transcript
 135	    
 136	    async def __aenter__(self):
 137	        """Context manager enter"""
 138	        await self.connect()
 139	        return self
 140	    
 141	    async def __aexit__(self, exc_type, exc_val, exc_tb):
 142	        """Context manager exit"""
 143	        await self.disconnect()
 144	
 145	# Simple test if run directly
 146	if __name__ == "__main__":
 147	    import sys
 148	    logging.basicConfig(level=logging.DEBUG)
 149	    
 150	    if len(sys.argv) < 3:
 151	        print("Usage: python wyoming_client.py <host:port> <wav_file> [language]")
 152	        sys.exit(1)
 153	        
 154	    host_port = sys.argv[1].split(":")
 155	    host = host_port[0]
 156	    port = int(host_port[1]) if len(host_port) > 1 else 10300
 157	    
 158	    wav_file = sys.argv[2]
 159	    language = sys.argv[3] if len(sys.argv) > 3 else None
 160	    
 161	    client = WyomingClient(host, port)
 162	    try:
 163	        text = client.transcribe(wav_file, language)
 164	        print(f"Transcription: {text}")
 165	    except Exception as e:
 166	        print(f"Error: {e}")
 167	        sys.exit(1)

--- File: requirements.txt ---
   1	Flask
   2	requests
   3	srt
   4	ffmpeg-python
   5	
   6	# Wyoming protocol client dependency
   7	wyoming>=0.4.0

--- File: run_debug.py ---
   1	#!/usr/bin/env python
   2	"""
   3	Debug utility to help diagnose and fix issues with the directory browser.
   4	This is a simplified version of app.py that focuses on just the directory browsing functionality.
   5	"""
   6	
   7	import os
   8	import sys
   9	import json
  10	from flask import Flask, request, jsonify, render_template, send_from_directory
  11	
  12	# Setup Flask app
  13	app = Flask(__name__, static_folder='static', template_folder='templates')
  14	
  15	@app.route('/')
  16	def index():
  17	    """Render the main page but with debug info."""
  18	    languages = [
  19	        ("auto", "Auto Detect"),
  20	        ("en", "English"),
  21	        ("es", "Spanish"),
  22	        ("fr", "French"),
  23	        ("de", "German"),
  24	        ("it", "Italian"),
  25	        ("ja", "Japanese"),
  26	        ("ko", "Korean"),
  27	        ("zh-cn", "Chinese (Simplified)"),
  28	        ("zh-tw", "Chinese (Traditional)"),
  29	        ("ru", "Russian"),
  30	        ("pt", "Portuguese"),
  31	        ("ar", "Arabic")
  32	    ]
  33	    
  34	    return render_template('index.html', 
  35	                          languages=languages, 
  36	                          default_source="auto", 
  37	                          default_target="en",
  38	                          debug=True)
  39	
  40	@app.route('/api/browse_dirs', methods=['GET'])
  41	def api_browse_dirs():
  42	    """API endpoint to list directories for the file browser with enhanced debug."""
  43	    parent_path = request.args.get("path", "")
  44	    
  45	    print(f"DEBUG: Browse dirs request received for path: '{parent_path}'")
  46	    
  47	    # Default to system root directories if no path provided
  48	    if not parent_path:
  49	        if os.name == "nt":  # Windows
  50	            import string
  51	            # Get all drives
  52	            drives = [f"{d}:\\" for d in string.ascii_uppercase if os.path.exists(f"{d}:\\")]
  53	            print(f"DEBUG: Listing Windows drives: {drives}")
  54	            return jsonify({"directories": [{"name": d, "path": d} for d in drives], 
  55	                           "current_path": "", "parent_path": ""})
  56	        else:  # Unix-like
  57	            parent_path = "/"
  58	            print(f"DEBUG: Setting default path to root directory: {parent_path}")
  59	    
  60	    try:
  61	        # Security check: normalize path to prevent directory traversal
  62	        parent_path = os.path.normpath(parent_path)
  63	        print(f"DEBUG: Normalized path: {parent_path}")
  64	        
  65	        # Get the parent of the current directory for "up one level" functionality
  66	        parent_of_parent = os.path.dirname(parent_path) if parent_path != "/" else ""
  67	        
  68	        # List all directories in the parent path
  69	        dirs = []
  70	        if os.path.isdir(parent_path):
  71	            print(f"DEBUG: Listing directories in {parent_path}")
  72	            for item in os.listdir(parent_path):
  73	                full_path = os.path.join(parent_path, item)
  74	                if os.path.isdir(full_path):
  75	                    dirs.append({"name": item, "path": full_path})
  76	            
  77	            # Sort directories by name
  78	            dirs.sort(key=lambda x: x["name"].lower())
  79	            
  80	            print(f"DEBUG: Found {len(dirs)} directories")
  81	            return jsonify({
  82	                "directories": dirs,
  83	                "current_path": parent_path,
  84	                "parent_path": parent_of_parent
  85	            })
  86	        else:
  87	            print(f"DEBUG: Not a valid directory: {parent_path}")
  88	            return jsonify({"error": "Not a valid directory"}), 400
  89	            
  90	    except Exception as e:
  91	        print(f"DEBUG ERROR: Exception in browse_dirs: {str(e)}")
  92	        return jsonify({"error": str(e)}), 500
  93	
  94	@app.route('/debug/inspect_browser')
  95	def inspect_browser():
  96	    """Special debug endpoint to check browser visibility."""
  97	    return """
  98	    <html>
  99	    <head><title>Debug Browser Visibility</title></head>
 100	    <body>
 101	        <h1>Browser Visibility Debugger</h1>
 102	        <script>
 103	            // Fetch page HTML
 104	            fetch('/')
 105	            .then(response => response.text())
 106	            .then(html => {
 107	                // Create a DOM parser and parse the HTML
 108	                const parser = new DOMParser();
 109	                const doc = parser.parseFromString(html, 'text/html');
 110	                
 111	                // Extract the browser element
 112	                const browser = doc.getElementById('inline-file-browser');
 113	                const browseBtn = doc.getElementById('browse-btn');
 114	                
 115	                // Display info
 116	                document.body.innerHTML += `
 117	                    <h2>Inline File Browser Element</h2>
 118	                    <pre>${browser ? browser.outerHTML.replace(/</g, '&lt;').replace(/>/g, '&gt;') : 'Not found'}</pre>
 119	                    
 120	                    <h2>Browse Button Element</h2>
 121	                    <pre>${browseBtn ? browseBtn.outerHTML.replace(/</g, '&lt;').replace(/>/g, '&gt;') : 'Not found'}</pre>
 122	                `;
 123	            });
 124	        </script>
 125	    </body>
 126	    </html>
 127	    """
 128	
 129	if __name__ == '__main__':
 130	    print("Starting debug server...")
 131	    app.run(host='0.0.0.0', port=5000, debug=True)


--- File: start_translator.sh ---
   1	#!/bin/bash
   2	
   3	# Script to set up the environment and run the subtitle translator
   4	# Author: GitHub Copilot
   5	# Created: 2025-04-17
   6	
   7	set -e  # Exit on error
   8	
   9	# Color codes for prettier output
  10	GREEN='\033[0;32m'
  11	YELLOW='\033[1;33m'
  12	BLUE='\033[0;34m'
  13	RED='\033[0;31m'
  14	NC='\033[0m' # No Color
  15	
  16	# Print a colored message
  17	print_message() {
  18	    local color=$1
  19	    local message=$2
  20	    echo -e "${color}${message}${NC}"
  21	}
  22	
  23	# Check and install system packages if missing
  24	install_system_package() {
  25	    local package_name=$1
  26	    
  27	    # Check if package is installed
  28	    if ! command -v "$package_name" &>/dev/null; then
  29	        print_message "$YELLOW" "$package_name not found. Attempting to install..."
  30	        
  31	        # Check for sudo access
  32	        local SUDO=""
  33	        if command -v sudo &>/dev/null && [ "$EUID" -ne 0 ]; then
  34	            SUDO="sudo"
  35	        fi
  36	        
  37	        # Try to install using the appropriate package manager
  38	        if command -v winget &>/dev/null; then
  39	            # Windows with winget
  40	            print_message "$YELLOW" "Installing using winget..."
  41	            case "$package_name" in
  42	                "ffmpeg")
  43	                    winget install -e --id Gyan.FFmpeg
  44	                    ;;
  45	                "python3")
  46	                    winget install -e --id Python.Python.3
  47	                    ;;
  48	                *)
  49	                    winget install -e "$package_name"
  50	                    ;;
  51	            esac
  52	            # Add to PATH if necessary for Windows installs
  53	            if [ "$package_name" = "ffmpeg" ] && ! command -v ffmpeg &>/dev/null; then
  54	                print_message "$YELLOW" "Adding FFmpeg to PATH for this session..."
  55	                # Common FFmpeg install locations on Windows
  56	                for path in "/c/ffmpeg/bin" "$PROGRAMFILES/FFmpeg/bin" "$LOCALAPPDATA/Microsoft/WinGet/Packages/Gyan.FFmpeg_Microsoft.Winget.Source_8wekyb3d8bbwe/ffmpeg-*-essentials_build/bin"; do
  57	                    if [ -d "$path" ]; then
  58	                        export PATH="$PATH:$path"
  59	                        break
  60	                    fi
  61	                done
  62	            fi
  63	        elif command -v apt-get &>/dev/null; then
  64	            print_message "$YELLOW" "Installing using apt-get..."
  65	            $SUDO apt-get update -qq
  66	            $SUDO apt-get install -y "$package_name"
  67	        elif command -v dnf &>/dev/null; then
  68	            print_message "$YELLOW" "Installing using dnf..."
  69	            $SUDO dnf install -y "$package_name"
  70	        elif command -v yum &>/dev/null; then
  71	            print_message "$YELLOW" "Installing using yum..."
  72	            $SUDO yum install -y "$package_name"
  73	        elif command -v pacman &>/dev/null; then
  74	            print_message "$YELLOW" "Installing using pacman..."
  75	            $SUDO pacman -S --noconfirm "$package_name"
  76	        elif command -v brew &>/dev/null; then
  77	            print_message "$YELLOW" "Installing using brew..."
  78	            brew install "$package_name"
  79	        else
  80	            print_message "$RED" "Could not find a supported package manager to install $package_name."
  81	            print_message "$RED" "Please install $package_name manually and run this script again."
  82	            exit 1
  83	        fi
  84	        
  85	        # Verify installation was successful
  86	        if command -v "$package_name" &>/dev/null; then
  87	            print_message "$GREEN" "$package_name was successfully installed."
  88	        else
  89	            print_message "$YELLOW" "Command '$package_name' not found after installation. This might be expected if it needs a PATH update or system restart."
  90	            # For Windows particularly, we might need to inform the user
  91	            if command -v winget &>/dev/null; then
  92	                print_message "$YELLOW" "On Windows, you may need to restart your terminal or system for PATH changes to take effect."
  93	                print_message "$YELLOW" "Attempting to continue, but you may need to restart and run this script again if there are errors."
  94	            else
  95	                print_message "$RED" "Failed to install $package_name. Please install it manually."
  96	                exit 1
  97	            fi
  98	        fi
  99	    else
 100	        print_message "$GREEN" "$package_name is already installed."
 101	    fi
 102	}
 103	
 104	# Script directory
 105	SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
 106	cd "$SCRIPT_DIR"
 107	
 108	print_message "$BLUE" "=========================================="
 109	print_message "$BLUE" "  Subtitle Translator Setup Script"
 110	print_message "$BLUE" "=========================================="
 111	
 112	# Check Python installation
 113	if command -v python3 &>/dev/null; then
 114	    PYTHON="python3"
 115	elif command -v python &>/dev/null; then
 116	    PYTHON="python"
 117	else
 118	    print_message "$YELLOW" "Python 3 not found. Attempting to install..."
 119	    install_system_package "python3"
 120	    PYTHON="python3"
 121	fi
 122	
 123	# Get Python version
 124	PY_VERSION=$($PYTHON --version | cut -d' ' -f2)
 125	print_message "$GREEN" "Using Python $PY_VERSION"
 126	
 127	# Check system dependencies
 128	print_message "$YELLOW" "Checking system dependencies..."
 129	
 130	# Install FFmpeg and ffprobe if missing
 131	install_system_package "ffmpeg"
 132	
 133	# Check for ffprobe (sometimes separately packaged)
 134	if ! command -v ffprobe &>/dev/null; then
 135	    print_message "$YELLOW" "ffprobe not found. It's usually part of the FFmpeg package."
 136	    print_message "$YELLOW" "Attempting to install ffmpeg-tools or similar package..."
 137	    
 138	    if command -v apt-get &>/dev/null; then
 139	        sudo apt-get install -y ffmpeg
 140	    elif command -v dnf &>/dev/null; then
 141	        sudo dnf install -y ffmpeg-tools
 142	    elif command -v brew &>/dev/null; then
 143	        brew install ffmpeg
 144	    fi
 145	    
 146	    # Verify ffprobe is now available
 147	    if command -v ffprobe &>/dev/null; then
 148	        print_message "$GREEN" "ffprobe is now available."
 149	    else
 150	        print_message "$YELLOW" "Warning: ffprobe still not found. Embedded subtitle detection may be limited."
 151	    fi
 152	else
 153	    print_message "$GREEN" "ffprobe is already installed."
 154	fi
 155	
 156	# Environment directory
 157	VENV_DIR="venv_subtrans"
 158	
 159	# Create virtual environment if it doesn't exist
 160	if [ ! -d "$VENV_DIR" ]; then
 161	    print_message "$YELLOW" "Creating virtual environment in $VENV_DIR..."
 162	    
 163	    # Check if venv module is available
 164	    if ! $PYTHON -c "import venv" &>/dev/null; then
 165	        print_message "$YELLOW" "Python venv module not found. Attempting to install..."
 166	        if command -v apt-get &>/dev/null; then
 167	            sudo apt-get install -y python3-venv
 168	        elif command -v dnf &>/dev/null; then
 169	            sudo dnf install -y python3-venv
 170	        elif command -v brew &>/dev/null; then
 171	            brew install python
 172	        fi
 173	    fi
 174	    
 175	    $PYTHON -m venv "$VENV_DIR"
 176	    print_message "$GREEN" "Virtual environment created."
 177	else
 178	    print_message "$GREEN" "Using existing virtual environment: $VENV_DIR"
 179	fi
 180	
 181	# Determine activation script based on OS
 182	if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
 183	    # Windows
 184	    ACTIVATE_SCRIPT="$VENV_DIR/Scripts/activate"
 185	else
 186	    # Unix-like (macOS, Linux)
 187	    ACTIVATE_SCRIPT="$VENV_DIR/bin/activate"
 188	fi
 189	
 190	# Activate the virtual environment and install dependencies
 191	print_message "$YELLOW" "Activating virtual environment and checking dependencies..."
 192	source "$ACTIVATE_SCRIPT"
 193	
 194	# Upgrade pip first
 195	print_message "$YELLOW" "Upgrading pip to latest version..."
 196	pip install --upgrade pip
 197	
 198	# Check if required packages are installed
 199	print_message "$YELLOW" "Installing dependencies from requirements.txt if present..."
 200	if [ -f "requirements.txt" ]; then
 201	    pip install -r requirements.txt
 202	    print_message "$GREEN" "Dependencies from requirements.txt installed successfully."
 203	else
 204	    print_message "$YELLOW" "No requirements.txt found. Installing essential packages individually."
 205	
 206	    # List of required packages - expanded to include all necessary dependencies
 207	    CORE_PACKAGES="Flask pysrt requests colorama beautifulsoup4 mwparserfromhell srt"
 208	    # Add Wyoming-related packages
 209	    WYOMING_PACKAGES="wave numpy"
 210	    # Add Local Whisper dependencies
 211	    LOCAL_WHISPER_PACKAGES="wheel 'ctranslate2>=3.16.0' 'faster-whisper>=0.9.0' torch"
 212	    ALL_PACKAGES="$CORE_PACKAGES $WYOMING_PACKAGES $LOCAL_WHISPER_PACKAGES"
 213	
 214	    print_message "$YELLOW" "Installing essential packages for core, Wyoming, and local Whisper: $ALL_PACKAGES"
 215	    pip install $ALL_PACKAGES
 216	fi
 217	
 218	# Additional check for commonly missed packages
 219	for package in "srt" "wave"; do
 220	    if ! $PYTHON -c "import $package" &>/dev/null 2>&1; then
 221	        print_message "$YELLOW" "Installing missing package: $package"
 222	        pip install $package
 223	    fi
 224	done
 225	
 226	print_message "$GREEN" "All Python dependencies installed successfully."
 227	
 228	# Make sure the Wyoming client file exists and is executable
 229	if [ -f "py/wyoming_client.py" ]; then
 230	    print_message "$GREEN" "Wyoming client found at py/wyoming_client.py"
 231	    chmod +x "py/wyoming_client.py"
 232	else
 233	    print_message "$YELLOW" "Wyoming client not found. Creating Wyoming client module..."
 234	    
 235	    # Ensure py directory exists
 236	    mkdir -p py
 237	    
 238	    # Create the Wyoming client file - simplified version just to get the file in place
 239	    cat > py/wyoming_client.py << 'EOF'
 240	#!/usr/bin/env python3
 241	import socket
 242	import json
 243	import logging
 244	import wave
 245	import time
 246	from typing import Optional, Dict, Any, List, Tuple
 247	
 248	class WyomingClient:
 249	    """Client implementation for the Wyoming protocol used by faster-whisper servers"""
 250	    
 251	    def __init__(self, host: str, port: int = 10300, timeout: int = 30, logger=None):
 252	        """Initialize a Wyoming protocol client for faster-whisper"""
 253	        self.host = host
 254	        self.port = port
 255	        self.timeout = timeout
 256	        self.logger = logger or logging.getLogger(__name__)
 257	        
 258	    # Basic functionality to test connection
 259	    def test_connection(self) -> bool:
 260	        """Test connection to Wyoming server"""
 261	        try:
 262	            with socket.create_connection((self.host, self.port), self.timeout) as sock:
 263	                sock.sendall(b'{"type":"describe"}\n')
 264	                # Read response
 265	                data = b""
 266	                while True:
 267	                    chunk = sock.recv(1024)
 268	                    if not chunk:
 269	                        break
 270	                    data += chunk
 271	                    if b'\n' in data:
 272	                        break
 273	                return True
 274	        except Exception as e:
 275	            if self.logger:
 276	                self.logger.error(f"Wyoming connection test failed: {str(e)}")
 277	            return False
 278	
 279	# Placeholder for full implementation
 280	# For complete functionality, please replace this file with the full Wyoming client implementation
 281	EOF
 282	    
 283	    chmod +x "py/wyoming_client.py"
 284	    print_message "$GREEN" "Created basic Wyoming client. For full functionality, please replace with complete implementation."
 285	fi
 286	
 287	# Check if config.ini exists, create from example if not
 288	if [ ! -f "config.ini" ] && [ -f "config.ini.example" ]; then
 289	    print_message "$YELLOW" "Creating default config.ini from example..."
 290	    cp config.ini.example config.ini
 291	    print_message "$GREEN" "Created config.ini. You may want to edit this file to customize settings."
 292	fi
 293	
 294	# Get server port from config.ini if possible
 295	PORT=5089
 296	if [ -f "config.ini" ]; then
 297	    # Extract port from config.ini using grep and cut
 298	    CONFIG_PORT=$(grep -E "^\s*port\s*=" config.ini | cut -d'=' -f2 | tr -d '[:space:]')
 299	    if [ ! -z "$CONFIG_PORT" ]; then
 300	        PORT=$CONFIG_PORT
 301	    fi
 302	fi
 303	
 304	# Just a simple setup message - the app.py will handle the full welcome message with correct port
 305	print_message "$GREEN" "All dependencies installed successfully."
 306	print_message "$GREEN" "Starting Subtitle Translator application..."
 307	
 308	# Run the application
 309	$PYTHON app.py
 310	
 311	# Deactivate virtual environment at exit
 312	deactivate 2>/dev/null || true

--- File: static/bootstrap/css/bootstrap.min.css ---
   1	@charset "UTF-8";/*!
   2	 * Bootstrap  v5.3.0-alpha1 (https://getbootstrap.com/)
   3	 * Copyright 2011-2022 The Bootstrap Authors
   4	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   5	 */:root,[data-bs-theme=light]{--bs-blue:#0d6efd;--bs-indigo:#6610f2;--bs-purple:#6f42c1;--bs-pink:#d63384;--bs-red:#dc3545;--bs-orange:#fd7e14;--bs-yellow:#ffc107;--bs-green:#198754;--bs-teal:#20c997;--bs-cyan:#0dcaf0;--bs-black:#000;--bs-white:#fff;--bs-gray:#6c757d;--bs-gray-dark:#343a40;--bs-gray-100:#f8f9fa;--bs-gray-200:#e9ecef;--bs-gray-300:#dee2e6;--bs-gray-400:#ced4da;--bs-gray-500:#adb5bd;--bs-gray-600:#6c757d;--bs-gray-700:#495057;--bs-gray-800:#343a40;--bs-gray-900:#212529;--bs-primary:#0d6efd;--bs-secondary:#6c757d;--bs-success:#198754;--bs-info:#0dcaf0;--bs-warning:#ffc107;--bs-danger:#dc3545;--bs-light:#f8f9fa;--bs-dark:#212529;--bs-primary-rgb:13,110,253;--bs-secondary-rgb:108,117,125;--bs-success-rgb:25,135,84;--bs-info-rgb:13,202,240;--bs-warning-rgb:255,193,7;--bs-danger-rgb:220,53,69;--bs-light-rgb:248,249,250;--bs-dark-rgb:33,37,41;--bs-primary-text:#0a58ca;--bs-secondary-text:#6c757d;--bs-success-text:#146c43;--bs-info-text:#087990;--bs-warning-text:#997404;--bs-danger-text:#b02a37;--bs-light-text:#6c757d;--bs-dark-text:#495057;--bs-primary-bg-subtle:#cfe2ff;--bs-secondary-bg-subtle:#f8f9fa;--bs-success-bg-subtle:#d1e7dd;--bs-info-bg-subtle:#cff4fc;--bs-warning-bg-subtle:#fff3cd;--bs-danger-bg-subtle:#f8d7da;--bs-light-bg-subtle:#fcfcfd;--bs-dark-bg-subtle:#ced4da;--bs-primary-border-subtle:#9ec5fe;--bs-secondary-border-subtle:#e9ecef;--bs-success-border-subtle:#a3cfbb;--bs-info-border-subtle:#9eeaf9;--bs-warning-border-subtle:#ffe69c;--bs-danger-border-subtle:#f1aeb5;--bs-light-border-subtle:#e9ecef;--bs-dark-border-subtle:#adb5bd;--bs-white-rgb:255,255,255;--bs-black-rgb:0,0,0;--bs-body-color-rgb:33,37,41;--bs-body-bg-rgb:255,255,255;--bs-font-sans-serif:system-ui,-apple-system,"Segoe UI",Roboto,"Helvetica Neue","Noto Sans","Liberation Sans",Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";--bs-font-monospace:SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;--bs-gradient:linear-gradient(180deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0));--bs-body-font-family:var(--bs-font-sans-serif);--bs-body-font-size:1rem;--bs-body-font-weight:400;--bs-body-line-height:1.5;--bs-body-color:#212529;--bs-emphasis-color:#000;--bs-emphasis-color-rgb:0,0,0;--bs-secondary-color:rgba(33, 37, 41, 0.75);--bs-secondary-color-rgb:33,37,41;--bs-secondary-bg:#e9ecef;--bs-secondary-bg-rgb:233,236,239;--bs-tertiary-color:rgba(33, 37, 41, 0.5);--bs-tertiary-color-rgb:33,37,41;--bs-tertiary-bg:#f8f9fa;--bs-tertiary-bg-rgb:248,249,250;--bs-body-bg:#fff;--bs-body-bg-rgb:255,255,255;--bs-link-color:#0d6efd;--bs-link-color-rgb:13,110,253;--bs-link-decoration:underline;--bs-link-hover-color:#0a58ca;--bs-link-hover-color-rgb:10,88,202;--bs-code-color:#d63384;--bs-highlight-bg:#fff3cd;--bs-border-width:1px;--bs-border-style:solid;--bs-border-color:#dee2e6;--bs-border-color-translucent:rgba(0, 0, 0, 0.175);--bs-border-radius:0.375rem;--bs-border-radius-sm:0.25rem;--bs-border-radius-lg:0.5rem;--bs-border-radius-xl:1rem;--bs-border-radius-2xl:2rem;--bs-border-radius-pill:50rem;--bs-box-shadow:0 0.5rem 1rem rgba(var(--bs-body-color-rgb), 0.15);--bs-box-shadow-sm:0 0.125rem 0.25rem rgba(var(--bs-body-color-rgb), 0.075);--bs-box-shadow-lg:0 1rem 3rem rgba(var(--bs-body-color-rgb), 0.175);--bs-box-shadow-inset:inset 0 1px 2px rgba(var(--bs-body-color-rgb), 0.075);--bs-emphasis-color:#000;--bs-form-control-bg:var(--bs-body-bg);--bs-form-control-disabled-bg:var(--bs-secondary-bg);--bs-highlight-bg:#fff3cd;--bs-breakpoint-xs:0;--bs-breakpoint-sm:576px;--bs-breakpoint-md:768px;--bs-breakpoint-lg:992px;--bs-breakpoint-xl:1200px;--bs-breakpoint-xxl:1400px}[data-bs-theme=dark]{--bs-body-color:#adb5bd;--bs-body-color-rgb:173,181,189;--bs-body-bg:#212529;--bs-body-bg-rgb:33,37,41;--bs-emphasis-color:#f8f9fa;--bs-emphasis-color-rgb:248,249,250;--bs-secondary-color:rgba(173, 181, 189, 0.75);--bs-secondary-color-rgb:173,181,189;--bs-secondary-bg:#343a40;--bs-secondary-bg-rgb:52,58,64;--bs-tertiary-color:rgba(173, 181, 189, 0.5);--bs-tertiary-color-rgb:173,181,189;--bs-tertiary-bg:#2b3035;--bs-tertiary-bg-rgb:43,48,53;--bs-emphasis-color:#fff;--bs-primary-text:#6ea8fe;--bs-secondary-text:#dee2e6;--bs-success-text:#75b798;--bs-info-text:#6edff6;--bs-warning-text:#ffda6a;--bs-danger-text:#ea868f;--bs-light-text:#f8f9fa;--bs-dark-text:#dee2e6;--bs-primary-bg-subtle:#031633;--bs-secondary-bg-subtle:#212529;--bs-success-bg-subtle:#051b11;--bs-info-bg-subtle:#032830;--bs-warning-bg-subtle:#332701;--bs-danger-bg-subtle:#2c0b0e;--bs-light-bg-subtle:#343a40;--bs-dark-bg-subtle:#1a1d20;--bs-primary-border-subtle:#084298;--bs-secondary-border-subtle:#495057;--bs-success-border-subtle:#0f5132;--bs-info-border-subtle:#055160;--bs-warning-border-subtle:#664d03;--bs-danger-border-subtle:#842029;--bs-light-border-subtle:#495057;--bs-dark-border-subtle:#343a40;--bs-heading-color:#fff;--bs-link-color:#6ea8fe;--bs-link-hover-color:#9ec5fe;--bs-link-color-rgb:110,168,254;--bs-link-hover-color-rgb:158,197,254;--bs-code-color:#e685b5;--bs-border-color:#495057;--bs-border-color-translucent:rgba(255, 255, 255, 0.15)}*,::after,::before{box-sizing:border-box}@media (prefers-reduced-motion:no-preference){:root{scroll-behavior:smooth}}body{margin:0;font-family:var(--bs-body-font-family);font-size:var(--bs-body-font-size);font-weight:var(--bs-body-font-weight);line-height:var(--bs-body-line-height);color:var(--bs-body-color);text-align:var(--bs-body-text-align);background-color:var(--bs-body-bg);-webkit-text-size-adjust:100%;-webkit-tap-highlight-color:transparent}hr{margin:1rem 0;color:inherit;border:0;border-top:var(--bs-border-width) solid;opacity:.25}.h1,.h2,.h3,.h4,.h5,.h6,h1,h2,h3,h4,h5,h6{margin-top:0;margin-bottom:.5rem;font-weight:500;line-height:1.2;color:var(--bs-heading-color,inherit)}.h1,h1{font-size:calc(1.375rem + 1.5vw)}@media (min-width:1200px){.h1,h1{font-size:2.5rem}}.h2,h2{font-size:calc(1.325rem + .9vw)}@media (min-width:1200px){.h2,h2{font-size:2rem}}.h3,h3{font-size:calc(1.3rem + .6vw)}@media (min-width:1200px){.h3,h3{font-size:1.75rem}}.h4,h4{font-size:calc(1.275rem + .3vw)}@media (min-width:1200px){.h4,h4{font-size:1.5rem}}.h5,h5{font-size:1.25rem}.h6,h6{font-size:1rem}p{margin-top:0;margin-bottom:1rem}abbr[title]{-webkit-text-decoration:underline dotted;text-decoration:underline dotted;cursor:help;-webkit-text-decoration-skip-ink:none;text-decoration-skip-ink:none}address{margin-bottom:1rem;font-style:normal;line-height:inherit}ol,ul{padding-left:2rem}dl,ol,ul{margin-top:0;margin-bottom:1rem}ol ol,ol ul,ul ol,ul ul{margin-bottom:0}dt{font-weight:700}dd{margin-bottom:.5rem;margin-left:0}blockquote{margin:0 0 1rem}b,strong{font-weight:bolder}.small,small{font-size:.875em}.mark,mark{padding:.1875em;background-color:var(--bs-highlight-bg)}sub,sup{position:relative;font-size:.75em;line-height:0;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}a{color:rgba(var(--bs-link-color-rgb),var(--bs-link-opacity,1));text-decoration:underline}a:hover{--bs-link-color-rgb:var(--bs-link-hover-color-rgb)}a:not([href]):not([class]),a:not([href]):not([class]):hover{color:inherit;text-decoration:none}code,kbd,pre,samp{font-family:var(--bs-font-monospace);font-size:1em}pre{display:block;margin-top:0;margin-bottom:1rem;overflow:auto;font-size:.875em}pre code{font-size:inherit;color:inherit;word-break:normal}code{font-size:.875em;color:var(--bs-code-color);word-wrap:break-word}a>code{color:inherit}kbd{padding:.1875rem .375rem;font-size:.875em;color:var(--bs-body-bg);background-color:var(--bs-body-color);border-radius:.25rem}kbd kbd{padding:0;font-size:1em}figure{margin:0 0 1rem}img,svg{vertical-align:middle}table{caption-side:bottom;border-collapse:collapse}caption{padding-top:.5rem;padding-bottom:.5rem;color:var(--bs-secondary-color);text-align:left}th{text-align:inherit;text-align:-webkit-match-parent}tbody,td,tfoot,th,thead,tr{border-color:inherit;border-style:solid;border-width:0}label{display:inline-block}button{border-radius:0}button:focus:not(:focus-visible){outline:0}button,input,optgroup,select,textarea{margin:0;font-family:inherit;font-size:inherit;line-height:inherit}button,select{text-transform:none}[role=button]{cursor:pointer}select{word-wrap:normal}select:disabled{opacity:1}[list]:not([type=date]):not([type=datetime-local]):not([type=month]):not([type=week]):not([type=time])::-webkit-calendar-picker-indicator{display:none!important}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]:not(:disabled),[type=reset]:not(:disabled),[type=submit]:not(:disabled),button:not(:disabled){cursor:pointer}::-moz-focus-inner{padding:0;border-style:none}textarea{resize:vertical}fieldset{min-width:0;padding:0;margin:0;border:0}legend{float:left;width:100%;padding:0;margin-bottom:.5rem;font-size:calc(1.275rem + .3vw);line-height:inherit}@media (min-width:1200px){legend{font-size:1.5rem}}legend+*{clear:left}::-webkit-datetime-edit-day-field,::-webkit-datetime-edit-fields-wrapper,::-webkit-datetime-edit-hour-field,::-webkit-datetime-edit-minute,::-webkit-datetime-edit-month-field,::-webkit-datetime-edit-text,::-webkit-datetime-edit-year-field{padding:0}::-webkit-inner-spin-button{height:auto}[type=search]{outline-offset:-2px;-webkit-appearance:textfield}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-color-swatch-wrapper{padding:0}::-webkit-file-upload-button{font:inherit;-webkit-appearance:button}::file-selector-button{font:inherit;-webkit-appearance:button}output{display:inline-block}iframe{border:0}summary{display:list-item;cursor:pointer}progress{vertical-align:baseline}[hidden]{display:none!important}.lead{font-size:1.25rem;font-weight:300}.display-1{font-size:calc(1.625rem + 4.5vw);font-weight:300;line-height:1.2}@media (min-width:1200px){.display-1{font-size:5rem}}.display-2{font-size:calc(1.575rem + 3.9vw);font-weight:300;line-height:1.2}@media (min-width:1200px){.display-2{font-size:4.5rem}}.display-3{font-size:calc(1.525rem + 3.3vw);font-weight:300;line-height:1.2}@media (min-width:1200px){.display-3{font-size:4rem}}.display-4{font-size:calc(1.475rem + 2.7vw);font-weight:300;line-height:1.2}@media (min-width:1200px){.display-4{font-size:3.5rem}}.display-5{font-size:calc(1.425rem + 2.1vw);font-weight:300;line-height:1.2}@media (min-width:1200px){.display-5{font-size:3rem}}.display-6{font-size:calc(1.375rem + 1.5vw);font-weight:300;line-height:1.2}@media (min-width:1200px){.display-6{font-size:2.5rem}}.list-unstyled{padding-left:0;list-style:none}.list-inline{padding-left:0;list-style:none}.list-inline-item{display:inline-block}.list-inline-item:not(:last-child){margin-right:.5rem}.initialism{font-size:.875em;text-transform:uppercase}.blockquote{margin-bottom:1rem;font-size:1.25rem}.blockquote>:last-child{margin-bottom:0}.blockquote-footer{margin-top:-1rem;margin-bottom:1rem;font-size:.875em;color:#6c757d}.blockquote-footer::before{content:"‚Äî¬†"}.img-fluid{max-width:100%;height:auto}.img-thumbnail{padding:.25rem;background-color:var(--bs-body-bg);border:var(--bs-border-width) solid var(--bs-border-color);border-radius:var(--bs-border-radius);max-width:100%;height:auto}.figure{display:inline-block}.figure-img{margin-bottom:.5rem;line-height:1}.figure-caption{font-size:.875em;color:var(--bs-secondary-color)}.container,.container-fluid,.container-lg,.container-md,.container-sm,.container-xl,.container-xxl{--bs-gutter-x:1.5rem;--bs-gutter-y:0;width:100%;padding-right:calc(var(--bs-gutter-x) * .5);padding-left:calc(var(--bs-gutter-x) * .5);margin-right:auto;margin-left:auto}@media (min-width:576px){.container,.container-sm{max-width:540px}}@media (min-width:768px){.container,.container-md,.container-sm{max-width:720px}}@media (min-width:992px){.container,.container-lg,.container-md,.container-sm{max-width:960px}}@media (min-width:1200px){.container,.container-lg,.container-md,.container-sm,.container-xl{max-width:1140px}}@media (min-width:1400px){.container,.container-lg,.container-md,.container-sm,.container-xl,.container-xxl{max-width:1320px}}.row{--bs-gutter-x:1.5rem;--bs-gutter-y:0;display:flex;flex-wrap:wrap;margin-top:calc(-1 * var(--bs-gutter-y));margin-right:calc(-.5 * var(--bs-gutter-x));margin-left:calc(-.5 * var(--bs-gutter-x))}.row>*{flex-shrink:0;width:100%;max-width:100%;padding-right:calc(var(--bs-gutter-x) * .5);padding-left:calc(var(--bs-gutter-x) * .5);margin-top:var(--bs-gutter-y)}.col{flex:1 0 0%}.row-cols-auto>*{flex:0 0 auto;width:auto}.row-cols-1>*{flex:0 0 auto;width:100%}.row-cols-2>*{flex:0 0 auto;width:50%}.row-cols-3>*{flex:0 0 auto;width:33.3333333333%}.row-cols-4>*{flex:0 0 auto;width:25%}.row-cols-5>*{flex:0 0 auto;width:20%}.row-cols-6>*{flex:0 0 auto;width:16.6666666667%}.col-auto{flex:0 0 auto;width:auto}.col-1{flex:0 0 auto;width:8.33333333%}.col-2{flex:0 0 auto;width:16.66666667%}.col-3{flex:0 0 auto;width:25%}.col-4{flex:0 0 auto;width:33.33333333%}.col-5{flex:0 0 auto;width:41.66666667%}.col-6{flex:0 0 auto;width:50%}.col-7{flex:0 0 auto;width:58.33333333%}.col-8{flex:0 0 auto;width:66.66666667%}.col-9{flex:0 0 auto;width:75%}.col-10{flex:0 0 auto;width:83.33333333%}.col-11{flex:0 0 auto;width:91.66666667%}.col-12{flex:0 0 auto;width:100%}.offset-1{margin-left:8.33333333%}.offset-2{margin-left:16.66666667%}.offset-3{margin-left:25%}.offset-4{margin-left:33.33333333%}.offset-5{margin-left:41.66666667%}.offset-6{margin-left:50%}.offset-7{margin-left:58.33333333%}.offset-8{margin-left:66.66666667%}.offset-9{margin-left:75%}.offset-10{margin-left:83.33333333%}.offset-11{margin-left:91.66666667%}.g-0,.gx-0{--bs-gutter-x:0}.g-0,.gy-0{--bs-gutter-y:0}.g-1,.gx-1{--bs-gutter-x:0.25rem}.g-1,.gy-1{--bs-gutter-y:0.25rem}.g-2,.gx-2{--bs-gutter-x:0.5rem}.g-2,.gy-2{--bs-gutter-y:0.5rem}.g-3,.gx-3{--bs-gutter-x:1rem}.g-3,.gy-3{--bs-gutter-y:1rem}.g-4,.gx-4{--bs-gutter-x:1.5rem}.g-4,.gy-4{--bs-gutter-y:1.5rem}.g-5,.gx-5{--bs-gutter-x:3rem}.g-5,.gy-5{--bs-gutter-y:3rem}@media (min-width:576px){.col-sm{flex:1 0 0%}.row-cols-sm-auto>*{flex:0 0 auto;width:auto}.row-cols-sm-1>*{flex:0 0 auto;width:100%}.row-cols-sm-2>*{flex:0 0 auto;width:50%}.row-cols-sm-3>*{flex:0 0 auto;width:33.3333333333%}.row-cols-sm-4>*{flex:0 0 auto;width:25%}.row-cols-sm-5>*{flex:0 0 auto;width:20%}.row-cols-sm-6>*{flex:0 0 auto;width:16.6666666667%}.col-sm-auto{flex:0 0 auto;width:auto}.col-sm-1{flex:0 0 auto;width:8.33333333%}.col-sm-2{flex:0 0 auto;width:16.66666667%}.col-sm-3{flex:0 0 auto;width:25%}.col-sm-4{flex:0 0 auto;width:33.33333333%}.col-sm-5{flex:0 0 auto;width:41.66666667%}.col-sm-6{flex:0 0 auto;width:50%}.col-sm-7{flex:0 0 auto;width:58.33333333%}.col-sm-8{flex:0 0 auto;width:66.66666667%}.col-sm-9{flex:0 0 auto;width:75%}.col-sm-10{flex:0 0 auto;width:83.33333333%}.col-sm-11{flex:0 0 auto;width:91.66666667%}.col-sm-12{flex:0 0 auto;width:100%}.offset-sm-0{margin-left:0}.offset-sm-1{margin-left:8.33333333%}.offset-sm-2{margin-left:16.66666667%}.offset-sm-3{margin-left:25%}.offset-sm-4{margin-left:33.33333333%}.offset-sm-5{margin-left:41.66666667%}.offset-sm-6{margin-left:50%}.offset-sm-7{margin-left:58.33333333%}.offset-sm-8{margin-left:66.66666667%}.offset-sm-9{margin-left:75%}.offset-sm-10{margin-left:83.33333333%}.offset-sm-11{margin-left:91.66666667%}.g-sm-0,.gx-sm-0{--bs-gutter-x:0}.g-sm-0,.gy-sm-0{--bs-gutter-y:0}.g-sm-1,.gx-sm-1{--bs-gutter-x:0.25rem}.g-sm-1,.gy-sm-1{--bs-gutter-y:0.25rem}.g-sm-2,.gx-sm-2{--bs-gutter-x:0.5rem}.g-sm-2,.gy-sm-2{--bs-gutter-y:0.5rem}.g-sm-3,.gx-sm-3{--bs-gutter-x:1rem}.g-sm-3,.gy-sm-3{--bs-gutter-y:1rem}.g-sm-4,.gx-sm-4{--bs-gutter-x:1.5rem}.g-sm-4,.gy-sm-4{--bs-gutter-y:1.5rem}.g-sm-5,.gx-sm-5{--bs-gutter-x:3rem}.g-sm-5,.gy-sm-5{--bs-gutter-y:3rem}}@media (min-width:768px){.col-md{flex:1 0 0%}.row-cols-md-auto>*{flex:0 0 auto;width:auto}.row-cols-md-1>*{flex:0 0 auto;width:100%}.row-cols-md-2>*{flex:0 0 auto;width:50%}.row-cols-md-3>*{flex:0 0 auto;width:33.3333333333%}.row-cols-md-4>*{flex:0 0 auto;width:25%}.row-cols-md-5>*{flex:0 0 auto;width:20%}.row-cols-md-6>*{flex:0 0 auto;width:16.6666666667%}.col-md-auto{flex:0 0 auto;width:auto}.col-md-1{flex:0 0 auto;width:8.33333333%}.col-md-2{flex:0 0 auto;width:16.66666667%}.col-md-3{flex:0 0 auto;width:25%}.col-md-4{flex:0 0 auto;width:33.33333333%}.col-md-5{flex:0 0 auto;width:41.66666667%}.col-md-6{flex:0 0 auto;width:50%}.col-md-7{flex:0 0 auto;width:58.33333333%}.col-md-8{flex:0 0 auto;width:66.66666667%}.col-md-9{flex:0 0 auto;width:75%}.col-md-10{flex:0 0 auto;width:83.33333333%}.col-md-11{flex:0 0 auto;width:91.66666667%}.col-md-12{flex:0 0 auto;width:100%}.offset-md-0{margin-left:0}.offset-md-1{margin-left:8.33333333%}.offset-md-2{margin-left:16.66666667%}.offset-md-3{margin-left:25%}.offset-md-4{margin-left:33.33333333%}.offset-md-5{margin-left:41.66666667%}.offset-md-6{margin-left:50%}.offset-md-7{margin-left:58.33333333%}.offset-md-8{margin-left:66.66666667%}.offset-md-9{margin-left:75%}.offset-md-10{margin-left:83.33333333%}.offset-md-11{margin-left:91.66666667%}.g-md-0,.gx-md-0{--bs-gutter-x:0}.g-md-0,.gy-md-0{--bs-gutter-y:0}.g-md-1,.gx-md-1{--bs-gutter-x:0.25rem}.g-md-1,.gy-md-1{--bs-gutter-y:0.25rem}.g-md-2,.gx-md-2{--bs-gutter-x:0.5rem}.g-md-2,.gy-md-2{--bs-gutter-y:0.5rem}.g-md-3,.gx-md-3{--bs-gutter-x:1rem}.g-md-3,.gy-md-3{--bs-gutter-y:1rem}.g-md-4,.gx-md-4{--bs-gutter-x:1.5rem}.g-md-4,.gy-md-4{--bs-gutter-y:1.5rem}.g-md-5,.gx-md-5{--bs-gutter-x:3rem}.g-md-5,.gy-md-5{--bs-gutter-y:3rem}}@media (min-width:992px){.col-lg{flex:1 0 0%}.row-cols-lg-auto>*{flex:0 0 auto;width:auto}.row-cols-lg-1>*{flex:0 0 auto;width:100%}.row-cols-lg-2>*{flex:0 0 auto;width:50%}.row-cols-lg-3>*{flex:0 0 auto;width:33.3333333333%}.row-cols-lg-4>*{flex:0 0 auto;width:25%}.row-cols-lg-5>*{flex:0 0 auto;width:20%}.row-cols-lg-6>*{flex:0 0 auto;width:16.6666666667%}.col-lg-auto{flex:0 0 auto;width:auto}.col-lg-1{flex:0 0 auto;width:8.33333333%}.col-lg-2{flex:0 0 auto;width:16.66666667%}.col-lg-3{flex:0 0 auto;width:25%}.col-lg-4{flex:0 0 auto;width:33.33333333%}.col-lg-5{flex:0 0 auto;width:41.66666667%}.col-lg-6{flex:0 0 auto;width:50%}.col-lg-7{flex:0 0 auto;width:58.33333333%}.col-lg-8{flex:0 0 auto;width:66.66666667%}.col-lg-9{flex:0 0 auto;width:75%}.col-lg-10{flex:0 0 auto;width:83.33333333%}.col-lg-11{flex:0 0 auto;width:91.66666667%}.col-lg-12{flex:0 0 auto;width:100%}.offset-lg-0{margin-left:0}.offset-lg-1{margin-left:8.33333333%}.offset-lg-2{margin-left:16.66666667%}.offset-lg-3{margin-left:25%}.offset-lg-4{margin-left:33.33333333%}.offset-lg-5{margin-left:41.66666667%}.offset-lg-6{margin-left:50%}.offset-lg-7{margin-left:58.33333333%}.offset-lg-8{margin-left:66.66666667%}.offset-lg-9{margin-left:75%}.offset-lg-10{margin-left:83.33333333%}.offset-lg-11{margin-left:91.66666667%}.g-lg-0,.gx-lg-0{--bs-gutter-x:0}.g-lg-0,.gy-lg-0{--bs-gutter-y:0}.g-lg-1,.gx-lg-1{--bs-gutter-x:0.25rem}.g-lg-1,.gy-lg-1{--bs-gutter-y:0.25rem}.g-lg-2,.gx-lg-2{--bs-gutter-x:0.5rem}.g-lg-2,.gy-lg-2{--bs-gutter-y:0.5rem}.g-lg-3,.gx-lg-3{--bs-gutter-x:1rem}.g-lg-3,.gy-lg-3{--bs-gutter-y:1rem}.g-lg-4,.gx-lg-4{--bs-gutter-x:1.5rem}.g-lg-4,.gy-lg-4{--bs-gutter-y:1.5rem}.g-lg-5,.gx-lg-5{--bs-gutter-x:3rem}.g-lg-5,.gy-lg-5{--bs-gutter-y:3rem}}@media (min-width:1200px){.col-xl{flex:1 0 0%}.row-cols-xl-auto>*{flex:0 0 auto;width:auto}.row-cols-xl-1>*{flex:0 0 auto;width:100%}.row-cols-xl-2>*{flex:0 0 auto;width:50%}.row-cols-xl-3>*{flex:0 0 auto;width:33.3333333333%}.row-cols-xl-4>*{flex:0 0 auto;width:25%}.row-cols-xl-5>*{flex:0 0 auto;width:20%}.row-cols-xl-6>*{flex:0 0 auto;width:16.6666666667%}.col-xl-auto{flex:0 0 auto;width:auto}.col-xl-1{flex:0 0 auto;width:8.33333333%}.col-xl-2{flex:0 0 auto;width:16.66666667%}.col-xl-3{flex:0 0 auto;width:25%}.col-xl-4{flex:0 0 auto;width:33.33333333%}.col-xl-5{flex:0 0 auto;width:41.66666667%}.col-xl-6{flex:0 0 auto;width:50%}.col-xl-7{flex:0 0 auto;width:58.33333333%}.col-xl-8{flex:0 0 auto;width:66.66666667%}.col-xl-9{flex:0 0 auto;width:75%}.col-xl-10{flex:0 0 auto;width:83.33333333%}.col-xl-11{flex:0 0 auto;width:91.66666667%}.col-xl-12{flex:0 0 auto;width:100%}.offset-xl-0{margin-left:0}.offset-xl-1{margin-left:8.33333333%}.offset-xl-2{margin-left:16.66666667%}.offset-xl-3{margin-left:25%}.offset-xl-4{margin-left:33.33333333%}.offset-xl-5{margin-left:41.66666667%}.offset-xl-6{margin-left:50%}.offset-xl-7{margin-left:58.33333333%}.offset-xl-8{margin-left:66.66666667%}.offset-xl-9{margin-left:75%}.offset-xl-10{margin-left:83.33333333%}.offset-xl-11{margin-left:91.66666667%}.g-xl-0,.gx-xl-0{--bs-gutter-x:0}.g-xl-0,.gy-xl-0{--bs-gutter-y:0}.g-xl-1,.gx-xl-1{--bs-gutter-x:0.25rem}.g-xl-1,.gy-xl-1{--bs-gutter-y:0.25rem}.g-xl-2,.gx-xl-2{--bs-gutter-x:0.5rem}.g-xl-2,.gy-xl-2{--bs-gutter-y:0.5rem}.g-xl-3,.gx-xl-3{--bs-gutter-x:1rem}.g-xl-3,.gy-xl-3{--bs-gutter-y:1rem}.g-xl-4,.gx-xl-4{--bs-gutter-x:1.5rem}.g-xl-4,.gy-xl-4{--bs-gutter-y:1.5rem}.g-xl-5,.gx-xl-5{--bs-gutter-x:3rem}.g-xl-5,.gy-xl-5{--bs-gutter-y:3rem}}@media (min-width:1400px){.col-xxl{flex:1 0 0%}.row-cols-xxl-auto>*{flex:0 0 auto;width:auto}.row-cols-xxl-1>*{flex:0 0 auto;width:100%}.row-cols-xxl-2>*{flex:0 0 auto;width:50%}.row-cols-xxl-3>*{flex:0 0 auto;width:33.3333333333%}.row-cols-xxl-4>*{flex:0 0 auto;width:25%}.row-cols-xxl-5>*{flex:0 0 auto;width:20%}.row-cols-xxl-6>*{flex:0 0 auto;width:16.6666666667%}.col-xxl-auto{flex:0 0 auto;width:auto}.col-xxl-1{flex:0 0 auto;width:8.33333333%}.col-xxl-2{flex:0 0 auto;width:16.66666667%}.col-xxl-3{flex:0 0 auto;width:25%}.col-xxl-4{flex:0 0 auto;width:33.33333333%}.col-xxl-5{flex:0 0 auto;width:41.66666667%}.col-xxl-6{flex:0 0 auto;width:50%}.col-xxl-7{flex:0 0 auto;width:58.33333333%}.col-xxl-8{flex:0 0 auto;width:66.66666667%}.col-xxl-9{flex:0 0 auto;width:75%}.col-xxl-10{flex:0 0 auto;width:83.33333333%}.col-xxl-11{flex:0 0 auto;width:91.66666667%}.col-xxl-12{flex:0 0 auto;width:100%}.offset-xxl-0{margin-left:0}.offset-xxl-1{margin-left:8.33333333%}.offset-xxl-2{margin-left:16.66666667%}.offset-xxl-3{margin-left:25%}.offset-xxl-4{margin-left:33.33333333%}.offset-xxl-5{margin-left:41.66666667%}.offset-xxl-6{margin-left:50%}.offset-xxl-7{margin-left:58.33333333%}.offset-xxl-8{margin-left:66.66666667%}.offset-xxl-9{margin-left:75%}.offset-xxl-10{margin-left:83.33333333%}.offset-xxl-11{margin-left:91.66666667%}.g-xxl-0,.gx-xxl-0{--bs-gutter-x:0}.g-xxl-0,.gy-xxl-0{--bs-gutter-y:0}.g-xxl-1,.gx-xxl-1{--bs-gutter-x:0.25rem}.g-xxl-1,.gy-xxl-1{--bs-gutter-y:0.25rem}.g-xxl-2,.gx-xxl-2{--bs-gutter-x:0.5rem}.g-xxl-2,.gy-xxl-2{--bs-gutter-y:0.5rem}.g-xxl-3,.gx-xxl-3{--bs-gutter-x:1rem}.g-xxl-3,.gy-xxl-3{--bs-gutter-y:1rem}.g-xxl-4,.gx-xxl-4{--bs-gutter-x:1.5rem}.g-xxl-4,.gy-xxl-4{--bs-gutter-y:1.5rem}.g-xxl-5,.gx-xxl-5{--bs-gutter-x:3rem}.g-xxl-5,.gy-xxl-5{--bs-gutter-y:3rem}}.table{--bs-table-color:var(--bs-body-color);--bs-table-bg:transparent;--bs-table-border-color:var(--bs-border-color);--bs-table-accent-bg:transparent;--bs-table-striped-color:var(--bs-body-color);--bs-table-striped-bg:rgba(0, 0, 0, 0.05);--bs-table-active-color:var(--bs-body-color);--bs-table-active-bg:rgba(0, 0, 0, 0.1);--bs-table-hover-color:var(--bs-body-color);--bs-table-hover-bg:rgba(0, 0, 0, 0.075);width:100%;margin-bottom:1rem;color:var(--bs-table-color);vertical-align:top;border-color:var(--bs-table-border-color)}.table>:not(caption)>*>*{padding:.5rem .5rem;background-color:var(--bs-table-bg);border-bottom-width:var(--bs-border-width);box-shadow:inset 0 0 0 9999px var(--bs-table-accent-bg)}.table>tbody{vertical-align:inherit}.table>thead{vertical-align:bottom}.table-group-divider{border-top:calc(var(--bs-border-width) * 2) solid currentcolor}.caption-top{caption-side:top}.table-sm>:not(caption)>*>*{padding:.25rem .25rem}.table-bordered>:not(caption)>*{border-width:var(--bs-border-width) 0}.table-bordered>:not(caption)>*>*{border-width:0 var(--bs-border-width)}.table-borderless>:not(caption)>*>*{border-bottom-width:0}.table-borderless>:not(:first-child){border-top-width:0}.table-striped>tbody>tr:nth-of-type(odd)>*{--bs-table-accent-bg:var(--bs-table-striped-bg);color:var(--bs-table-striped-color)}.table-striped-columns>:not(caption)>tr>:nth-child(2n){--bs-table-accent-bg:var(--bs-table-striped-bg);color:var(--bs-table-striped-color)}.table-active{--bs-table-accent-bg:var(--bs-table-active-bg);color:var(--bs-table-active-color)}.table-hover>tbody>tr:hover>*{--bs-table-accent-bg:var(--bs-table-hover-bg);color:var(--bs-table-hover-color)}.table-primary{--bs-table-color:#000;--bs-table-bg:#cfe2ff;--bs-table-border-color:#bacbe6;--bs-table-striped-bg:#c5d7f2;--bs-table-striped-color:#000;--bs-table-active-bg:#bacbe6;--bs-table-active-color:#000;--bs-table-hover-bg:#bfd1ec;--bs-table-hover-color:#000;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-secondary{--bs-table-color:#000;--bs-table-bg:#e2e3e5;--bs-table-border-color:#cbccce;--bs-table-striped-bg:#d7d8da;--bs-table-striped-color:#000;--bs-table-active-bg:#cbccce;--bs-table-active-color:#000;--bs-table-hover-bg:#d1d2d4;--bs-table-hover-color:#000;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-success{--bs-table-color:#000;--bs-table-bg:#d1e7dd;--bs-table-border-color:#bcd0c7;--bs-table-striped-bg:#c7dbd2;--bs-table-striped-color:#000;--bs-table-active-bg:#bcd0c7;--bs-table-active-color:#000;--bs-table-hover-bg:#c1d6cc;--bs-table-hover-color:#000;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-info{--bs-table-color:#000;--bs-table-bg:#cff4fc;--bs-table-border-color:#badce3;--bs-table-striped-bg:#c5e8ef;--bs-table-striped-color:#000;--bs-table-active-bg:#badce3;--bs-table-active-color:#000;--bs-table-hover-bg:#bfe2e9;--bs-table-hover-color:#000;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-warning{--bs-table-color:#000;--bs-table-bg:#fff3cd;--bs-table-border-color:#e6dbb9;--bs-table-striped-bg:#f2e7c3;--bs-table-striped-color:#000;--bs-table-active-bg:#e6dbb9;--bs-table-active-color:#000;--bs-table-hover-bg:#ece1be;--bs-table-hover-color:#000;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-danger{--bs-table-color:#000;--bs-table-bg:#f8d7da;--bs-table-border-color:#dfc2c4;--bs-table-striped-bg:#eccccf;--bs-table-striped-color:#000;--bs-table-active-bg:#dfc2c4;--bs-table-active-color:#000;--bs-table-hover-bg:#e5c7ca;--bs-table-hover-color:#000;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-light{--bs-table-color:#000;--bs-table-bg:#f8f9fa;--bs-table-border-color:#dfe0e1;--bs-table-striped-bg:#ecedee;--bs-table-striped-color:#000;--bs-table-active-bg:#dfe0e1;--bs-table-active-color:#000;--bs-table-hover-bg:#e5e6e7;--bs-table-hover-color:#000;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-dark{--bs-table-color:#fff;--bs-table-bg:#212529;--bs-table-border-color:#373b3e;--bs-table-striped-bg:#2c3034;--bs-table-striped-color:#fff;--bs-table-active-bg:#373b3e;--bs-table-active-color:#fff;--bs-table-hover-bg:#323539;--bs-table-hover-color:#fff;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-responsive{overflow-x:auto;-webkit-overflow-scrolling:touch}@media (max-width:575.98px){.table-responsive-sm{overflow-x:auto;-webkit-overflow-scrolling:touch}}@media (max-width:767.98px){.table-responsive-md{overflow-x:auto;-webkit-overflow-scrolling:touch}}@media (max-width:991.98px){.table-responsive-lg{overflow-x:auto;-webkit-overflow-scrolling:touch}}@media (max-width:1199.98px){.table-responsive-xl{overflow-x:auto;-webkit-overflow-scrolling:touch}}@media (max-width:1399.98px){.table-responsive-xxl{overflow-x:auto;-webkit-overflow-scrolling:touch}}.form-label{margin-bottom:.5rem}.col-form-label{padding-top:calc(.375rem + var(--bs-border-width));padding-bottom:calc(.375rem + var(--bs-border-width));margin-bottom:0;font-size:inherit;line-height:1.5}.col-form-label-lg{padding-top:calc(.5rem + var(--bs-border-width));padding-bottom:calc(.5rem + var(--bs-border-width));font-size:1.25rem}.col-form-label-sm{padding-top:calc(.25rem + var(--bs-border-width));padding-bottom:calc(.25rem + var(--bs-border-width));font-size:.875rem}.form-text{margin-top:.25rem;font-size:.875em;color:var(--bs-secondary-color)}.form-control{display:block;width:100%;padding:.375rem .75rem;font-size:1rem;font-weight:400;line-height:1.5;color:var(--bs-body-color);background-color:var(--bs-form-control-bg);background-clip:padding-box;border:var(--bs-border-width) solid var(--bs-border-color);-webkit-appearance:none;-moz-appearance:none;appearance:none;border-radius:.375rem;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.form-control{transition:none}}.form-control[type=file]{overflow:hidden}.form-control[type=file]:not(:disabled):not([readonly]){cursor:pointer}.form-control:focus{color:var(--bs-body-color);background-color:var(--bs-form-control-bg);border-color:#86b7fe;outline:0;box-shadow:0 0 0 .25rem rgba(13,110,253,.25)}.form-control::-webkit-date-and-time-value{height:1.5em}.form-control::-webkit-datetime-edit{display:block;padding:0}.form-control::-moz-placeholder{color:var(--bs-secondary-color);opacity:1}.form-control::placeholder{color:var(--bs-secondary-color);opacity:1}.form-control:disabled{background-color:var(--bs-form-control-disabled-bg);opacity:1}.form-control::-webkit-file-upload-button{padding:.375rem .75rem;margin:-.375rem -.75rem;-webkit-margin-end:.75rem;margin-inline-end:.75rem;color:var(--bs-body-color);background-color:var(--bs-tertiary-bg);pointer-events:none;border-color:inherit;border-style:solid;border-width:0;border-inline-end-width:var(--bs-border-width);border-radius:0;-webkit-transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}.form-control::file-selector-button{padding:.375rem .75rem;margin:-.375rem -.75rem;-webkit-margin-end:.75rem;margin-inline-end:.75rem;color:var(--bs-body-color);background-color:var(--bs-tertiary-bg);pointer-events:none;border-color:inherit;border-style:solid;border-width:0;border-inline-end-width:var(--bs-border-width);border-radius:0;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.form-control::-webkit-file-upload-button{-webkit-transition:none;transition:none}.form-control::file-selector-button{transition:none}}.form-control:hover:not(:disabled):not([readonly])::-webkit-file-upload-button{background-color:var(--bs-secondary-bg)}.form-control:hover:not(:disabled):not([readonly])::file-selector-button{background-color:var(--bs-secondary-bg)}.form-control-plaintext{display:block;width:100%;padding:.375rem 0;margin-bottom:0;line-height:1.5;color:var(--bs-body-color);background-color:transparent;border:solid transparent;border-width:var(--bs-border-width) 0}.form-control-plaintext:focus{outline:0}.form-control-plaintext.form-control-lg,.form-control-plaintext.form-control-sm{padding-right:0;padding-left:0}.form-control-sm{min-height:calc(1.5em + .5rem + calc(var(--bs-border-width) * 2));padding:.25rem .5rem;font-size:.875rem;border-radius:.25rem}.form-control-sm::-webkit-file-upload-button{padding:.25rem .5rem;margin:-.25rem -.5rem;-webkit-margin-end:.5rem;margin-inline-end:.5rem}.form-control-sm::file-selector-button{padding:.25rem .5rem;margin:-.25rem -.5rem;-webkit-margin-end:.5rem;margin-inline-end:.5rem}.form-control-lg{min-height:calc(1.5em + 1rem + calc(var(--bs-border-width) * 2));padding:.5rem 1rem;font-size:1.25rem;border-radius:.5rem}.form-control-lg::-webkit-file-upload-button{padding:.5rem 1rem;margin:-.5rem -1rem;-webkit-margin-end:1rem;margin-inline-end:1rem}.form-control-lg::file-selector-button{padding:.5rem 1rem;margin:-.5rem -1rem;-webkit-margin-end:1rem;margin-inline-end:1rem}textarea.form-control{min-height:calc(1.5em + .75rem + calc(var(--bs-border-width) * 2))}textarea.form-control-sm{min-height:calc(1.5em + .5rem + calc(var(--bs-border-width) * 2))}textarea.form-control-lg{min-height:calc(1.5em + 1rem + calc(var(--bs-border-width) * 2))}.form-control-color{width:3rem;height:calc(1.5em + .75rem + calc(var(--bs-border-width) * 2));padding:.375rem}.form-control-color:not(:disabled):not([readonly]){cursor:pointer}.form-control-color::-moz-color-swatch{border:0!important;border-radius:.375rem}.form-control-color::-webkit-color-swatch{border-radius:.375rem}.form-control-color.form-control-sm{height:calc(1.5em + .5rem + calc(var(--bs-border-width) * 2))}.form-control-color.form-control-lg{height:calc(1.5em + 1rem + calc(var(--bs-border-width) * 2))}.form-select{--bs-form-select-bg-img:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m2 5 6 6 6-6'/%3e%3c/svg%3e");display:block;width:100%;padding:.375rem 2.25rem .375rem .75rem;-moz-padding-start:calc(0.75rem - 3px);font-size:1rem;font-weight:400;line-height:1.5;color:var(--bs-body-color);background-color:var(--bs-form-control-bg);background-image:var(--bs-form-select-bg-img),var(--bs-form-select-bg-icon,none);background-repeat:no-repeat;background-position:right .75rem center;background-size:16px 12px;border:var(--bs-border-width) solid var(--bs-border-color);border-radius:.375rem;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out;-webkit-appearance:none;-moz-appearance:none;appearance:none}@media (prefers-reduced-motion:reduce){.form-select{transition:none}}.form-select:focus{border-color:#86b7fe;outline:0;box-shadow:0 0 0 .25rem rgba(13,110,253,.25)}.form-select[multiple],.form-select[size]:not([size="1"]){padding-right:.75rem;background-image:none}.form-select:disabled{background-color:var(--bs-form-control-disabled-bg)}.form-select:-moz-focusring{color:transparent;text-shadow:0 0 0 var(--bs-body-color)}.form-select-sm{padding-top:.25rem;padding-bottom:.25rem;padding-left:.5rem;font-size:.875rem;border-radius:.25rem}.form-select-lg{padding-top:.5rem;padding-bottom:.5rem;padding-left:1rem;font-size:1.25rem;border-radius:.5rem}[data-bs-theme=dark] .form-select{--bs-form-select-bg-img:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23adb5bd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m2 5 6 6 6-6'/%3e%3c/svg%3e")}.form-check{display:block;min-height:1.5rem;padding-left:1.5em;margin-bottom:.125rem}.form-check .form-check-input{float:left;margin-left:-1.5em}.form-check-reverse{padding-right:1.5em;padding-left:0;text-align:right}.form-check-reverse .form-check-input{float:right;margin-right:-1.5em;margin-left:0}.form-check-input{--bs-form-check-bg:var(--bs-form-control-bg);width:1em;height:1em;margin-top:.25em;vertical-align:top;background-color:var(--bs-form-check-bg);background-image:var(--bs-form-check-bg-image);background-repeat:no-repeat;background-position:center;background-size:contain;border:var(--bs-border-width) solid var(--bs-border-color);-webkit-appearance:none;-moz-appearance:none;appearance:none;-webkit-print-color-adjust:exact;color-adjust:exact;print-color-adjust:exact}.form-check-input[type=checkbox]{border-radius:.25em}.form-check-input[type=radio]{border-radius:50%}.form-check-input:active{filter:brightness(90%)}.form-check-input:focus{border-color:#86b7fe;outline:0;box-shadow:0 0 0 .25rem rgba(13,110,253,.25)}.form-check-input:checked{background-color:#0d6efd;border-color:#0d6efd}.form-check-input:checked[type=checkbox]{--bs-form-check-bg-image:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3e%3cpath fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='m6 10 3 3 6-6'/%3e%3c/svg%3e")}.form-check-input:checked[type=radio]{--bs-form-check-bg-image:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='2' fill='%23fff'/%3e%3c/svg%3e")}.form-check-input[type=checkbox]:indeterminate{background-color:#0d6efd;border-color:#0d6efd;--bs-form-check-bg-image:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3e%3cpath fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='M6 10h8'/%3e%3c/svg%3e")}.form-check-input:disabled{pointer-events:none;filter:none;opacity:.5}.form-check-input:disabled~.form-check-label,.form-check-input[disabled]~.form-check-label{cursor:default;opacity:.5}.form-switch{padding-left:2.5em}.form-switch .form-check-input{--bs-form-switch-bg:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='rgba%280, 0, 0, 0.25%29'/%3e%3c/svg%3e");width:2em;margin-left:-2.5em;background-image:var(--bs-form-switch-bg);background-position:left center;border-radius:2em;transition:background-position .15s ease-in-out}@media (prefers-reduced-motion:reduce){.form-switch .form-check-input{transition:none}}.form-switch .form-check-input:focus{--bs-form-switch-bg:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%2386b7fe'/%3e%3c/svg%3e")}.form-switch .form-check-input:checked{background-position:right center;--bs-form-switch-bg:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%23fff'/%3e%3c/svg%3e")}.form-switch.form-check-reverse{padding-right:2.5em;padding-left:0}.form-switch.form-check-reverse .form-check-input{margin-right:-2.5em;margin-left:0}.form-check-inline{display:inline-block;margin-right:1rem}.btn-check{position:absolute;clip:rect(0,0,0,0);pointer-events:none}.btn-check:disabled+.btn,.btn-check[disabled]+.btn{pointer-events:none;filter:none;opacity:.65}[data-bs-theme=dark] .form-switch .form-check-input:not(:checked):not(:focus){--bs-form-switch-bg:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='rgba%28255, 255, 255, 0.25%29'/%3e%3c/svg%3e")}.form-range{width:100%;height:1.5rem;padding:0;background-color:transparent;-webkit-appearance:none;-moz-appearance:none;appearance:none}.form-range:focus{outline:0}.form-range:focus::-webkit-slider-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .25rem rgba(13,110,253,.25)}.form-range:focus::-moz-range-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .25rem rgba(13,110,253,.25)}.form-range::-moz-focus-outer{border:0}.form-range::-webkit-slider-thumb{width:1rem;height:1rem;margin-top:-.25rem;background-color:#0d6efd;border:0;border-radius:1rem;-webkit-transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;-webkit-appearance:none;appearance:none}@media (prefers-reduced-motion:reduce){.form-range::-webkit-slider-thumb{-webkit-transition:none;transition:none}}.form-range::-webkit-slider-thumb:active{background-color:#b6d4fe}.form-range::-webkit-slider-runnable-track{width:100%;height:.5rem;color:transparent;cursor:pointer;background-color:var(--bs-tertiary-bg);border-color:transparent;border-radius:1rem}.form-range::-moz-range-thumb{width:1rem;height:1rem;background-color:#0d6efd;border:0;border-radius:1rem;-moz-transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;-moz-appearance:none;appearance:none}@media (prefers-reduced-motion:reduce){.form-range::-moz-range-thumb{-moz-transition:none;transition:none}}.form-range::-moz-range-thumb:active{background-color:#b6d4fe}.form-range::-moz-range-track{width:100%;height:.5rem;color:transparent;cursor:pointer;background-color:var(--bs-tertiary-bg);border-color:transparent;border-radius:1rem}.form-range:disabled{pointer-events:none}.form-range:disabled::-webkit-slider-thumb{background-color:var(--bs-secondary-color)}.form-range:disabled::-moz-range-thumb{background-color:var(--bs-secondary-color)}.form-floating{position:relative}.form-floating::before:not(.form-control:disabled){position:absolute;top:var(--bs-border-width);left:var(--bs-border-width);width:calc(100% - (calc(calc(.375em + .1875rem) + calc(.75em + .375rem))));height:1.875em;content:"";background-color:var(--bs-form-control-bg);border-radius:.375rem}.form-floating>.form-control,.form-floating>.form-control-plaintext,.form-floating>.form-select{height:calc(3.5rem + calc(var(--bs-border-width) * 2));line-height:1.25}.form-floating>label{position:absolute;top:0;left:0;width:100%;height:100%;padding:1rem .75rem;overflow:hidden;text-align:start;text-overflow:ellipsis;white-space:nowrap;pointer-events:none;border:var(--bs-border-width) solid transparent;transform-origin:0 0;transition:opacity .1s ease-in-out,transform .1s ease-in-out}@media (prefers-reduced-motion:reduce){.form-floating>label{transition:none}}.form-floating>.form-control,.form-floating>.form-control-plaintext{padding:1rem .75rem}.form-floating>.form-control-plaintext::-moz-placeholder,.form-floating>.form-control::-moz-placeholder{color:transparent}.form-floating>.form-control-plaintext::placeholder,.form-floating>.form-control::placeholder{color:transparent}.form-floating>.form-control-plaintext:not(:-moz-placeholder-shown),.form-floating>.form-control:not(:-moz-placeholder-shown){padding-top:1.625rem;padding-bottom:.625rem}.form-floating>.form-control-plaintext:focus,.form-floating>.form-control-plaintext:not(:placeholder-shown),.form-floating>.form-control:focus,.form-floating>.form-control:not(:placeholder-shown){padding-top:1.625rem;padding-bottom:.625rem}.form-floating>.form-control-plaintext:-webkit-autofill,.form-floating>.form-control:-webkit-autofill{padding-top:1.625rem;padding-bottom:.625rem}.form-floating>.form-select{padding-top:1.625rem;padding-bottom:.625rem}.form-floating>.form-control:not(:-moz-placeholder-shown)~label{opacity:.65;transform:scale(.85) translateY(-.5rem) translateX(.15rem)}.form-floating>.form-control-plaintext~label,.form-floating>.form-control:focus~label,.form-floating>.form-control:not(:placeholder-shown)~label,.form-floating>.form-select~label{opacity:.65;transform:scale(.85) translateY(-.5rem) translateX(.15rem)}.form-floating>.form-control:-webkit-autofill~label{opacity:.65;transform:scale(.85) translateY(-.5rem) translateX(.15rem)}.form-floating>.form-control-plaintext~label{border-width:var(--bs-border-width) 0}.form-floating>.form-control:disabled~label{color:#6c757d}.input-group{position:relative;display:flex;flex-wrap:wrap;align-items:stretch;width:100%}.input-group>.form-control,.input-group>.form-floating,.input-group>.form-select{position:relative;flex:1 1 auto;width:1%;min-width:0}.input-group>.form-control:focus,.input-group>.form-floating:focus-within,.input-group>.form-select:focus{z-index:5}.input-group .btn{position:relative;z-index:2}.input-group .btn:focus{z-index:5}.input-group-text{display:flex;align-items:center;padding:.375rem .75rem;font-size:1rem;font-weight:400;line-height:1.5;color:var(--bs-body-color);text-align:center;white-space:nowrap;background-color:var(--bs-tertiary-bg);border:var(--bs-border-width) solid var(--bs-border-color);border-radius:.375rem}.input-group-lg>.btn,.input-group-lg>.form-control,.input-group-lg>.form-select,.input-group-lg>.input-group-text{padding:.5rem 1rem;font-size:1.25rem;border-radius:.5rem}.input-group-sm>.btn,.input-group-sm>.form-control,.input-group-sm>.form-select,.input-group-sm>.input-group-text{padding:.25rem .5rem;font-size:.875rem;border-radius:.25rem}.input-group-lg>.form-select,.input-group-sm>.form-select{padding-right:3rem}.input-group:not(.has-validation)>.dropdown-toggle:nth-last-child(n+3),.input-group:not(.has-validation)>.form-floating:not(:last-child)>.form-control,.input-group:not(.has-validation)>.form-floating:not(:last-child)>.form-select,.input-group:not(.has-validation)>:not(:last-child):not(.dropdown-toggle):not(.dropdown-menu):not(.form-floating){border-top-right-radius:0;border-bottom-right-radius:0}.input-group.has-validation>.dropdown-toggle:nth-last-child(n+4),.input-group.has-validation>.form-floating:nth-last-child(n+3)>.form-control,.input-group.has-validation>.form-floating:nth-last-child(n+3)>.form-select,.input-group.has-validation>:nth-last-child(n+3):not(.dropdown-toggle):not(.dropdown-menu):not(.form-floating){border-top-right-radius:0;border-bottom-right-radius:0}.input-group>:not(:first-child):not(.dropdown-menu):not(.valid-tooltip):not(.valid-feedback):not(.invalid-tooltip):not(.invalid-feedback){margin-left:calc(var(--bs-border-width) * -1);border-top-left-radius:0;border-bottom-left-radius:0}.input-group>.form-floating:not(:first-child)>.form-control,.input-group>.form-floating:not(:first-child)>.form-select{border-top-left-radius:0;border-bottom-left-radius:0}.valid-feedback{display:none;width:100%;margin-top:.25rem;font-size:.875em;color:var(--bs-success-text)}.valid-tooltip{position:absolute;top:100%;z-index:5;display:none;max-width:100%;padding:.25rem .5rem;margin-top:.1rem;font-size:.875rem;color:#fff;background-color:var(--bs-success);border-radius:var(--bs-border-radius)}.is-valid~.valid-feedback,.is-valid~.valid-tooltip,.was-validated :valid~.valid-feedback,.was-validated :valid~.valid-tooltip{display:block}.form-control.is-valid,.was-validated .form-control:valid{border-color:var(--bs-success);padding-right:calc(1.5em + .75rem);background-image:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");background-repeat:no-repeat;background-position:right calc(.375em + .1875rem) center;background-size:calc(.75em + .375rem) calc(.75em + .375rem)}.form-control.is-valid:focus,.was-validated .form-control:valid:focus{border-color:var(--bs-success);box-shadow:0 0 0 .25rem rgba(var(--bs-success-rgb),.25)}.was-validated textarea.form-control:valid,textarea.form-control.is-valid{padding-right:calc(1.5em + .75rem);background-position:top calc(.375em + .1875rem) right calc(.375em + .1875rem)}.form-select.is-valid,.was-validated .form-select:valid{border-color:var(--bs-success)}.form-select.is-valid:not([multiple]):not([size]),.form-select.is-valid:not([multiple])[size="1"],.was-validated .form-select:valid:not([multiple]):not([size]),.was-validated .form-select:valid:not([multiple])[size="1"]{--bs-form-select-bg-icon:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");padding-right:4.125rem;background-position:right .75rem center,center right 2.25rem;background-size:16px 12px,calc(.75em + .375rem) calc(.75em + .375rem)}.form-select.is-valid:focus,.was-validated .form-select:valid:focus{border-color:var(--bs-success);box-shadow:0 0 0 .25rem rgba(var(--bs-success-rgb),.25)}.form-control-color.is-valid,.was-validated .form-control-color:valid{width:calc(3rem + calc(1.5em + .75rem))}.form-check-input.is-valid,.was-validated .form-check-input:valid{border-color:var(--bs-success)}.form-check-input.is-valid:checked,.was-validated .form-check-input:valid:checked{background-color:var(--bs-success-text)}.form-check-input.is-valid:focus,.was-validated .form-check-input:valid:focus{box-shadow:0 0 0 .25rem rgba(var(--bs-success-rgb),.25)}.form-check-input.is-valid~.form-check-label,.was-validated .form-check-input:valid~.form-check-label{color:var(--bs-success-text)}.form-check-inline .form-check-input~.valid-feedback{margin-left:.5em}.input-group>.form-control:not(:focus).is-valid,.input-group>.form-floating:not(:focus-within).is-valid,.input-group>.form-select:not(:focus).is-valid,.was-validated .input-group>.form-control:not(:focus):valid,.was-validated .input-group>.form-floating:not(:focus-within):valid,.was-validated .input-group>.form-select:not(:focus):valid{z-index:3}.invalid-feedback{display:none;width:100%;margin-top:.25rem;font-size:.875em;color:var(--bs-danger-text)}.invalid-tooltip{position:absolute;top:100%;z-index:5;display:none;max-width:100%;padding:.25rem .5rem;margin-top:.1rem;font-size:.875rem;color:#fff;background-color:var(--bs-danger);border-radius:var(--bs-border-radius)}.is-invalid~.invalid-feedback,.is-invalid~.invalid-tooltip,.was-validated :invalid~.invalid-feedback,.was-validated :invalid~.invalid-tooltip{display:block}.form-control.is-invalid,.was-validated .form-control:invalid{border-color:var(--bs-danger);padding-right:calc(1.5em + .75rem);background-image:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");background-repeat:no-repeat;background-position:right calc(.375em + .1875rem) center;background-size:calc(.75em + .375rem) calc(.75em + .375rem)}.form-control.is-invalid:focus,.was-validated .form-control:invalid:focus{border-color:var(--bs-danger);box-shadow:0 0 0 .25rem rgba(var(--bs-danger-rgb),.25)}.was-validated textarea.form-control:invalid,textarea.form-control.is-invalid{padding-right:calc(1.5em + .75rem);background-position:top calc(.375em + .1875rem) right calc(.375em + .1875rem)}.form-select.is-invalid,.was-validated .form-select:invalid{border-color:var(--bs-danger)}.form-select.is-invalid:not([multiple]):not([size]),.form-select.is-invalid:not([multiple])[size="1"],.was-validated .form-select:invalid:not([multiple]):not([size]),.was-validated .form-select:invalid:not([multiple])[size="1"]{--bs-form-select-bg-icon:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");padding-right:4.125rem;background-position:right .75rem center,center right 2.25rem;background-size:16px 12px,calc(.75em + .375rem) calc(.75em + .375rem)}.form-select.is-invalid:focus,.was-validated .form-select:invalid:focus{border-color:var(--bs-danger);box-shadow:0 0 0 .25rem rgba(var(--bs-danger-rgb),.25)}.form-control-color.is-invalid,.was-validated .form-control-color:invalid{width:calc(3rem + calc(1.5em + .75rem))}.form-check-input.is-invalid,.was-validated .form-check-input:invalid{border-color:var(--bs-danger)}.form-check-input.is-invalid:checked,.was-validated .form-check-input:invalid:checked{background-color:var(--bs-danger-text)}.form-check-input.is-invalid:focus,.was-validated .form-check-input:invalid:focus{box-shadow:0 0 0 .25rem rgba(var(--bs-danger-rgb),.25)}.form-check-input.is-invalid~.form-check-label,.was-validated .form-check-input:invalid~.form-check-label{color:var(--bs-danger-text)}.form-check-inline .form-check-input~.invalid-feedback{margin-left:.5em}.input-group>.form-control:not(:focus).is-invalid,.input-group>.form-floating:not(:focus-within).is-invalid,.input-group>.form-select:not(:focus).is-invalid,.was-validated .input-group>.form-control:not(:focus):invalid,.was-validated .input-group>.form-floating:not(:focus-within):invalid,.was-validated .input-group>.form-select:not(:focus):invalid{z-index:4}.btn{--bs-btn-padding-x:0.75rem;--bs-btn-padding-y:0.375rem;--bs-btn-font-family: ;--bs-btn-font-size:1rem;--bs-btn-font-weight:400;--bs-btn-line-height:1.5;--bs-btn-color:#212529;--bs-btn-bg:transparent;--bs-btn-border-width:var(--bs-border-width);--bs-btn-border-color:transparent;--bs-btn-border-radius:0.375rem;--bs-btn-hover-border-color:transparent;--bs-btn-box-shadow:inset 0 1px 0 rgba(255, 255, 255, 0.15),0 1px 1px rgba(0, 0, 0, 0.075);--bs-btn-disabled-opacity:0.65;--bs-btn-focus-box-shadow:0 0 0 0.25rem rgba(var(--bs-btn-focus-shadow-rgb), .5);display:inline-block;padding:var(--bs-btn-padding-y) var(--bs-btn-padding-x);font-family:var(--bs-btn-font-family);font-size:var(--bs-btn-font-size);font-weight:var(--bs-btn-font-weight);line-height:var(--bs-btn-line-height);color:var(--bs-btn-color);text-align:center;text-decoration:none;vertical-align:middle;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none;border:var(--bs-btn-border-width) solid var(--bs-btn-border-color);border-radius:var(--bs-btn-border-radius);background-color:var(--bs-btn-bg);transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.btn{transition:none}}.btn:hover{color:var(--bs-btn-hover-color);background-color:var(--bs-btn-hover-bg);border-color:var(--bs-btn-hover-border-color)}.btn-check+.btn:hover{color:var(--bs-btn-color);background-color:var(--bs-btn-bg);border-color:var(--bs-btn-border-color)}.btn:focus-visible{color:var(--bs-btn-hover-color);background-color:var(--bs-btn-hover-bg);border-color:var(--bs-btn-hover-border-color);outline:0;box-shadow:var(--bs-btn-focus-box-shadow)}.btn-check:focus-visible+.btn{border-color:var(--bs-btn-hover-border-color);outline:0;box-shadow:var(--bs-btn-focus-box-shadow)}.btn-check:checked+.btn,.btn.active,.btn.show,.btn:first-child:active,:not(.btn-check)+.btn:active{color:var(--bs-btn-active-color);background-color:var(--bs-btn-active-bg);border-color:var(--bs-btn-active-border-color)}.btn-check:checked+.btn:focus-visible,.btn.active:focus-visible,.btn.show:focus-visible,.btn:first-child:active:focus-visible,:not(.btn-check)+.btn:active:focus-visible{box-shadow:var(--bs-btn-focus-box-shadow)}.btn.disabled,.btn:disabled,fieldset:disabled .btn{color:var(--bs-btn-disabled-color);pointer-events:none;background-color:var(--bs-btn-disabled-bg);border-color:var(--bs-btn-disabled-border-color);opacity:var(--bs-btn-disabled-opacity)}.btn-primary{--bs-btn-color:#fff;--bs-btn-bg:#0d6efd;--bs-btn-border-color:#0d6efd;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#0b5ed7;--bs-btn-hover-border-color:#0a58ca;--bs-btn-focus-shadow-rgb:49,132,253;--bs-btn-active-color:#fff;--bs-btn-active-bg:#0a58ca;--bs-btn-active-border-color:#0a53be;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#fff;--bs-btn-disabled-bg:#0d6efd;--bs-btn-disabled-border-color:#0d6efd}.btn-secondary{--bs-btn-color:#fff;--bs-btn-bg:#6c757d;--bs-btn-border-color:#6c757d;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#5c636a;--bs-btn-hover-border-color:#565e64;--bs-btn-focus-shadow-rgb:130,138,145;--bs-btn-active-color:#fff;--bs-btn-active-bg:#565e64;--bs-btn-active-border-color:#51585e;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#fff;--bs-btn-disabled-bg:#6c757d;--bs-btn-disabled-border-color:#6c757d}.btn-success{--bs-btn-color:#fff;--bs-btn-bg:#198754;--bs-btn-border-color:#198754;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#157347;--bs-btn-hover-border-color:#146c43;--bs-btn-focus-shadow-rgb:60,153,110;--bs-btn-active-color:#fff;--bs-btn-active-bg:#146c43;--bs-btn-active-border-color:#13653f;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#fff;--bs-btn-disabled-bg:#198754;--bs-btn-disabled-border-color:#198754}.btn-info{--bs-btn-color:#000;--bs-btn-bg:#0dcaf0;--bs-btn-border-color:#0dcaf0;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#31d2f2;--bs-btn-hover-border-color:#25cff2;--bs-btn-focus-shadow-rgb:11,172,204;--bs-btn-active-color:#000;--bs-btn-active-bg:#3dd5f3;--bs-btn-active-border-color:#25cff2;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#000;--bs-btn-disabled-bg:#0dcaf0;--bs-btn-disabled-border-color:#0dcaf0}.btn-warning{--bs-btn-color:#000;--bs-btn-bg:#ffc107;--bs-btn-border-color:#ffc107;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#ffca2c;--bs-btn-hover-border-color:#ffc720;--bs-btn-focus-shadow-rgb:217,164,6;--bs-btn-active-color:#000;--bs-btn-active-bg:#ffcd39;--bs-btn-active-border-color:#ffc720;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#000;--bs-btn-disabled-bg:#ffc107;--bs-btn-disabled-border-color:#ffc107}.btn-danger{--bs-btn-color:#fff;--bs-btn-bg:#dc3545;--bs-btn-border-color:#dc3545;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#bb2d3b;--bs-btn-hover-border-color:#b02a37;--bs-btn-focus-shadow-rgb:225,83,97;--bs-btn-active-color:#fff;--bs-btn-active-bg:#b02a37;--bs-btn-active-border-color:#a52834;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#fff;--bs-btn-disabled-bg:#dc3545;--bs-btn-disabled-border-color:#dc3545}.btn-light{--bs-btn-color:#000;--bs-btn-bg:#f8f9fa;--bs-btn-border-color:#f8f9fa;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#d3d4d5;--bs-btn-hover-border-color:#c6c7c8;--bs-btn-focus-shadow-rgb:211,212,213;--bs-btn-active-color:#000;--bs-btn-active-bg:#c6c7c8;--bs-btn-active-border-color:#babbbc;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#000;--bs-btn-disabled-bg:#f8f9fa;--bs-btn-disabled-border-color:#f8f9fa}.btn-dark{--bs-btn-color:#fff;--bs-btn-bg:#212529;--bs-btn-border-color:#212529;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#424649;--bs-btn-hover-border-color:#373b3e;--bs-btn-focus-shadow-rgb:66,70,73;--bs-btn-active-color:#fff;--bs-btn-active-bg:#4d5154;--bs-btn-active-border-color:#373b3e;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#fff;--bs-btn-disabled-bg:#212529;--bs-btn-disabled-border-color:#212529}.btn-outline-primary{--bs-btn-color:#0d6efd;--bs-btn-border-color:#0d6efd;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#0d6efd;--bs-btn-hover-border-color:#0d6efd;--bs-btn-focus-shadow-rgb:13,110,253;--bs-btn-active-color:#fff;--bs-btn-active-bg:#0d6efd;--bs-btn-active-border-color:#0d6efd;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#0d6efd;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#0d6efd;--bs-gradient:none}.btn-outline-secondary{--bs-btn-color:#6c757d;--bs-btn-border-color:#6c757d;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#6c757d;--bs-btn-hover-border-color:#6c757d;--bs-btn-focus-shadow-rgb:108,117,125;--bs-btn-active-color:#fff;--bs-btn-active-bg:#6c757d;--bs-btn-active-border-color:#6c757d;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#6c757d;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#6c757d;--bs-gradient:none}.btn-outline-success{--bs-btn-color:#198754;--bs-btn-border-color:#198754;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#198754;--bs-btn-hover-border-color:#198754;--bs-btn-focus-shadow-rgb:25,135,84;--bs-btn-active-color:#fff;--bs-btn-active-bg:#198754;--bs-btn-active-border-color:#198754;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#198754;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#198754;--bs-gradient:none}.btn-outline-info{--bs-btn-color:#0dcaf0;--bs-btn-border-color:#0dcaf0;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#0dcaf0;--bs-btn-hover-border-color:#0dcaf0;--bs-btn-focus-shadow-rgb:13,202,240;--bs-btn-active-color:#000;--bs-btn-active-bg:#0dcaf0;--bs-btn-active-border-color:#0dcaf0;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#0dcaf0;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#0dcaf0;--bs-gradient:none}.btn-outline-warning{--bs-btn-color:#ffc107;--bs-btn-border-color:#ffc107;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#ffc107;--bs-btn-hover-border-color:#ffc107;--bs-btn-focus-shadow-rgb:255,193,7;--bs-btn-active-color:#000;--bs-btn-active-bg:#ffc107;--bs-btn-active-border-color:#ffc107;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#ffc107;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#ffc107;--bs-gradient:none}.btn-outline-danger{--bs-btn-color:#dc3545;--bs-btn-border-color:#dc3545;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#dc3545;--bs-btn-hover-border-color:#dc3545;--bs-btn-focus-shadow-rgb:220,53,69;--bs-btn-active-color:#fff;--bs-btn-active-bg:#dc3545;--bs-btn-active-border-color:#dc3545;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#dc3545;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#dc3545;--bs-gradient:none}.btn-outline-light{--bs-btn-color:#f8f9fa;--bs-btn-border-color:#f8f9fa;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#f8f9fa;--bs-btn-hover-border-color:#f8f9fa;--bs-btn-focus-shadow-rgb:248,249,250;--bs-btn-active-color:#000;--bs-btn-active-bg:#f8f9fa;--bs-btn-active-border-color:#f8f9fa;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#f8f9fa;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#f8f9fa;--bs-gradient:none}.btn-outline-dark{--bs-btn-color:#212529;--bs-btn-border-color:#212529;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#212529;--bs-btn-hover-border-color:#212529;--bs-btn-focus-shadow-rgb:33,37,41;--bs-btn-active-color:#fff;--bs-btn-active-bg:#212529;--bs-btn-active-border-color:#212529;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#212529;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#212529;--bs-gradient:none}.btn-link{--bs-btn-font-weight:400;--bs-btn-color:var(--bs-link-color);--bs-btn-bg:transparent;--bs-btn-border-color:transparent;--bs-btn-hover-color:var(--bs-link-hover-color);--bs-btn-hover-border-color:transparent;--bs-btn-active-color:var(--bs-link-hover-color);--bs-btn-active-border-color:transparent;--bs-btn-disabled-color:#6c757d;--bs-btn-disabled-border-color:transparent;--bs-btn-box-shadow:none;--bs-btn-focus-shadow-rgb:49,132,253;text-decoration:underline}.btn-link:focus-visible{color:var(--bs-btn-color)}.btn-link:hover{color:var(--bs-btn-hover-color)}.btn-group-lg>.btn,.btn-lg{--bs-btn-padding-y:0.5rem;--bs-btn-padding-x:1rem;--bs-btn-font-size:1.25rem;--bs-btn-border-radius:0.5rem}.btn-group-sm>.btn,.btn-sm{--bs-btn-padding-y:0.25rem;--bs-btn-padding-x:0.5rem;--bs-btn-font-size:0.875rem;--bs-btn-border-radius:0.25rem}.fade{transition:opacity .15s linear}@media (prefers-reduced-motion:reduce){.fade{transition:none}}.fade:not(.show){opacity:0}.collapse:not(.show){display:none}.collapsing{height:0;overflow:hidden;transition:height .35s ease}@media (prefers-reduced-motion:reduce){.collapsing{transition:none}}.collapsing.collapse-horizontal{width:0;height:auto;transition:width .35s ease}@media (prefers-reduced-motion:reduce){.collapsing.collapse-horizontal{transition:none}}.dropdown,.dropdown-center,.dropend,.dropstart,.dropup,.dropup-center{position:relative}.dropdown-toggle{white-space:nowrap}.dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:"";border-top:.3em solid;border-right:.3em solid transparent;border-bottom:0;border-left:.3em solid transparent}.dropdown-toggle:empty::after{margin-left:0}.dropdown-menu{--bs-dropdown-zindex:1000;--bs-dropdown-min-width:10rem;--bs-dropdown-padding-x:0;--bs-dropdown-padding-y:0.5rem;--bs-dropdown-spacer:0.125rem;--bs-dropdown-font-size:1rem;--bs-dropdown-color:var(--bs-body-color);--bs-dropdown-bg:var(--bs-body-bg);--bs-dropdown-border-color:var(--bs-border-color-translucent);--bs-dropdown-border-radius:0.375rem;--bs-dropdown-border-width:var(--bs-border-width);--bs-dropdown-inner-border-radius:calc(0.375rem - var(--bs-border-width));--bs-dropdown-divider-bg:var(--bs-border-color-translucent);--bs-dropdown-divider-margin-y:0.5rem;--bs-dropdown-box-shadow:0 0.5rem 1rem rgba(var(--bs-body-color-rgb), 0.15);--bs-dropdown-link-color:var(--bs-body-color);--bs-dropdown-link-hover-color:var(--bs-body-color);--bs-dropdown-link-hover-bg:var(--bs-tertiary-bg);--bs-dropdown-link-active-color:#fff;--bs-dropdown-link-active-bg:#0d6efd;--bs-dropdown-link-disabled-color:#adb5bd;--bs-dropdown-item-padding-x:1rem;--bs-dropdown-item-padding-y:0.25rem;--bs-dropdown-header-color:#6c757d;--bs-dropdown-header-padding-x:1rem;--bs-dropdown-header-padding-y:0.5rem;position:absolute;z-index:var(--bs-dropdown-zindex);display:none;min-width:var(--bs-dropdown-min-width);padding:var(--bs-dropdown-padding-y) var(--bs-dropdown-padding-x);margin:0;font-size:var(--bs-dropdown-font-size);color:var(--bs-dropdown-color);text-align:left;list-style:none;background-color:var(--bs-dropdown-bg);background-clip:padding-box;border:var(--bs-dropdown-border-width) solid var(--bs-dropdown-border-color);border-radius:var(--bs-dropdown-border-radius)}.dropdown-menu[data-bs-popper]{top:100%;left:0;margin-top:var(--bs-dropdown-spacer)}.dropdown-menu-start{--bs-position:start}.dropdown-menu-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-end{--bs-position:end}.dropdown-menu-end[data-bs-popper]{right:0;left:auto}@media (min-width:576px){.dropdown-menu-sm-start{--bs-position:start}.dropdown-menu-sm-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-sm-end{--bs-position:end}.dropdown-menu-sm-end[data-bs-popper]{right:0;left:auto}}@media (min-width:768px){.dropdown-menu-md-start{--bs-position:start}.dropdown-menu-md-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-md-end{--bs-position:end}.dropdown-menu-md-end[data-bs-popper]{right:0;left:auto}}@media (min-width:992px){.dropdown-menu-lg-start{--bs-position:start}.dropdown-menu-lg-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-lg-end{--bs-position:end}.dropdown-menu-lg-end[data-bs-popper]{right:0;left:auto}}@media (min-width:1200px){.dropdown-menu-xl-start{--bs-position:start}.dropdown-menu-xl-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-xl-end{--bs-position:end}.dropdown-menu-xl-end[data-bs-popper]{right:0;left:auto}}@media (min-width:1400px){.dropdown-menu-xxl-start{--bs-position:start}.dropdown-menu-xxl-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-xxl-end{--bs-position:end}.dropdown-menu-xxl-end[data-bs-popper]{right:0;left:auto}}.dropup .dropdown-menu[data-bs-popper]{top:auto;bottom:100%;margin-top:0;margin-bottom:var(--bs-dropdown-spacer)}.dropup .dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:"";border-top:0;border-right:.3em solid transparent;border-bottom:.3em solid;border-left:.3em solid transparent}.dropup .dropdown-toggle:empty::after{margin-left:0}.dropend .dropdown-menu[data-bs-popper]{top:0;right:auto;left:100%;margin-top:0;margin-left:var(--bs-dropdown-spacer)}.dropend .dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:"";border-top:.3em solid transparent;border-right:0;border-bottom:.3em solid transparent;border-left:.3em solid}.dropend .dropdown-toggle:empty::after{margin-left:0}.dropend .dropdown-toggle::after{vertical-align:0}.dropstart .dropdown-menu[data-bs-popper]{top:0;right:100%;left:auto;margin-top:0;margin-right:var(--bs-dropdown-spacer)}.dropstart .dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:""}.dropstart .dropdown-toggle::after{display:none}.dropstart .dropdown-toggle::before{display:inline-block;margin-right:.255em;vertical-align:.255em;content:"";border-top:.3em solid transparent;border-right:.3em solid;border-bottom:.3em solid transparent}.dropstart .dropdown-toggle:empty::after{margin-left:0}.dropstart .dropdown-toggle::before{vertical-align:0}.dropdown-divider{height:0;margin:var(--bs-dropdown-divider-margin-y) 0;overflow:hidden;border-top:1px solid var(--bs-dropdown-divider-bg);opacity:1}.dropdown-item{display:block;width:100%;padding:var(--bs-dropdown-item-padding-y) var(--bs-dropdown-item-padding-x);clear:both;font-weight:400;color:var(--bs-dropdown-link-color);text-align:inherit;text-decoration:none;white-space:nowrap;background-color:transparent;border:0;border-radius:var(--bs-dropdown-item-border-radius,0)}.dropdown-item:focus,.dropdown-item:hover{color:var(--bs-dropdown-link-hover-color);background-color:var(--bs-dropdown-link-hover-bg)}.dropdown-item.active,.dropdown-item:active{color:var(--bs-dropdown-link-active-color);text-decoration:none;background-color:var(--bs-dropdown-link-active-bg)}.dropdown-item.disabled,.dropdown-item:disabled{color:var(--bs-dropdown-link-disabled-color);pointer-events:none;background-color:transparent}.dropdown-menu.show{display:block}.dropdown-header{display:block;padding:var(--bs-dropdown-header-padding-y) var(--bs-dropdown-header-padding-x);margin-bottom:0;font-size:.875rem;color:var(--bs-dropdown-header-color);white-space:nowrap}.dropdown-item-text{display:block;padding:var(--bs-dropdown-item-padding-y) var(--bs-dropdown-item-padding-x);color:var(--bs-dropdown-link-color)}.dropdown-menu-dark{--bs-dropdown-color:#dee2e6;--bs-dropdown-bg:#343a40;--bs-dropdown-border-color:var(--bs-border-color-translucent);--bs-dropdown-box-shadow: ;--bs-dropdown-link-color:#dee2e6;--bs-dropdown-link-hover-color:#fff;--bs-dropdown-divider-bg:var(--bs-border-color-translucent);--bs-dropdown-link-hover-bg:rgba(255, 255, 255, 0.15);--bs-dropdown-link-active-color:#fff;--bs-dropdown-link-active-bg:#0d6efd;--bs-dropdown-link-disabled-color:#adb5bd;--bs-dropdown-header-color:#adb5bd}.btn-group,.btn-group-vertical{position:relative;display:inline-flex;vertical-align:middle}.btn-group-vertical>.btn,.btn-group>.btn{position:relative;flex:1 1 auto}.btn-group-vertical>.btn-check:checked+.btn,.btn-group-vertical>.btn-check:focus+.btn,.btn-group-vertical>.btn.active,.btn-group-vertical>.btn:active,.btn-group-vertical>.btn:focus,.btn-group-vertical>.btn:hover,.btn-group>.btn-check:checked+.btn,.btn-group>.btn-check:focus+.btn,.btn-group>.btn.active,.btn-group>.btn:active,.btn-group>.btn:focus,.btn-group>.btn:hover{z-index:1}.btn-toolbar{display:flex;flex-wrap:wrap;justify-content:flex-start}.btn-toolbar .input-group{width:auto}.btn-group{border-radius:.375rem}.btn-group>.btn-group:not(:first-child),.btn-group>:not(.btn-check:first-child)+.btn{margin-left:calc(var(--bs-border-width) * -1)}.btn-group>.btn-group:not(:last-child)>.btn,.btn-group>.btn.dropdown-toggle-split:first-child,.btn-group>.btn:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn-group:not(:first-child)>.btn,.btn-group>.btn:nth-child(n+3),.btn-group>:not(.btn-check)+.btn{border-top-left-radius:0;border-bottom-left-radius:0}.dropdown-toggle-split{padding-right:.5625rem;padding-left:.5625rem}.dropdown-toggle-split::after,.dropend .dropdown-toggle-split::after,.dropup .dropdown-toggle-split::after{margin-left:0}.dropstart .dropdown-toggle-split::before{margin-right:0}.btn-group-sm>.btn+.dropdown-toggle-split,.btn-sm+.dropdown-toggle-split{padding-right:.375rem;padding-left:.375rem}.btn-group-lg>.btn+.dropdown-toggle-split,.btn-lg+.dropdown-toggle-split{padding-right:.75rem;padding-left:.75rem}.btn-group-vertical{flex-direction:column;align-items:flex-start;justify-content:center}.btn-group-vertical>.btn,.btn-group-vertical>.btn-group{width:100%}.btn-group-vertical>.btn-group:not(:first-child),.btn-group-vertical>.btn:not(:first-child){margin-top:calc(var(--bs-border-width) * -1)}.btn-group-vertical>.btn-group:not(:last-child)>.btn,.btn-group-vertical>.btn:not(:last-child):not(.dropdown-toggle){border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn-group:not(:first-child)>.btn,.btn-group-vertical>.btn~.btn{border-top-left-radius:0;border-top-right-radius:0}.nav{--bs-nav-link-padding-x:1rem;--bs-nav-link-padding-y:0.5rem;--bs-nav-link-font-weight: ;--bs-nav-link-color:var(--bs-link-color);--bs-nav-link-hover-color:var(--bs-link-hover-color);--bs-nav-link-disabled-color:var(--bs-secondary-color);display:flex;flex-wrap:wrap;padding-left:0;margin-bottom:0;list-style:none}.nav-link{display:block;padding:var(--bs-nav-link-padding-y) var(--bs-nav-link-padding-x);font-size:var(--bs-nav-link-font-size);font-weight:var(--bs-nav-link-font-weight);color:var(--bs-nav-link-color);text-decoration:none;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out}@media (prefers-reduced-motion:reduce){.nav-link{transition:none}}.nav-link:focus,.nav-link:hover{color:var(--bs-nav-link-hover-color)}.nav-link.disabled{color:var(--bs-nav-link-disabled-color);pointer-events:none;cursor:default}.nav-tabs{--bs-nav-tabs-border-width:var(--bs-border-width);--bs-nav-tabs-border-color:var(--bs-border-color);--bs-nav-tabs-border-radius:var(--bs-border-radius);--bs-nav-tabs-link-hover-border-color:var(--bs-secondary-bg) var(--bs-secondary-bg) var(--bs-border-color);--bs-nav-tabs-link-active-color:var(--bs-emphasis-color);--bs-nav-tabs-link-active-bg:var(--bs-body-bg);--bs-nav-tabs-link-active-border-color:var(--bs-border-color) var(--bs-border-color) var(--bs-body-bg);border-bottom:var(--bs-nav-tabs-border-width) solid var(--bs-nav-tabs-border-color)}.nav-tabs .nav-link{margin-bottom:calc(-1 * var(--bs-nav-tabs-border-width));background:0 0;border:var(--bs-nav-tabs-border-width) solid transparent;border-top-left-radius:var(--bs-nav-tabs-border-radius);border-top-right-radius:var(--bs-nav-tabs-border-radius)}.nav-tabs .nav-link:focus,.nav-tabs .nav-link:hover{isolation:isolate;border-color:var(--bs-nav-tabs-link-hover-border-color)}.nav-tabs .nav-link.disabled,.nav-tabs .nav-link:disabled{color:var(--bs-nav-link-disabled-color);background-color:transparent;border-color:transparent}.nav-tabs .nav-item.show .nav-link,.nav-tabs .nav-link.active{color:var(--bs-nav-tabs-link-active-color);background-color:var(--bs-nav-tabs-link-active-bg);border-color:var(--bs-nav-tabs-link-active-border-color)}.nav-tabs .dropdown-menu{margin-top:calc(-1 * var(--bs-nav-tabs-border-width));border-top-left-radius:0;border-top-right-radius:0}.nav-pills{--bs-nav-pills-border-radius:0.375rem;--bs-nav-pills-link-active-color:#fff;--bs-nav-pills-link-active-bg:#0d6efd}.nav-pills .nav-link{background:0 0;border:0;border-radius:var(--bs-nav-pills-border-radius)}.nav-pills .nav-link:disabled{color:var(--bs-nav-link-disabled-color);background-color:transparent;border-color:transparent}.nav-pills .nav-link.active,.nav-pills .show>.nav-link{color:var(--bs-nav-pills-link-active-color);background-color:var(--bs-nav-pills-link-active-bg)}.nav-fill .nav-item,.nav-fill>.nav-link{flex:1 1 auto;text-align:center}.nav-justified .nav-item,.nav-justified>.nav-link{flex-basis:0;flex-grow:1;text-align:center}.nav-fill .nav-item .nav-link,.nav-justified .nav-item .nav-link{width:100%}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.navbar{--bs-navbar-padding-x:0;--bs-navbar-padding-y:0.5rem;--bs-navbar-color:rgba(var(--bs-emphasis-color-rgb), 0.65);--bs-navbar-hover-color:rgba(var(--bs-emphasis-color-rgb), 0.8);--bs-navbar-disabled-color:rgba(var(--bs-emphasis-color-rgb), 0.3);--bs-navbar-active-color:rgba(var(--bs-emphasis-color-rgb), 1);--bs-navbar-brand-padding-y:0.3125rem;--bs-navbar-brand-margin-end:1rem;--bs-navbar-brand-font-size:1.25rem;--bs-navbar-brand-color:rgba(var(--bs-emphasis-color-rgb), 1);--bs-navbar-brand-hover-color:rgba(var(--bs-emphasis-color-rgb), 1);--bs-navbar-nav-link-padding-x:0.5rem;--bs-navbar-toggler-padding-y:0.25rem;--bs-navbar-toggler-padding-x:0.75rem;--bs-navbar-toggler-font-size:1.25rem;--bs-navbar-toggler-icon-bg:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%2833, 37, 41, 0.75%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e");--bs-navbar-toggler-border-color:rgba(var(--bs-emphasis-color-rgb), 0.15);--bs-navbar-toggler-border-radius:0.375rem;--bs-navbar-toggler-focus-width:0.25rem;--bs-navbar-toggler-transition:box-shadow 0.15s ease-in-out;position:relative;display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;padding:var(--bs-navbar-padding-y) var(--bs-navbar-padding-x)}.navbar>.container,.navbar>.container-fluid,.navbar>.container-lg,.navbar>.container-md,.navbar>.container-sm,.navbar>.container-xl,.navbar>.container-xxl{display:flex;flex-wrap:inherit;align-items:center;justify-content:space-between}.navbar-brand{padding-top:var(--bs-navbar-brand-padding-y);padding-bottom:var(--bs-navbar-brand-padding-y);margin-right:var(--bs-navbar-brand-margin-end);font-size:var(--bs-navbar-brand-font-size);color:var(--bs-navbar-brand-color);text-decoration:none;white-space:nowrap}.navbar-brand:focus,.navbar-brand:hover{color:var(--bs-navbar-brand-hover-color)}.navbar-nav{--bs-nav-link-padding-x:0;--bs-nav-link-padding-y:0.5rem;--bs-nav-link-font-weight: ;--bs-nav-link-color:var(--bs-navbar-color);--bs-nav-link-hover-color:var(--bs-navbar-hover-color);--bs-nav-link-disabled-color:var(--bs-navbar-disabled-color);display:flex;flex-direction:column;padding-left:0;margin-bottom:0;list-style:none}.navbar-nav .nav-link.active,.navbar-nav .show>.nav-link{color:var(--bs-navbar-active-color)}.navbar-nav .dropdown-menu{position:static}.navbar-text{padding-top:.5rem;padding-bottom:.5rem;color:var(--bs-navbar-color)}.navbar-text a,.navbar-text a:focus,.navbar-text a:hover{color:var(--bs-navbar-active-color)}.navbar-collapse{flex-basis:100%;flex-grow:1;align-items:center}.navbar-toggler{padding:var(--bs-navbar-toggler-padding-y) var(--bs-navbar-toggler-padding-x);font-size:var(--bs-navbar-toggler-font-size);line-height:1;color:var(--bs-navbar-color);background-color:transparent;border:var(--bs-border-width) solid var(--bs-navbar-toggler-border-color);border-radius:var(--bs-navbar-toggler-border-radius);transition:var(--bs-navbar-toggler-transition)}@media (prefers-reduced-motion:reduce){.navbar-toggler{transition:none}}.navbar-toggler:hover{text-decoration:none}.navbar-toggler:focus{text-decoration:none;outline:0;box-shadow:0 0 0 var(--bs-navbar-toggler-focus-width)}.navbar-toggler-icon{display:inline-block;width:1.5em;height:1.5em;vertical-align:middle;background-image:var(--bs-navbar-toggler-icon-bg);background-repeat:no-repeat;background-position:center;background-size:100%}.navbar-nav-scroll{max-height:var(--bs-scroll-height,75vh);overflow-y:auto}@media (min-width:576px){.navbar-expand-sm{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-sm .navbar-nav{flex-direction:row}.navbar-expand-sm .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-sm .navbar-nav .nav-link{padding-right:var(--bs-navbar-nav-link-padding-x);padding-left:var(--bs-navbar-nav-link-padding-x)}.navbar-expand-sm .navbar-nav-scroll{overflow:visible}.navbar-expand-sm .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-sm .navbar-toggler{display:none}.navbar-expand-sm .offcanvas{position:static;z-index:auto;flex-grow:1;width:auto!important;height:auto!important;visibility:visible!important;background-color:transparent!important;border:0!important;transform:none!important;transition:none}.navbar-expand-sm .offcanvas .offcanvas-header{display:none}.navbar-expand-sm .offcanvas .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}}@media (min-width:768px){.navbar-expand-md{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-md .navbar-nav{flex-direction:row}.navbar-expand-md .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-md .navbar-nav .nav-link{padding-right:var(--bs-navbar-nav-link-padding-x);padding-left:var(--bs-navbar-nav-link-padding-x)}.navbar-expand-md .navbar-nav-scroll{overflow:visible}.navbar-expand-md .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-md .navbar-toggler{display:none}.navbar-expand-md .offcanvas{position:static;z-index:auto;flex-grow:1;width:auto!important;height:auto!important;visibility:visible!important;background-color:transparent!important;border:0!important;transform:none!important;transition:none}.navbar-expand-md .offcanvas .offcanvas-header{display:none}.navbar-expand-md .offcanvas .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}}@media (min-width:992px){.navbar-expand-lg{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-lg .navbar-nav{flex-direction:row}.navbar-expand-lg .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-lg .navbar-nav .nav-link{padding-right:var(--bs-navbar-nav-link-padding-x);padding-left:var(--bs-navbar-nav-link-padding-x)}.navbar-expand-lg .navbar-nav-scroll{overflow:visible}.navbar-expand-lg .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-lg .navbar-toggler{display:none}.navbar-expand-lg .offcanvas{position:static;z-index:auto;flex-grow:1;width:auto!important;height:auto!important;visibility:visible!important;background-color:transparent!important;border:0!important;transform:none!important;transition:none}.navbar-expand-lg .offcanvas .offcanvas-header{display:none}.navbar-expand-lg .offcanvas .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}}@media (min-width:1200px){.navbar-expand-xl{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-xl .navbar-nav{flex-direction:row}.navbar-expand-xl .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-xl .navbar-nav .nav-link{padding-right:var(--bs-navbar-nav-link-padding-x);padding-left:var(--bs-navbar-nav-link-padding-x)}.navbar-expand-xl .navbar-nav-scroll{overflow:visible}.navbar-expand-xl .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-xl .navbar-toggler{display:none}.navbar-expand-xl .offcanvas{position:static;z-index:auto;flex-grow:1;width:auto!important;height:auto!important;visibility:visible!important;background-color:transparent!important;border:0!important;transform:none!important;transition:none}.navbar-expand-xl .offcanvas .offcanvas-header{display:none}.navbar-expand-xl .offcanvas .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}}@media (min-width:1400px){.navbar-expand-xxl{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-xxl .navbar-nav{flex-direction:row}.navbar-expand-xxl .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-xxl .navbar-nav .nav-link{padding-right:var(--bs-navbar-nav-link-padding-x);padding-left:var(--bs-navbar-nav-link-padding-x)}.navbar-expand-xxl .navbar-nav-scroll{overflow:visible}.navbar-expand-xxl .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-xxl .navbar-toggler{display:none}.navbar-expand-xxl .offcanvas{position:static;z-index:auto;flex-grow:1;width:auto!important;height:auto!important;visibility:visible!important;background-color:transparent!important;border:0!important;transform:none!important;transition:none}.navbar-expand-xxl .offcanvas .offcanvas-header{display:none}.navbar-expand-xxl .offcanvas .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}}.navbar-expand{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand .navbar-nav{flex-direction:row}.navbar-expand .navbar-nav .dropdown-menu{position:absolute}.navbar-expand .navbar-nav .nav-link{padding-right:var(--bs-navbar-nav-link-padding-x);padding-left:var(--bs-navbar-nav-link-padding-x)}.navbar-expand .navbar-nav-scroll{overflow:visible}.navbar-expand .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand .navbar-toggler{display:none}.navbar-expand .offcanvas{position:static;z-index:auto;flex-grow:1;width:auto!important;height:auto!important;visibility:visible!important;background-color:transparent!important;border:0!important;transform:none!important;transition:none}.navbar-expand .offcanvas .offcanvas-header{display:none}.navbar-expand .offcanvas .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}.navbar-dark{--bs-navbar-color:rgba(255, 255, 255, 0.55);--bs-navbar-hover-color:rgba(255, 255, 255, 0.75);--bs-navbar-disabled-color:rgba(255, 255, 255, 0.25);--bs-navbar-active-color:#fff;--bs-navbar-brand-color:#fff;--bs-navbar-brand-hover-color:#fff;--bs-navbar-toggler-border-color:rgba(255, 255, 255, 0.1);--bs-navbar-toggler-icon-bg:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%28255, 255, 255, 0.55%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e")}[data-bs-theme=dark] .navbar{--bs-navbar-toggler-icon-bg:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%28255, 255, 255, 0.55%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e")}.card{--bs-card-spacer-y:1rem;--bs-card-spacer-x:1rem;--bs-card-title-spacer-y:0.5rem;--bs-card-title-color: ;--bs-card-subtitle-color: ;--bs-card-border-width:var(--bs-border-width);--bs-card-border-color:var(--bs-border-color-translucent);--bs-card-border-radius:var(--bs-border-radius);--bs-card-box-shadow: ;--bs-card-inner-border-radius:calc(var(--bs-border-radius) - (var(--bs-border-width)));--bs-card-cap-padding-y:0.5rem;--bs-card-cap-padding-x:1rem;--bs-card-cap-bg:rgba(var(--bs-body-color-rgb), 0.03);--bs-card-cap-color: ;--bs-card-height: ;--bs-card-color: ;--bs-card-bg:var(--bs-body-bg);--bs-card-img-overlay-padding:1rem;--bs-card-group-margin:0.75rem;position:relative;display:flex;flex-direction:column;min-width:0;height:var(--bs-card-height);word-wrap:break-word;background-color:var(--bs-card-bg);background-clip:border-box;border:var(--bs-card-border-width) solid var(--bs-card-border-color);border-radius:var(--bs-card-border-radius)}.card>hr{margin-right:0;margin-left:0}.card>.list-group{border-top:inherit;border-bottom:inherit}.card>.list-group:first-child{border-top-width:0;border-top-left-radius:var(--bs-card-inner-border-radius);border-top-right-radius:var(--bs-card-inner-border-radius)}.card>.list-group:last-child{border-bottom-width:0;border-bottom-right-radius:var(--bs-card-inner-border-radius);border-bottom-left-radius:var(--bs-card-inner-border-radius)}.card>.card-header+.list-group,.card>.list-group+.card-footer{border-top:0}.card-body{flex:1 1 auto;padding:var(--bs-card-spacer-y) var(--bs-card-spacer-x);color:var(--bs-card-color)}.card-title{margin-bottom:var(--bs-card-title-spacer-y);color:var(--bs-card-title-color)}.card-subtitle{margin-top:calc(-.5 * var(--bs-card-title-spacer-y));margin-bottom:0;color:var(--bs-card-subtitle-color)}.card-text:last-child{margin-bottom:0}.card-link+.card-link{margin-left:var(--bs-card-spacer-x)}.card-header{padding:var(--bs-card-cap-padding-y) var(--bs-card-cap-padding-x);margin-bottom:0;color:var(--bs-card-cap-color);background-color:var(--bs-card-cap-bg);border-bottom:var(--bs-card-border-width) solid var(--bs-card-border-color)}.card-header:first-child{border-radius:var(--bs-card-inner-border-radius) var(--bs-card-inner-border-radius) 0 0}.card-footer{padding:var(--bs-card-cap-padding-y) var(--bs-card-cap-padding-x);color:var(--bs-card-cap-color);background-color:var(--bs-card-cap-bg);border-top:var(--bs-card-border-width) solid var(--bs-card-border-color)}.card-footer:last-child{border-radius:0 0 var(--bs-card-inner-border-radius) var(--bs-card-inner-border-radius)}.card-header-tabs{margin-right:calc(-.5 * var(--bs-card-cap-padding-x));margin-bottom:calc(-1 * var(--bs-card-cap-padding-y));margin-left:calc(-.5 * var(--bs-card-cap-padding-x));border-bottom:0}.card-header-tabs .nav-link.active{background-color:var(--bs-card-bg);border-bottom-color:var(--bs-card-bg)}.card-header-pills{margin-right:calc(-.5 * var(--bs-card-cap-padding-x));margin-left:calc(-.5 * var(--bs-card-cap-padding-x))}.card-img-overlay{position:absolute;top:0;right:0;bottom:0;left:0;padding:var(--bs-card-img-overlay-padding);border-radius:var(--bs-card-inner-border-radius)}.card-img,.card-img-bottom,.card-img-top{width:100%}.card-img,.card-img-top{border-top-left-radius:var(--bs-card-inner-border-radius);border-top-right-radius:var(--bs-card-inner-border-radius)}.card-img,.card-img-bottom{border-bottom-right-radius:var(--bs-card-inner-border-radius);border-bottom-left-radius:var(--bs-card-inner-border-radius)}.card-group>.card{margin-bottom:var(--bs-card-group-margin)}@media (min-width:576px){.card-group{display:flex;flex-flow:row wrap}.card-group>.card{flex:1 0 0%;margin-bottom:0}.card-group>.card+.card{margin-left:0;border-left:0}.card-group>.card:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}.card-group>.card:not(:last-child) .card-header,.card-group>.card:not(:last-child) .card-img-top{border-top-right-radius:0}.card-group>.card:not(:last-child) .card-footer,.card-group>.card:not(:last-child) .card-img-bottom{border-bottom-right-radius:0}.card-group>.card:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.card-group>.card:not(:first-child) .card-header,.card-group>.card:not(:first-child) .card-img-top{border-top-left-radius:0}.card-group>.card:not(:first-child) .card-footer,.card-group>.card:not(:first-child) .card-img-bottom{border-bottom-left-radius:0}}.accordion{--bs-accordion-color:var(--bs-body-color);--bs-accordion-bg:var(--bs-body-bg);--bs-accordion-transition:color 0.15s ease-in-out,background-color 0.15s ease-in-out,border-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out,border-radius 0.15s ease;--bs-accordion-border-color:var(--bs-border-color);--bs-accordion-border-width:var(--bs-border-width);--bs-accordion-border-radius:var(--bs-border-radius);--bs-accordion-inner-border-radius:calc(var(--bs-border-radius) - (var(--bs-border-width)));--bs-accordion-btn-padding-x:1.25rem;--bs-accordion-btn-padding-y:1rem;--bs-accordion-btn-color:var(--bs-body-color);--bs-accordion-btn-bg:var(--bs-accordion-bg);--bs-accordion-btn-icon:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23212529'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e");--bs-accordion-btn-icon-width:1.25rem;--bs-accordion-btn-icon-transform:rotate(-180deg);--bs-accordion-btn-icon-transition:transform 0.2s ease-in-out;--bs-accordion-btn-active-icon:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%230a58ca'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e");--bs-accordion-btn-focus-border-color:#86b7fe;--bs-accordion-btn-focus-box-shadow:0 0 0 0.25rem rgba(13, 110, 253, 0.25);--bs-accordion-body-padding-x:1.25rem;--bs-accordion-body-padding-y:1rem;--bs-accordion-active-color:var(--bs-primary-text);--bs-accordion-active-bg:var(--bs-primary-bg-subtle)}.accordion-button{position:relative;display:flex;align-items:center;width:100%;padding:var(--bs-accordion-btn-padding-y) var(--bs-accordion-btn-padding-x);font-size:1rem;color:var(--bs-accordion-btn-color);text-align:left;background-color:var(--bs-accordion-btn-bg);border:0;border-radius:0;overflow-anchor:none;transition:var(--bs-accordion-transition)}@media (prefers-reduced-motion:reduce){.accordion-button{transition:none}}.accordion-button:not(.collapsed){color:var(--bs-accordion-active-color);background-color:var(--bs-accordion-active-bg);box-shadow:inset 0 calc(-1 * var(--bs-accordion-border-width)) 0 var(--bs-accordion-border-color)}.accordion-button:not(.collapsed)::after{background-image:var(--bs-accordion-btn-active-icon);transform:var(--bs-accordion-btn-icon-transform)}.accordion-button::after{flex-shrink:0;width:var(--bs-accordion-btn-icon-width);height:var(--bs-accordion-btn-icon-width);margin-left:auto;content:"";background-image:var(--bs-accordion-btn-icon);background-repeat:no-repeat;background-size:var(--bs-accordion-btn-icon-width);transition:var(--bs-accordion-btn-icon-transition)}@media (prefers-reduced-motion:reduce){.accordion-button::after{transition:none}}.accordion-button:hover{z-index:2}.accordion-button:focus{z-index:3;border-color:var(--bs-accordion-btn-focus-border-color);outline:0;box-shadow:var(--bs-accordion-btn-focus-box-shadow)}.accordion-header{margin-bottom:0}.accordion-item{color:var(--bs-accordion-color);background-color:var(--bs-accordion-bg);border:var(--bs-accordion-border-width) solid var(--bs-accordion-border-color)}.accordion-item:first-of-type{border-top-left-radius:var(--bs-accordion-border-radius);border-top-right-radius:var(--bs-accordion-border-radius)}.accordion-item:first-of-type .accordion-button{border-top-left-radius:var(--bs-accordion-inner-border-radius);border-top-right-radius:var(--bs-accordion-inner-border-radius)}.accordion-item:not(:first-of-type){border-top:0}.accordion-item:last-of-type{border-bottom-right-radius:var(--bs-accordion-border-radius);border-bottom-left-radius:var(--bs-accordion-border-radius)}.accordion-item:last-of-type .accordion-button.collapsed{border-bottom-right-radius:var(--bs-accordion-inner-border-radius);border-bottom-left-radius:var(--bs-accordion-inner-border-radius)}.accordion-item:last-of-type .accordion-collapse{border-bottom-right-radius:var(--bs-accordion-border-radius);border-bottom-left-radius:var(--bs-accordion-border-radius)}.accordion-body{padding:var(--bs-accordion-body-padding-y) var(--bs-accordion-body-padding-x)}.accordion-flush .accordion-collapse{border-width:0}.accordion-flush .accordion-item{border-right:0;border-left:0;border-radius:0}.accordion-flush .accordion-item:first-child{border-top:0}.accordion-flush .accordion-item:last-child{border-bottom:0}.accordion-flush .accordion-item .accordion-button,.accordion-flush .accordion-item .accordion-button.collapsed{border-radius:0}[data-bs-theme=dark] .accordion-button::after{--bs-accordion-btn-icon:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%236ea8fe'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e");--bs-accordion-btn-active-icon:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%236ea8fe'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e")}.breadcrumb{--bs-breadcrumb-padding-x:0;--bs-breadcrumb-padding-y:0;--bs-breadcrumb-margin-bottom:1rem;--bs-breadcrumb-bg: ;--bs-breadcrumb-border-radius: ;--bs-breadcrumb-divider-color:var(--bs-secondary-color);--bs-breadcrumb-item-padding-x:0.5rem;--bs-breadcrumb-item-active-color:var(--bs-secondary-color);display:flex;flex-wrap:wrap;padding:var(--bs-breadcrumb-padding-y) var(--bs-breadcrumb-padding-x);margin-bottom:var(--bs-breadcrumb-margin-bottom);font-size:var(--bs-breadcrumb-font-size);list-style:none;background-color:var(--bs-breadcrumb-bg);border-radius:var(--bs-breadcrumb-border-radius)}.breadcrumb-item+.breadcrumb-item{padding-left:var(--bs-breadcrumb-item-padding-x)}.breadcrumb-item+.breadcrumb-item::before{float:left;padding-right:var(--bs-breadcrumb-item-padding-x);color:var(--bs-breadcrumb-divider-color);content:var(--bs-breadcrumb-divider, "/")}.breadcrumb-item.active{color:var(--bs-breadcrumb-item-active-color)}.pagination{--bs-pagination-padding-x:0.75rem;--bs-pagination-padding-y:0.375rem;--bs-pagination-font-size:1rem;--bs-pagination-color:var(--bs-link-color);--bs-pagination-bg:var(--bs-body-bg);--bs-pagination-border-width:var(--bs-border-width);--bs-pagination-border-color:var(--bs-border-color);--bs-pagination-border-radius:var(--bs-border-radius);--bs-pagination-hover-color:var(--bs-link-hover-color);--bs-pagination-hover-bg:var(--bs-tertiary-bg);--bs-pagination-hover-border-color:var(--bs-border-color);--bs-pagination-focus-color:var(--bs-link-hover-color);--bs-pagination-focus-bg:var(--bs-secondary-bg);--bs-pagination-focus-box-shadow:0 0 0 0.25rem rgba(13, 110, 253, 0.25);--bs-pagination-active-color:#fff;--bs-pagination-active-bg:#0d6efd;--bs-pagination-active-border-color:#0d6efd;--bs-pagination-disabled-color:var(--bs-secondary-color);--bs-pagination-disabled-bg:var(--bs-secondary-bg);--bs-pagination-disabled-border-color:var(--bs-border-color);display:flex;padding-left:0;list-style:none}.page-link{position:relative;display:block;padding:var(--bs-pagination-padding-y) var(--bs-pagination-padding-x);font-size:var(--bs-pagination-font-size);color:var(--bs-pagination-color);text-decoration:none;background-color:var(--bs-pagination-bg);border:var(--bs-pagination-border-width) solid var(--bs-pagination-border-color);transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.page-link{transition:none}}.page-link:hover{z-index:2;color:var(--bs-pagination-hover-color);background-color:var(--bs-pagination-hover-bg);border-color:var(--bs-pagination-hover-border-color)}.page-link:focus{z-index:3;color:var(--bs-pagination-focus-color);background-color:var(--bs-pagination-focus-bg);outline:0;box-shadow:var(--bs-pagination-focus-box-shadow)}.active>.page-link,.page-link.active{z-index:3;color:var(--bs-pagination-active-color);background-color:var(--bs-pagination-active-bg);border-color:var(--bs-pagination-active-border-color)}.disabled>.page-link,.page-link.disabled{color:var(--bs-pagination-disabled-color);pointer-events:none;background-color:var(--bs-pagination-disabled-bg);border-color:var(--bs-pagination-disabled-border-color)}.page-item:not(:first-child) .page-link{margin-left:calc(var(--bs-border-width) * -1)}.page-item:first-child .page-link{border-top-left-radius:var(--bs-pagination-border-radius);border-bottom-left-radius:var(--bs-pagination-border-radius)}.page-item:last-child .page-link{border-top-right-radius:var(--bs-pagination-border-radius);border-bottom-right-radius:var(--bs-pagination-border-radius)}.pagination-lg{--bs-pagination-padding-x:1.5rem;--bs-pagination-padding-y:0.75rem;--bs-pagination-font-size:1.25rem;--bs-pagination-border-radius:0.5rem}.pagination-sm{--bs-pagination-padding-x:0.5rem;--bs-pagination-padding-y:0.25rem;--bs-pagination-font-size:0.875rem;--bs-pagination-border-radius:0.25rem}.badge{--bs-badge-padding-x:0.65em;--bs-badge-padding-y:0.35em;--bs-badge-font-size:0.75em;--bs-badge-font-weight:700;--bs-badge-color:#fff;--bs-badge-border-radius:0.375rem;display:inline-block;padding:var(--bs-badge-padding-y) var(--bs-badge-padding-x);font-size:var(--bs-badge-font-size);font-weight:var(--bs-badge-font-weight);line-height:1;color:var(--bs-badge-color);text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:var(--bs-badge-border-radius)}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}.alert{--bs-alert-bg:transparent;--bs-alert-padding-x:1rem;--bs-alert-padding-y:1rem;--bs-alert-margin-bottom:1rem;--bs-alert-color:inherit;--bs-alert-border-color:transparent;--bs-alert-border:var(--bs-border-width) solid var(--bs-alert-border-color);--bs-alert-border-radius:0.375rem;--bs-alert-link-color:inherit;position:relative;padding:var(--bs-alert-padding-y) var(--bs-alert-padding-x);margin-bottom:var(--bs-alert-margin-bottom);color:var(--bs-alert-color);background-color:var(--bs-alert-bg);border:var(--bs-alert-border);border-radius:var(--bs-alert-border-radius)}.alert-heading{color:inherit}.alert-link{font-weight:700;color:var(--bs-alert-link-color)}.alert-dismissible{padding-right:3rem}.alert-dismissible .btn-close{position:absolute;top:0;right:0;z-index:2;padding:1.25rem 1rem}.alert-primary{--bs-alert-color:var(--bs-primary-text);--bs-alert-bg:var(--bs-primary-bg-subtle);--bs-alert-border-color:var(--bs-primary-border-subtle);--bs-alert-link-color:var(--bs-primary-text)}.alert-secondary{--bs-alert-color:var(--bs-secondary-text);--bs-alert-bg:var(--bs-secondary-bg-subtle);--bs-alert-border-color:var(--bs-secondary-border-subtle);--bs-alert-link-color:var(--bs-secondary-text)}.alert-success{--bs-alert-color:var(--bs-success-text);--bs-alert-bg:var(--bs-success-bg-subtle);--bs-alert-border-color:var(--bs-success-border-subtle);--bs-alert-link-color:var(--bs-success-text)}.alert-info{--bs-alert-color:var(--bs-info-text);--bs-alert-bg:var(--bs-info-bg-subtle);--bs-alert-border-color:var(--bs-info-border-subtle);--bs-alert-link-color:var(--bs-info-text)}.alert-warning{--bs-alert-color:var(--bs-warning-text);--bs-alert-bg:var(--bs-warning-bg-subtle);--bs-alert-border-color:var(--bs-warning-border-subtle);--bs-alert-link-color:var(--bs-warning-text)}.alert-danger{--bs-alert-color:var(--bs-danger-text);--bs-alert-bg:var(--bs-danger-bg-subtle);--bs-alert-border-color:var(--bs-danger-border-subtle);--bs-alert-link-color:var(--bs-danger-text)}.alert-light{--bs-alert-color:var(--bs-light-text);--bs-alert-bg:var(--bs-light-bg-subtle);--bs-alert-border-color:var(--bs-light-border-subtle);--bs-alert-link-color:var(--bs-light-text)}.alert-dark{--bs-alert-color:var(--bs-dark-text);--bs-alert-bg:var(--bs-dark-bg-subtle);--bs-alert-border-color:var(--bs-dark-border-subtle);--bs-alert-link-color:var(--bs-dark-text)}@keyframes progress-bar-stripes{0%{background-position-x:1rem}}.progress,.progress-stacked{--bs-progress-height:1rem;--bs-progress-font-size:0.75rem;--bs-progress-bg:var(--bs-secondary-bg);--bs-progress-border-radius:var(--bs-border-radius);--bs-progress-box-shadow:var(--bs-box-shadow-inset);--bs-progress-bar-color:#fff;--bs-progress-bar-bg:#0d6efd;--bs-progress-bar-transition:width 0.6s ease;display:flex;height:var(--bs-progress-height);overflow:hidden;font-size:var(--bs-progress-font-size);background-color:var(--bs-progress-bg);border-radius:var(--bs-progress-border-radius)}.progress-bar{display:flex;flex-direction:column;justify-content:center;overflow:hidden;color:var(--bs-progress-bar-color);text-align:center;white-space:nowrap;background-color:var(--bs-progress-bar-bg);transition:var(--bs-progress-bar-transition)}@media (prefers-reduced-motion:reduce){.progress-bar{transition:none}}.progress-bar-striped{background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-size:var(--bs-progress-height) var(--bs-progress-height)}.progress-stacked>.progress{overflow:visible}.progress-stacked>.progress>.progress-bar{width:100%}.progress-bar-animated{animation:1s linear infinite progress-bar-stripes}@media (prefers-reduced-motion:reduce){.progress-bar-animated{animation:none}}.list-group{--bs-list-group-color:var(--bs-body-color);--bs-list-group-bg:var(--bs-body-bg);--bs-list-group-border-color:var(--bs-border-color);--bs-list-group-border-width:var(--bs-border-width);--bs-list-group-border-radius:var(--bs-border-radius);--bs-list-group-item-padding-x:1rem;--bs-list-group-item-padding-y:0.5rem;--bs-list-group-action-color:var(--bs-secondary-color);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-tertiary-bg);--bs-list-group-action-active-color:var(--bs-body-color);--bs-list-group-action-active-bg:var(--bs-secondary-bg);--bs-list-group-disabled-color:var(--bs-secondary-color);--bs-list-group-disabled-bg:var(--bs-body-bg);--bs-list-group-active-color:#fff;--bs-list-group-active-bg:#0d6efd;--bs-list-group-active-border-color:#0d6efd;display:flex;flex-direction:column;padding-left:0;margin-bottom:0;border-radius:var(--bs-list-group-border-radius)}.list-group-numbered{list-style-type:none;counter-reset:section}.list-group-numbered>.list-group-item::before{content:counters(section, ".") ". ";counter-increment:section}.list-group-item-action{width:100%;color:var(--bs-list-group-action-color);text-align:inherit}.list-group-item-action:focus,.list-group-item-action:hover{z-index:1;color:var(--bs-list-group-action-hover-color);text-decoration:none;background-color:var(--bs-list-group-action-hover-bg)}.list-group-item-action:active{color:var(--bs-list-group-action-active-color);background-color:var(--bs-list-group-action-active-bg)}.list-group-item{position:relative;display:block;padding:var(--bs-list-group-item-padding-y) var(--bs-list-group-item-padding-x);color:var(--bs-list-group-color);text-decoration:none;background-color:var(--bs-list-group-bg);border:var(--bs-list-group-border-width) solid var(--bs-list-group-border-color)}.list-group-item:first-child{border-top-left-radius:inherit;border-top-right-radius:inherit}.list-group-item:last-child{border-bottom-right-radius:inherit;border-bottom-left-radius:inherit}.list-group-item.disabled,.list-group-item:disabled{color:var(--bs-list-group-disabled-color);pointer-events:none;background-color:var(--bs-list-group-disabled-bg)}.list-group-item.active{z-index:2;color:var(--bs-list-group-active-color);background-color:var(--bs-list-group-active-bg);border-color:var(--bs-list-group-active-border-color)}.list-group-item+.list-group-item{border-top-width:0}.list-group-item+.list-group-item.active{margin-top:calc(-1 * var(--bs-list-group-border-width));border-top-width:var(--bs-list-group-border-width)}.list-group-horizontal{flex-direction:row}.list-group-horizontal>.list-group-item:first-child:not(:last-child){border-bottom-left-radius:var(--bs-list-group-border-radius);border-top-right-radius:0}.list-group-horizontal>.list-group-item:last-child:not(:first-child){border-top-right-radius:var(--bs-list-group-border-radius);border-bottom-left-radius:0}.list-group-horizontal>.list-group-item.active{margin-top:0}.list-group-horizontal>.list-group-item+.list-group-item{border-top-width:var(--bs-list-group-border-width);border-left-width:0}.list-group-horizontal>.list-group-item+.list-group-item.active{margin-left:calc(-1 * var(--bs-list-group-border-width));border-left-width:var(--bs-list-group-border-width)}@media (min-width:576px){.list-group-horizontal-sm{flex-direction:row}.list-group-horizontal-sm>.list-group-item:first-child:not(:last-child){border-bottom-left-radius:var(--bs-list-group-border-radius);border-top-right-radius:0}.list-group-horizontal-sm>.list-group-item:last-child:not(:first-child){border-top-right-radius:var(--bs-list-group-border-radius);border-bottom-left-radius:0}.list-group-horizontal-sm>.list-group-item.active{margin-top:0}.list-group-horizontal-sm>.list-group-item+.list-group-item{border-top-width:var(--bs-list-group-border-width);border-left-width:0}.list-group-horizontal-sm>.list-group-item+.list-group-item.active{margin-left:calc(-1 * var(--bs-list-group-border-width));border-left-width:var(--bs-list-group-border-width)}}@media (min-width:768px){.list-group-horizontal-md{flex-direction:row}.list-group-horizontal-md>.list-group-item:first-child:not(:last-child){border-bottom-left-radius:var(--bs-list-group-border-radius);border-top-right-radius:0}.list-group-horizontal-md>.list-group-item:last-child:not(:first-child){border-top-right-radius:var(--bs-list-group-border-radius);border-bottom-left-radius:0}.list-group-horizontal-md>.list-group-item.active{margin-top:0}.list-group-horizontal-md>.list-group-item+.list-group-item{border-top-width:var(--bs-list-group-border-width);border-left-width:0}.list-group-horizontal-md>.list-group-item+.list-group-item.active{margin-left:calc(-1 * var(--bs-list-group-border-width));border-left-width:var(--bs-list-group-border-width)}}@media (min-width:992px){.list-group-horizontal-lg{flex-direction:row}.list-group-horizontal-lg>.list-group-item:first-child:not(:last-child){border-bottom-left-radius:var(--bs-list-group-border-radius);border-top-right-radius:0}.list-group-horizontal-lg>.list-group-item:last-child:not(:first-child){border-top-right-radius:var(--bs-list-group-border-radius);border-bottom-left-radius:0}.list-group-horizontal-lg>.list-group-item.active{margin-top:0}.list-group-horizontal-lg>.list-group-item+.list-group-item{border-top-width:var(--bs-list-group-border-width);border-left-width:0}.list-group-horizontal-lg>.list-group-item+.list-group-item.active{margin-left:calc(-1 * var(--bs-list-group-border-width));border-left-width:var(--bs-list-group-border-width)}}@media (min-width:1200px){.list-group-horizontal-xl{flex-direction:row}.list-group-horizontal-xl>.list-group-item:first-child:not(:last-child){border-bottom-left-radius:var(--bs-list-group-border-radius);border-top-right-radius:0}.list-group-horizontal-xl>.list-group-item:last-child:not(:first-child){border-top-right-radius:var(--bs-list-group-border-radius);border-bottom-left-radius:0}.list-group-horizontal-xl>.list-group-item.active{margin-top:0}.list-group-horizontal-xl>.list-group-item+.list-group-item{border-top-width:var(--bs-list-group-border-width);border-left-width:0}.list-group-horizontal-xl>.list-group-item+.list-group-item.active{margin-left:calc(-1 * var(--bs-list-group-border-width));border-left-width:var(--bs-list-group-border-width)}}@media (min-width:1400px){.list-group-horizontal-xxl{flex-direction:row}.list-group-horizontal-xxl>.list-group-item:first-child:not(:last-child){border-bottom-left-radius:var(--bs-list-group-border-radius);border-top-right-radius:0}.list-group-horizontal-xxl>.list-group-item:last-child:not(:first-child){border-top-right-radius:var(--bs-list-group-border-radius);border-bottom-left-radius:0}.list-group-horizontal-xxl>.list-group-item.active{margin-top:0}.list-group-horizontal-xxl>.list-group-item+.list-group-item{border-top-width:var(--bs-list-group-border-width);border-left-width:0}.list-group-horizontal-xxl>.list-group-item+.list-group-item.active{margin-left:calc(-1 * var(--bs-list-group-border-width));border-left-width:var(--bs-list-group-border-width)}}.list-group-flush{border-radius:0}.list-group-flush>.list-group-item{border-width:0 0 var(--bs-list-group-border-width)}.list-group-flush>.list-group-item:last-child{border-bottom-width:0}.list-group-item-primary{--bs-list-group-color:var(--bs-primary-text);--bs-list-group-bg:var(--bs-primary-bg-subtle);--bs-list-group-border-color:var(--bs-primary-border-subtle)}.list-group-item-primary.list-group-item-action:focus,.list-group-item-primary.list-group-item-action:hover{--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-primary-border-subtle)}.list-group-item-primary.list-group-item-action:active{--bs-list-group-active-color:var(--bs-emphasis-color);--bs-list-group-active-bg:var(--bs-primary-text);--bs-list-group-active-border-color:var(--bs-primary-text)}.list-group-item-secondary{--bs-list-group-color:var(--bs-secondary-text);--bs-list-group-bg:var(--bs-secondary-bg-subtle);--bs-list-group-border-color:var(--bs-secondary-border-subtle)}.list-group-item-secondary.list-group-item-action:focus,.list-group-item-secondary.list-group-item-action:hover{--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-secondary-border-subtle)}.list-group-item-secondary.list-group-item-action:active{--bs-list-group-active-color:var(--bs-emphasis-color);--bs-list-group-active-bg:var(--bs-secondary-text);--bs-list-group-active-border-color:var(--bs-secondary-text)}.list-group-item-success{--bs-list-group-color:var(--bs-success-text);--bs-list-group-bg:var(--bs-success-bg-subtle);--bs-list-group-border-color:var(--bs-success-border-subtle)}.list-group-item-success.list-group-item-action:focus,.list-group-item-success.list-group-item-action:hover{--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-success-border-subtle)}.list-group-item-success.list-group-item-action:active{--bs-list-group-active-color:var(--bs-emphasis-color);--bs-list-group-active-bg:var(--bs-success-text);--bs-list-group-active-border-color:var(--bs-success-text)}.list-group-item-info{--bs-list-group-color:var(--bs-info-text);--bs-list-group-bg:var(--bs-info-bg-subtle);--bs-list-group-border-color:var(--bs-info-border-subtle)}.list-group-item-info.list-group-item-action:focus,.list-group-item-info.list-group-item-action:hover{--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-info-border-subtle)}.list-group-item-info.list-group-item-action:active{--bs-list-group-active-color:var(--bs-emphasis-color);--bs-list-group-active-bg:var(--bs-info-text);--bs-list-group-active-border-color:var(--bs-info-text)}.list-group-item-warning{--bs-list-group-color:var(--bs-warning-text);--bs-list-group-bg:var(--bs-warning-bg-subtle);--bs-list-group-border-color:var(--bs-warning-border-subtle)}.list-group-item-warning.list-group-item-action:focus,.list-group-item-warning.list-group-item-action:hover{--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-warning-border-subtle)}.list-group-item-warning.list-group-item-action:active{--bs-list-group-active-color:var(--bs-emphasis-color);--bs-list-group-active-bg:var(--bs-warning-text);--bs-list-group-active-border-color:var(--bs-warning-text)}.list-group-item-danger{--bs-list-group-color:var(--bs-danger-text);--bs-list-group-bg:var(--bs-danger-bg-subtle);--bs-list-group-border-color:var(--bs-danger-border-subtle)}.list-group-item-danger.list-group-item-action:focus,.list-group-item-danger.list-group-item-action:hover{--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-danger-border-subtle)}.list-group-item-danger.list-group-item-action:active{--bs-list-group-active-color:var(--bs-emphasis-color);--bs-list-group-active-bg:var(--bs-danger-text);--bs-list-group-active-border-color:var(--bs-danger-text)}.list-group-item-light{--bs-list-group-color:var(--bs-light-text);--bs-list-group-bg:var(--bs-light-bg-subtle);--bs-list-group-border-color:var(--bs-light-border-subtle)}.list-group-item-light.list-group-item-action:focus,.list-group-item-light.list-group-item-action:hover{--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-light-border-subtle)}.list-group-item-light.list-group-item-action:active{--bs-list-group-active-color:var(--bs-emphasis-color);--bs-list-group-active-bg:var(--bs-light-text);--bs-list-group-active-border-color:var(--bs-light-text)}.list-group-item-dark{--bs-list-group-color:var(--bs-dark-text);--bs-list-group-bg:var(--bs-dark-bg-subtle);--bs-list-group-border-color:var(--bs-dark-border-subtle)}.list-group-item-dark.list-group-item-action:focus,.list-group-item-dark.list-group-item-action:hover{--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-dark-border-subtle)}.list-group-item-dark.list-group-item-action:active{--bs-list-group-active-color:var(--bs-emphasis-color);--bs-list-group-active-bg:var(--bs-dark-text);--bs-list-group-active-border-color:var(--bs-dark-text)}.btn-close{--bs-btn-close-color:#000;--bs-btn-close-bg:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23000'%3e%3cpath d='M.293.293a1 1 0 0 1 1.414 0L8 6.586 14.293.293a1 1 0 1 1 1.414 1.414L9.414 8l6.293 6.293a1 1 0 0 1-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 0 1-1.414-1.414L6.586 8 .293 1.707a1 1 0 0 1 0-1.414z'/%3e%3c/svg%3e");--bs-btn-close-opacity:0.5;--bs-btn-close-hover-opacity:0.75;--bs-btn-close-focus-shadow:0 0 0 0.25rem rgba(13, 110, 253, 0.25);--bs-btn-close-focus-opacity:1;--bs-btn-close-disabled-opacity:0.25;--bs-btn-close-white-filter:invert(1) grayscale(100%) brightness(200%);box-sizing:content-box;width:1em;height:1em;padding:.25em .25em;color:var(--bs-btn-close-color);background:transparent var(--bs-btn-close-bg) center/1em auto no-repeat;border:0;border-radius:.375rem;opacity:var(--bs-btn-close-opacity)}.btn-close:hover{color:var(--bs-btn-close-color);text-decoration:none;opacity:var(--bs-btn-close-hover-opacity)}.btn-close:focus{outline:0;box-shadow:var(--bs-btn-close-focus-shadow);opacity:var(--bs-btn-close-focus-opacity)}.btn-close.disabled,.btn-close:disabled{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;opacity:var(--bs-btn-close-disabled-opacity)}.btn-close-white{filter:var(--bs-btn-close-white-filter)}[data-bs-theme=dark] .btn-close{filter:var(--bs-btn-close-white-filter)}.toast{--bs-toast-zindex:1090;--bs-toast-padding-x:0.75rem;--bs-toast-padding-y:0.5rem;--bs-toast-spacing:1.5rem;--bs-toast-max-width:350px;--bs-toast-font-size:0.875rem;--bs-toast-color: ;--bs-toast-bg:rgba(var(--bs-body-bg-rgb), 0.85);--bs-toast-border-width:var(--bs-border-width);--bs-toast-border-color:var(--bs-border-color-translucent);--bs-toast-border-radius:var(--bs-border-radius);--bs-toast-box-shadow:var(--bs-box-shadow);--bs-toast-header-color:var(--bs-secondary-color);--bs-toast-header-bg:rgba(var(--bs-body-bg-rgb), 0.85);--bs-toast-header-border-color:var(--bs-border-color-translucent);width:var(--bs-toast-max-width);max-width:100%;font-size:var(--bs-toast-font-size);color:var(--bs-toast-color);pointer-events:auto;background-color:var(--bs-toast-bg);background-clip:padding-box;border:var(--bs-toast-border-width) solid var(--bs-toast-border-color);box-shadow:var(--bs-toast-box-shadow);border-radius:var(--bs-toast-border-radius)}.toast.showing{opacity:0}.toast:not(.show){display:none}.toast-container{--bs-toast-zindex:1090;position:absolute;z-index:var(--bs-toast-zindex);width:-webkit-max-content;width:-moz-max-content;width:max-content;max-width:100%;pointer-events:none}.toast-container>:not(:last-child){margin-bottom:var(--bs-toast-spacing)}.toast-header{display:flex;align-items:center;padding:var(--bs-toast-padding-y) var(--bs-toast-padding-x);color:var(--bs-toast-header-color);background-color:var(--bs-toast-header-bg);background-clip:padding-box;border-bottom:var(--bs-toast-border-width) solid var(--bs-toast-header-border-color);border-top-left-radius:calc(var(--bs-toast-border-radius) - var(--bs-toast-border-width));border-top-right-radius:calc(var(--bs-toast-border-radius) - var(--bs-toast-border-width))}.toast-header .btn-close{margin-right:calc(-.5 * var(--bs-toast-padding-x));margin-left:var(--bs-toast-padding-x)}.toast-body{padding:var(--bs-toast-padding-x);word-wrap:break-word}.modal{--bs-modal-zindex:1055;--bs-modal-width:500px;--bs-modal-padding:1rem;--bs-modal-margin:0.5rem;--bs-modal-color: ;--bs-modal-bg:var(--bs-body-bg);--bs-modal-border-color:var(--bs-border-color-translucent);--bs-modal-border-width:var(--bs-border-width);--bs-modal-border-radius:var(--bs-border-radius-lg);--bs-modal-box-shadow:0 0.125rem 0.25rem rgba(var(--bs-body-color-rgb), 0.075);--bs-modal-inner-border-radius:calc(var(--bs-border-radius-lg) - (var(--bs-border-width)));--bs-modal-header-padding-x:1rem;--bs-modal-header-padding-y:1rem;--bs-modal-header-padding:1rem 1rem;--bs-modal-header-border-color:var(--bs-border-color);--bs-modal-header-border-width:var(--bs-border-width);--bs-modal-title-line-height:1.5;--bs-modal-footer-gap:0.5rem;--bs-modal-footer-bg: ;--bs-modal-footer-border-color:var(--bs-border-color);--bs-modal-footer-border-width:var(--bs-border-width);position:fixed;top:0;left:0;z-index:var(--bs-modal-zindex);display:none;width:100%;height:100%;overflow-x:hidden;overflow-y:auto;outline:0}.modal-dialog{position:relative;width:auto;margin:var(--bs-modal-margin);pointer-events:none}.modal.fade .modal-dialog{transition:transform .3s ease-out;transform:translate(0,-50px)}@media (prefers-reduced-motion:reduce){.modal.fade .modal-dialog{transition:none}}.modal.show .modal-dialog{transform:none}.modal.modal-static .modal-dialog{transform:scale(1.02)}.modal-dialog-scrollable{height:calc(100% - var(--bs-modal-margin) * 2)}.modal-dialog-scrollable .modal-content{max-height:100%;overflow:hidden}.modal-dialog-scrollable .modal-body{overflow-y:auto}.modal-dialog-centered{display:flex;align-items:center;min-height:calc(100% - var(--bs-modal-margin) * 2)}.modal-content{position:relative;display:flex;flex-direction:column;width:100%;color:var(--bs-modal-color);pointer-events:auto;background-color:var(--bs-modal-bg);background-clip:padding-box;border:var(--bs-modal-border-width) solid var(--bs-modal-border-color);border-radius:var(--bs-modal-border-radius);outline:0}.modal-backdrop{--bs-backdrop-zindex:1050;--bs-backdrop-bg:#000;--bs-backdrop-opacity:0.5;position:fixed;top:0;left:0;z-index:var(--bs-backdrop-zindex);width:100vw;height:100vh;background-color:var(--bs-backdrop-bg)}.modal-backdrop.fade{opacity:0}.modal-backdrop.show{opacity:var(--bs-backdrop-opacity)}.modal-header{display:flex;flex-shrink:0;align-items:center;justify-content:space-between;padding:var(--bs-modal-header-padding);border-bottom:var(--bs-modal-header-border-width) solid var(--bs-modal-header-border-color);border-top-left-radius:var(--bs-modal-inner-border-radius);border-top-right-radius:var(--bs-modal-inner-border-radius)}.modal-header .btn-close{padding:calc(var(--bs-modal-header-padding-y) * .5) calc(var(--bs-modal-header-padding-x) * .5);margin:calc(-.5 * var(--bs-modal-header-padding-y)) calc(-.5 * var(--bs-modal-header-padding-x)) calc(-.5 * var(--bs-modal-header-padding-y)) auto}.modal-title{margin-bottom:0;line-height:var(--bs-modal-title-line-height)}.modal-body{position:relative;flex:1 1 auto;padding:var(--bs-modal-padding)}.modal-footer{display:flex;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;padding:calc(var(--bs-modal-padding) - var(--bs-modal-footer-gap) * .5);background-color:var(--bs-modal-footer-bg);border-top:var(--bs-modal-footer-border-width) solid var(--bs-modal-footer-border-color);border-bottom-right-radius:var(--bs-modal-inner-border-radius);border-bottom-left-radius:var(--bs-modal-inner-border-radius)}.modal-footer>*{margin:calc(var(--bs-modal-footer-gap) * .5)}@media (min-width:576px){.modal{--bs-modal-margin:1.75rem;--bs-modal-box-shadow:0 0.5rem 1rem rgba(var(--bs-body-color-rgb), 0.15)}.modal-dialog{max-width:var(--bs-modal-width);margin-right:auto;margin-left:auto}.modal-sm{--bs-modal-width:300px}}@media (min-width:992px){.modal-lg,.modal-xl{--bs-modal-width:800px}}@media (min-width:1200px){.modal-xl{--bs-modal-width:1140px}}.modal-fullscreen{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen .modal-footer,.modal-fullscreen .modal-header{border-radius:0}.modal-fullscreen .modal-body{overflow-y:auto}@media (max-width:575.98px){.modal-fullscreen-sm-down{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen-sm-down .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen-sm-down .modal-footer,.modal-fullscreen-sm-down .modal-header{border-radius:0}.modal-fullscreen-sm-down .modal-body{overflow-y:auto}}@media (max-width:767.98px){.modal-fullscreen-md-down{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen-md-down .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen-md-down .modal-footer,.modal-fullscreen-md-down .modal-header{border-radius:0}.modal-fullscreen-md-down .modal-body{overflow-y:auto}}@media (max-width:991.98px){.modal-fullscreen-lg-down{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen-lg-down .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen-lg-down .modal-footer,.modal-fullscreen-lg-down .modal-header{border-radius:0}.modal-fullscreen-lg-down .modal-body{overflow-y:auto}}@media (max-width:1199.98px){.modal-fullscreen-xl-down{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen-xl-down .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen-xl-down .modal-footer,.modal-fullscreen-xl-down .modal-header{border-radius:0}.modal-fullscreen-xl-down .modal-body{overflow-y:auto}}@media (max-width:1399.98px){.modal-fullscreen-xxl-down{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen-xxl-down .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen-xxl-down .modal-footer,.modal-fullscreen-xxl-down .modal-header{border-radius:0}.modal-fullscreen-xxl-down .modal-body{overflow-y:auto}}.tooltip{--bs-tooltip-zindex:1080;--bs-tooltip-max-width:200px;--bs-tooltip-padding-x:0.5rem;--bs-tooltip-padding-y:0.25rem;--bs-tooltip-margin: ;--bs-tooltip-font-size:0.875rem;--bs-tooltip-color:var(--bs-body-bg);--bs-tooltip-bg:var(--bs-emphasis-color);--bs-tooltip-border-radius:var(--bs-border-radius);--bs-tooltip-opacity:0.9;--bs-tooltip-arrow-width:0.8rem;--bs-tooltip-arrow-height:0.4rem;z-index:var(--bs-tooltip-zindex);display:block;padding:var(--bs-tooltip-arrow-height);margin:var(--bs-tooltip-margin);font-family:var(--bs-font-sans-serif);font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;white-space:normal;word-spacing:normal;line-break:auto;font-size:var(--bs-tooltip-font-size);word-wrap:break-word;opacity:0}.tooltip.show{opacity:var(--bs-tooltip-opacity)}.tooltip .tooltip-arrow{display:block;width:var(--bs-tooltip-arrow-width);height:var(--bs-tooltip-arrow-height)}.tooltip .tooltip-arrow::before{position:absolute;content:"";border-color:transparent;border-style:solid}.bs-tooltip-auto[data-popper-placement^=top] .tooltip-arrow,.bs-tooltip-top .tooltip-arrow{bottom:0}.bs-tooltip-auto[data-popper-placement^=top] .tooltip-arrow::before,.bs-tooltip-top .tooltip-arrow::before{top:-1px;border-width:var(--bs-tooltip-arrow-height) calc(var(--bs-tooltip-arrow-width) * .5) 0;border-top-color:var(--bs-tooltip-bg)}.bs-tooltip-auto[data-popper-placement^=right] .tooltip-arrow,.bs-tooltip-end .tooltip-arrow{left:0;width:var(--bs-tooltip-arrow-height);height:var(--bs-tooltip-arrow-width)}.bs-tooltip-auto[data-popper-placement^=right] .tooltip-arrow::before,.bs-tooltip-end .tooltip-arrow::before{right:-1px;border-width:calc(var(--bs-tooltip-arrow-width) * .5) var(--bs-tooltip-arrow-height) calc(var(--bs-tooltip-arrow-width) * .5) 0;border-right-color:var(--bs-tooltip-bg)}.bs-tooltip-auto[data-popper-placement^=bottom] .tooltip-arrow,.bs-tooltip-bottom .tooltip-arrow{top:0}.bs-tooltip-auto[data-popper-placement^=bottom] .tooltip-arrow::before,.bs-tooltip-bottom .tooltip-arrow::before{bottom:-1px;border-width:0 calc(var(--bs-tooltip-arrow-width) * .5) var(--bs-tooltip-arrow-height);border-bottom-color:var(--bs-tooltip-bg)}.bs-tooltip-auto[data-popper-placement^=left] .tooltip-arrow,.bs-tooltip-start .tooltip-arrow{right:0;width:var(--bs-tooltip-arrow-height);height:var(--bs-tooltip-arrow-width)}.bs-tooltip-auto[data-popper-placement^=left] .tooltip-arrow::before,.bs-tooltip-start .tooltip-arrow::before{left:-1px;border-width:calc(var(--bs-tooltip-arrow-width) * .5) 0 calc(var(--bs-tooltip-arrow-width) * .5) var(--bs-tooltip-arrow-height);border-left-color:var(--bs-tooltip-bg)}.tooltip-inner{max-width:var(--bs-tooltip-max-width);padding:var(--bs-tooltip-padding-y) var(--bs-tooltip-padding-x);color:var(--bs-tooltip-color);text-align:center;background-color:var(--bs-tooltip-bg);border-radius:var(--bs-tooltip-border-radius)}.popover{--bs-popover-zindex:1070;--bs-popover-max-width:276px;--bs-popover-font-size:0.875rem;--bs-popover-bg:var(--bs-body-bg);--bs-popover-border-width:var(--bs-border-width);--bs-popover-border-color:var(--bs-border-color-translucent);--bs-popover-border-radius:var(--bs-border-radius-lg);--bs-popover-inner-border-radius:calc(var(--bs-border-radius-lg) - var(--bs-border-width));--bs-popover-box-shadow:0 0.5rem 1rem rgba(var(--bs-body-color-rgb), 0.15);--bs-popover-header-padding-x:1rem;--bs-popover-header-padding-y:0.5rem;--bs-popover-header-font-size:1rem;--bs-popover-header-color: ;--bs-popover-header-bg:var(--bs-secondary-bg);--bs-popover-body-padding-x:1rem;--bs-popover-body-padding-y:1rem;--bs-popover-body-color:var(--bs-body-color);--bs-popover-arrow-width:1rem;--bs-popover-arrow-height:0.5rem;--bs-popover-arrow-border:var(--bs-popover-border-color);z-index:var(--bs-popover-zindex);display:block;max-width:var(--bs-popover-max-width);font-family:var(--bs-font-sans-serif);font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;white-space:normal;word-spacing:normal;line-break:auto;font-size:var(--bs-popover-font-size);word-wrap:break-word;background-color:var(--bs-popover-bg);background-clip:padding-box;border:var(--bs-popover-border-width) solid var(--bs-popover-border-color);border-radius:var(--bs-popover-border-radius)}.popover .popover-arrow{display:block;width:var(--bs-popover-arrow-width);height:var(--bs-popover-arrow-height)}.popover .popover-arrow::after,.popover .popover-arrow::before{position:absolute;display:block;content:"";border-color:transparent;border-style:solid;border-width:0}.bs-popover-auto[data-popper-placement^=top]>.popover-arrow,.bs-popover-top>.popover-arrow{bottom:calc(-1 * (var(--bs-popover-arrow-height)) - var(--bs-popover-border-width))}.bs-popover-auto[data-popper-placement^=top]>.popover-arrow::after,.bs-popover-auto[data-popper-placement^=top]>.popover-arrow::before,.bs-popover-top>.popover-arrow::after,.bs-popover-top>.popover-arrow::before{border-width:var(--bs-popover-arrow-height) calc(var(--bs-popover-arrow-width) * .5) 0}.bs-popover-auto[data-popper-placement^=top]>.popover-arrow::before,.bs-popover-top>.popover-arrow::before{bottom:0;border-top-color:var(--bs-popover-arrow-border)}.bs-popover-auto[data-popper-placement^=top]>.popover-arrow::after,.bs-popover-top>.popover-arrow::after{bottom:var(--bs-popover-border-width);border-top-color:var(--bs-popover-bg)}.bs-popover-auto[data-popper-placement^=right]>.popover-arrow,.bs-popover-end>.popover-arrow{left:calc(-1 * (var(--bs-popover-arrow-height)) - var(--bs-popover-border-width));width:var(--bs-popover-arrow-height);height:var(--bs-popover-arrow-width)}.bs-popover-auto[data-popper-placement^=right]>.popover-arrow::after,.bs-popover-auto[data-popper-placement^=right]>.popover-arrow::before,.bs-popover-end>.popover-arrow::after,.bs-popover-end>.popover-arrow::before{border-width:calc(var(--bs-popover-arrow-width) * .5) var(--bs-popover-arrow-height) calc(var(--bs-popover-arrow-width) * .5) 0}.bs-popover-auto[data-popper-placement^=right]>.popover-arrow::before,.bs-popover-end>.popover-arrow::before{left:0;border-right-color:var(--bs-popover-arrow-border)}.bs-popover-auto[data-popper-placement^=right]>.popover-arrow::after,.bs-popover-end>.popover-arrow::after{left:var(--bs-popover-border-width);border-right-color:var(--bs-popover-bg)}.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow,.bs-popover-bottom>.popover-arrow{top:calc(-1 * (var(--bs-popover-arrow-height)) - var(--bs-popover-border-width))}.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow::after,.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow::before,.bs-popover-bottom>.popover-arrow::after,.bs-popover-bottom>.popover-arrow::before{border-width:0 calc(var(--bs-popover-arrow-width) * .5) var(--bs-popover-arrow-height)}.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow::before,.bs-popover-bottom>.popover-arrow::before{top:0;border-bottom-color:var(--bs-popover-arrow-border)}.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow::after,.bs-popover-bottom>.popover-arrow::after{top:var(--bs-popover-border-width);border-bottom-color:var(--bs-popover-bg)}.bs-popover-auto[data-popper-placement^=bottom] .popover-header::before,.bs-popover-bottom .popover-header::before{position:absolute;top:0;left:50%;display:block;width:var(--bs-popover-arrow-width);margin-left:calc(-.5 * var(--bs-popover-arrow-width));content:"";border-bottom:var(--bs-popover-border-width) solid var(--bs-popover-header-bg)}.bs-popover-auto[data-popper-placement^=left]>.popover-arrow,.bs-popover-start>.popover-arrow{right:calc(-1 * (var(--bs-popover-arrow-height)) - var(--bs-popover-border-width));width:var(--bs-popover-arrow-height);height:var(--bs-popover-arrow-width)}.bs-popover-auto[data-popper-placement^=left]>.popover-arrow::after,.bs-popover-auto[data-popper-placement^=left]>.popover-arrow::before,.bs-popover-start>.popover-arrow::after,.bs-popover-start>.popover-arrow::before{border-width:calc(var(--bs-popover-arrow-width) * .5) 0 calc(var(--bs-popover-arrow-width) * .5) var(--bs-popover-arrow-height)}.bs-popover-auto[data-popper-placement^=left]>.popover-arrow::before,.bs-popover-start>.popover-arrow::before{right:0;border-left-color:var(--bs-popover-arrow-border)}.bs-popover-auto[data-popper-placement^=left]>.popover-arrow::after,.bs-popover-start>.popover-arrow::after{right:var(--bs-popover-border-width);border-left-color:var(--bs-popover-bg)}.popover-header{padding:var(--bs-popover-header-padding-y) var(--bs-popover-header-padding-x);margin-bottom:0;font-size:var(--bs-popover-header-font-size);color:var(--bs-popover-header-color);background-color:var(--bs-popover-header-bg);border-bottom:var(--bs-popover-border-width) solid var(--bs-popover-border-color);border-top-left-radius:var(--bs-popover-inner-border-radius);border-top-right-radius:var(--bs-popover-inner-border-radius)}.popover-header:empty{display:none}.popover-body{padding:var(--bs-popover-body-padding-y) var(--bs-popover-body-padding-x);color:var(--bs-popover-body-color)}.carousel{position:relative}.carousel.pointer-event{touch-action:pan-y}.carousel-inner{position:relative;width:100%;overflow:hidden}.carousel-inner::after{display:block;clear:both;content:""}.carousel-item{position:relative;display:none;float:left;width:100%;margin-right:-100%;-webkit-backface-visibility:hidden;backface-visibility:hidden;transition:transform .6s ease-in-out}@media (prefers-reduced-motion:reduce){.carousel-item{transition:none}}.carousel-item-next,.carousel-item-prev,.carousel-item.active{display:block}.active.carousel-item-end,.carousel-item-next:not(.carousel-item-start){transform:translateX(100%)}.active.carousel-item-start,.carousel-item-prev:not(.carousel-item-end){transform:translateX(-100%)}.carousel-fade .carousel-item{opacity:0;transition-property:opacity;transform:none}.carousel-fade .carousel-item-next.carousel-item-start,.carousel-fade .carousel-item-prev.carousel-item-end,.carousel-fade .carousel-item.active{z-index:1;opacity:1}.carousel-fade .active.carousel-item-end,.carousel-fade .active.carousel-item-start{z-index:0;opacity:0;transition:opacity 0s .6s}@media (prefers-reduced-motion:reduce){.carousel-fade .active.carousel-item-end,.carousel-fade .active.carousel-item-start{transition:none}}.carousel-control-next,.carousel-control-prev{position:absolute;top:0;bottom:0;z-index:1;display:flex;align-items:center;justify-content:center;width:15%;padding:0;color:#fff;text-align:center;background:0 0;border:0;opacity:.5;transition:opacity .15s ease}@media (prefers-reduced-motion:reduce){.carousel-control-next,.carousel-control-prev{transition:none}}.carousel-control-next:focus,.carousel-control-next:hover,.carousel-control-prev:focus,.carousel-control-prev:hover{color:#fff;text-decoration:none;outline:0;opacity:.9}.carousel-control-prev{left:0}.carousel-control-next{right:0}.carousel-control-next-icon,.carousel-control-prev-icon{display:inline-block;width:2rem;height:2rem;background-repeat:no-repeat;background-position:50%;background-size:100% 100%}.carousel-control-prev-icon{background-image:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23fff'%3e%3cpath d='M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z'/%3e%3c/svg%3e")}.carousel-control-next-icon{background-image:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23fff'%3e%3cpath d='M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e")}.carousel-indicators{position:absolute;right:0;bottom:0;left:0;z-index:2;display:flex;justify-content:center;padding:0;margin-right:15%;margin-bottom:1rem;margin-left:15%;list-style:none}.carousel-indicators [data-bs-target]{box-sizing:content-box;flex:0 1 auto;width:30px;height:3px;padding:0;margin-right:3px;margin-left:3px;text-indent:-999px;cursor:pointer;background-color:#fff;background-clip:padding-box;border:0;border-top:10px solid transparent;border-bottom:10px solid transparent;opacity:.5;transition:opacity .6s ease}@media (prefers-reduced-motion:reduce){.carousel-indicators [data-bs-target]{transition:none}}.carousel-indicators .active{opacity:1}.carousel-caption{position:absolute;right:15%;bottom:1.25rem;left:15%;padding-top:1.25rem;padding-bottom:1.25rem;color:#fff;text-align:center}.carousel-dark .carousel-control-next-icon,.carousel-dark .carousel-control-prev-icon{filter:invert(1) grayscale(100)}.carousel-dark .carousel-indicators [data-bs-target]{background-color:#000}.carousel-dark .carousel-caption{color:#000}[data-bs-theme=dark] .carousel .carousel-control-next-icon,[data-bs-theme=dark] .carousel .carousel-control-prev-icon{filter:invert(1) grayscale(100)}[data-bs-theme=dark] .carousel .carousel-indicators [data-bs-target]{background-color:#000}[data-bs-theme=dark] .carousel .carousel-caption{color:#000}.spinner-border,.spinner-grow{display:inline-block;width:var(--bs-spinner-width);height:var(--bs-spinner-height);vertical-align:var(--bs-spinner-vertical-align);border-radius:50%;animation:var(--bs-spinner-animation-speed) linear infinite var(--bs-spinner-animation-name)}@keyframes spinner-border{to{transform:rotate(360deg)}}.spinner-border{--bs-spinner-width:2rem;--bs-spinner-height:2rem;--bs-spinner-vertical-align:-0.125em;--bs-spinner-border-width:0.25em;--bs-spinner-animation-speed:0.75s;--bs-spinner-animation-name:spinner-border;border:var(--bs-spinner-border-width) solid currentcolor;border-right-color:transparent}.spinner-border-sm{--bs-spinner-width:1rem;--bs-spinner-height:1rem;--bs-spinner-border-width:0.2em}@keyframes spinner-grow{0%{transform:scale(0)}50%{opacity:1;transform:none}}.spinner-grow{--bs-spinner-width:2rem;--bs-spinner-height:2rem;--bs-spinner-vertical-align:-0.125em;--bs-spinner-animation-speed:0.75s;--bs-spinner-animation-name:spinner-grow;background-color:currentcolor;opacity:0}.spinner-grow-sm{--bs-spinner-width:1rem;--bs-spinner-height:1rem}@media (prefers-reduced-motion:reduce){.spinner-border,.spinner-grow{--bs-spinner-animation-speed:1.5s}}.offcanvas,.offcanvas-lg,.offcanvas-md,.offcanvas-sm,.offcanvas-xl,.offcanvas-xxl{--bs-offcanvas-zindex:1045;--bs-offcanvas-width:400px;--bs-offcanvas-height:30vh;--bs-offcanvas-padding-x:1rem;--bs-offcanvas-padding-y:1rem;--bs-offcanvas-color:var(--bs-body-color);--bs-offcanvas-bg:var(--bs-body-bg);--bs-offcanvas-border-width:var(--bs-border-width);--bs-offcanvas-border-color:var(--bs-border-color-translucent);--bs-offcanvas-box-shadow:0 0.125rem 0.25rem rgba(var(--bs-body-color-rgb), 0.075);--bs-offcanvas-transition:transform 0.3s ease-in-out;--bs-offcanvas-title-line-height:1.5}@media (max-width:575.98px){.offcanvas-sm{position:fixed;bottom:0;z-index:var(--bs-offcanvas-zindex);display:flex;flex-direction:column;max-width:100%;color:var(--bs-offcanvas-color);visibility:hidden;background-color:var(--bs-offcanvas-bg);background-clip:padding-box;outline:0;transition:var(--bs-offcanvas-transition)}}@media (max-width:575.98px) and (prefers-reduced-motion:reduce){.offcanvas-sm{transition:none}}@media (max-width:575.98px){.offcanvas-sm.offcanvas-start{top:0;left:0;width:var(--bs-offcanvas-width);border-right:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(-100%)}}@media (max-width:575.98px){.offcanvas-sm.offcanvas-end{top:0;right:0;width:var(--bs-offcanvas-width);border-left:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(100%)}}@media (max-width:575.98px){.offcanvas-sm.offcanvas-top{top:0;right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-bottom:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(-100%)}}@media (max-width:575.98px){.offcanvas-sm.offcanvas-bottom{right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-top:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(100%)}}@media (max-width:575.98px){.offcanvas-sm.show:not(.hiding),.offcanvas-sm.showing{transform:none}}@media (max-width:575.98px){.offcanvas-sm.hiding,.offcanvas-sm.show,.offcanvas-sm.showing{visibility:visible}}@media (min-width:576px){.offcanvas-sm{--bs-offcanvas-height:auto;--bs-offcanvas-border-width:0;background-color:transparent!important}.offcanvas-sm .offcanvas-header{display:none}.offcanvas-sm .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible;background-color:transparent!important}}@media (max-width:767.98px){.offcanvas-md{position:fixed;bottom:0;z-index:var(--bs-offcanvas-zindex);display:flex;flex-direction:column;max-width:100%;color:var(--bs-offcanvas-color);visibility:hidden;background-color:var(--bs-offcanvas-bg);background-clip:padding-box;outline:0;transition:var(--bs-offcanvas-transition)}}@media (max-width:767.98px) and (prefers-reduced-motion:reduce){.offcanvas-md{transition:none}}@media (max-width:767.98px){.offcanvas-md.offcanvas-start{top:0;left:0;width:var(--bs-offcanvas-width);border-right:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(-100%)}}@media (max-width:767.98px){.offcanvas-md.offcanvas-end{top:0;right:0;width:var(--bs-offcanvas-width);border-left:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(100%)}}@media (max-width:767.98px){.offcanvas-md.offcanvas-top{top:0;right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-bottom:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(-100%)}}@media (max-width:767.98px){.offcanvas-md.offcanvas-bottom{right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-top:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(100%)}}@media (max-width:767.98px){.offcanvas-md.show:not(.hiding),.offcanvas-md.showing{transform:none}}@media (max-width:767.98px){.offcanvas-md.hiding,.offcanvas-md.show,.offcanvas-md.showing{visibility:visible}}@media (min-width:768px){.offcanvas-md{--bs-offcanvas-height:auto;--bs-offcanvas-border-width:0;background-color:transparent!important}.offcanvas-md .offcanvas-header{display:none}.offcanvas-md .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible;background-color:transparent!important}}@media (max-width:991.98px){.offcanvas-lg{position:fixed;bottom:0;z-index:var(--bs-offcanvas-zindex);display:flex;flex-direction:column;max-width:100%;color:var(--bs-offcanvas-color);visibility:hidden;background-color:var(--bs-offcanvas-bg);background-clip:padding-box;outline:0;transition:var(--bs-offcanvas-transition)}}@media (max-width:991.98px) and (prefers-reduced-motion:reduce){.offcanvas-lg{transition:none}}@media (max-width:991.98px){.offcanvas-lg.offcanvas-start{top:0;left:0;width:var(--bs-offcanvas-width);border-right:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(-100%)}}@media (max-width:991.98px){.offcanvas-lg.offcanvas-end{top:0;right:0;width:var(--bs-offcanvas-width);border-left:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(100%)}}@media (max-width:991.98px){.offcanvas-lg.offcanvas-top{top:0;right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-bottom:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(-100%)}}@media (max-width:991.98px){.offcanvas-lg.offcanvas-bottom{right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-top:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(100%)}}@media (max-width:991.98px){.offcanvas-lg.show:not(.hiding),.offcanvas-lg.showing{transform:none}}@media (max-width:991.98px){.offcanvas-lg.hiding,.offcanvas-lg.show,.offcanvas-lg.showing{visibility:visible}}@media (min-width:992px){.offcanvas-lg{--bs-offcanvas-height:auto;--bs-offcanvas-border-width:0;background-color:transparent!important}.offcanvas-lg .offcanvas-header{display:none}.offcanvas-lg .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible;background-color:transparent!important}}@media (max-width:1199.98px){.offcanvas-xl{position:fixed;bottom:0;z-index:var(--bs-offcanvas-zindex);display:flex;flex-direction:column;max-width:100%;color:var(--bs-offcanvas-color);visibility:hidden;background-color:var(--bs-offcanvas-bg);background-clip:padding-box;outline:0;transition:var(--bs-offcanvas-transition)}}@media (max-width:1199.98px) and (prefers-reduced-motion:reduce){.offcanvas-xl{transition:none}}@media (max-width:1199.98px){.offcanvas-xl.offcanvas-start{top:0;left:0;width:var(--bs-offcanvas-width);border-right:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(-100%)}}@media (max-width:1199.98px){.offcanvas-xl.offcanvas-end{top:0;right:0;width:var(--bs-offcanvas-width);border-left:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(100%)}}@media (max-width:1199.98px){.offcanvas-xl.offcanvas-top{top:0;right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-bottom:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(-100%)}}@media (max-width:1199.98px){.offcanvas-xl.offcanvas-bottom{right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-top:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(100%)}}@media (max-width:1199.98px){.offcanvas-xl.show:not(.hiding),.offcanvas-xl.showing{transform:none}}@media (max-width:1199.98px){.offcanvas-xl.hiding,.offcanvas-xl.show,.offcanvas-xl.showing{visibility:visible}}@media (min-width:1200px){.offcanvas-xl{--bs-offcanvas-height:auto;--bs-offcanvas-border-width:0;background-color:transparent!important}.offcanvas-xl .offcanvas-header{display:none}.offcanvas-xl .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible;background-color:transparent!important}}@media (max-width:1399.98px){.offcanvas-xxl{position:fixed;bottom:0;z-index:var(--bs-offcanvas-zindex);display:flex;flex-direction:column;max-width:100%;color:var(--bs-offcanvas-color);visibility:hidden;background-color:var(--bs-offcanvas-bg);background-clip:padding-box;outline:0;transition:var(--bs-offcanvas-transition)}}@media (max-width:1399.98px) and (prefers-reduced-motion:reduce){.offcanvas-xxl{transition:none}}@media (max-width:1399.98px){.offcanvas-xxl.offcanvas-start{top:0;left:0;width:var(--bs-offcanvas-width);border-right:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(-100%)}}@media (max-width:1399.98px){.offcanvas-xxl.offcanvas-end{top:0;right:0;width:var(--bs-offcanvas-width);border-left:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(100%)}}@media (max-width:1399.98px){.offcanvas-xxl.offcanvas-top{top:0;right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-bottom:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(-100%)}}@media (max-width:1399.98px){.offcanvas-xxl.offcanvas-bottom{right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-top:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(100%)}}@media (max-width:1399.98px){.offcanvas-xxl.show:not(.hiding),.offcanvas-xxl.showing{transform:none}}@media (max-width:1399.98px){.offcanvas-xxl.hiding,.offcanvas-xxl.show,.offcanvas-xxl.showing{visibility:visible}}@media (min-width:1400px){.offcanvas-xxl{--bs-offcanvas-height:auto;--bs-offcanvas-border-width:0;background-color:transparent!important}.offcanvas-xxl .offcanvas-header{display:none}.offcanvas-xxl .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible;background-color:transparent!important}}.offcanvas{position:fixed;bottom:0;z-index:var(--bs-offcanvas-zindex);display:flex;flex-direction:column;max-width:100%;color:var(--bs-offcanvas-color);visibility:hidden;background-color:var(--bs-offcanvas-bg);background-clip:padding-box;outline:0;transition:var(--bs-offcanvas-transition)}@media (prefers-reduced-motion:reduce){.offcanvas{transition:none}}.offcanvas.offcanvas-start{top:0;left:0;width:var(--bs-offcanvas-width);border-right:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(-100%)}.offcanvas.offcanvas-end{top:0;right:0;width:var(--bs-offcanvas-width);border-left:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(100%)}.offcanvas.offcanvas-top{top:0;right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-bottom:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(-100%)}.offcanvas.offcanvas-bottom{right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-top:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(100%)}.offcanvas.show:not(.hiding),.offcanvas.showing{transform:none}.offcanvas.hiding,.offcanvas.show,.offcanvas.showing{visibility:visible}.offcanvas-backdrop{position:fixed;top:0;left:0;z-index:1040;width:100vw;height:100vh;background-color:#000}.offcanvas-backdrop.fade{opacity:0}.offcanvas-backdrop.show{opacity:.5}.offcanvas-header{display:flex;align-items:center;justify-content:space-between;padding:var(--bs-offcanvas-padding-y) var(--bs-offcanvas-padding-x)}.offcanvas-header .btn-close{padding:calc(var(--bs-offcanvas-padding-y) * .5) calc(var(--bs-offcanvas-padding-x) * .5);margin-top:calc(-.5 * var(--bs-offcanvas-padding-y));margin-right:calc(-.5 * var(--bs-offcanvas-padding-x));margin-bottom:calc(-.5 * var(--bs-offcanvas-padding-y))}.offcanvas-title{margin-bottom:0;line-height:var(--bs-offcanvas-title-line-height)}.offcanvas-body{flex-grow:1;padding:var(--bs-offcanvas-padding-y) var(--bs-offcanvas-padding-x);overflow-y:auto}.placeholder{display:inline-block;min-height:1em;vertical-align:middle;cursor:wait;background-color:currentcolor;opacity:.5}.placeholder.btn::before{display:inline-block;content:""}.placeholder-xs{min-height:.6em}.placeholder-sm{min-height:.8em}.placeholder-lg{min-height:1.2em}.placeholder-glow .placeholder{animation:placeholder-glow 2s ease-in-out infinite}@keyframes placeholder-glow{50%{opacity:.2}}.placeholder-wave{-webkit-mask-image:linear-gradient(130deg,#000 55%,rgba(0,0,0,0.8) 75%,#000 95%);mask-image:linear-gradient(130deg,#000 55%,rgba(0,0,0,0.8) 75%,#000 95%);-webkit-mask-size:200% 100%;mask-size:200% 100%;animation:placeholder-wave 2s linear infinite}@keyframes placeholder-wave{100%{-webkit-mask-position:-200% 0%;mask-position:-200% 0%}}.clearfix::after{display:block;clear:both;content:""}.text-bg-primary{color:#fff!important;background-color:RGBA(13,110,253,var(--bs-bg-opacity,1))!important}.text-bg-secondary{color:#fff!important;background-color:RGBA(108,117,125,var(--bs-bg-opacity,1))!important}.text-bg-success{color:#fff!important;background-color:RGBA(25,135,84,var(--bs-bg-opacity,1))!important}.text-bg-info{color:#000!important;background-color:RGBA(13,202,240,var(--bs-bg-opacity,1))!important}.text-bg-warning{color:#000!important;background-color:RGBA(255,193,7,var(--bs-bg-opacity,1))!important}.text-bg-danger{color:#fff!important;background-color:RGBA(220,53,69,var(--bs-bg-opacity,1))!important}.text-bg-light{color:#000!important;background-color:RGBA(248,249,250,var(--bs-bg-opacity,1))!important}.text-bg-dark{color:#fff!important;background-color:RGBA(33,37,41,var(--bs-bg-opacity,1))!important}.link-primary{color:#0d6efd!important}.link-primary:focus,.link-primary:hover{color:#0a58ca!important}.link-secondary{color:#6c757d!important}.link-secondary:focus,.link-secondary:hover{color:#565e64!important}.link-success{color:#198754!important}.link-success:focus,.link-success:hover{color:#146c43!important}.link-info{color:#0dcaf0!important}.link-info:focus,.link-info:hover{color:#3dd5f3!important}.link-warning{color:#ffc107!important}.link-warning:focus,.link-warning:hover{color:#ffcd39!important}.link-danger{color:#dc3545!important}.link-danger:focus,.link-danger:hover{color:#b02a37!important}.link-light{color:#f8f9fa!important}.link-light:focus,.link-light:hover{color:#f9fafb!important}.link-dark{color:#212529!important}.link-dark:focus,.link-dark:hover{color:#1a1e21!important}.ratio{position:relative;width:100%}.ratio::before{display:block;padding-top:var(--bs-aspect-ratio);content:""}.ratio>*{position:absolute;top:0;left:0;width:100%;height:100%}.ratio-1x1{--bs-aspect-ratio:100%}.ratio-4x3{--bs-aspect-ratio:75%}.ratio-16x9{--bs-aspect-ratio:56.25%}.ratio-21x9{--bs-aspect-ratio:42.8571428571%}.fixed-top{position:fixed;top:0;right:0;left:0;z-index:1030}.fixed-bottom{position:fixed;right:0;bottom:0;left:0;z-index:1030}.sticky-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}.sticky-bottom{position:-webkit-sticky;position:sticky;bottom:0;z-index:1020}@media (min-width:576px){.sticky-sm-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}.sticky-sm-bottom{position:-webkit-sticky;position:sticky;bottom:0;z-index:1020}}@media (min-width:768px){.sticky-md-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}.sticky-md-bottom{position:-webkit-sticky;position:sticky;bottom:0;z-index:1020}}@media (min-width:992px){.sticky-lg-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}.sticky-lg-bottom{position:-webkit-sticky;position:sticky;bottom:0;z-index:1020}}@media (min-width:1200px){.sticky-xl-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}.sticky-xl-bottom{position:-webkit-sticky;position:sticky;bottom:0;z-index:1020}}@media (min-width:1400px){.sticky-xxl-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}.sticky-xxl-bottom{position:-webkit-sticky;position:sticky;bottom:0;z-index:1020}}.hstack{display:flex;flex-direction:row;align-items:center;align-self:stretch}.vstack{display:flex;flex:1 1 auto;flex-direction:column;align-self:stretch}.visually-hidden,.visually-hidden-focusable:not(:focus):not(:focus-within){position:absolute!important;width:1px!important;height:1px!important;padding:0!important;margin:-1px!important;overflow:hidden!important;clip:rect(0,0,0,0)!important;white-space:nowrap!important;border:0!important}.stretched-link::after{position:absolute;top:0;right:0;bottom:0;left:0;z-index:1;content:""}.text-truncate{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.vr{display:inline-block;align-self:stretch;width:1px;min-height:1em;background-color:currentcolor;opacity:.25}.align-baseline{vertical-align:baseline!important}.align-top{vertical-align:top!important}.align-middle{vertical-align:middle!important}.align-bottom{vertical-align:bottom!important}.align-text-bottom{vertical-align:text-bottom!important}.align-text-top{vertical-align:text-top!important}.float-start{float:left!important}.float-end{float:right!important}.float-none{float:none!important}.object-fit-contain{-o-object-fit:contain!important;object-fit:contain!important}.object-fit-cover{-o-object-fit:cover!important;object-fit:cover!important}.object-fit-fill{-o-object-fit:fill!important;object-fit:fill!important}.object-fit-scale{-o-object-fit:scale-down!important;object-fit:scale-down!important}.object-fit-none{-o-object-fit:none!important;object-fit:none!important}.opacity-0{opacity:0!important}.opacity-25{opacity:.25!important}.opacity-50{opacity:.5!important}.opacity-75{opacity:.75!important}.opacity-100{opacity:1!important}.overflow-auto{overflow:auto!important}.overflow-hidden{overflow:hidden!important}.overflow-visible{overflow:visible!important}.overflow-scroll{overflow:scroll!important}.overflow-x-auto{overflow-x:auto!important}.overflow-x-hidden{overflow-x:hidden!important}.overflow-x-visible{overflow-x:visible!important}.overflow-x-scroll{overflow-x:scroll!important}.overflow-y-auto{overflow-y:auto!important}.overflow-y-hidden{overflow-y:hidden!important}.overflow-y-visible{overflow-y:visible!important}.overflow-y-scroll{overflow-y:scroll!important}.d-inline{display:inline!important}.d-inline-block{display:inline-block!important}.d-block{display:block!important}.d-grid{display:grid!important}.d-table{display:table!important}.d-table-row{display:table-row!important}.d-table-cell{display:table-cell!important}.d-flex{display:flex!important}.d-inline-flex{display:inline-flex!important}.d-none{display:none!important}.shadow{box-shadow:0 .5rem 1rem rgba(var(--bs-body-color-rgb),.15)!important}.shadow-sm{box-shadow:0 .125rem .25rem rgba(var(--bs-body-color-rgb),.075)!important}.shadow-lg{box-shadow:0 1rem 3rem rgba(var(--bs-body-color-rgb),.175)!important}.shadow-none{box-shadow:none!important}.position-static{position:static!important}.position-relative{position:relative!important}.position-absolute{position:absolute!important}.position-fixed{position:fixed!important}.position-sticky{position:-webkit-sticky!important;position:sticky!important}.top-0{top:0!important}.top-50{top:50%!important}.top-100{top:100%!important}.bottom-0{bottom:0!important}.bottom-50{bottom:50%!important}.bottom-100{bottom:100%!important}.start-0{left:0!important}.start-50{left:50%!important}.start-100{left:100%!important}.end-0{right:0!important}.end-50{right:50%!important}.end-100{right:100%!important}.translate-middle{transform:translate(-50%,-50%)!important}.translate-middle-x{transform:translateX(-50%)!important}.translate-middle-y{transform:translateY(-50%)!important}.border{border:var(--bs-border-width) var(--bs-border-style) var(--bs-border-color)!important}.border-0{border:0!important}.border-top{border-top:var(--bs-border-width) var(--bs-border-style) var(--bs-border-color)!important}.border-top-0{border-top:0!important}.border-end{border-right:var(--bs-border-width) var(--bs-border-style) var(--bs-border-color)!important}.border-end-0{border-right:0!important}.border-bottom{border-bottom:var(--bs-border-width) var(--bs-border-style) var(--bs-border-color)!important}.border-bottom-0{border-bottom:0!important}.border-start{border-left:var(--bs-border-width) var(--bs-border-style) var(--bs-border-color)!important}.border-start-0{border-left:0!important}.border-primary{--bs-border-opacity:1;border-color:rgba(var(--bs-primary-rgb),var(--bs-border-opacity))!important}.border-secondary{--bs-border-opacity:1;border-color:rgba(var(--bs-secondary-rgb),var(--bs-border-opacity))!important}.border-success{--bs-border-opacity:1;border-color:rgba(var(--bs-success-rgb),var(--bs-border-opacity))!important}.border-info{--bs-border-opacity:1;border-color:rgba(var(--bs-info-rgb),var(--bs-border-opacity))!important}.border-warning{--bs-border-opacity:1;border-color:rgba(var(--bs-warning-rgb),var(--bs-border-opacity))!important}.border-danger{--bs-border-opacity:1;border-color:rgba(var(--bs-danger-rgb),var(--bs-border-opacity))!important}.border-light{--bs-border-opacity:1;border-color:rgba(var(--bs-light-rgb),var(--bs-border-opacity))!important}.border-dark{--bs-border-opacity:1;border-color:rgba(var(--bs-dark-rgb),var(--bs-border-opacity))!important}.border-white{--bs-border-opacity:1;border-color:rgba(var(--bs-white-rgb),var(--bs-border-opacity))!important}.border-primary-subtle{border-color:var(--bs-primary-border-subtle)!important}.border-secondary-subtle{border-color:var(--bs-secondary-border-subtle)!important}.border-success-subtle{border-color:var(--bs-success-border-subtle)!important}.border-info-subtle{border-color:var(--bs-info-border-subtle)!important}.border-warning-subtle{border-color:var(--bs-warning-border-subtle)!important}.border-danger-subtle{border-color:var(--bs-danger-border-subtle)!important}.border-light-subtle{border-color:var(--bs-light-border-subtle)!important}.border-dark-subtle{border-color:var(--bs-dark-border-subtle)!important}.border-1{--bs-border-width:1px}.border-2{--bs-border-width:2px}.border-3{--bs-border-width:3px}.border-4{--bs-border-width:4px}.border-5{--bs-border-width:5px}.border-opacity-10{--bs-border-opacity:0.1}.border-opacity-25{--bs-border-opacity:0.25}.border-opacity-50{--bs-border-opacity:0.5}.border-opacity-75{--bs-border-opacity:0.75}.border-opacity-100{--bs-border-opacity:1}.w-25{width:25%!important}.w-50{width:50%!important}.w-75{width:75%!important}.w-100{width:100%!important}.w-auto{width:auto!important}.mw-100{max-width:100%!important}.vw-100{width:100vw!important}.min-vw-100{min-width:100vw!important}.h-25{height:25%!important}.h-50{height:50%!important}.h-75{height:75%!important}.h-100{height:100%!important}.h-auto{height:auto!important}.mh-100{max-height:100%!important}.vh-100{height:100vh!important}.min-vh-100{min-height:100vh!important}.flex-fill{flex:1 1 auto!important}.flex-row{flex-direction:row!important}.flex-column{flex-direction:column!important}.flex-row-reverse{flex-direction:row-reverse!important}.flex-column-reverse{flex-direction:column-reverse!important}.flex-grow-0{flex-grow:0!important}.flex-grow-1{flex-grow:1!important}.flex-shrink-0{flex-shrink:0!important}.flex-shrink-1{flex-shrink:1!important}.flex-wrap{flex-wrap:wrap!important}.flex-nowrap{flex-wrap:nowrap!important}.flex-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-start{justify-content:flex-start!important}.justify-content-end{justify-content:flex-end!important}.justify-content-center{justify-content:center!important}.justify-content-between{justify-content:space-between!important}.justify-content-around{justify-content:space-around!important}.justify-content-evenly{justify-content:space-evenly!important}.align-items-start{align-items:flex-start!important}.align-items-end{align-items:flex-end!important}.align-items-center{align-items:center!important}.align-items-baseline{align-items:baseline!important}.align-items-stretch{align-items:stretch!important}.align-content-start{align-content:flex-start!important}.align-content-end{align-content:flex-end!important}.align-content-center{align-content:center!important}.align-content-between{align-content:space-between!important}.align-content-around{align-content:space-around!important}.align-content-stretch{align-content:stretch!important}.align-self-auto{align-self:auto!important}.align-self-start{align-self:flex-start!important}.align-self-end{align-self:flex-end!important}.align-self-center{align-self:center!important}.align-self-baseline{align-self:baseline!important}.align-self-stretch{align-self:stretch!important}.order-first{order:-1!important}.order-0{order:0!important}.order-1{order:1!important}.order-2{order:2!important}.order-3{order:3!important}.order-4{order:4!important}.order-5{order:5!important}.order-last{order:6!important}.m-0{margin:0!important}.m-1{margin:.25rem!important}.m-2{margin:.5rem!important}.m-3{margin:1rem!important}.m-4{margin:1.5rem!important}.m-5{margin:3rem!important}.m-auto{margin:auto!important}.mx-0{margin-right:0!important;margin-left:0!important}.mx-1{margin-right:.25rem!important;margin-left:.25rem!important}.mx-2{margin-right:.5rem!important;margin-left:.5rem!important}.mx-3{margin-right:1rem!important;margin-left:1rem!important}.mx-4{margin-right:1.5rem!important;margin-left:1.5rem!important}.mx-5{margin-right:3rem!important;margin-left:3rem!important}.mx-auto{margin-right:auto!important;margin-left:auto!important}.my-0{margin-top:0!important;margin-bottom:0!important}.my-1{margin-top:.25rem!important;margin-bottom:.25rem!important}.my-2{margin-top:.5rem!important;margin-bottom:.5rem!important}.my-3{margin-top:1rem!important;margin-bottom:1rem!important}.my-4{margin-top:1.5rem!important;margin-bottom:1.5rem!important}.my-5{margin-top:3rem!important;margin-bottom:3rem!important}.my-auto{margin-top:auto!important;margin-bottom:auto!important}.mt-0{margin-top:0!important}.mt-1{margin-top:.25rem!important}.mt-2{margin-top:.5rem!important}.mt-3{margin-top:1rem!important}.mt-4{margin-top:1.5rem!important}.mt-5{margin-top:3rem!important}.mt-auto{margin-top:auto!important}.me-0{margin-right:0!important}.me-1{margin-right:.25rem!important}.me-2{margin-right:.5rem!important}.me-3{margin-right:1rem!important}.me-4{margin-right:1.5rem!important}.me-5{margin-right:3rem!important}.me-auto{margin-right:auto!important}.mb-0{margin-bottom:0!important}.mb-1{margin-bottom:.25rem!important}.mb-2{margin-bottom:.5rem!important}.mb-3{margin-bottom:1rem!important}.mb-4{margin-bottom:1.5rem!important}.mb-5{margin-bottom:3rem!important}.mb-auto{margin-bottom:auto!important}.ms-0{margin-left:0!important}.ms-1{margin-left:.25rem!important}.ms-2{margin-left:.5rem!important}.ms-3{margin-left:1rem!important}.ms-4{margin-left:1.5rem!important}.ms-5{margin-left:3rem!important}.ms-auto{margin-left:auto!important}.p-0{padding:0!important}.p-1{padding:.25rem!important}.p-2{padding:.5rem!important}.p-3{padding:1rem!important}.p-4{padding:1.5rem!important}.p-5{padding:3rem!important}.px-0{padding-right:0!important;padding-left:0!important}.px-1{padding-right:.25rem!important;padding-left:.25rem!important}.px-2{padding-right:.5rem!important;padding-left:.5rem!important}.px-3{padding-right:1rem!important;padding-left:1rem!important}.px-4{padding-right:1.5rem!important;padding-left:1.5rem!important}.px-5{padding-right:3rem!important;padding-left:3rem!important}.py-0{padding-top:0!important;padding-bottom:0!important}.py-1{padding-top:.25rem!important;padding-bottom:.25rem!important}.py-2{padding-top:.5rem!important;padding-bottom:.5rem!important}.py-3{padding-top:1rem!important;padding-bottom:1rem!important}.py-4{padding-top:1.5rem!important;padding-bottom:1.5rem!important}.py-5{padding-top:3rem!important;padding-bottom:3rem!important}.pt-0{padding-top:0!important}.pt-1{padding-top:.25rem!important}.pt-2{padding-top:.5rem!important}.pt-3{padding-top:1rem!important}.pt-4{padding-top:1.5rem!important}.pt-5{padding-top:3rem!important}.pe-0{padding-right:0!important}.pe-1{padding-right:.25rem!important}.pe-2{padding-right:.5rem!important}.pe-3{padding-right:1rem!important}.pe-4{padding-right:1.5rem!important}.pe-5{padding-right:3rem!important}.pb-0{padding-bottom:0!important}.pb-1{padding-bottom:.25rem!important}.pb-2{padding-bottom:.5rem!important}.pb-3{padding-bottom:1rem!important}.pb-4{padding-bottom:1.5rem!important}.pb-5{padding-bottom:3rem!important}.ps-0{padding-left:0!important}.ps-1{padding-left:.25rem!important}.ps-2{padding-left:.5rem!important}.ps-3{padding-left:1rem!important}.ps-4{padding-left:1.5rem!important}.ps-5{padding-left:3rem!important}.gap-0{gap:0!important}.gap-1{gap:.25rem!important}.gap-2{gap:.5rem!important}.gap-3{gap:1rem!important}.gap-4{gap:1.5rem!important}.gap-5{gap:3rem!important}.row-gap-0{row-gap:0!important}.row-gap-1{row-gap:.25rem!important}.row-gap-2{row-gap:.5rem!important}.row-gap-3{row-gap:1rem!important}.row-gap-4{row-gap:1.5rem!important}.row-gap-5{row-gap:3rem!important}.column-gap-0{-moz-column-gap:0!important;column-gap:0!important}.column-gap-1{-moz-column-gap:0.25rem!important;column-gap:.25rem!important}.column-gap-2{-moz-column-gap:0.5rem!important;column-gap:.5rem!important}.column-gap-3{-moz-column-gap:1rem!important;column-gap:1rem!important}.column-gap-4{-moz-column-gap:1.5rem!important;column-gap:1.5rem!important}.column-gap-5{-moz-column-gap:3rem!important;column-gap:3rem!important}.font-monospace{font-family:var(--bs-font-monospace)!important}.fs-1{font-size:calc(1.375rem + 1.5vw)!important}.fs-2{font-size:calc(1.325rem + .9vw)!important}.fs-3{font-size:calc(1.3rem + .6vw)!important}.fs-4{font-size:calc(1.275rem + .3vw)!important}.fs-5{font-size:1.25rem!important}.fs-6{font-size:1rem!important}.fst-italic{font-style:italic!important}.fst-normal{font-style:normal!important}.fw-lighter{font-weight:lighter!important}.fw-light{font-weight:300!important}.fw-normal{font-weight:400!important}.fw-medium{font-weight:500!important}.fw-semibold{font-weight:600!important}.fw-bold{font-weight:700!important}.fw-bolder{font-weight:bolder!important}.lh-1{line-height:1!important}.lh-sm{line-height:1.25!important}.lh-base{line-height:1.5!important}.lh-lg{line-height:2!important}.text-start{text-align:left!important}.text-end{text-align:right!important}.text-center{text-align:center!important}.text-decoration-none{text-decoration:none!important}.text-decoration-underline{text-decoration:underline!important}.text-decoration-line-through{text-decoration:line-through!important}.text-lowercase{text-transform:lowercase!important}.text-uppercase{text-transform:uppercase!important}.text-capitalize{text-transform:capitalize!important}.text-wrap{white-space:normal!important}.text-nowrap{white-space:nowrap!important}.text-break{word-wrap:break-word!important;word-break:break-word!important}.text-primary{--bs-text-opacity:1;color:rgba(var(--bs-primary-rgb),var(--bs-text-opacity))!important}.text-secondary{--bs-text-opacity:1;color:rgba(var(--bs-secondary-rgb),var(--bs-text-opacity))!important}.text-success{--bs-text-opacity:1;color:rgba(var(--bs-success-rgb),var(--bs-text-opacity))!important}.text-info{--bs-text-opacity:1;color:rgba(var(--bs-info-rgb),var(--bs-text-opacity))!important}.text-warning{--bs-text-opacity:1;color:rgba(var(--bs-warning-rgb),var(--bs-text-opacity))!important}.text-danger{--bs-text-opacity:1;color:rgba(var(--bs-danger-rgb),var(--bs-text-opacity))!important}.text-light{--bs-text-opacity:1;color:rgba(var(--bs-light-rgb),var(--bs-text-opacity))!important}.text-dark{--bs-text-opacity:1;color:rgba(var(--bs-dark-rgb),var(--bs-text-opacity))!important}.text-black{--bs-text-opacity:1;color:rgba(var(--bs-black-rgb),var(--bs-text-opacity))!important}.text-white{--bs-text-opacity:1;color:rgba(var(--bs-white-rgb),var(--bs-text-opacity))!important}.text-body{--bs-text-opacity:1;color:rgba(var(--bs-body-color-rgb),var(--bs-text-opacity))!important}.text-muted{--bs-text-opacity:1;color:var(--bs-secondary-color)!important}.text-black-50{--bs-text-opacity:1;color:rgba(0,0,0,.5)!important}.text-white-50{--bs-text-opacity:1;color:rgba(255,255,255,.5)!important}.text-body-secondary{--bs-text-opacity:1;color:var(--bs-secondary-color)!important}.text-body-tertiary{--bs-text-opacity:1;color:var(--bs-tertiary-color)!important}.text-body-emphasis{--bs-text-opacity:1;color:var(--bs-emphasis-color)!important}.text-reset{--bs-text-opacity:1;color:inherit!important}.text-opacity-25{--bs-text-opacity:0.25}.text-opacity-50{--bs-text-opacity:0.5}.text-opacity-75{--bs-text-opacity:0.75}.text-opacity-100{--bs-text-opacity:1}.text-primary-emphasis{color:var(--bs-primary-text)!important}.text-secondary-emphasis{color:var(--bs-secondary-text)!important}.text-success-emphasis{color:var(--bs-success-text)!important}.text-info-emphasis{color:var(--bs-info-text)!important}.text-warning-emphasis{color:var(--bs-warning-text)!important}.text-danger-emphasis{color:var(--bs-danger-text)!important}.text-light-emphasis{color:var(--bs-light-text)!important}.text-dark-emphasis{color:var(--bs-dark-text)!important}.bg-primary{--bs-bg-opacity:1;background-color:rgba(var(--bs-primary-rgb),var(--bs-bg-opacity))!important}.bg-secondary{--bs-bg-opacity:1;background-color:rgba(var(--bs-secondary-rgb),var(--bs-bg-opacity))!important}.bg-success{--bs-bg-opacity:1;background-color:rgba(var(--bs-success-rgb),var(--bs-bg-opacity))!important}.bg-info{--bs-bg-opacity:1;background-color:rgba(var(--bs-info-rgb),var(--bs-bg-opacity))!important}.bg-warning{--bs-bg-opacity:1;background-color:rgba(var(--bs-warning-rgb),var(--bs-bg-opacity))!important}.bg-danger{--bs-bg-opacity:1;background-color:rgba(var(--bs-danger-rgb),var(--bs-bg-opacity))!important}.bg-light{--bs-bg-opacity:1;background-color:rgba(var(--bs-light-rgb),var(--bs-bg-opacity))!important}.bg-dark{--bs-bg-opacity:1;background-color:rgba(var(--bs-dark-rgb),var(--bs-bg-opacity))!important}.bg-black{--bs-bg-opacity:1;background-color:rgba(var(--bs-black-rgb),var(--bs-bg-opacity))!important}.bg-white{--bs-bg-opacity:1;background-color:rgba(var(--bs-white-rgb),var(--bs-bg-opacity))!important}.bg-body{--bs-bg-opacity:1;background-color:rgba(var(--bs-body-bg-rgb),var(--bs-bg-opacity))!important}.bg-transparent{--bs-bg-opacity:1;background-color:transparent!important}.bg-body-secondary{--bs-bg-opacity:1;background-color:rgba(var(--bs-secondary-bg-rgb),var(--bs-bg-opacity))!important}.bg-body-tertiary{--bs-bg-opacity:1;background-color:rgba(var(--bs-tertiary-bg-rgb),var(--bs-bg-opacity))!important}.bg-body-emphasis{--bs-bg-opacity:1;background-color:rgba(var(--bs-emphasis-bg-rgb),var(--bs-bg-opacity))!important}.bg-opacity-10{--bs-bg-opacity:0.1}.bg-opacity-25{--bs-bg-opacity:0.25}.bg-opacity-50{--bs-bg-opacity:0.5}.bg-opacity-75{--bs-bg-opacity:0.75}.bg-opacity-100{--bs-bg-opacity:1}.bg-primary-subtle{background-color:var(--bs-primary-bg-subtle)!important}.bg-secondary-subtle{background-color:var(--bs-secondary-bg-subtle)!important}.bg-success-subtle{background-color:var(--bs-success-bg-subtle)!important}.bg-info-subtle{background-color:var(--bs-info-bg-subtle)!important}.bg-warning-subtle{background-color:var(--bs-warning-bg-subtle)!important}.bg-danger-subtle{background-color:var(--bs-danger-bg-subtle)!important}.bg-light-subtle{background-color:var(--bs-light-bg-subtle)!important}.bg-dark-subtle{background-color:var(--bs-dark-bg-subtle)!important}.bg-gradient{background-image:var(--bs-gradient)!important}.user-select-all{-webkit-user-select:all!important;-moz-user-select:all!important;user-select:all!important}.user-select-auto{-webkit-user-select:auto!important;-moz-user-select:auto!important;user-select:auto!important}.user-select-none{-webkit-user-select:none!important;-moz-user-select:none!important;user-select:none!important}.pe-none{pointer-events:none!important}.pe-auto{pointer-events:auto!important}.rounded{border-radius:var(--bs-border-radius)!important}.rounded-0{border-radius:0!important}.rounded-1{border-radius:var(--bs-border-radius-sm)!important}.rounded-2{border-radius:var(--bs-border-radius)!important}.rounded-3{border-radius:var(--bs-border-radius-lg)!important}.rounded-4{border-radius:var(--bs-border-radius-xl)!important}.rounded-5{border-radius:var(--bs-border-radius-2xl)!important}.rounded-circle{border-radius:50%!important}.rounded-pill{border-radius:var(--bs-border-radius-pill)!important}.rounded-top{border-top-left-radius:var(--bs-border-radius)!important;border-top-right-radius:var(--bs-border-radius)!important}.rounded-top-0{border-top-left-radius:0!important;border-top-right-radius:0!important}.rounded-top-1{border-top-left-radius:var(--bs-border-radius-sm)!important;border-top-right-radius:var(--bs-border-radius-sm)!important}.rounded-top-2{border-top-left-radius:var(--bs-border-radius)!important;border-top-right-radius:var(--bs-border-radius)!important}.rounded-top-3{border-top-left-radius:var(--bs-border-radius-lg)!important;border-top-right-radius:var(--bs-border-radius-lg)!important}.rounded-top-4{border-top-left-radius:var(--bs-border-radius-xl)!important;border-top-right-radius:var(--bs-border-radius-xl)!important}.rounded-top-5{border-top-left-radius:var(--bs-border-radius-2xl)!important;border-top-right-radius:var(--bs-border-radius-2xl)!important}.rounded-top-circle{border-top-left-radius:50%!important;border-top-right-radius:50%!important}.rounded-top-pill{border-top-left-radius:var(--bs-border-radius-pill)!important;border-top-right-radius:var(--bs-border-radius-pill)!important}.rounded-end{border-top-right-radius:var(--bs-border-radius)!important;border-bottom-right-radius:var(--bs-border-radius)!important}.rounded-end-0{border-top-right-radius:0!important;border-bottom-right-radius:0!important}.rounded-end-1{border-top-right-radius:var(--bs-border-radius-sm)!important;border-bottom-right-radius:var(--bs-border-radius-sm)!important}.rounded-end-2{border-top-right-radius:var(--bs-border-radius)!important;border-bottom-right-radius:var(--bs-border-radius)!important}.rounded-end-3{border-top-right-radius:var(--bs-border-radius-lg)!important;border-bottom-right-radius:var(--bs-border-radius-lg)!important}.rounded-end-4{border-top-right-radius:var(--bs-border-radius-xl)!important;border-bottom-right-radius:var(--bs-border-radius-xl)!important}.rounded-end-5{border-top-right-radius:var(--bs-border-radius-2xl)!important;border-bottom-right-radius:var(--bs-border-radius-2xl)!important}.rounded-end-circle{border-top-right-radius:50%!important;border-bottom-right-radius:50%!important}.rounded-end-pill{border-top-right-radius:var(--bs-border-radius-pill)!important;border-bottom-right-radius:var(--bs-border-radius-pill)!important}.rounded-bottom{border-bottom-right-radius:var(--bs-border-radius)!important;border-bottom-left-radius:var(--bs-border-radius)!important}.rounded-bottom-0{border-bottom-right-radius:0!important;border-bottom-left-radius:0!important}.rounded-bottom-1{border-bottom-right-radius:var(--bs-border-radius-sm)!important;border-bottom-left-radius:var(--bs-border-radius-sm)!important}.rounded-bottom-2{border-bottom-right-radius:var(--bs-border-radius)!important;border-bottom-left-radius:var(--bs-border-radius)!important}.rounded-bottom-3{border-bottom-right-radius:var(--bs-border-radius-lg)!important;border-bottom-left-radius:var(--bs-border-radius-lg)!important}.rounded-bottom-4{border-bottom-right-radius:var(--bs-border-radius-xl)!important;border-bottom-left-radius:var(--bs-border-radius-xl)!important}.rounded-bottom-5{border-bottom-right-radius:var(--bs-border-radius-2xl)!important;border-bottom-left-radius:var(--bs-border-radius-2xl)!important}.rounded-bottom-circle{border-bottom-right-radius:50%!important;border-bottom-left-radius:50%!important}.rounded-bottom-pill{border-bottom-right-radius:var(--bs-border-radius-pill)!important;border-bottom-left-radius:var(--bs-border-radius-pill)!important}.rounded-start{border-bottom-left-radius:var(--bs-border-radius)!important;border-top-left-radius:var(--bs-border-radius)!important}.rounded-start-0{border-bottom-left-radius:0!important;border-top-left-radius:0!important}.rounded-start-1{border-bottom-left-radius:var(--bs-border-radius-sm)!important;border-top-left-radius:var(--bs-border-radius-sm)!important}.rounded-start-2{border-bottom-left-radius:var(--bs-border-radius)!important;border-top-left-radius:var(--bs-border-radius)!important}.rounded-start-3{border-bottom-left-radius:var(--bs-border-radius-lg)!important;border-top-left-radius:var(--bs-border-radius-lg)!important}.rounded-start-4{border-bottom-left-radius:var(--bs-border-radius-xl)!important;border-top-left-radius:var(--bs-border-radius-xl)!important}.rounded-start-5{border-bottom-left-radius:var(--bs-border-radius-2xl)!important;border-top-left-radius:var(--bs-border-radius-2xl)!important}.rounded-start-circle{border-bottom-left-radius:50%!important;border-top-left-radius:50%!important}.rounded-start-pill{border-bottom-left-radius:var(--bs-border-radius-pill)!important;border-top-left-radius:var(--bs-border-radius-pill)!important}.visible{visibility:visible!important}.invisible{visibility:hidden!important}.z-n1{z-index:-1!important}.z-0{z-index:0!important}.z-1{z-index:1!important}.z-2{z-index:2!important}.z-3{z-index:3!important}@media (min-width:576px){.float-sm-start{float:left!important}.float-sm-end{float:right!important}.float-sm-none{float:none!important}.object-fit-sm-contain{-o-object-fit:contain!important;object-fit:contain!important}.object-fit-sm-cover{-o-object-fit:cover!important;object-fit:cover!important}.object-fit-sm-fill{-o-object-fit:fill!important;object-fit:fill!important}.object-fit-sm-scale{-o-object-fit:scale-down!important;object-fit:scale-down!important}.object-fit-sm-none{-o-object-fit:none!important;object-fit:none!important}.d-sm-inline{display:inline!important}.d-sm-inline-block{display:inline-block!important}.d-sm-block{display:block!important}.d-sm-grid{display:grid!important}.d-sm-table{display:table!important}.d-sm-table-row{display:table-row!important}.d-sm-table-cell{display:table-cell!important}.d-sm-flex{display:flex!important}.d-sm-inline-flex{display:inline-flex!important}.d-sm-none{display:none!important}.flex-sm-fill{flex:1 1 auto!important}.flex-sm-row{flex-direction:row!important}.flex-sm-column{flex-direction:column!important}.flex-sm-row-reverse{flex-direction:row-reverse!important}.flex-sm-column-reverse{flex-direction:column-reverse!important}.flex-sm-grow-0{flex-grow:0!important}.flex-sm-grow-1{flex-grow:1!important}.flex-sm-shrink-0{flex-shrink:0!important}.flex-sm-shrink-1{flex-shrink:1!important}.flex-sm-wrap{flex-wrap:wrap!important}.flex-sm-nowrap{flex-wrap:nowrap!important}.flex-sm-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-sm-start{justify-content:flex-start!important}.justify-content-sm-end{justify-content:flex-end!important}.justify-content-sm-center{justify-content:center!important}.justify-content-sm-between{justify-content:space-between!important}.justify-content-sm-around{justify-content:space-around!important}.justify-content-sm-evenly{justify-content:space-evenly!important}.align-items-sm-start{align-items:flex-start!important}.align-items-sm-end{align-items:flex-end!important}.align-items-sm-center{align-items:center!important}.align-items-sm-baseline{align-items:baseline!important}.align-items-sm-stretch{align-items:stretch!important}.align-content-sm-start{align-content:flex-start!important}.align-content-sm-end{align-content:flex-end!important}.align-content-sm-center{align-content:center!important}.align-content-sm-between{align-content:space-between!important}.align-content-sm-around{align-content:space-around!important}.align-content-sm-stretch{align-content:stretch!important}.align-self-sm-auto{align-self:auto!important}.align-self-sm-start{align-self:flex-start!important}.align-self-sm-end{align-self:flex-end!important}.align-self-sm-center{align-self:center!important}.align-self-sm-baseline{align-self:baseline!important}.align-self-sm-stretch{align-self:stretch!important}.order-sm-first{order:-1!important}.order-sm-0{order:0!important}.order-sm-1{order:1!important}.order-sm-2{order:2!important}.order-sm-3{order:3!important}.order-sm-4{order:4!important}.order-sm-5{order:5!important}.order-sm-last{order:6!important}.m-sm-0{margin:0!important}.m-sm-1{margin:.25rem!important}.m-sm-2{margin:.5rem!important}.m-sm-3{margin:1rem!important}.m-sm-4{margin:1.5rem!important}.m-sm-5{margin:3rem!important}.m-sm-auto{margin:auto!important}.mx-sm-0{margin-right:0!important;margin-left:0!important}.mx-sm-1{margin-right:.25rem!important;margin-left:.25rem!important}.mx-sm-2{margin-right:.5rem!important;margin-left:.5rem!important}.mx-sm-3{margin-right:1rem!important;margin-left:1rem!important}.mx-sm-4{margin-right:1.5rem!important;margin-left:1.5rem!important}.mx-sm-5{margin-right:3rem!important;margin-left:3rem!important}.mx-sm-auto{margin-right:auto!important;margin-left:auto!important}.my-sm-0{margin-top:0!important;margin-bottom:0!important}.my-sm-1{margin-top:.25rem!important;margin-bottom:.25rem!important}.my-sm-2{margin-top:.5rem!important;margin-bottom:.5rem!important}.my-sm-3{margin-top:1rem!important;margin-bottom:1rem!important}.my-sm-4{margin-top:1.5rem!important;margin-bottom:1.5rem!important}.my-sm-5{margin-top:3rem!important;margin-bottom:3rem!important}.my-sm-auto{margin-top:auto!important;margin-bottom:auto!important}.mt-sm-0{margin-top:0!important}.mt-sm-1{margin-top:.25rem!important}.mt-sm-2{margin-top:.5rem!important}.mt-sm-3{margin-top:1rem!important}.mt-sm-4{margin-top:1.5rem!important}.mt-sm-5{margin-top:3rem!important}.mt-sm-auto{margin-top:auto!important}.me-sm-0{margin-right:0!important}.me-sm-1{margin-right:.25rem!important}.me-sm-2{margin-right:.5rem!important}.me-sm-3{margin-right:1rem!important}.me-sm-4{margin-right:1.5rem!important}.me-sm-5{margin-right:3rem!important}.me-sm-auto{margin-right:auto!important}.mb-sm-0{margin-bottom:0!important}.mb-sm-1{margin-bottom:.25rem!important}.mb-sm-2{margin-bottom:.5rem!important}.mb-sm-3{margin-bottom:1rem!important}.mb-sm-4{margin-bottom:1.5rem!important}.mb-sm-5{margin-bottom:3rem!important}.mb-sm-auto{margin-bottom:auto!important}.ms-sm-0{margin-left:0!important}.ms-sm-1{margin-left:.25rem!important}.ms-sm-2{margin-left:.5rem!important}.ms-sm-3{margin-left:1rem!important}.ms-sm-4{margin-left:1.5rem!important}.ms-sm-5{margin-left:3rem!important}.ms-sm-auto{margin-left:auto!important}.p-sm-0{padding:0!important}.p-sm-1{padding:.25rem!important}.p-sm-2{padding:.5rem!important}.p-sm-3{padding:1rem!important}.p-sm-4{padding:1.5rem!important}.p-sm-5{padding:3rem!important}.px-sm-0{padding-right:0!important;padding-left:0!important}.px-sm-1{padding-right:.25rem!important;padding-left:.25rem!important}.px-sm-2{padding-right:.5rem!important;padding-left:.5rem!important}.px-sm-3{padding-right:1rem!important;padding-left:1rem!important}.px-sm-4{padding-right:1.5rem!important;padding-left:1.5rem!important}.px-sm-5{padding-right:3rem!important;padding-left:3rem!important}.py-sm-0{padding-top:0!important;padding-bottom:0!important}.py-sm-1{padding-top:.25rem!important;padding-bottom:.25rem!important}.py-sm-2{padding-top:.5rem!important;padding-bottom:.5rem!important}.py-sm-3{padding-top:1rem!important;padding-bottom:1rem!important}.py-sm-4{padding-top:1.5rem!important;padding-bottom:1.5rem!important}.py-sm-5{padding-top:3rem!important;padding-bottom:3rem!important}.pt-sm-0{padding-top:0!important}.pt-sm-1{padding-top:.25rem!important}.pt-sm-2{padding-top:.5rem!important}.pt-sm-3{padding-top:1rem!important}.pt-sm-4{padding-top:1.5rem!important}.pt-sm-5{padding-top:3rem!important}.pe-sm-0{padding-right:0!important}.pe-sm-1{padding-right:.25rem!important}.pe-sm-2{padding-right:.5rem!important}.pe-sm-3{padding-right:1rem!important}.pe-sm-4{padding-right:1.5rem!important}.pe-sm-5{padding-right:3rem!important}.pb-sm-0{padding-bottom:0!important}.pb-sm-1{padding-bottom:.25rem!important}.pb-sm-2{padding-bottom:.5rem!important}.pb-sm-3{padding-bottom:1rem!important}.pb-sm-4{padding-bottom:1.5rem!important}.pb-sm-5{padding-bottom:3rem!important}.ps-sm-0{padding-left:0!important}.ps-sm-1{padding-left:.25rem!important}.ps-sm-2{padding-left:.5rem!important}.ps-sm-3{padding-left:1rem!important}.ps-sm-4{padding-left:1.5rem!important}.ps-sm-5{padding-left:3rem!important}.gap-sm-0{gap:0!important}.gap-sm-1{gap:.25rem!important}.gap-sm-2{gap:.5rem!important}.gap-sm-3{gap:1rem!important}.gap-sm-4{gap:1.5rem!important}.gap-sm-5{gap:3rem!important}.row-gap-sm-0{row-gap:0!important}.row-gap-sm-1{row-gap:.25rem!important}.row-gap-sm-2{row-gap:.5rem!important}.row-gap-sm-3{row-gap:1rem!important}.row-gap-sm-4{row-gap:1.5rem!important}.row-gap-sm-5{row-gap:3rem!important}.column-gap-sm-0{-moz-column-gap:0!important;column-gap:0!important}.column-gap-sm-1{-moz-column-gap:0.25rem!important;column-gap:.25rem!important}.column-gap-sm-2{-moz-column-gap:0.5rem!important;column-gap:.5rem!important}.column-gap-sm-3{-moz-column-gap:1rem!important;column-gap:1rem!important}.column-gap-sm-4{-moz-column-gap:1.5rem!important;column-gap:1.5rem!important}.column-gap-sm-5{-moz-column-gap:3rem!important;column-gap:3rem!important}.text-sm-start{text-align:left!important}.text-sm-end{text-align:right!important}.text-sm-center{text-align:center!important}}@media (min-width:768px){.float-md-start{float:left!important}.float-md-end{float:right!important}.float-md-none{float:none!important}.object-fit-md-contain{-o-object-fit:contain!important;object-fit:contain!important}.object-fit-md-cover{-o-object-fit:cover!important;object-fit:cover!important}.object-fit-md-fill{-o-object-fit:fill!important;object-fit:fill!important}.object-fit-md-scale{-o-object-fit:scale-down!important;object-fit:scale-down!important}.object-fit-md-none{-o-object-fit:none!important;object-fit:none!important}.d-md-inline{display:inline!important}.d-md-inline-block{display:inline-block!important}.d-md-block{display:block!important}.d-md-grid{display:grid!important}.d-md-table{display:table!important}.d-md-table-row{display:table-row!important}.d-md-table-cell{display:table-cell!important}.d-md-flex{display:flex!important}.d-md-inline-flex{display:inline-flex!important}.d-md-none{display:none!important}.flex-md-fill{flex:1 1 auto!important}.flex-md-row{flex-direction:row!important}.flex-md-column{flex-direction:column!important}.flex-md-row-reverse{flex-direction:row-reverse!important}.flex-md-column-reverse{flex-direction:column-reverse!important}.flex-md-grow-0{flex-grow:0!important}.flex-md-grow-1{flex-grow:1!important}.flex-md-shrink-0{flex-shrink:0!important}.flex-md-shrink-1{flex-shrink:1!important}.flex-md-wrap{flex-wrap:wrap!important}.flex-md-nowrap{flex-wrap:nowrap!important}.flex-md-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-md-start{justify-content:flex-start!important}.justify-content-md-end{justify-content:flex-end!important}.justify-content-md-center{justify-content:center!important}.justify-content-md-between{justify-content:space-between!important}.justify-content-md-around{justify-content:space-around!important}.justify-content-md-evenly{justify-content:space-evenly!important}.align-items-md-start{align-items:flex-start!important}.align-items-md-end{align-items:flex-end!important}.align-items-md-center{align-items:center!important}.align-items-md-baseline{align-items:baseline!important}.align-items-md-stretch{align-items:stretch!important}.align-content-md-start{align-content:flex-start!important}.align-content-md-end{align-content:flex-end!important}.align-content-md-center{align-content:center!important}.align-content-md-between{align-content:space-between!important}.align-content-md-around{align-content:space-around!important}.align-content-md-stretch{align-content:stretch!important}.align-self-md-auto{align-self:auto!important}.align-self-md-start{align-self:flex-start!important}.align-self-md-end{align-self:flex-end!important}.align-self-md-center{align-self:center!important}.align-self-md-baseline{align-self:baseline!important}.align-self-md-stretch{align-self:stretch!important}.order-md-first{order:-1!important}.order-md-0{order:0!important}.order-md-1{order:1!important}.order-md-2{order:2!important}.order-md-3{order:3!important}.order-md-4{order:4!important}.order-md-5{order:5!important}.order-md-last{order:6!important}.m-md-0{margin:0!important}.m-md-1{margin:.25rem!important}.m-md-2{margin:.5rem!important}.m-md-3{margin:1rem!important}.m-md-4{margin:1.5rem!important}.m-md-5{margin:3rem!important}.m-md-auto{margin:auto!important}.mx-md-0{margin-right:0!important;margin-left:0!important}.mx-md-1{margin-right:.25rem!important;margin-left:.25rem!important}.mx-md-2{margin-right:.5rem!important;margin-left:.5rem!important}.mx-md-3{margin-right:1rem!important;margin-left:1rem!important}.mx-md-4{margin-right:1.5rem!important;margin-left:1.5rem!important}.mx-md-5{margin-right:3rem!important;margin-left:3rem!important}.mx-md-auto{margin-right:auto!important;margin-left:auto!important}.my-md-0{margin-top:0!important;margin-bottom:0!important}.my-md-1{margin-top:.25rem!important;margin-bottom:.25rem!important}.my-md-2{margin-top:.5rem!important;margin-bottom:.5rem!important}.my-md-3{margin-top:1rem!important;margin-bottom:1rem!important}.my-md-4{margin-top:1.5rem!important;margin-bottom:1.5rem!important}.my-md-5{margin-top:3rem!important;margin-bottom:3rem!important}.my-md-auto{margin-top:auto!important;margin-bottom:auto!important}.mt-md-0{margin-top:0!important}.mt-md-1{margin-top:.25rem!important}.mt-md-2{margin-top:.5rem!important}.mt-md-3{margin-top:1rem!important}.mt-md-4{margin-top:1.5rem!important}.mt-md-5{margin-top:3rem!important}.mt-md-auto{margin-top:auto!important}.me-md-0{margin-right:0!important}.me-md-1{margin-right:.25rem!important}.me-md-2{margin-right:.5rem!important}.me-md-3{margin-right:1rem!important}.me-md-4{margin-right:1.5rem!important}.me-md-5{margin-right:3rem!important}.me-md-auto{margin-right:auto!important}.mb-md-0{margin-bottom:0!important}.mb-md-1{margin-bottom:.25rem!important}.mb-md-2{margin-bottom:.5rem!important}.mb-md-3{margin-bottom:1rem!important}.mb-md-4{margin-bottom:1.5rem!important}.mb-md-5{margin-bottom:3rem!important}.mb-md-auto{margin-bottom:auto!important}.ms-md-0{margin-left:0!important}.ms-md-1{margin-left:.25rem!important}.ms-md-2{margin-left:.5rem!important}.ms-md-3{margin-left:1rem!important}.ms-md-4{margin-left:1.5rem!important}.ms-md-5{margin-left:3rem!important}.ms-md-auto{margin-left:auto!important}.p-md-0{padding:0!important}.p-md-1{padding:.25rem!important}.p-md-2{padding:.5rem!important}.p-md-3{padding:1rem!important}.p-md-4{padding:1.5rem!important}.p-md-5{padding:3rem!important}.px-md-0{padding-right:0!important;padding-left:0!important}.px-md-1{padding-right:.25rem!important;padding-left:.25rem!important}.px-md-2{padding-right:.5rem!important;padding-left:.5rem!important}.px-md-3{padding-right:1rem!important;padding-left:1rem!important}.px-md-4{padding-right:1.5rem!important;padding-left:1.5rem!important}.px-md-5{padding-right:3rem!important;padding-left:3rem!important}.py-md-0{padding-top:0!important;padding-bottom:0!important}.py-md-1{padding-top:.25rem!important;padding-bottom:.25rem!important}.py-md-2{padding-top:.5rem!important;padding-bottom:.5rem!important}.py-md-3{padding-top:1rem!important;padding-bottom:1rem!important}.py-md-4{padding-top:1.5rem!important;padding-bottom:1.5rem!important}.py-md-5{padding-top:3rem!important;padding-bottom:3rem!important}.pt-md-0{padding-top:0!important}.pt-md-1{padding-top:.25rem!important}.pt-md-2{padding-top:.5rem!important}.pt-md-3{padding-top:1rem!important}.pt-md-4{padding-top:1.5rem!important}.pt-md-5{padding-top:3rem!important}.pe-md-0{padding-right:0!important}.pe-md-1{padding-right:.25rem!important}.pe-md-2{padding-right:.5rem!important}.pe-md-3{padding-right:1rem!important}.pe-md-4{padding-right:1.5rem!important}.pe-md-5{padding-right:3rem!important}.pb-md-0{padding-bottom:0!important}.pb-md-1{padding-bottom:.25rem!important}.pb-md-2{padding-bottom:.5rem!important}.pb-md-3{padding-bottom:1rem!important}.pb-md-4{padding-bottom:1.5rem!important}.pb-md-5{padding-bottom:3rem!important}.ps-md-0{padding-left:0!important}.ps-md-1{padding-left:.25rem!important}.ps-md-2{padding-left:.5rem!important}.ps-md-3{padding-left:1rem!important}.ps-md-4{padding-left:1.5rem!important}.ps-md-5{padding-left:3rem!important}.gap-md-0{gap:0!important}.gap-md-1{gap:.25rem!important}.gap-md-2{gap:.5rem!important}.gap-md-3{gap:1rem!important}.gap-md-4{gap:1.5rem!important}.gap-md-5{gap:3rem!important}.row-gap-md-0{row-gap:0!important}.row-gap-md-1{row-gap:.25rem!important}.row-gap-md-2{row-gap:.5rem!important}.row-gap-md-3{row-gap:1rem!important}.row-gap-md-4{row-gap:1.5rem!important}.row-gap-md-5{row-gap:3rem!important}.column-gap-md-0{-moz-column-gap:0!important;column-gap:0!important}.column-gap-md-1{-moz-column-gap:0.25rem!important;column-gap:.25rem!important}.column-gap-md-2{-moz-column-gap:0.5rem!important;column-gap:.5rem!important}.column-gap-md-3{-moz-column-gap:1rem!important;column-gap:1rem!important}.column-gap-md-4{-moz-column-gap:1.5rem!important;column-gap:1.5rem!important}.column-gap-md-5{-moz-column-gap:3rem!important;column-gap:3rem!important}.text-md-start{text-align:left!important}.text-md-end{text-align:right!important}.text-md-center{text-align:center!important}}@media (min-width:992px){.float-lg-start{float:left!important}.float-lg-end{float:right!important}.float-lg-none{float:none!important}.object-fit-lg-contain{-o-object-fit:contain!important;object-fit:contain!important}.object-fit-lg-cover{-o-object-fit:cover!important;object-fit:cover!important}.object-fit-lg-fill{-o-object-fit:fill!important;object-fit:fill!important}.object-fit-lg-scale{-o-object-fit:scale-down!important;object-fit:scale-down!important}.object-fit-lg-none{-o-object-fit:none!important;object-fit:none!important}.d-lg-inline{display:inline!important}.d-lg-inline-block{display:inline-block!important}.d-lg-block{display:block!important}.d-lg-grid{display:grid!important}.d-lg-table{display:table!important}.d-lg-table-row{display:table-row!important}.d-lg-table-cell{display:table-cell!important}.d-lg-flex{display:flex!important}.d-lg-inline-flex{display:inline-flex!important}.d-lg-none{display:none!important}.flex-lg-fill{flex:1 1 auto!important}.flex-lg-row{flex-direction:row!important}.flex-lg-column{flex-direction:column!important}.flex-lg-row-reverse{flex-direction:row-reverse!important}.flex-lg-column-reverse{flex-direction:column-reverse!important}.flex-lg-grow-0{flex-grow:0!important}.flex-lg-grow-1{flex-grow:1!important}.flex-lg-shrink-0{flex-shrink:0!important}.flex-lg-shrink-1{flex-shrink:1!important}.flex-lg-wrap{flex-wrap:wrap!important}.flex-lg-nowrap{flex-wrap:nowrap!important}.flex-lg-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-lg-start{justify-content:flex-start!important}.justify-content-lg-end{justify-content:flex-end!important}.justify-content-lg-center{justify-content:center!important}.justify-content-lg-between{justify-content:space-between!important}.justify-content-lg-around{justify-content:space-around!important}.justify-content-lg-evenly{justify-content:space-evenly!important}.align-items-lg-start{align-items:flex-start!important}.align-items-lg-end{align-items:flex-end!important}.align-items-lg-center{align-items:center!important}.align-items-lg-baseline{align-items:baseline!important}.align-items-lg-stretch{align-items:stretch!important}.align-content-lg-start{align-content:flex-start!important}.align-content-lg-end{align-content:flex-end!important}.align-content-lg-center{align-content:center!important}.align-content-lg-between{align-content:space-between!important}.align-content-lg-around{align-content:space-around!important}.align-content-lg-stretch{align-content:stretch!important}.align-self-lg-auto{align-self:auto!important}.align-self-lg-start{align-self:flex-start!important}.align-self-lg-end{align-self:flex-end!important}.align-self-lg-center{align-self:center!important}.align-self-lg-baseline{align-self:baseline!important}.align-self-lg-stretch{align-self:stretch!important}.order-lg-first{order:-1!important}.order-lg-0{order:0!important}.order-lg-1{order:1!important}.order-lg-2{order:2!important}.order-lg-3{order:3!important}.order-lg-4{order:4!important}.order-lg-5{order:5!important}.order-lg-last{order:6!important}.m-lg-0{margin:0!important}.m-lg-1{margin:.25rem!important}.m-lg-2{margin:.5rem!important}.m-lg-3{margin:1rem!important}.m-lg-4{margin:1.5rem!important}.m-lg-5{margin:3rem!important}.m-lg-auto{margin:auto!important}.mx-lg-0{margin-right:0!important;margin-left:0!important}.mx-lg-1{margin-right:.25rem!important;margin-left:.25rem!important}.mx-lg-2{margin-right:.5rem!important;margin-left:.5rem!important}.mx-lg-3{margin-right:1rem!important;margin-left:1rem!important}.mx-lg-4{margin-right:1.5rem!important;margin-left:1.5rem!important}.mx-lg-5{margin-right:3rem!important;margin-left:3rem!important}.mx-lg-auto{margin-right:auto!important;margin-left:auto!important}.my-lg-0{margin-top:0!important;margin-bottom:0!important}.my-lg-1{margin-top:.25rem!important;margin-bottom:.25rem!important}.my-lg-2{margin-top:.5rem!important;margin-bottom:.5rem!important}.my-lg-3{margin-top:1rem!important;margin-bottom:1rem!important}.my-lg-4{margin-top:1.5rem!important;margin-bottom:1.5rem!important}.my-lg-5{margin-top:3rem!important;margin-bottom:3rem!important}.my-lg-auto{margin-top:auto!important;margin-bottom:auto!important}.mt-lg-0{margin-top:0!important}.mt-lg-1{margin-top:.25rem!important}.mt-lg-2{margin-top:.5rem!important}.mt-lg-3{margin-top:1rem!important}.mt-lg-4{margin-top:1.5rem!important}.mt-lg-5{margin-top:3rem!important}.mt-lg-auto{margin-top:auto!important}.me-lg-0{margin-right:0!important}.me-lg-1{margin-right:.25rem!important}.me-lg-2{margin-right:.5rem!important}.me-lg-3{margin-right:1rem!important}.me-lg-4{margin-right:1.5rem!important}.me-lg-5{margin-right:3rem!important}.me-lg-auto{margin-right:auto!important}.mb-lg-0{margin-bottom:0!important}.mb-lg-1{margin-bottom:.25rem!important}.mb-lg-2{margin-bottom:.5rem!important}.mb-lg-3{margin-bottom:1rem!important}.mb-lg-4{margin-bottom:1.5rem!important}.mb-lg-5{margin-bottom:3rem!important}.mb-lg-auto{margin-bottom:auto!important}.ms-lg-0{margin-left:0!important}.ms-lg-1{margin-left:.25rem!important}.ms-lg-2{margin-left:.5rem!important}.ms-lg-3{margin-left:1rem!important}.ms-lg-4{margin-left:1.5rem!important}.ms-lg-5{margin-left:3rem!important}.ms-lg-auto{margin-left:auto!important}.p-lg-0{padding:0!important}.p-lg-1{padding:.25rem!important}.p-lg-2{padding:.5rem!important}.p-lg-3{padding:1rem!important}.p-lg-4{padding:1.5rem!important}.p-lg-5{padding:3rem!important}.px-lg-0{padding-right:0!important;padding-left:0!important}.px-lg-1{padding-right:.25rem!important;padding-left:.25rem!important}.px-lg-2{padding-right:.5rem!important;padding-left:.5rem!important}.px-lg-3{padding-right:1rem!important;padding-left:1rem!important}.px-lg-4{padding-right:1.5rem!important;padding-left:1.5rem!important}.px-lg-5{padding-right:3rem!important;padding-left:3rem!important}.py-lg-0{padding-top:0!important;padding-bottom:0!important}.py-lg-1{padding-top:.25rem!important;padding-bottom:.25rem!important}.py-lg-2{padding-top:.5rem!important;padding-bottom:.5rem!important}.py-lg-3{padding-top:1rem!important;padding-bottom:1rem!important}.py-lg-4{padding-top:1.5rem!important;padding-bottom:1.5rem!important}.py-lg-5{padding-top:3rem!important;padding-bottom:3rem!important}.pt-lg-0{padding-top:0!important}.pt-lg-1{padding-top:.25rem!important}.pt-lg-2{padding-top:.5rem!important}.pt-lg-3{padding-top:1rem!important}.pt-lg-4{padding-top:1.5rem!important}.pt-lg-5{padding-top:3rem!important}.pe-lg-0{padding-right:0!important}.pe-lg-1{padding-right:.25rem!important}.pe-lg-2{padding-right:.5rem!important}.pe-lg-3{padding-right:1rem!important}.pe-lg-4{padding-right:1.5rem!important}.pe-lg-5{padding-right:3rem!important}.pb-lg-0{padding-bottom:0!important}.pb-lg-1{padding-bottom:.25rem!important}.pb-lg-2{padding-bottom:.5rem!important}.pb-lg-3{padding-bottom:1rem!important}.pb-lg-4{padding-bottom:1.5rem!important}.pb-lg-5{padding-bottom:3rem!important}.ps-lg-0{padding-left:0!important}.ps-lg-1{padding-left:.25rem!important}.ps-lg-2{padding-left:.5rem!important}.ps-lg-3{padding-left:1rem!important}.ps-lg-4{padding-left:1.5rem!important}.ps-lg-5{padding-left:3rem!important}.gap-lg-0{gap:0!important}.gap-lg-1{gap:.25rem!important}.gap-lg-2{gap:.5rem!important}.gap-lg-3{gap:1rem!important}.gap-lg-4{gap:1.5rem!important}.gap-lg-5{gap:3rem!important}.row-gap-lg-0{row-gap:0!important}.row-gap-lg-1{row-gap:.25rem!important}.row-gap-lg-2{row-gap:.5rem!important}.row-gap-lg-3{row-gap:1rem!important}.row-gap-lg-4{row-gap:1.5rem!important}.row-gap-lg-5{row-gap:3rem!important}.column-gap-lg-0{-moz-column-gap:0!important;column-gap:0!important}.column-gap-lg-1{-moz-column-gap:0.25rem!important;column-gap:.25rem!important}.column-gap-lg-2{-moz-column-gap:0.5rem!important;column-gap:.5rem!important}.column-gap-lg-3{-moz-column-gap:1rem!important;column-gap:1rem!important}.column-gap-lg-4{-moz-column-gap:1.5rem!important;column-gap:1.5rem!important}.column-gap-lg-5{-moz-column-gap:3rem!important;column-gap:3rem!important}.text-lg-start{text-align:left!important}.text-lg-end{text-align:right!important}.text-lg-center{text-align:center!important}}@media (min-width:1200px){.float-xl-start{float:left!important}.float-xl-end{float:right!important}.float-xl-none{float:none!important}.object-fit-xl-contain{-o-object-fit:contain!important;object-fit:contain!important}.object-fit-xl-cover{-o-object-fit:cover!important;object-fit:cover!important}.object-fit-xl-fill{-o-object-fit:fill!important;object-fit:fill!important}.object-fit-xl-scale{-o-object-fit:scale-down!important;object-fit:scale-down!important}.object-fit-xl-none{-o-object-fit:none!important;object-fit:none!important}.d-xl-inline{display:inline!important}.d-xl-inline-block{display:inline-block!important}.d-xl-block{display:block!important}.d-xl-grid{display:grid!important}.d-xl-table{display:table!important}.d-xl-table-row{display:table-row!important}.d-xl-table-cell{display:table-cell!important}.d-xl-flex{display:flex!important}.d-xl-inline-flex{display:inline-flex!important}.d-xl-none{display:none!important}.flex-xl-fill{flex:1 1 auto!important}.flex-xl-row{flex-direction:row!important}.flex-xl-column{flex-direction:column!important}.flex-xl-row-reverse{flex-direction:row-reverse!important}.flex-xl-column-reverse{flex-direction:column-reverse!important}.flex-xl-grow-0{flex-grow:0!important}.flex-xl-grow-1{flex-grow:1!important}.flex-xl-shrink-0{flex-shrink:0!important}.flex-xl-shrink-1{flex-shrink:1!important}.flex-xl-wrap{flex-wrap:wrap!important}.flex-xl-nowrap{flex-wrap:nowrap!important}.flex-xl-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-xl-start{justify-content:flex-start!important}.justify-content-xl-end{justify-content:flex-end!important}.justify-content-xl-center{justify-content:center!important}.justify-content-xl-between{justify-content:space-between!important}.justify-content-xl-around{justify-content:space-around!important}.justify-content-xl-evenly{justify-content:space-evenly!important}.align-items-xl-start{align-items:flex-start!important}.align-items-xl-end{align-items:flex-end!important}.align-items-xl-center{align-items:center!important}.align-items-xl-baseline{align-items:baseline!important}.align-items-xl-stretch{align-items:stretch!important}.align-content-xl-start{align-content:flex-start!important}.align-content-xl-end{align-content:flex-end!important}.align-content-xl-center{align-content:center!important}.align-content-xl-between{align-content:space-between!important}.align-content-xl-around{align-content:space-around!important}.align-content-xl-stretch{align-content:stretch!important}.align-self-xl-auto{align-self:auto!important}.align-self-xl-start{align-self:flex-start!important}.align-self-xl-end{align-self:flex-end!important}.align-self-xl-center{align-self:center!important}.align-self-xl-baseline{align-self:baseline!important}.align-self-xl-stretch{align-self:stretch!important}.order-xl-first{order:-1!important}.order-xl-0{order:0!important}.order-xl-1{order:1!important}.order-xl-2{order:2!important}.order-xl-3{order:3!important}.order-xl-4{order:4!important}.order-xl-5{order:5!important}.order-xl-last{order:6!important}.m-xl-0{margin:0!important}.m-xl-1{margin:.25rem!important}.m-xl-2{margin:.5rem!important}.m-xl-3{margin:1rem!important}.m-xl-4{margin:1.5rem!important}.m-xl-5{margin:3rem!important}.m-xl-auto{margin:auto!important}.mx-xl-0{margin-right:0!important;margin-left:0!important}.mx-xl-1{margin-right:.25rem!important;margin-left:.25rem!important}.mx-xl-2{margin-right:.5rem!important;margin-left:.5rem!important}.mx-xl-3{margin-right:1rem!important;margin-left:1rem!important}.mx-xl-4{margin-right:1.5rem!important;margin-left:1.5rem!important}.mx-xl-5{margin-right:3rem!important;margin-left:3rem!important}.mx-xl-auto{margin-right:auto!important;margin-left:auto!important}.my-xl-0{margin-top:0!important;margin-bottom:0!important}.my-xl-1{margin-top:.25rem!important;margin-bottom:.25rem!important}.my-xl-2{margin-top:.5rem!important;margin-bottom:.5rem!important}.my-xl-3{margin-top:1rem!important;margin-bottom:1rem!important}.my-xl-4{margin-top:1.5rem!important;margin-bottom:1.5rem!important}.my-xl-5{margin-top:3rem!important;margin-bottom:3rem!important}.my-xl-auto{margin-top:auto!important;margin-bottom:auto!important}.mt-xl-0{margin-top:0!important}.mt-xl-1{margin-top:.25rem!important}.mt-xl-2{margin-top:.5rem!important}.mt-xl-3{margin-top:1rem!important}.mt-xl-4{margin-top:1.5rem!important}.mt-xl-5{margin-top:3rem!important}.mt-xl-auto{margin-top:auto!important}.me-xl-0{margin-right:0!important}.me-xl-1{margin-right:.25rem!important}.me-xl-2{margin-right:.5rem!important}.me-xl-3{margin-right:1rem!important}.me-xl-4{margin-right:1.5rem!important}.me-xl-5{margin-right:3rem!important}.me-xl-auto{margin-right:auto!important}.mb-xl-0{margin-bottom:0!important}.mb-xl-1{margin-bottom:.25rem!important}.mb-xl-2{margin-bottom:.5rem!important}.mb-xl-3{margin-bottom:1rem!important}.mb-xl-4{margin-bottom:1.5rem!important}.mb-xl-5{margin-bottom:3rem!important}.mb-xl-auto{margin-bottom:auto!important}.ms-xl-0{margin-left:0!important}.ms-xl-1{margin-left:.25rem!important}.ms-xl-2{margin-left:.5rem!important}.ms-xl-3{margin-left:1rem!important}.ms-xl-4{margin-left:1.5rem!important}.ms-xl-5{margin-left:3rem!important}.ms-xl-auto{margin-left:auto!important}.p-xl-0{padding:0!important}.p-xl-1{padding:.25rem!important}.p-xl-2{padding:.5rem!important}.p-xl-3{padding:1rem!important}.p-xl-4{padding:1.5rem!important}.p-xl-5{padding:3rem!important}.px-xl-0{padding-right:0!important;padding-left:0!important}.px-xl-1{padding-right:.25rem!important;padding-left:.25rem!important}.px-xl-2{padding-right:.5rem!important;padding-left:.5rem!important}.px-xl-3{padding-right:1rem!important;padding-left:1rem!important}.px-xl-4{padding-right:1.5rem!important;padding-left:1.5rem!important}.px-xl-5{padding-right:3rem!important;padding-left:3rem!important}.py-xl-0{padding-top:0!important;padding-bottom:0!important}.py-xl-1{padding-top:.25rem!important;padding-bottom:.25rem!important}.py-xl-2{padding-top:.5rem!important;padding-bottom:.5rem!important}.py-xl-3{padding-top:1rem!important;padding-bottom:1rem!important}.py-xl-4{padding-top:1.5rem!important;padding-bottom:1.5rem!important}.py-xl-5{padding-top:3rem!important;padding-bottom:3rem!important}.pt-xl-0{padding-top:0!important}.pt-xl-1{padding-top:.25rem!important}.pt-xl-2{padding-top:.5rem!important}.pt-xl-3{padding-top:1rem!important}.pt-xl-4{padding-top:1.5rem!important}.pt-xl-5{padding-top:3rem!important}.pe-xl-0{padding-right:0!important}.pe-xl-1{padding-right:.25rem!important}.pe-xl-2{padding-right:.5rem!important}.pe-xl-3{padding-right:1rem!important}.pe-xl-4{padding-right:1.5rem!important}.pe-xl-5{padding-right:3rem!important}.pb-xl-0{padding-bottom:0!important}.pb-xl-1{padding-bottom:.25rem!important}.pb-xl-2{padding-bottom:.5rem!important}.pb-xl-3{padding-bottom:1rem!important}.pb-xl-4{padding-bottom:1.5rem!important}.pb-xl-5{padding-bottom:3rem!important}.ps-xl-0{padding-left:0!important}.ps-xl-1{padding-left:.25rem!important}.ps-xl-2{padding-left:.5rem!important}.ps-xl-3{padding-left:1rem!important}.ps-xl-4{padding-left:1.5rem!important}.ps-xl-5{padding-left:3rem!important}.gap-xl-0{gap:0!important}.gap-xl-1{gap:.25rem!important}.gap-xl-2{gap:.5rem!important}.gap-xl-3{gap:1rem!important}.gap-xl-4{gap:1.5rem!important}.gap-xl-5{gap:3rem!important}.row-gap-xl-0{row-gap:0!important}.row-gap-xl-1{row-gap:.25rem!important}.row-gap-xl-2{row-gap:.5rem!important}.row-gap-xl-3{row-gap:1rem!important}.row-gap-xl-4{row-gap:1.5rem!important}.row-gap-xl-5{row-gap:3rem!important}.column-gap-xl-0{-moz-column-gap:0!important;column-gap:0!important}.column-gap-xl-1{-moz-column-gap:0.25rem!important;column-gap:.25rem!important}.column-gap-xl-2{-moz-column-gap:0.5rem!important;column-gap:.5rem!important}.column-gap-xl-3{-moz-column-gap:1rem!important;column-gap:1rem!important}.column-gap-xl-4{-moz-column-gap:1.5rem!important;column-gap:1.5rem!important}.column-gap-xl-5{-moz-column-gap:3rem!important;column-gap:3rem!important}.text-xl-start{text-align:left!important}.text-xl-end{text-align:right!important}.text-xl-center{text-align:center!important}}@media (min-width:1400px){.float-xxl-start{float:left!important}.float-xxl-end{float:right!important}.float-xxl-none{float:none!important}.object-fit-xxl-contain{-o-object-fit:contain!important;object-fit:contain!important}.object-fit-xxl-cover{-o-object-fit:cover!important;object-fit:cover!important}.object-fit-xxl-fill{-o-object-fit:fill!important;object-fit:fill!important}.object-fit-xxl-scale{-o-object-fit:scale-down!important;object-fit:scale-down!important}.object-fit-xxl-none{-o-object-fit:none!important;object-fit:none!important}.d-xxl-inline{display:inline!important}.d-xxl-inline-block{display:inline-block!important}.d-xxl-block{display:block!important}.d-xxl-grid{display:grid!important}.d-xxl-table{display:table!important}.d-xxl-table-row{display:table-row!important}.d-xxl-table-cell{display:table-cell!important}.d-xxl-flex{display:flex!important}.d-xxl-inline-flex{display:inline-flex!important}.d-xxl-none{display:none!important}.flex-xxl-fill{flex:1 1 auto!important}.flex-xxl-row{flex-direction:row!important}.flex-xxl-column{flex-direction:column!important}.flex-xxl-row-reverse{flex-direction:row-reverse!important}.flex-xxl-column-reverse{flex-direction:column-reverse!important}.flex-xxl-grow-0{flex-grow:0!important}.flex-xxl-grow-1{flex-grow:1!important}.flex-xxl-shrink-0{flex-shrink:0!important}.flex-xxl-shrink-1{flex-shrink:1!important}.flex-xxl-wrap{flex-wrap:wrap!important}.flex-xxl-nowrap{flex-wrap:nowrap!important}.flex-xxl-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-xxl-start{justify-content:flex-start!important}.justify-content-xxl-end{justify-content:flex-end!important}.justify-content-xxl-center{justify-content:center!important}.justify-content-xxl-between{justify-content:space-between!important}.justify-content-xxl-around{justify-content:space-around!important}.justify-content-xxl-evenly{justify-content:space-evenly!important}.align-items-xxl-start{align-items:flex-start!important}.align-items-xxl-end{align-items:flex-end!important}.align-items-xxl-center{align-items:center!important}.align-items-xxl-baseline{align-items:baseline!important}.align-items-xxl-stretch{align-items:stretch!important}.align-content-xxl-start{align-content:flex-start!important}.align-content-xxl-end{align-content:flex-end!important}.align-content-xxl-center{align-content:center!important}.align-content-xxl-between{align-content:space-between!important}.align-content-xxl-around{align-content:space-around!important}.align-content-xxl-stretch{align-content:stretch!important}.align-self-xxl-auto{align-self:auto!important}.align-self-xxl-start{align-self:flex-start!important}.align-self-xxl-end{align-self:flex-end!important}.align-self-xxl-center{align-self:center!important}.align-self-xxl-baseline{align-self:baseline!important}.align-self-xxl-stretch{align-self:stretch!important}.order-xxl-first{order:-1!important}.order-xxl-0{order:0!important}.order-xxl-1{order:1!important}.order-xxl-2{order:2!important}.order-xxl-3{order:3!important}.order-xxl-4{order:4!important}.order-xxl-5{order:5!important}.order-xxl-last{order:6!important}.m-xxl-0{margin:0!important}.m-xxl-1{margin:.25rem!important}.m-xxl-2{margin:.5rem!important}.m-xxl-3{margin:1rem!important}.m-xxl-4{margin:1.5rem!important}.m-xxl-5{margin:3rem!important}.m-xxl-auto{margin:auto!important}.mx-xxl-0{margin-right:0!important;margin-left:0!important}.mx-xxl-1{margin-right:.25rem!important;margin-left:.25rem!important}.mx-xxl-2{margin-right:.5rem!important;margin-left:.5rem!important}.mx-xxl-3{margin-right:1rem!important;margin-left:1rem!important}.mx-xxl-4{margin-right:1.5rem!important;margin-left:1.5rem!important}.mx-xxl-5{margin-right:3rem!important;margin-left:3rem!important}.mx-xxl-auto{margin-right:auto!important;margin-left:auto!important}.my-xxl-0{margin-top:0!important;margin-bottom:0!important}.my-xxl-1{margin-top:.25rem!important;margin-bottom:.25rem!important}.my-xxl-2{margin-top:.5rem!important;margin-bottom:.5rem!important}.my-xxl-3{margin-top:1rem!important;margin-bottom:1rem!important}.my-xxl-4{margin-top:1.5rem!important;margin-bottom:1.5rem!important}.my-xxl-5{margin-top:3rem!important;margin-bottom:3rem!important}.my-xxl-auto{margin-top:auto!important;margin-bottom:auto!important}.mt-xxl-0{margin-top:0!important}.mt-xxl-1{margin-top:.25rem!important}.mt-xxl-2{margin-top:.5rem!important}.mt-xxl-3{margin-top:1rem!important}.mt-xxl-4{margin-top:1.5rem!important}.mt-xxl-5{margin-top:3rem!important}.mt-xxl-auto{margin-top:auto!important}.me-xxl-0{margin-right:0!important}.me-xxl-1{margin-right:.25rem!important}.me-xxl-2{margin-right:.5rem!important}.me-xxl-3{margin-right:1rem!important}.me-xxl-4{margin-right:1.5rem!important}.me-xxl-5{margin-right:3rem!important}.me-xxl-auto{margin-right:auto!important}.mb-xxl-0{margin-bottom:0!important}.mb-xxl-1{margin-bottom:.25rem!important}.mb-xxl-2{margin-bottom:.5rem!important}.mb-xxl-3{margin-bottom:1rem!important}.mb-xxl-4{margin-bottom:1.5rem!important}.mb-xxl-5{margin-bottom:3rem!important}.mb-xxl-auto{margin-bottom:auto!important}.ms-xxl-0{margin-left:0!important}.ms-xxl-1{margin-left:.25rem!important}.ms-xxl-2{margin-left:.5rem!important}.ms-xxl-3{margin-left:1rem!important}.ms-xxl-4{margin-left:1.5rem!important}.ms-xxl-5{margin-left:3rem!important}.ms-xxl-auto{margin-left:auto!important}.p-xxl-0{padding:0!important}.p-xxl-1{padding:.25rem!important}.p-xxl-2{padding:.5rem!important}.p-xxl-3{padding:1rem!important}.p-xxl-4{padding:1.5rem!important}.p-xxl-5{padding:3rem!important}.px-xxl-0{padding-right:0!important;padding-left:0!important}.px-xxl-1{padding-right:.25rem!important;padding-left:.25rem!important}.px-xxl-2{padding-right:.5rem!important;padding-left:.5rem!important}.px-xxl-3{padding-right:1rem!important;padding-left:1rem!important}.px-xxl-4{padding-right:1.5rem!important;padding-left:1.5rem!important}.px-xxl-5{padding-right:3rem!important;padding-left:3rem!important}.py-xxl-0{padding-top:0!important;padding-bottom:0!important}.py-xxl-1{padding-top:.25rem!important;padding-bottom:.25rem!important}.py-xxl-2{padding-top:.5rem!important;padding-bottom:.5rem!important}.py-xxl-3{padding-top:1rem!important;padding-bottom:1rem!important}.py-xxl-4{padding-top:1.5rem!important;padding-bottom:1.5rem!important}.py-xxl-5{padding-top:3rem!important;padding-bottom:3rem!important}.pt-xxl-0{padding-top:0!important}.pt-xxl-1{padding-top:.25rem!important}.pt-xxl-2{padding-top:.5rem!important}.pt-xxl-3{padding-top:1rem!important}.pt-xxl-4{padding-top:1.5rem!important}.pt-xxl-5{padding-top:3rem!important}.pe-xxl-0{padding-right:0!important}.pe-xxl-1{padding-right:.25rem!important}.pe-xxl-2{padding-right:.5rem!important}.pe-xxl-3{padding-right:1rem!important}.pe-xxl-4{padding-right:1.5rem!important}.pe-xxl-5{padding-right:3rem!important}.pb-xxl-0{padding-bottom:0!important}.pb-xxl-1{padding-bottom:.25rem!important}.pb-xxl-2{padding-bottom:.5rem!important}.pb-xxl-3{padding-bottom:1rem!important}.pb-xxl-4{padding-bottom:1.5rem!important}.pb-xxl-5{padding-bottom:3rem!important}.ps-xxl-0{padding-left:0!important}.ps-xxl-1{padding-left:.25rem!important}.ps-xxl-2{padding-left:.5rem!important}.ps-xxl-3{padding-left:1rem!important}.ps-xxl-4{padding-left:1.5rem!important}.ps-xxl-5{padding-left:3rem!important}.gap-xxl-0{gap:0!important}.gap-xxl-1{gap:.25rem!important}.gap-xxl-2{gap:.5rem!important}.gap-xxl-3{gap:1rem!important}.gap-xxl-4{gap:1.5rem!important}.gap-xxl-5{gap:3rem!important}.row-gap-xxl-0{row-gap:0!important}.row-gap-xxl-1{row-gap:.25rem!important}.row-gap-xxl-2{row-gap:.5rem!important}.row-gap-xxl-3{row-gap:1rem!important}.row-gap-xxl-4{row-gap:1.5rem!important}.row-gap-xxl-5{row-gap:3rem!important}.column-gap-xxl-0{-moz-column-gap:0!important;column-gap:0!important}.column-gap-xxl-1{-moz-column-gap:0.25rem!important;column-gap:.25rem!important}.column-gap-xxl-2{-moz-column-gap:0.5rem!important;column-gap:.5rem!important}.column-gap-xxl-3{-moz-column-gap:1rem!important;column-gap:1rem!important}.column-gap-xxl-4{-moz-column-gap:1.5rem!important;column-gap:1.5rem!important}.column-gap-xxl-5{-moz-column-gap:3rem!important;column-gap:3rem!important}.text-xxl-start{text-align:left!important}.text-xxl-end{text-align:right!important}.text-xxl-center{text-align:center!important}}@media (min-width:1200px){.fs-1{font-size:2.5rem!important}.fs-2{font-size:2rem!important}.fs-3{font-size:1.75rem!important}.fs-4{font-size:1.5rem!important}}@media print{.d-print-inline{display:inline!important}.d-print-inline-block{display:inline-block!important}.d-print-block{display:block!important}.d-print-grid{display:grid!important}.d-print-table{display:table!important}.d-print-table-row{display:table-row!important}.d-print-table-cell{display:table-cell!important}.d-print-flex{display:flex!important}.d-print-inline-flex{display:inline-flex!important}.d-print-none{display:none!important}}
   6	/*# sourceMappingURL=bootstrap.min.css.map */

--- File: static/bootstrap/css/font-awesome.min.css ---
   1	/*!
   2	 * Font Awesome Free 6.0.0-beta3 by @fontawesome - https://fontawesome.com
   3	 * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
   4	 * Copyright 2021 Fonticons, Inc.
   5	 */
   6	.fa{font-family:var(--fa-style-family,"Font Awesome 6 Free");font-weight:var(--fa-style,900)}.fa,.fa-brands,.fa-duotone,.fa-light,.fa-regular,.fa-solid,.fa-thin,.fab,.fad,.fal,.far,.fas,.fat{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:var(--fa-display,inline-block);font-style:normal;font-variant:normal;line-height:1;text-rendering:auto}.fa-1x{font-size:1em}.fa-2x{font-size:2em}.fa-3x{font-size:3em}.fa-4x{font-size:4em}.fa-5x{font-size:5em}.fa-6x{font-size:6em}.fa-7x{font-size:7em}.fa-8x{font-size:8em}.fa-9x{font-size:9em}.fa-10x{font-size:10em}.fa-2xs{font-size:.625em;line-height:.1em;vertical-align:.225em}.fa-xs{font-size:.75em;line-height:.08333em;vertical-align:.125em}.fa-sm{font-size:.875em;line-height:.07143em;vertical-align:.05357em}.fa-lg{font-size:1.25em;line-height:.05em;vertical-align:-.075em}.fa-xl{font-size:1.5em;line-height:.04167em;vertical-align:-.125em}.fa-2xl{font-size:2em;line-height:.03125em;vertical-align:-.1875em}.fa-fw{text-align:center;width:1.25em}.fa-ul{list-style-type:none;margin-left:var(--fa-li-margin,2.5em);padding-left:0}.fa-ul>li{position:relative}.fa-li{left:calc(var(--fa-li-width, 2em)*-1);position:absolute;text-align:center;width:var(--fa-li-width,2em);line-height:inherit}.fa-border{border-radius:var(--fa-border-radius,.1em);border:var(--fa-border-width,.08em) var(--fa-border-style,solid) var(--fa-border-color,#eee);padding:var(--fa-border-padding,.2em .25em .15em)}.fa-pull-left{float:left;margin-right:var(--fa-pull-margin,.3em)}.fa-pull-right{float:right;margin-left:var(--fa-pull-margin,.3em)}.fa-beat{-webkit-animation-name:fa-beat;animation-name:fa-beat;-webkit-animation-delay:var(--fa-animation-delay,0);animation-delay:var(--fa-animation-delay,0);-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-timing-function:var(--fa-animation-timing,ease-in-out);animation-timing-function:var(--fa-animation-timing,ease-in-out)}.fa-fade{-webkit-animation-name:fa-fade;animation-name:fa-fade;-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-timing-function:var(--fa-animation-timing,cubic-bezier(.4,0,.6,1));animation-timing-function:var(--fa-animation-timing,cubic-bezier(.4,0,.6,1))}.fa-beat-fade,.fa-fade{-webkit-animation-delay:var(--fa-animation-delay,0);animation-delay:var(--fa-animation-delay,0);-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s)}.fa-beat-fade{-webkit-animation-name:fa-beat-fade;animation-name:fa-beat-fade;-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-timing-function:var(--fa-animation-timing,cubic-bezier(.4,0,.6,1));animation-timing-function:var(--fa-animation-timing,cubic-bezier(.4,0,.6,1))}.fa-flip{-webkit-animation-name:fa-flip;animation-name:fa-flip;-webkit-animation-delay:var(--fa-animation-delay,0);animation-delay:var(--fa-animation-delay,0);-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-timing-function:var(--fa-animation-timing,ease-in-out);animation-timing-function:var(--fa-animation-timing,ease-in-out)}.fa-spin{-webkit-animation-name:fa-spin;animation-name:fa-spin;-webkit-animation-delay:var(--fa-animation-delay,0);animation-delay:var(--fa-animation-delay,0);-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,2s);animation-duration:var(--fa-animation-duration,2s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-timing-function:var(--fa-animation-timing,linear);animation-timing-function:var(--fa-animation-timing,linear)}.fa-spin-reverse{--fa-animation-direction:reverse}.fa-pulse,.fa-spin-pulse{-webkit-animation-name:fa-spin;animation-name:fa-spin;-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-timing-function:var(--fa-animation-timing,steps(8));animation-timing-function:var(--fa-animation-timing,steps(8))}@media (prefers-reduced-motion:reduce){.fa-beat,.fa-beat-fade,.fa-fade,.fa-flip,.fa-pulse,.fa-spin,.fa-spin-pulse{-webkit-animation-delay:-1ms;animation-delay:-1ms;-webkit-animation-duration:1ms;animation-duration:1ms;-webkit-animation-iteration-count:1;animation-iteration-count:1;-webkit-transition-delay:0s;transition-delay:0s;-webkit-transition-duration:0s;transition-duration:0s}}@-webkit-keyframes fa-beat{0%,90%{-webkit-transform:scale(1);transform:scale(1)}45%{-webkit-transform:scale(var(--fa-beat-scale,1.25));transform:scale(var(--fa-beat-scale,1.25))}}@keyframes fa-beat{0%,90%{-webkit-transform:scale(1);transform:scale(1)}45%{-webkit-transform:scale(var(--fa-beat-scale,1.25));transform:scale(var(--fa-beat-scale,1.25))}}@-webkit-keyframes fa-fade{50%{opacity:var(--fa-fade-opacity,.4)}}@keyframes fa-fade{50%{opacity:var(--fa-fade-opacity,.4)}}@-webkit-keyframes fa-beat-fade{0%,to{opacity:var(--fa-beat-fade-opacity,.4);-webkit-transform:scale(1);transform:scale(1)}50%{opacity:1;-webkit-transform:scale(var(--fa-beat-fade-scale,1.125));transform:scale(var(--fa-beat-fade-scale,1.125))}}@keyframes fa-beat-fade{0%,to{opacity:var(--fa-beat-fade-opacity,.4);-webkit-transform:scale(1);transform:scale(1)}50%{opacity:1;-webkit-transform:scale(var(--fa-beat-fade-scale,1.125));transform:scale(var(--fa-beat-fade-scale,1.125))}}@-webkit-keyframes fa-flip{50%{-webkit-transform:rotate3d(var(--fa-flip-x,0),var(--fa-flip-y,1),var(--fa-flip-z,0),var(--fa-flip-angle,-180deg));transform:rotate3d(var(--fa-flip-x,0),var(--fa-flip-y,1),var(--fa-flip-z,0),var(--fa-flip-angle,-180deg))}}@keyframes fa-flip{50%{-webkit-transform:rotate3d(var(--fa-flip-x,0),var(--fa-flip-y,1),var(--fa-flip-z,0),var(--fa-flip-angle,-180deg));transform:rotate3d(var(--fa-flip-x,0),var(--fa-flip-y,1),var(--fa-flip-z,0),var(--fa-flip-angle,-180deg))}}@-webkit-keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}.fa-rotate-90{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.fa-rotate-180{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.fa-rotate-270{-webkit-transform:rotate(270deg);transform:rotate(270deg)}.fa-flip-horizontal{-webkit-transform:scaleX(-1);transform:scaleX(-1)}.fa-flip-vertical{-webkit-transform:scaleY(-1);transform:scaleY(-1)}.fa-flip-both,.fa-flip-horizontal.fa-flip-vertical{-webkit-transform:scale(-1);transform:scale(-1)}.fa-rotate-by{-webkit-transform:rotate(var(--fa-rotate-angle,none));transform:rotate(var(--fa-rotate-angle,none))}.fa-stack{display:inline-block;height:2em;line-height:2em;position:relative;vertical-align:middle;width:2.5em}.fa-stack-1x,.fa-stack-2x{left:0;position:absolute;text-align:center;width:100%;z-index:var(--fa-stack-z-index,auto)}.fa-stack-1x{line-height:inherit}.fa-stack-2x{font-size:2em}.fa-inverse{color:var(--fa-inverse,#fff)}.fa-0:before{content:"\30"}.fa-1:before{content:"\31"}.fa-2:before{content:"\32"}.fa-3:before{content:"\33"}.fa-4:before{content:"\34"}.fa-5:before{content:"\35"}.fa-6:before{content:"\36"}.fa-7:before{content:"\37"}.fa-8:before{content:"\38"}.fa-9:before{content:"\39"}.fa-a:before{content:"\41"}.fa-address-book:before,.fa-contact-book:before{content:"\f2b9"}.fa-address-card:before,.fa-contact-card:before,.fa-vcard:before{content:"\f2bb"}.fa-align-center:before{content:"\f037"}.fa-align-justify:before{content:"\f039"}.fa-align-left:before{content:"\f036"}.fa-align-right:before{content:"\f038"}.fa-anchor:before{content:"\f13d"}.fa-angle-down:before{content:"\f107"}.fa-angle-left:before{content:"\f104"}.fa-angle-right:before{content:"\f105"}.fa-angle-up:before{content:"\f106"}.fa-angle-double-down:before,.fa-angles-down:before{content:"\f103"}.fa-angle-double-left:before,.fa-angles-left:before{content:"\f100"}.fa-angle-double-right:before,.fa-angles-right:before{content:"\f101"}.fa-angle-double-up:before,.fa-angles-up:before{content:"\f102"}.fa-ankh:before{content:"\f644"}.fa-apple-alt:before,.fa-apple-whole:before{content:"\f5d1"}.fa-archway:before{content:"\f557"}.fa-arrow-down:before{content:"\f063"}.fa-arrow-down-1-9:before,.fa-sort-numeric-asc:before,.fa-sort-numeric-down:before{content:"\f162"}.fa-arrow-down-9-1:before,.fa-sort-numeric-desc:before,.fa-sort-numeric-down-alt:before{content:"\f886"}.fa-arrow-down-a-z:before,.fa-sort-alpha-asc:before,.fa-sort-alpha-down:before{content:"\f15d"}.fa-arrow-down-long:before,.fa-long-arrow-down:before{content:"\f175"}.fa-arrow-down-short-wide:before,.fa-sort-amount-desc:before,.fa-sort-amount-down-alt:before{content:"\f884"}.fa-arrow-down-wide-short:before,.fa-sort-amount-asc:before,.fa-sort-amount-down:before{content:"\f160"}.fa-arrow-down-z-a:before,.fa-sort-alpha-desc:before,.fa-sort-alpha-down-alt:before{content:"\f881"}.fa-arrow-left:before{content:"\f060"}.fa-arrow-left-long:before,.fa-long-arrow-left:before{content:"\f177"}.fa-arrow-pointer:before,.fa-mouse-pointer:before{content:"\f245"}.fa-arrow-right:before{content:"\f061"}.fa-arrow-right-arrow-left:before,.fa-exchange:before{content:"\f0ec"}.fa-arrow-right-from-bracket:before,.fa-sign-out:before{content:"\f08b"}.fa-arrow-right-long:before,.fa-long-arrow-right:before{content:"\f178"}.fa-arrow-right-to-bracket:before,.fa-sign-in:before{content:"\f090"}.fa-arrow-left-rotate:before,.fa-arrow-rotate-back:before,.fa-arrow-rotate-backward:before,.fa-arrow-rotate-left:before,.fa-undo:before{content:"\f0e2"}.fa-arrow-right-rotate:before,.fa-arrow-rotate-forward:before,.fa-arrow-rotate-right:before,.fa-redo:before{content:"\f01e"}.fa-arrow-trend-down:before{content:"\e097"}.fa-arrow-trend-up:before{content:"\e098"}.fa-arrow-turn-down:before,.fa-level-down:before{content:"\f149"}.fa-arrow-turn-up:before,.fa-level-up:before{content:"\f148"}.fa-arrow-up:before{content:"\f062"}.fa-arrow-up-1-9:before,.fa-sort-numeric-up:before{content:"\f163"}.fa-arrow-up-9-1:before,.fa-sort-numeric-up-alt:before{content:"\f887"}.fa-arrow-up-a-z:before,.fa-sort-alpha-up:before{content:"\f15e"}.fa-arrow-up-from-bracket:before{content:"\e09a"}.fa-arrow-up-long:before,.fa-long-arrow-up:before{content:"\f176"}.fa-arrow-up-right-from-square:before,.fa-external-link:before{content:"\f08e"}.fa-arrow-up-short-wide:before,.fa-sort-amount-up-alt:before{content:"\f885"}.fa-arrow-up-wide-short:before,.fa-sort-amount-up:before{content:"\f161"}.fa-arrow-up-z-a:before,.fa-sort-alpha-up-alt:before{content:"\f882"}.fa-arrows-h:before,.fa-arrows-left-right:before{content:"\f07e"}.fa-arrows-rotate:before,.fa-refresh:before,.fa-sync:before{content:"\f021"}.fa-arrows-up-down:before,.fa-arrows-v:before{content:"\f07d"}.fa-arrows-up-down-left-right:before,.fa-arrows:before{content:"\f047"}.fa-asterisk:before{content:"\2a"}.fa-at:before{content:"\40"}.fa-atom:before{content:"\f5d2"}.fa-audio-description:before{content:"\f29e"}.fa-austral-sign:before{content:"\e0a9"}.fa-award:before{content:"\f559"}.fa-b:before{content:"\42"}.fa-baby:before{content:"\f77c"}.fa-baby-carriage:before,.fa-carriage-baby:before{content:"\f77d"}.fa-backward:before{content:"\f04a"}.fa-backward-fast:before,.fa-fast-backward:before{content:"\f049"}.fa-backward-step:before,.fa-step-backward:before{content:"\f048"}.fa-bacon:before{content:"\f7e5"}.fa-bacteria:before{content:"\e059"}.fa-bacterium:before{content:"\e05a"}.fa-bag-shopping:before,.fa-shopping-bag:before{content:"\f290"}.fa-bahai:before{content:"\f666"}.fa-baht-sign:before{content:"\e0ac"}.fa-ban:before,.fa-cancel:before{content:"\f05e"}.fa-ban-smoking:before,.fa-smoking-ban:before{content:"\f54d"}.fa-band-aid:before,.fa-bandage:before{content:"\f462"}.fa-bank:before,.fa-institution:before,.fa-university:before{content:"\f19c"}.fa-barcode:before{content:"\f02a"}.fa-bars:before,.fa-navicon:before{content:"\f0c9"}.fa-bars-progress:before,.fa-tasks-alt:before{content:"\f828"}.fa-bars-staggered:before,.fa-reorder:before,.fa-stream:before{content:"\f550"}.fa-baseball-ball:before,.fa-baseball:before{content:"\f433"}.fa-basket-shopping:before,.fa-shopping-basket:before{content:"\f291"}.fa-basketball-ball:before,.fa-basketball:before{content:"\f434"}.fa-bath:before,.fa-bathtub:before{content:"\f2cd"}.fa-battery-0:before,.fa-battery-empty:before{content:"\f244"}.fa-battery-5:before,.fa-battery-full:before,.fa-battery:before{content:"\f240"}.fa-battery-3:before,.fa-battery-half:before{content:"\f242"}.fa-battery-2:before,.fa-battery-quarter:before{content:"\f243"}.fa-battery-4:before,.fa-battery-three-quarters:before{content:"\f241"}.fa-bed:before{content:"\f236"}.fa-bed-pulse:before,.fa-procedures:before{content:"\f487"}.fa-beer-mug-empty:before,.fa-beer:before{content:"\f0fc"}.fa-bell:before{content:"\f0f3"}.fa-bell-concierge:before,.fa-concierge-bell:before{content:"\f562"}.fa-bell-slash:before{content:"\f1f6"}.fa-bezier-curve:before{content:"\f55b"}.fa-bicycle:before{content:"\f206"}.fa-binoculars:before{content:"\f1e5"}.fa-biohazard:before{content:"\f780"}.fa-bitcoin-sign:before{content:"\e0b4"}.fa-blender:before{content:"\f517"}.fa-blender-phone:before{content:"\f6b6"}.fa-blog:before{content:"\f781"}.fa-bold:before{content:"\f032"}.fa-bolt:before,.fa-zap:before{content:"\f0e7"}.fa-bomb:before{content:"\f1e2"}.fa-bone:before{content:"\f5d7"}.fa-bong:before{content:"\f55c"}.fa-book:before{content:"\f02d"}.fa-atlas:before,.fa-book-atlas:before{content:"\f558"}.fa-bible:before,.fa-book-bible:before{content:"\f647"}.fa-book-journal-whills:before,.fa-journal-whills:before{content:"\f66a"}.fa-book-medical:before{content:"\f7e6"}.fa-book-open:before{content:"\f518"}.fa-book-open-reader:before,.fa-book-reader:before{content:"\f5da"}.fa-book-quran:before,.fa-quran:before{content:"\f687"}.fa-book-dead:before,.fa-book-skull:before{content:"\f6b7"}.fa-bookmark:before{content:"\f02e"}.fa-border-all:before{content:"\f84c"}.fa-border-none:before{content:"\f850"}.fa-border-style:before,.fa-border-top-left:before{content:"\f853"}.fa-bowling-ball:before{content:"\f436"}.fa-box:before{content:"\f466"}.fa-archive:before,.fa-box-archive:before{content:"\f187"}.fa-box-open:before{content:"\f49e"}.fa-box-tissue:before{content:"\e05b"}.fa-boxes-alt:before,.fa-boxes-stacked:before,.fa-boxes:before{content:"\f468"}.fa-braille:before{content:"\f2a1"}.fa-brain:before{content:"\f5dc"}.fa-brazilian-real-sign:before{content:"\e46c"}.fa-bread-slice:before{content:"\f7ec"}.fa-briefcase:before{content:"\f0b1"}.fa-briefcase-medical:before{content:"\f469"}.fa-broom:before{content:"\f51a"}.fa-broom-ball:before,.fa-quidditch-broom-ball:before,.fa-quidditch:before{content:"\f458"}.fa-brush:before{content:"\f55d"}.fa-bug:before{content:"\f188"}.fa-building:before{content:"\f1ad"}.fa-bullhorn:before{content:"\f0a1"}.fa-bullseye:before{content:"\f140"}.fa-burger:before,.fa-hamburger:before{content:"\f805"}.fa-bus:before{content:"\f207"}.fa-bus-alt:before,.fa-bus-simple:before{content:"\f55e"}.fa-briefcase-clock:before,.fa-business-time:before{content:"\f64a"}.fa-c:before{content:"\43"}.fa-birthday-cake:before,.fa-cake-candles:before,.fa-cake:before{content:"\f1fd"}.fa-calculator:before{content:"\f1ec"}.fa-calendar:before{content:"\f133"}.fa-calendar-check:before{content:"\f274"}.fa-calendar-day:before{content:"\f783"}.fa-calendar-alt:before,.fa-calendar-days:before{content:"\f073"}.fa-calendar-minus:before{content:"\f272"}.fa-calendar-plus:before{content:"\f271"}.fa-calendar-week:before{content:"\f784"}.fa-calendar-times:before,.fa-calendar-xmark:before{content:"\f273"}.fa-camera-alt:before,.fa-camera:before{content:"\f030"}.fa-camera-retro:before{content:"\f083"}.fa-camera-rotate:before{content:"\e0d8"}.fa-campground:before{content:"\f6bb"}.fa-candy-cane:before{content:"\f786"}.fa-cannabis:before{content:"\f55f"}.fa-capsules:before{content:"\f46b"}.fa-automobile:before,.fa-car:before{content:"\f1b9"}.fa-battery-car:before,.fa-car-battery:before{content:"\f5df"}.fa-car-crash:before{content:"\f5e1"}.fa-car-alt:before,.fa-car-rear:before{content:"\f5de"}.fa-car-side:before{content:"\f5e4"}.fa-caravan:before{content:"\f8ff"}.fa-caret-down:before{content:"\f0d7"}.fa-caret-left:before{content:"\f0d9"}.fa-caret-right:before{content:"\f0da"}.fa-caret-up:before{content:"\f0d8"}.fa-carrot:before{content:"\f787"}.fa-cart-arrow-down:before{content:"\f218"}.fa-cart-flatbed:before,.fa-dolly-flatbed:before{content:"\f474"}.fa-cart-flatbed-suitcase:before,.fa-luggage-cart:before{content:"\f59d"}.fa-cart-plus:before{content:"\f217"}.fa-cart-shopping:before,.fa-shopping-cart:before{content:"\f07a"}.fa-cash-register:before{content:"\f788"}.fa-cat:before{content:"\f6be"}.fa-cedi-sign:before{content:"\e0df"}.fa-cent-sign:before{content:"\e3f5"}.fa-certificate:before{content:"\f0a3"}.fa-chair:before{content:"\f6c0"}.fa-blackboard:before,.fa-chalkboard:before{content:"\f51b"}.fa-chalkboard-teacher:before,.fa-chalkboard-user:before{content:"\f51c"}.fa-champagne-glasses:before,.fa-glass-cheers:before{content:"\f79f"}.fa-charging-station:before{content:"\f5e7"}.fa-area-chart:before,.fa-chart-area:before{content:"\f1fe"}.fa-bar-chart:before,.fa-chart-bar:before{content:"\f080"}.fa-chart-column:before{content:"\e0e3"}.fa-chart-gantt:before{content:"\e0e4"}.fa-chart-line:before,.fa-line-chart:before{content:"\f201"}.fa-chart-pie:before,.fa-pie-chart:before{content:"\f200"}.fa-check:before{content:"\f00c"}.fa-check-double:before{content:"\f560"}.fa-check-to-slot:before,.fa-vote-yea:before{content:"\f772"}.fa-cheese:before{content:"\f7ef"}.fa-chess:before{content:"\f439"}.fa-chess-bishop:before{content:"\f43a"}.fa-chess-board:before{content:"\f43c"}.fa-chess-king:before{content:"\f43f"}.fa-chess-knight:before{content:"\f441"}.fa-chess-pawn:before{content:"\f443"}.fa-chess-queen:before{content:"\f445"}.fa-chess-rook:before{content:"\f447"}.fa-chevron-down:before{content:"\f078"}.fa-chevron-left:before{content:"\f053"}.fa-chevron-right:before{content:"\f054"}.fa-chevron-up:before{content:"\f077"}.fa-child:before{content:"\f1ae"}.fa-church:before{content:"\f51d"}.fa-circle:before{content:"\f111"}.fa-arrow-circle-down:before,.fa-circle-arrow-down:before{content:"\f0ab"}.fa-arrow-circle-left:before,.fa-circle-arrow-left:before{content:"\f0a8"}.fa-arrow-circle-right:before,.fa-circle-arrow-right:before{content:"\f0a9"}.fa-arrow-circle-up:before,.fa-circle-arrow-up:before{content:"\f0aa"}.fa-check-circle:before,.fa-circle-check:before{content:"\f058"}.fa-chevron-circle-down:before,.fa-circle-chevron-down:before{content:"\f13a"}.fa-chevron-circle-left:before,.fa-circle-chevron-left:before{content:"\f137"}.fa-chevron-circle-right:before,.fa-circle-chevron-right:before{content:"\f138"}.fa-chevron-circle-up:before,.fa-circle-chevron-up:before{content:"\f139"}.fa-circle-dollar-to-slot:before,.fa-donate:before{content:"\f4b9"}.fa-circle-dot:before,.fa-dot-circle:before{content:"\f192"}.fa-arrow-alt-circle-down:before,.fa-circle-down:before{content:"\f358"}.fa-circle-exclamation:before,.fa-exclamation-circle:before{content:"\f06a"}.fa-circle-h:before,.fa-hospital-symbol:before{content:"\f47e"}.fa-adjust:before,.fa-circle-half-stroke:before{content:"\f042"}.fa-circle-info:before,.fa-info-circle:before{content:"\f05a"}.fa-arrow-alt-circle-left:before,.fa-circle-left:before{content:"\f359"}.fa-circle-minus:before,.fa-minus-circle:before{content:"\f056"}.fa-circle-notch:before{content:"\f1ce"}.fa-circle-pause:before,.fa-pause-circle:before{content:"\f28b"}.fa-circle-play:before,.fa-play-circle:before{content:"\f144"}.fa-circle-plus:before,.fa-plus-circle:before{content:"\f055"}.fa-circle-question:before,.fa-question-circle:before{content:"\f059"}.fa-circle-radiation:before,.fa-radiation-alt:before{content:"\f7ba"}.fa-arrow-alt-circle-right:before,.fa-circle-right:before{content:"\f35a"}.fa-circle-stop:before,.fa-stop-circle:before{content:"\f28d"}.fa-arrow-alt-circle-up:before,.fa-circle-up:before{content:"\f35b"}.fa-circle-user:before,.fa-user-circle:before{content:"\f2bd"}.fa-circle-xmark:before,.fa-times-circle:before,.fa-xmark-circle:before{content:"\f057"}.fa-city:before{content:"\f64f"}.fa-clapperboard:before{content:"\e131"}.fa-clipboard:before{content:"\f328"}.fa-clipboard-check:before{content:"\f46c"}.fa-clipboard-list:before{content:"\f46d"}.fa-clock-four:before,.fa-clock:before{content:"\f017"}.fa-clock-rotate-left:before,.fa-history:before{content:"\f1da"}.fa-clone:before{content:"\f24d"}.fa-closed-captioning:before{content:"\f20a"}.fa-cloud:before{content:"\f0c2"}.fa-cloud-arrow-down:before,.fa-cloud-download-alt:before,.fa-cloud-download:before{content:"\f0ed"}.fa-cloud-arrow-up:before,.fa-cloud-upload-alt:before,.fa-cloud-upload:before{content:"\f0ee"}.fa-cloud-meatball:before{content:"\f73b"}.fa-cloud-moon:before{content:"\f6c3"}.fa-cloud-moon-rain:before{content:"\f73c"}.fa-cloud-rain:before{content:"\f73d"}.fa-cloud-showers-heavy:before{content:"\f740"}.fa-cloud-sun:before{content:"\f6c4"}.fa-cloud-sun-rain:before{content:"\f743"}.fa-clover:before{content:"\e139"}.fa-code:before{content:"\f121"}.fa-code-branch:before{content:"\f126"}.fa-code-commit:before{content:"\f386"}.fa-code-compare:before{content:"\e13a"}.fa-code-fork:before{content:"\e13b"}.fa-code-merge:before{content:"\f387"}.fa-code-pull-request:before{content:"\e13c"}.fa-coins:before{content:"\f51e"}.fa-colon-sign:before{content:"\e140"}.fa-comment:before{content:"\f075"}.fa-comment-dollar:before{content:"\f651"}.fa-comment-dots:before,.fa-commenting:before{content:"\f4ad"}.fa-comment-medical:before{content:"\f7f5"}.fa-comment-slash:before{content:"\f4b3"}.fa-comment-sms:before,.fa-sms:before{content:"\f7cd"}.fa-comments:before{content:"\f086"}.fa-comments-dollar:before{content:"\f653"}.fa-compact-disc:before{content:"\f51f"}.fa-compass:before{content:"\f14e"}.fa-compass-drafting:before,.fa-drafting-compass:before{content:"\f568"}.fa-compress:before{content:"\f066"}.fa-computer-mouse:before,.fa-mouse:before{content:"\f8cc"}.fa-cookie:before{content:"\f563"}.fa-cookie-bite:before{content:"\f564"}.fa-copy:before{content:"\f0c5"}.fa-copyright:before{content:"\f1f9"}.fa-couch:before{content:"\f4b8"}.fa-credit-card-alt:before,.fa-credit-card:before{content:"\f09d"}.fa-crop:before{content:"\f125"}.fa-crop-alt:before,.fa-crop-simple:before{content:"\f565"}.fa-cross:before{content:"\f654"}.fa-crosshairs:before{content:"\f05b"}.fa-crow:before{content:"\f520"}.fa-crown:before{content:"\f521"}.fa-crutch:before{content:"\f7f7"}.fa-cruzeiro-sign:before{content:"\e152"}.fa-cube:before{content:"\f1b2"}.fa-cubes:before{content:"\f1b3"}.fa-d:before{content:"\44"}.fa-database:before{content:"\f1c0"}.fa-backspace:before,.fa-delete-left:before{content:"\f55a"}.fa-democrat:before{content:"\f747"}.fa-desktop-alt:before,.fa-desktop:before{content:"\f390"}.fa-dharmachakra:before{content:"\f655"}.fa-diagram-project:before,.fa-project-diagram:before{content:"\f542"}.fa-diamond:before{content:"\f219"}.fa-diamond-turn-right:before,.fa-directions:before{content:"\f5eb"}.fa-dice:before{content:"\f522"}.fa-dice-d20:before{content:"\f6cf"}.fa-dice-d6:before{content:"\f6d1"}.fa-dice-five:before{content:"\f523"}.fa-dice-four:before{content:"\f524"}.fa-dice-one:before{content:"\f525"}.fa-dice-six:before{content:"\f526"}.fa-dice-three:before{content:"\f527"}.fa-dice-two:before{content:"\f528"}.fa-disease:before{content:"\f7fa"}.fa-divide:before{content:"\f529"}.fa-dna:before{content:"\f471"}.fa-dog:before{content:"\f6d3"}.fa-dollar-sign:before,.fa-dollar:before,.fa-usd:before{content:"\24"}.fa-dolly-box:before,.fa-dolly:before{content:"\f472"}.fa-dong-sign:before{content:"\e169"}.fa-door-closed:before{content:"\f52a"}.fa-door-open:before{content:"\f52b"}.fa-dove:before{content:"\f4ba"}.fa-compress-alt:before,.fa-down-left-and-up-right-to-center:before{content:"\f422"}.fa-down-long:before,.fa-long-arrow-alt-down:before{content:"\f309"}.fa-download:before{content:"\f019"}.fa-dragon:before{content:"\f6d5"}.fa-draw-polygon:before{content:"\f5ee"}.fa-droplet:before,.fa-tint:before{content:"\f043"}.fa-droplet-slash:before,.fa-tint-slash:before{content:"\f5c7"}.fa-drum:before{content:"\f569"}.fa-drum-steelpan:before{content:"\f56a"}.fa-drumstick-bite:before{content:"\f6d7"}.fa-dumbbell:before{content:"\f44b"}.fa-dumpster:before{content:"\f793"}.fa-dumpster-fire:before{content:"\f794"}.fa-dungeon:before{content:"\f6d9"}.fa-e:before{content:"\45"}.fa-deaf:before,.fa-deafness:before,.fa-ear-deaf:before,.fa-hard-of-hearing:before{content:"\f2a4"}.fa-assistive-listening-systems:before,.fa-ear-listen:before{content:"\f2a2"}.fa-earth-africa:before,.fa-globe-africa:before{content:"\f57c"}.fa-earth-america:before,.fa-earth-americas:before,.fa-earth:before,.fa-globe-americas:before{content:"\f57d"}.fa-earth-asia:before,.fa-globe-asia:before{content:"\f57e"}.fa-earth-europe:before,.fa-globe-europe:before{content:"\f7a2"}.fa-earth-oceania:before,.fa-globe-oceania:before{content:"\e47b"}.fa-egg:before{content:"\f7fb"}.fa-eject:before{content:"\f052"}.fa-elevator:before{content:"\e16d"}.fa-ellipsis-h:before,.fa-ellipsis:before{content:"\f141"}.fa-ellipsis-v:before,.fa-ellipsis-vertical:before{content:"\f142"}.fa-envelope:before{content:"\f0e0"}.fa-envelope-open:before{content:"\f2b6"}.fa-envelope-open-text:before{content:"\f658"}.fa-envelopes-bulk:before,.fa-mail-bulk:before{content:"\f674"}.fa-equals:before{content:"\3d"}.fa-eraser:before{content:"\f12d"}.fa-ethernet:before{content:"\f796"}.fa-eur:before,.fa-euro-sign:before,.fa-euro:before{content:"\f153"}.fa-exclamation:before{content:"\21"}.fa-expand:before{content:"\f065"}.fa-eye:before{content:"\f06e"}.fa-eye-dropper-empty:before,.fa-eye-dropper:before,.fa-eyedropper:before{content:"\f1fb"}.fa-eye-low-vision:before,.fa-low-vision:before{content:"\f2a8"}.fa-eye-slash:before{content:"\f070"}.fa-f:before{content:"\46"}.fa-angry:before,.fa-face-angry:before{content:"\f556"}.fa-dizzy:before,.fa-face-dizzy:before{content:"\f567"}.fa-face-flushed:before,.fa-flushed:before{content:"\f579"}.fa-face-frown:before,.fa-frown:before{content:"\f119"}.fa-face-frown-open:before,.fa-frown-open:before{content:"\f57a"}.fa-face-grimace:before,.fa-grimace:before{content:"\f57f"}.fa-face-grin:before,.fa-grin:before{content:"\f580"}.fa-face-grin-beam:before,.fa-grin-beam:before{content:"\f582"}.fa-face-grin-beam-sweat:before,.fa-grin-beam-sweat:before{content:"\f583"}.fa-face-grin-hearts:before,.fa-grin-hearts:before{content:"\f584"}.fa-face-grin-squint:before,.fa-grin-squint:before{content:"\f585"}.fa-face-grin-squint-tears:before,.fa-grin-squint-tears:before{content:"\f586"}.fa-face-grin-stars:before,.fa-grin-stars:before{content:"\f587"}.fa-face-grin-tears:before,.fa-grin-tears:before{content:"\f588"}.fa-face-grin-tongue:before,.fa-grin-tongue:before{content:"\f589"}.fa-face-grin-tongue-squint:before,.fa-grin-tongue-squint:before{content:"\f58a"}.fa-face-grin-tongue-wink:before,.fa-grin-tongue-wink:before{content:"\f58b"}.fa-face-grin-wide:before,.fa-grin-alt:before{content:"\f581"}.fa-face-grin-wink:before,.fa-grin-wink:before{content:"\f58c"}.fa-face-kiss:before,.fa-kiss:before{content:"\f596"}.fa-face-kiss-beam:before,.fa-kiss-beam:before{content:"\f597"}.fa-face-kiss-wink-heart:before,.fa-kiss-wink-heart:before{content:"\f598"}.fa-face-laugh:before,.fa-laugh:before{content:"\f599"}.fa-face-laugh-beam:before,.fa-laugh-beam:before{content:"\f59a"}.fa-face-laugh-squint:before,.fa-laugh-squint:before{content:"\f59b"}.fa-face-laugh-wink:before,.fa-laugh-wink:before{content:"\f59c"}.fa-face-meh:before,.fa-meh:before{content:"\f11a"}.fa-face-meh-blank:before,.fa-meh-blank:before{content:"\f5a4"}.fa-face-rolling-eyes:before,.fa-meh-rolling-eyes:before{content:"\f5a5"}.fa-face-sad-cry:before,.fa-sad-cry:before{content:"\f5b3"}.fa-face-sad-tear:before,.fa-sad-tear:before{content:"\f5b4"}.fa-face-smile:before,.fa-smile:before{content:"\f118"}.fa-face-smile-beam:before,.fa-smile-beam:before{content:"\f5b8"}.fa-face-smile-wink:before,.fa-smile-wink:before{content:"\f4da"}.fa-face-surprise:before,.fa-surprise:before{content:"\f5c2"}.fa-face-tired:before,.fa-tired:before{content:"\f5c8"}.fa-fan:before{content:"\f863"}.fa-faucet:before{content:"\e005"}.fa-fax:before{content:"\f1ac"}.fa-feather:before{content:"\f52d"}.fa-feather-alt:before,.fa-feather-pointed:before{content:"\f56b"}.fa-file:before{content:"\f15b"}.fa-file-arrow-down:before,.fa-file-download:before{content:"\f56d"}.fa-file-arrow-up:before,.fa-file-upload:before{content:"\f574"}.fa-file-audio:before{content:"\f1c7"}.fa-file-code:before{content:"\f1c9"}.fa-file-contract:before{content:"\f56c"}.fa-file-csv:before{content:"\f6dd"}.fa-file-excel:before{content:"\f1c3"}.fa-arrow-right-from-file:before,.fa-file-export:before{content:"\f56e"}.fa-file-image:before{content:"\f1c5"}.fa-arrow-right-to-file:before,.fa-file-import:before{content:"\f56f"}.fa-file-invoice:before{content:"\f570"}.fa-file-invoice-dollar:before{content:"\f571"}.fa-file-alt:before,.fa-file-lines:before,.fa-file-text:before{content:"\f15c"}.fa-file-medical:before{content:"\f477"}.fa-file-pdf:before{content:"\f1c1"}.fa-file-powerpoint:before{content:"\f1c4"}.fa-file-prescription:before{content:"\f572"}.fa-file-signature:before{content:"\f573"}.fa-file-video:before{content:"\f1c8"}.fa-file-medical-alt:before,.fa-file-waveform:before{content:"\f478"}.fa-file-word:before{content:"\f1c2"}.fa-file-archive:before,.fa-file-zipper:before{content:"\f1c6"}.fa-fill:before{content:"\f575"}.fa-fill-drip:before{content:"\f576"}.fa-film:before{content:"\f008"}.fa-filter:before{content:"\f0b0"}.fa-filter-circle-dollar:before,.fa-funnel-dollar:before{content:"\f662"}.fa-filter-circle-xmark:before{content:"\e17b"}.fa-fingerprint:before{content:"\f577"}.fa-fire:before{content:"\f06d"}.fa-fire-extinguisher:before{content:"\f134"}.fa-fire-alt:before,.fa-fire-flame-curved:before{content:"\f7e4"}.fa-burn:before,.fa-fire-flame-simple:before{content:"\f46a"}.fa-fish:before{content:"\f578"}.fa-flag:before{content:"\f024"}.fa-flag-checkered:before{content:"\f11e"}.fa-flag-usa:before{content:"\f74d"}.fa-flask:before{content:"\f0c3"}.fa-floppy-disk:before,.fa-save:before{content:"\f0c7"}.fa-florin-sign:before{content:"\e184"}.fa-folder:before{content:"\f07b"}.fa-folder-minus:before{content:"\f65d"}.fa-folder-open:before{content:"\f07c"}.fa-folder-plus:before{content:"\f65e"}.fa-folder-tree:before{content:"\f802"}.fa-font:before{content:"\f031"}.fa-football-ball:before,.fa-football:before{content:"\f44e"}.fa-forward:before{content:"\f04e"}.fa-fast-forward:before,.fa-forward-fast:before{content:"\f050"}.fa-forward-step:before,.fa-step-forward:before{content:"\f051"}.fa-franc-sign:before{content:"\e18f"}.fa-frog:before{content:"\f52e"}.fa-futbol-ball:before,.fa-futbol:before,.fa-soccer-ball:before{content:"\f1e3"}.fa-g:before{content:"\47"}.fa-gamepad:before{content:"\f11b"}.fa-gas-pump:before{content:"\f52f"}.fa-dashboard:before,.fa-gauge-high:before,.fa-gauge:before,.fa-tachometer-alt-fast:before,.fa-tachometer-alt:before{content:"\f625"}.fa-gauge-simple-high:before,.fa-gauge-simple:before,.fa-tachometer-fast:before,.fa-tachometer:before{content:"\f62a"}.fa-gavel:before,.fa-legal:before{content:"\f0e3"}.fa-cog:before,.fa-gear:before{content:"\f013"}.fa-cogs:before,.fa-gears:before{content:"\f085"}.fa-gem:before{content:"\f3a5"}.fa-genderless:before{content:"\f22d"}.fa-ghost:before{content:"\f6e2"}.fa-gift:before{content:"\f06b"}.fa-gifts:before{content:"\f79c"}.fa-glasses:before{content:"\f530"}.fa-globe:before{content:"\f0ac"}.fa-golf-ball-tee:before,.fa-golf-ball:before{content:"\f450"}.fa-gopuram:before{content:"\f664"}.fa-graduation-cap:before,.fa-mortar-board:before{content:"\f19d"}.fa-greater-than:before{content:"\3e"}.fa-greater-than-equal:before{content:"\f532"}.fa-grip-horizontal:before,.fa-grip:before{content:"\f58d"}.fa-grip-lines:before{content:"\f7a4"}.fa-grip-lines-vertical:before{content:"\f7a5"}.fa-grip-vertical:before{content:"\f58e"}.fa-guarani-sign:before{content:"\e19a"}.fa-guitar:before{content:"\f7a6"}.fa-gun:before{content:"\e19b"}.fa-h:before{content:"\48"}.fa-hammer:before{content:"\f6e3"}.fa-hamsa:before{content:"\f665"}.fa-hand-paper:before,.fa-hand:before{content:"\f256"}.fa-hand-back-fist:before,.fa-hand-rock:before{content:"\f255"}.fa-allergies:before,.fa-hand-dots:before{content:"\f461"}.fa-fist-raised:before,.fa-hand-fist:before{content:"\f6de"}.fa-hand-holding:before{content:"\f4bd"}.fa-hand-holding-dollar:before,.fa-hand-holding-usd:before{content:"\f4c0"}.fa-hand-holding-droplet:before,.fa-hand-holding-water:before{content:"\f4c1"}.fa-hand-holding-heart:before{content:"\f4be"}.fa-hand-holding-medical:before{content:"\e05c"}.fa-hand-lizard:before{content:"\f258"}.fa-hand-middle-finger:before{content:"\f806"}.fa-hand-peace:before{content:"\f25b"}.fa-hand-point-down:before{content:"\f0a7"}.fa-hand-point-left:before{content:"\f0a5"}.fa-hand-point-right:before{content:"\f0a4"}.fa-hand-point-up:before{content:"\f0a6"}.fa-hand-pointer:before{content:"\f25a"}.fa-hand-scissors:before{content:"\f257"}.fa-hand-sparkles:before{content:"\e05d"}.fa-hand-spock:before{content:"\f259"}.fa-hands:before,.fa-sign-language:before,.fa-signing:before{content:"\f2a7"}.fa-american-sign-language-interpreting:before,.fa-asl-interpreting:before,.fa-hands-american-sign-language-interpreting:before,.fa-hands-asl-interpreting:before{content:"\f2a3"}.fa-hands-bubbles:before,.fa-hands-wash:before{content:"\e05e"}.fa-hands-clapping:before{content:"\e1a8"}.fa-hands-holding:before{content:"\f4c2"}.fa-hands-praying:before,.fa-praying-hands:before{content:"\f684"}.fa-handshake:before{content:"\f2b5"}.fa-hands-helping:before,.fa-handshake-angle:before{content:"\f4c4"}.fa-handshake-alt-slash:before,.fa-handshake-simple-slash:before{content:"\e05f"}.fa-handshake-slash:before{content:"\e060"}.fa-hanukiah:before{content:"\f6e6"}.fa-hard-drive:before,.fa-hdd:before{content:"\f0a0"}.fa-hashtag:before{content:"\23"}.fa-hat-cowboy:before{content:"\f8c0"}.fa-hat-cowboy-side:before{content:"\f8c1"}.fa-hat-wizard:before{content:"\f6e8"}.fa-head-side-cough:before{content:"\e061"}.fa-head-side-cough-slash:before{content:"\e062"}.fa-head-side-mask:before{content:"\e063"}.fa-head-side-virus:before{content:"\e064"}.fa-header:before,.fa-heading:before{content:"\f1dc"}.fa-headphones:before{content:"\f025"}.fa-headphones-alt:before,.fa-headphones-simple:before{content:"\f58f"}.fa-headset:before{content:"\f590"}.fa-heart:before{content:"\f004"}.fa-heart-broken:before,.fa-heart-crack:before{content:"\f7a9"}.fa-heart-pulse:before,.fa-heartbeat:before{content:"\f21e"}.fa-helicopter:before{content:"\f533"}.fa-hard-hat:before,.fa-hat-hard:before,.fa-helmet-safety:before{content:"\f807"}.fa-highlighter:before{content:"\f591"}.fa-hippo:before{content:"\f6ed"}.fa-hockey-puck:before{content:"\f453"}.fa-holly-berry:before{content:"\f7aa"}.fa-horse:before{content:"\f6f0"}.fa-horse-head:before{content:"\f7ab"}.fa-hospital-alt:before,.fa-hospital-wide:before,.fa-hospital:before{content:"\f0f8"}.fa-hospital-user:before{content:"\f80d"}.fa-hot-tub-person:before,.fa-hot-tub:before{content:"\f593"}.fa-hotdog:before{content:"\f80f"}.fa-hotel:before{content:"\f594"}.fa-hourglass-2:before,.fa-hourglass-half:before,.fa-hourglass:before{content:"\f254"}.fa-hourglass-empty:before{content:"\f252"}.fa-hourglass-3:before,.fa-hourglass-end:before{content:"\f253"}.fa-hourglass-1:before,.fa-hourglass-start:before{content:"\f251"}.fa-home-alt:before,.fa-home-lg-alt:before,.fa-home:before,.fa-house:before{content:"\f015"}.fa-home-lg:before,.fa-house-chimney:before{content:"\e3af"}.fa-house-chimney-crack:before,.fa-house-damage:before{content:"\f6f1"}.fa-clinic-medical:before,.fa-house-chimney-medical:before{content:"\f7f2"}.fa-house-chimney-user:before{content:"\e065"}.fa-house-crack:before{content:"\e3b1"}.fa-house-laptop:before,.fa-laptop-house:before{content:"\e066"}.fa-house-medical:before{content:"\e3b2"}.fa-home-user:before,.fa-house-user:before{content:"\e1b0"}.fa-hryvnia-sign:before,.fa-hryvnia:before{content:"\f6f2"}.fa-i:before{content:"\49"}.fa-i-cursor:before{content:"\f246"}.fa-ice-cream:before{content:"\f810"}.fa-icicles:before{content:"\f7ad"}.fa-heart-music-camera-bolt:before,.fa-icons:before{content:"\f86d"}.fa-id-badge:before{content:"\f2c1"}.fa-drivers-license:before,.fa-id-card:before{content:"\f2c2"}.fa-id-card-alt:before,.fa-id-card-clip:before{content:"\f47f"}.fa-igloo:before{content:"\f7ae"}.fa-image:before{content:"\f03e"}.fa-image-portrait:before,.fa-portrait:before{content:"\f3e0"}.fa-images:before{content:"\f302"}.fa-inbox:before{content:"\f01c"}.fa-indent:before{content:"\f03c"}.fa-indian-rupee-sign:before,.fa-indian-rupee:before,.fa-inr:before{content:"\e1bc"}.fa-industry:before{content:"\f275"}.fa-infinity:before{content:"\f534"}.fa-info:before{content:"\f129"}.fa-italic:before{content:"\f033"}.fa-j:before{content:"\4a"}.fa-jedi:before{content:"\f669"}.fa-fighter-jet:before,.fa-jet-fighter:before{content:"\f0fb"}.fa-joint:before{content:"\f595"}.fa-k:before{content:"\4b"}.fa-kaaba:before{content:"\f66b"}.fa-key:before{content:"\f084"}.fa-keyboard:before{content:"\f11c"}.fa-khanda:before{content:"\f66d"}.fa-kip-sign:before{content:"\e1c4"}.fa-first-aid:before,.fa-kit-medical:before{content:"\f479"}.fa-kiwi-bird:before{content:"\f535"}.fa-l:before{content:"\4c"}.fa-landmark:before{content:"\f66f"}.fa-language:before{content:"\f1ab"}.fa-laptop:before{content:"\f109"}.fa-laptop-code:before{content:"\f5fc"}.fa-laptop-medical:before{content:"\f812"}.fa-lari-sign:before{content:"\e1c8"}.fa-layer-group:before{content:"\f5fd"}.fa-leaf:before{content:"\f06c"}.fa-left-long:before,.fa-long-arrow-alt-left:before{content:"\f30a"}.fa-arrows-alt-h:before,.fa-left-right:before{content:"\f337"}.fa-lemon:before{content:"\f094"}.fa-less-than:before{content:"\3c"}.fa-less-than-equal:before{content:"\f537"}.fa-life-ring:before{content:"\f1cd"}.fa-lightbulb:before{content:"\f0eb"}.fa-chain:before,.fa-link:before{content:"\f0c1"}.fa-chain-broken:before,.fa-chain-slash:before,.fa-link-slash:before,.fa-unlink:before{content:"\f127"}.fa-lira-sign:before{content:"\f195"}.fa-list-squares:before,.fa-list:before{content:"\f03a"}.fa-list-check:before,.fa-tasks:before{content:"\f0ae"}.fa-list-1-2:before,.fa-list-numeric:before,.fa-list-ol:before{content:"\f0cb"}.fa-list-dots:before,.fa-list-ul:before{content:"\f0ca"}.fa-litecoin-sign:before{content:"\e1d3"}.fa-location-arrow:before{content:"\f124"}.fa-location-crosshairs:before,.fa-location:before{content:"\f601"}.fa-location-dot:before,.fa-map-marker-alt:before{content:"\f3c5"}.fa-location-pin:before,.fa-map-marker:before{content:"\f041"}.fa-lock:before{content:"\f023"}.fa-lock-open:before{content:"\f3c1"}.fa-lungs:before{content:"\f604"}.fa-lungs-virus:before{content:"\e067"}.fa-m:before{content:"\4d"}.fa-magnet:before{content:"\f076"}.fa-magnifying-glass:before,.fa-search:before{content:"\f002"}.fa-magnifying-glass-dollar:before,.fa-search-dollar:before{content:"\f688"}.fa-magnifying-glass-location:before,.fa-search-location:before{content:"\f689"}.fa-magnifying-glass-minus:before,.fa-search-minus:before{content:"\f010"}.fa-magnifying-glass-plus:before,.fa-search-plus:before{content:"\f00e"}.fa-manat-sign:before{content:"\e1d5"}.fa-map:before{content:"\f279"}.fa-map-location:before,.fa-map-marked:before{content:"\f59f"}.fa-map-location-dot:before,.fa-map-marked-alt:before{content:"\f5a0"}.fa-map-pin:before{content:"\f276"}.fa-marker:before{content:"\f5a1"}.fa-mars:before{content:"\f222"}.fa-mars-and-venus:before{content:"\f224"}.fa-mars-double:before{content:"\f227"}.fa-mars-stroke:before{content:"\f229"}.fa-mars-stroke-h:before,.fa-mars-stroke-right:before{content:"\f22b"}.fa-mars-stroke-up:before,.fa-mars-stroke-v:before{content:"\f22a"}.fa-glass-martini-alt:before,.fa-martini-glass:before{content:"\f57b"}.fa-cocktail:before,.fa-martini-glass-citrus:before{content:"\f561"}.fa-glass-martini:before,.fa-martini-glass-empty:before{content:"\f000"}.fa-mask:before{content:"\f6fa"}.fa-mask-face:before{content:"\e1d7"}.fa-masks-theater:before,.fa-theater-masks:before{content:"\f630"}.fa-expand-arrows-alt:before,.fa-maximize:before{content:"\f31e"}.fa-medal:before{content:"\f5a2"}.fa-memory:before{content:"\f538"}.fa-menorah:before{content:"\f676"}.fa-mercury:before{content:"\f223"}.fa-comment-alt:before,.fa-message:before{content:"\f27a"}.fa-meteor:before{content:"\f753"}.fa-microchip:before{content:"\f2db"}.fa-microphone:before{content:"\f130"}.fa-microphone-alt:before,.fa-microphone-lines:before{content:"\f3c9"}.fa-microphone-alt-slash:before,.fa-microphone-lines-slash:before{content:"\f539"}.fa-microphone-slash:before{content:"\f131"}.fa-microscope:before{content:"\f610"}.fa-mill-sign:before{content:"\e1ed"}.fa-compress-arrows-alt:before,.fa-minimize:before{content:"\f78c"}.fa-minus:before,.fa-subtract:before{content:"\f068"}.fa-mitten:before{content:"\f7b5"}.fa-mobile-button:before{content:"\f10b"}.fa-mobile-alt:before,.fa-mobile-screen-button:before{content:"\f3cd"}.fa-money-bill:before{content:"\f0d6"}.fa-money-bill-1:before,.fa-money-bill-alt:before{content:"\f3d1"}.fa-money-bill-1-wave:before,.fa-money-bill-wave-alt:before{content:"\f53b"}.fa-money-bill-wave:before{content:"\f53a"}.fa-money-check:before{content:"\f53c"}.fa-money-check-alt:before,.fa-money-check-dollar:before{content:"\f53d"}.fa-monument:before{content:"\f5a6"}.fa-moon:before{content:"\f186"}.fa-mortar-pestle:before{content:"\f5a7"}.fa-mosque:before{content:"\f678"}.fa-motorcycle:before{content:"\f21c"}.fa-mountain:before{content:"\f6fc"}.fa-mug-hot:before{content:"\f7b6"}.fa-coffee:before,.fa-mug-saucer:before{content:"\f0f4"}.fa-music:before{content:"\f001"}.fa-n:before{content:"\4e"}.fa-naira-sign:before{content:"\e1f6"}.fa-network-wired:before{content:"\f6ff"}.fa-neuter:before{content:"\f22c"}.fa-newspaper:before{content:"\f1ea"}.fa-not-equal:before{content:"\f53e"}.fa-note-sticky:before,.fa-sticky-note:before{content:"\f249"}.fa-notes-medical:before{content:"\f481"}.fa-o:before{content:"\4f"}.fa-object-group:before{content:"\f247"}.fa-object-ungroup:before{content:"\f248"}.fa-oil-can:before{content:"\f613"}.fa-om:before{content:"\f679"}.fa-otter:before{content:"\f700"}.fa-dedent:before,.fa-outdent:before{content:"\f03b"}.fa-p:before{content:"\50"}.fa-pager:before{content:"\f815"}.fa-paint-brush:before{content:"\f1fc"}.fa-paint-roller:before{content:"\f5aa"}.fa-palette:before{content:"\f53f"}.fa-pallet:before{content:"\f482"}.fa-panorama:before{content:"\e209"}.fa-paper-plane:before{content:"\f1d8"}.fa-paperclip:before{content:"\f0c6"}.fa-parachute-box:before{content:"\f4cd"}.fa-paragraph:before{content:"\f1dd"}.fa-passport:before{content:"\f5ab"}.fa-file-clipboard:before,.fa-paste:before{content:"\f0ea"}.fa-pause:before{content:"\f04c"}.fa-paw:before{content:"\f1b0"}.fa-peace:before{content:"\f67c"}.fa-pen:before{content:"\f304"}.fa-pen-alt:before,.fa-pen-clip:before{content:"\f305"}.fa-pen-fancy:before{content:"\f5ac"}.fa-pen-nib:before{content:"\f5ad"}.fa-pen-ruler:before,.fa-pencil-ruler:before{content:"\f5ae"}.fa-edit:before,.fa-pen-to-square:before{content:"\f044"}.fa-pencil-alt:before,.fa-pencil:before{content:"\f303"}.fa-people-arrows-left-right:before,.fa-people-arrows:before{content:"\e068"}.fa-people-carry-box:before,.fa-people-carry:before{content:"\f4ce"}.fa-pepper-hot:before{content:"\f816"}.fa-percent:before,.fa-percentage:before{content:"\25"}.fa-male:before,.fa-person:before{content:"\f183"}.fa-biking:before,.fa-person-biking:before{content:"\f84a"}.fa-person-booth:before{content:"\f756"}.fa-diagnoses:before,.fa-person-dots-from-line:before{content:"\f470"}.fa-female:before,.fa-person-dress:before{content:"\f182"}.fa-hiking:before,.fa-person-hiking:before{content:"\f6ec"}.fa-person-praying:before,.fa-pray:before{content:"\f683"}.fa-person-running:before,.fa-running:before{content:"\f70c"}.fa-person-skating:before,.fa-skating:before{content:"\f7c5"}.fa-person-skiing:before,.fa-skiing:before{content:"\f7c9"}.fa-person-skiing-nordic:before,.fa-skiing-nordic:before{content:"\f7ca"}.fa-person-snowboarding:before,.fa-snowboarding:before{content:"\f7ce"}.fa-person-swimming:before,.fa-swimmer:before{content:"\f5c4"}.fa-person-walking:before,.fa-walking:before{content:"\f554"}.fa-blind:before,.fa-person-walking-with-cane:before{content:"\f29d"}.fa-peseta-sign:before{content:"\e221"}.fa-peso-sign:before{content:"\e222"}.fa-phone:before{content:"\f095"}.fa-phone-alt:before,.fa-phone-flip:before{content:"\f879"}.fa-phone-slash:before{content:"\f3dd"}.fa-phone-volume:before,.fa-volume-control-phone:before{content:"\f2a0"}.fa-photo-film:before,.fa-photo-video:before{content:"\f87c"}.fa-piggy-bank:before{content:"\f4d3"}.fa-pills:before{content:"\f484"}.fa-pizza-slice:before{content:"\f818"}.fa-place-of-worship:before{content:"\f67f"}.fa-plane:before{content:"\f072"}.fa-plane-arrival:before{content:"\f5af"}.fa-plane-departure:before{content:"\f5b0"}.fa-plane-slash:before{content:"\e069"}.fa-play:before{content:"\f04b"}.fa-plug:before{content:"\f1e6"}.fa-add:before,.fa-plus:before{content:"\2b"}.fa-plus-minus:before{content:"\e43c"}.fa-podcast:before{content:"\f2ce"}.fa-poo:before{content:"\f2fe"}.fa-poo-bolt:before,.fa-poo-storm:before{content:"\f75a"}.fa-poop:before{content:"\f619"}.fa-power-off:before{content:"\f011"}.fa-prescription:before{content:"\f5b1"}.fa-prescription-bottle:before{content:"\f485"}.fa-prescription-bottle-alt:before,.fa-prescription-bottle-medical:before{content:"\f486"}.fa-print:before{content:"\f02f"}.fa-pump-medical:before{content:"\e06a"}.fa-pump-soap:before{content:"\e06b"}.fa-puzzle-piece:before{content:"\f12e"}.fa-q:before{content:"\51"}.fa-qrcode:before{content:"\f029"}.fa-question:before{content:"\3f"}.fa-quote-left-alt:before,.fa-quote-left:before{content:"\f10d"}.fa-quote-right-alt:before,.fa-quote-right:before{content:"\f10e"}.fa-r:before{content:"\52"}.fa-radiation:before{content:"\f7b9"}.fa-rainbow:before{content:"\f75b"}.fa-receipt:before{content:"\f543"}.fa-record-vinyl:before{content:"\f8d9"}.fa-ad:before,.fa-rectangle-ad:before{content:"\f641"}.fa-list-alt:before,.fa-rectangle-list:before{content:"\f022"}.fa-rectangle-times:before,.fa-rectangle-xmark:before,.fa-times-rectangle:before,.fa-window-close:before{content:"\f410"}.fa-recycle:before{content:"\f1b8"}.fa-registered:before{content:"\f25d"}.fa-repeat:before{content:"\f363"}.fa-mail-reply:before,.fa-reply:before{content:"\f3e5"}.fa-mail-reply-all:before,.fa-reply-all:before{content:"\f122"}.fa-republican:before{content:"\f75e"}.fa-restroom:before{content:"\f7bd"}.fa-retweet:before{content:"\f079"}.fa-ribbon:before{content:"\f4d6"}.fa-right-from-bracket:before,.fa-sign-out-alt:before{content:"\f2f5"}.fa-exchange-alt:before,.fa-right-left:before{content:"\f362"}.fa-long-arrow-alt-right:before,.fa-right-long:before{content:"\f30b"}.fa-right-to-bracket:before,.fa-sign-in-alt:before{content:"\f2f6"}.fa-ring:before{content:"\f70b"}.fa-road:before{content:"\f018"}.fa-robot:before{content:"\f544"}.fa-rocket:before{content:"\f135"}.fa-rotate:before,.fa-sync-alt:before{content:"\f2f1"}.fa-rotate-back:before,.fa-rotate-backward:before,.fa-rotate-left:before,.fa-undo-alt:before{content:"\f2ea"}.fa-redo-alt:before,.fa-rotate-forward:before,.fa-rotate-right:before{content:"\f2f9"}.fa-route:before{content:"\f4d7"}.fa-feed:before,.fa-rss:before{content:"\f09e"}.fa-rouble:before,.fa-rub:before,.fa-ruble-sign:before,.fa-ruble:before{content:"\f158"}.fa-ruler:before{content:"\f545"}.fa-ruler-combined:before{content:"\f546"}.fa-ruler-horizontal:before{content:"\f547"}.fa-ruler-vertical:before{content:"\f548"}.fa-rupee-sign:before,.fa-rupee:before{content:"\f156"}.fa-rupiah-sign:before{content:"\e23d"}.fa-s:before{content:"\53"}.fa-sailboat:before{content:"\e445"}.fa-satellite:before{content:"\f7bf"}.fa-satellite-dish:before{content:"\f7c0"}.fa-balance-scale:before,.fa-scale-balanced:before{content:"\f24e"}.fa-balance-scale-left:before,.fa-scale-unbalanced:before{content:"\f515"}.fa-balance-scale-right:before,.fa-scale-unbalanced-flip:before{content:"\f516"}.fa-school:before{content:"\f549"}.fa-cut:before,.fa-scissors:before{content:"\f0c4"}.fa-screwdriver:before{content:"\f54a"}.fa-screwdriver-wrench:before,.fa-tools:before{content:"\f7d9"}.fa-scroll:before{content:"\f70e"}.fa-scroll-torah:before,.fa-torah:before{content:"\f6a0"}.fa-sd-card:before{content:"\f7c2"}.fa-section:before{content:"\e447"}.fa-seedling:before,.fa-sprout:before{content:"\f4d8"}.fa-server:before{content:"\f233"}.fa-shapes:before,.fa-triangle-circle-square:before{content:"\f61f"}.fa-arrow-turn-right:before,.fa-mail-forward:before,.fa-share:before{content:"\f064"}.fa-share-from-square:before,.fa-share-square:before{content:"\f14d"}.fa-share-alt:before,.fa-share-nodes:before{content:"\f1e0"}.fa-ils:before,.fa-shekel-sign:before,.fa-shekel:before,.fa-sheqel-sign:before,.fa-sheqel:before{content:"\f20b"}.fa-shield:before{content:"\f132"}.fa-shield-alt:before,.fa-shield-blank:before{content:"\f3ed"}.fa-shield-virus:before{content:"\e06c"}.fa-ship:before{content:"\f21a"}.fa-shirt:before,.fa-t-shirt:before,.fa-tshirt:before{content:"\f553"}.fa-shoe-prints:before{content:"\f54b"}.fa-shop:before,.fa-store-alt:before{content:"\f54f"}.fa-shop-slash:before,.fa-store-alt-slash:before{content:"\e070"}.fa-shower:before{content:"\f2cc"}.fa-shrimp:before{content:"\e448"}.fa-random:before,.fa-shuffle:before{content:"\f074"}.fa-shuttle-space:before,.fa-space-shuttle:before{content:"\f197"}.fa-sign-hanging:before,.fa-sign:before{content:"\f4d9"}.fa-signal-5:before,.fa-signal-perfect:before,.fa-signal:before{content:"\f012"}.fa-signature:before{content:"\f5b7"}.fa-map-signs:before,.fa-signs-post:before{content:"\f277"}.fa-sim-card:before{content:"\f7c4"}.fa-sink:before{content:"\e06d"}.fa-sitemap:before{content:"\f0e8"}.fa-skull:before{content:"\f54c"}.fa-skull-crossbones:before{content:"\f714"}.fa-slash:before{content:"\f715"}.fa-sleigh:before{content:"\f7cc"}.fa-sliders-h:before,.fa-sliders:before{content:"\f1de"}.fa-smog:before{content:"\f75f"}.fa-smoking:before{content:"\f48d"}.fa-snowflake:before{content:"\f2dc"}.fa-snowman:before{content:"\f7d0"}.fa-snowplow:before{content:"\f7d2"}.fa-soap:before{content:"\e06e"}.fa-socks:before{content:"\f696"}.fa-solar-panel:before{content:"\f5ba"}.fa-sort:before,.fa-unsorted:before{content:"\f0dc"}.fa-sort-desc:before,.fa-sort-down:before{content:"\f0dd"}.fa-sort-asc:before,.fa-sort-up:before{content:"\f0de"}.fa-spa:before{content:"\f5bb"}.fa-pastafarianism:before,.fa-spaghetti-monster-flying:before{content:"\f67b"}.fa-spell-check:before{content:"\f891"}.fa-spider:before{content:"\f717"}.fa-spinner:before{content:"\f110"}.fa-splotch:before{content:"\f5bc"}.fa-spoon:before,.fa-utensil-spoon:before{content:"\f2e5"}.fa-spray-can:before{content:"\f5bd"}.fa-air-freshener:before,.fa-spray-can-sparkles:before{content:"\f5d0"}.fa-square:before{content:"\f0c8"}.fa-external-link-square:before,.fa-square-arrow-up-right:before{content:"\f14c"}.fa-caret-square-down:before,.fa-square-caret-down:before{content:"\f150"}.fa-caret-square-left:before,.fa-square-caret-left:before{content:"\f191"}.fa-caret-square-right:before,.fa-square-caret-right:before{content:"\f152"}.fa-caret-square-up:before,.fa-square-caret-up:before{content:"\f151"}.fa-check-square:before,.fa-square-check:before{content:"\f14a"}.fa-envelope-square:before,.fa-square-envelope:before{content:"\f199"}.fa-square-full:before{content:"\f45c"}.fa-h-square:before,.fa-square-h:before{content:"\f0fd"}.fa-minus-square:before,.fa-square-minus:before{content:"\f146"}.fa-parking:before,.fa-square-parking:before{content:"\f540"}.fa-pen-square:before,.fa-pencil-square:before,.fa-square-pen:before{content:"\f14b"}.fa-phone-square:before,.fa-square-phone:before{content:"\f098"}.fa-phone-square-alt:before,.fa-square-phone-flip:before{content:"\f87b"}.fa-plus-square:before,.fa-square-plus:before{content:"\f0fe"}.fa-poll-h:before,.fa-square-poll-horizontal:before{content:"\f682"}.fa-poll:before,.fa-square-poll-vertical:before{content:"\f681"}.fa-square-root-alt:before,.fa-square-root-variable:before{content:"\f698"}.fa-rss-square:before,.fa-square-rss:before{content:"\f143"}.fa-share-alt-square:before,.fa-square-share-nodes:before{content:"\f1e1"}.fa-external-link-square-alt:before,.fa-square-up-right:before{content:"\f360"}.fa-square-xmark:before,.fa-times-square:before,.fa-xmark-square:before{content:"\f2d3"}.fa-stairs:before{content:"\e289"}.fa-stamp:before{content:"\f5bf"}.fa-star:before{content:"\f005"}.fa-star-and-crescent:before{content:"\f699"}.fa-star-half:before{content:"\f089"}.fa-star-half-alt:before,.fa-star-half-stroke:before{content:"\f5c0"}.fa-star-of-david:before{content:"\f69a"}.fa-star-of-life:before{content:"\f621"}.fa-gbp:before,.fa-pound-sign:before,.fa-sterling-sign:before{content:"\f154"}.fa-stethoscope:before{content:"\f0f1"}.fa-stop:before{content:"\f04d"}.fa-stopwatch:before{content:"\f2f2"}.fa-stopwatch-20:before{content:"\e06f"}.fa-store:before{content:"\f54e"}.fa-store-slash:before{content:"\e071"}.fa-street-view:before{content:"\f21d"}.fa-strikethrough:before{content:"\f0cc"}.fa-stroopwafel:before{content:"\f551"}.fa-subscript:before{content:"\f12c"}.fa-suitcase:before{content:"\f0f2"}.fa-medkit:before,.fa-suitcase-medical:before{content:"\f0fa"}.fa-suitcase-rolling:before{content:"\f5c1"}.fa-sun:before{content:"\f185"}.fa-superscript:before{content:"\f12b"}.fa-swatchbook:before{content:"\f5c3"}.fa-synagogue:before{content:"\f69b"}.fa-syringe:before{content:"\f48e"}.fa-t:before{content:"\54"}.fa-table:before{content:"\f0ce"}.fa-table-cells:before,.fa-th:before{content:"\f00a"}.fa-table-cells-large:before,.fa-th-large:before{content:"\f009"}.fa-columns:before,.fa-table-columns:before{content:"\f0db"}.fa-table-list:before,.fa-th-list:before{content:"\f00b"}.fa-ping-pong-paddle-ball:before,.fa-table-tennis-paddle-ball:before,.fa-table-tennis:before{content:"\f45d"}.fa-tablet-button:before{content:"\f10a"}.fa-tablet-alt:before,.fa-tablet-screen-button:before{content:"\f3fa"}.fa-tablets:before{content:"\f490"}.fa-digital-tachograph:before,.fa-tachograph-digital:before{content:"\f566"}.fa-tag:before{content:"\f02b"}.fa-tags:before{content:"\f02c"}.fa-tape:before{content:"\f4db"}.fa-cab:before,.fa-taxi:before{content:"\f1ba"}.fa-teeth:before{content:"\f62e"}.fa-teeth-open:before{content:"\f62f"}.fa-temperature-0:before,.fa-temperature-empty:before,.fa-thermometer-0:before,.fa-thermometer-empty:before{content:"\f2cb"}.fa-temperature-4:before,.fa-temperature-full:before,.fa-thermometer-4:before,.fa-thermometer-full:before{content:"\f2c7"}.fa-temperature-2:before,.fa-temperature-half:before,.fa-thermometer-2:before,.fa-thermometer-half:before{content:"\f2c9"}.fa-temperature-high:before{content:"\f769"}.fa-temperature-low:before{content:"\f76b"}.fa-temperature-1:before,.fa-temperature-quarter:before,.fa-thermometer-1:before,.fa-thermometer-quarter:before{content:"\f2ca"}.fa-temperature-3:before,.fa-temperature-three-quarters:before,.fa-thermometer-3:before,.fa-thermometer-three-quarters:before{content:"\f2c8"}.fa-tenge-sign:before,.fa-tenge:before{content:"\f7d7"}.fa-terminal:before{content:"\f120"}.fa-text-height:before{content:"\f034"}.fa-remove-format:before,.fa-text-slash:before{content:"\f87d"}.fa-text-width:before{content:"\f035"}.fa-thermometer:before{content:"\f491"}.fa-thumbs-down:before{content:"\f165"}.fa-thumbs-up:before{content:"\f164"}.fa-thumb-tack:before,.fa-thumbtack:before{content:"\f08d"}.fa-ticket:before{content:"\f145"}.fa-ticket-alt:before,.fa-ticket-simple:before{content:"\f3ff"}.fa-timeline:before{content:"\e29c"}.fa-toggle-off:before{content:"\f204"}.fa-toggle-on:before{content:"\f205"}.fa-toilet:before{content:"\f7d8"}.fa-toilet-paper:before{content:"\f71e"}.fa-toilet-paper-slash:before{content:"\e072"}.fa-toolbox:before{content:"\f552"}.fa-tooth:before{content:"\f5c9"}.fa-torii-gate:before{content:"\f6a1"}.fa-broadcast-tower:before,.fa-tower-broadcast:before{content:"\f519"}.fa-tractor:before{content:"\f722"}.fa-trademark:before{content:"\f25c"}.fa-traffic-light:before{content:"\f637"}.fa-trailer:before{content:"\e041"}.fa-train:before{content:"\f238"}.fa-subway:before,.fa-train-subway:before{content:"\f239"}.fa-train-tram:before,.fa-tram:before{content:"\f7da"}.fa-transgender-alt:before,.fa-transgender:before{content:"\f225"}.fa-trash:before{content:"\f1f8"}.fa-trash-arrow-up:before,.fa-trash-restore:before{content:"\f829"}.fa-trash-alt:before,.fa-trash-can:before{content:"\f2ed"}.fa-trash-can-arrow-up:before,.fa-trash-restore-alt:before{content:"\f82a"}.fa-tree:before{content:"\f1bb"}.fa-exclamation-triangle:before,.fa-triangle-exclamation:before,.fa-warning:before{content:"\f071"}.fa-trophy:before{content:"\f091"}.fa-truck:before{content:"\f0d1"}.fa-shipping-fast:before,.fa-truck-fast:before{content:"\f48b"}.fa-ambulance:before,.fa-truck-medical:before{content:"\f0f9"}.fa-truck-monster:before{content:"\f63b"}.fa-truck-moving:before{content:"\f4df"}.fa-truck-pickup:before{content:"\f63c"}.fa-truck-loading:before,.fa-truck-ramp-box:before{content:"\f4de"}.fa-teletype:before,.fa-tty:before{content:"\f1e4"}.fa-try:before,.fa-turkish-lira-sign:before,.fa-turkish-lira:before{content:"\e2bb"}.fa-level-down-alt:before,.fa-turn-down:before{content:"\f3be"}.fa-level-up-alt:before,.fa-turn-up:before{content:"\f3bf"}.fa-television:before,.fa-tv-alt:before,.fa-tv:before{content:"\f26c"}.fa-u:before{content:"\55"}.fa-umbrella:before{content:"\f0e9"}.fa-umbrella-beach:before{content:"\f5ca"}.fa-underline:before{content:"\f0cd"}.fa-universal-access:before{content:"\f29a"}.fa-unlock:before{content:"\f09c"}.fa-unlock-alt:before,.fa-unlock-keyhole:before{content:"\f13e"}.fa-arrows-alt-v:before,.fa-up-down:before{content:"\f338"}.fa-arrows-alt:before,.fa-up-down-left-right:before{content:"\f0b2"}.fa-long-arrow-alt-up:before,.fa-up-long:before{content:"\f30c"}.fa-expand-alt:before,.fa-up-right-and-down-left-from-center:before{content:"\f424"}.fa-external-link-alt:before,.fa-up-right-from-square:before{content:"\f35d"}.fa-upload:before{content:"\f093"}.fa-user:before{content:"\f007"}.fa-user-astronaut:before{content:"\f4fb"}.fa-user-check:before{content:"\f4fc"}.fa-user-clock:before{content:"\f4fd"}.fa-user-doctor:before,.fa-user-md:before{content:"\f0f0"}.fa-user-cog:before,.fa-user-gear:before{content:"\f4fe"}.fa-user-graduate:before{content:"\f501"}.fa-user-friends:before,.fa-user-group:before{content:"\f500"}.fa-user-injured:before{content:"\f728"}.fa-user-alt:before,.fa-user-large:before{content:"\f406"}.fa-user-alt-slash:before,.fa-user-large-slash:before{content:"\f4fa"}.fa-user-lock:before{content:"\f502"}.fa-user-minus:before{content:"\f503"}.fa-user-ninja:before{content:"\f504"}.fa-user-nurse:before{content:"\f82f"}.fa-user-edit:before,.fa-user-pen:before{content:"\f4ff"}.fa-user-plus:before{content:"\f234"}.fa-user-secret:before{content:"\f21b"}.fa-user-shield:before{content:"\f505"}.fa-user-slash:before{content:"\f506"}.fa-user-tag:before{content:"\f507"}.fa-user-tie:before{content:"\f508"}.fa-user-times:before,.fa-user-xmark:before{content:"\f235"}.fa-users:before{content:"\f0c0"}.fa-users-cog:before,.fa-users-gear:before{content:"\f509"}.fa-users-slash:before{content:"\e073"}.fa-cutlery:before,.fa-utensils:before{content:"\f2e7"}.fa-v:before{content:"\56"}.fa-shuttle-van:before,.fa-van-shuttle:before{content:"\f5b6"}.fa-vault:before{content:"\e2c5"}.fa-vector-square:before{content:"\f5cb"}.fa-venus:before{content:"\f221"}.fa-venus-double:before{content:"\f226"}.fa-venus-mars:before{content:"\f228"}.fa-vest:before{content:"\e085"}.fa-vest-patches:before{content:"\e086"}.fa-vial:before{content:"\f492"}.fa-vials:before{content:"\f493"}.fa-video-camera:before,.fa-video:before{content:"\f03d"}.fa-video-slash:before{content:"\f4e2"}.fa-vihara:before{content:"\f6a7"}.fa-virus:before{content:"\e074"}.fa-virus-slash:before{content:"\e075"}.fa-viruses:before{content:"\e076"}.fa-voicemail:before{content:"\f897"}.fa-volleyball-ball:before,.fa-volleyball:before{content:"\f45f"}.fa-volume-high:before,.fa-volume-up:before{content:"\f028"}.fa-volume-down:before,.fa-volume-low:before{content:"\f027"}.fa-volume-off:before{content:"\f026"}.fa-volume-mute:before,.fa-volume-times:before,.fa-volume-xmark:before{content:"\f6a9"}.fa-vr-cardboard:before{content:"\f729"}.fa-w:before{content:"\57"}.fa-wallet:before{content:"\f555"}.fa-magic:before,.fa-wand-magic:before{content:"\f0d0"}.fa-magic-wand-sparkles:before,.fa-wand-magic-sparkles:before{content:"\e2ca"}.fa-warehouse:before{content:"\f494"}.fa-water:before{content:"\f773"}.fa-ladder-water:before,.fa-swimming-pool:before,.fa-water-ladder:before{content:"\f5c5"}.fa-wave-square:before{content:"\f83e"}.fa-weight-hanging:before{content:"\f5cd"}.fa-weight-scale:before,.fa-weight:before{content:"\f496"}.fa-wheelchair:before{content:"\f193"}.fa-glass-whiskey:before,.fa-whiskey-glass:before{content:"\f7a0"}.fa-wifi-3:before,.fa-wifi-strong:before,.fa-wifi:before{content:"\f1eb"}.fa-wind:before{content:"\f72e"}.fa-window-maximize:before{content:"\f2d0"}.fa-window-minimize:before{content:"\f2d1"}.fa-window-restore:before{content:"\f2d2"}.fa-wine-bottle:before{content:"\f72f"}.fa-wine-glass:before{content:"\f4e3"}.fa-wine-glass-alt:before,.fa-wine-glass-empty:before{content:"\f5ce"}.fa-krw:before,.fa-won-sign:before,.fa-won:before{content:"\f159"}.fa-wrench:before{content:"\f0ad"}.fa-x:before{content:"\58"}.fa-x-ray:before{content:"\f497"}.fa-close:before,.fa-multiply:before,.fa-remove:before,.fa-times:before,.fa-xmark:before{content:"\f00d"}.fa-y:before{content:"\59"}.fa-cny:before,.fa-jpy:before,.fa-rmb:before,.fa-yen-sign:before,.fa-yen:before{content:"\f157"}.fa-yin-yang:before{content:"\f6ad"}.fa-z:before{content:"\5a"}.fa-sr-only,.fa-sr-only-focusable:not(:focus),.sr-only,.sr-only-focusable:not(:focus){position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border-width:0}:host,:root{--fa-font-brands:normal 400 1em/1 "Font Awesome 6 Brands"}@font-face{font-family:"Font Awesome 6 Brands";font-style:normal;font-weight:400;font-display:block;src:url(../webfonts/fa-brands-400.woff2) format("woff2"),url(../webfonts/fa-brands-400.ttf) format("truetype")}.fa-brands,.fab{font-family:"Font Awesome 6 Brands";font-weight:400}.fa-42-group:before,.fa-innosoft:before{content:"\e080"}.fa-500px:before{content:"\f26e"}.fa-accessible-icon:before{content:"\f368"}.fa-accusoft:before{content:"\f369"}.fa-acquisitions-incorporated:before{content:"\f6af"}.fa-adn:before{content:"\f170"}.fa-adversal:before{content:"\f36a"}.fa-affiliatetheme:before{content:"\f36b"}.fa-airbnb:before{content:"\f834"}.fa-algolia:before{content:"\f36c"}.fa-alipay:before{content:"\f642"}.fa-amazon:before{content:"\f270"}.fa-amazon-pay:before{content:"\f42c"}.fa-amilia:before{content:"\f36d"}.fa-android:before{content:"\f17b"}.fa-angellist:before{content:"\f209"}.fa-angrycreative:before{content:"\f36e"}.fa-angular:before{content:"\f420"}.fa-app-store:before{content:"\f36f"}.fa-app-store-ios:before{content:"\f370"}.fa-apper:before{content:"\f371"}.fa-apple:before{content:"\f179"}.fa-apple-pay:before{content:"\f415"}.fa-artstation:before{content:"\f77a"}.fa-asymmetrik:before{content:"\f372"}.fa-atlassian:before{content:"\f77b"}.fa-audible:before{content:"\f373"}.fa-autoprefixer:before{content:"\f41c"}.fa-avianex:before{content:"\f374"}.fa-aviato:before{content:"\f421"}.fa-aws:before{content:"\f375"}.fa-bandcamp:before{content:"\f2d5"}.fa-battle-net:before{content:"\f835"}.fa-behance:before{content:"\f1b4"}.fa-behance-square:before{content:"\f1b5"}.fa-bilibili:before{content:"\e3d9"}.fa-bimobject:before{content:"\f378"}.fa-bitbucket:before{content:"\f171"}.fa-bitcoin:before{content:"\f379"}.fa-bity:before{content:"\f37a"}.fa-black-tie:before{content:"\f27e"}.fa-blackberry:before{content:"\f37b"}.fa-blogger:before{content:"\f37c"}.fa-blogger-b:before{content:"\f37d"}.fa-bluetooth:before{content:"\f293"}.fa-bluetooth-b:before{content:"\f294"}.fa-bootstrap:before{content:"\f836"}.fa-bots:before{content:"\e340"}.fa-btc:before{content:"\f15a"}.fa-buffer:before{content:"\f837"}.fa-buromobelexperte:before{content:"\f37f"}.fa-buy-n-large:before{content:"\f8a6"}.fa-buysellads:before{content:"\f20d"}.fa-canadian-maple-leaf:before{content:"\f785"}.fa-cc-amazon-pay:before{content:"\f42d"}.fa-cc-amex:before{content:"\f1f3"}.fa-cc-apple-pay:before{content:"\f416"}.fa-cc-diners-club:before{content:"\f24c"}.fa-cc-discover:before{content:"\f1f2"}.fa-cc-jcb:before{content:"\f24b"}.fa-cc-mastercard:before{content:"\f1f1"}.fa-cc-paypal:before{content:"\f1f4"}.fa-cc-stripe:before{content:"\f1f5"}.fa-cc-visa:before{content:"\f1f0"}.fa-centercode:before{content:"\f380"}.fa-centos:before{content:"\f789"}.fa-chrome:before{content:"\f268"}.fa-chromecast:before{content:"\f838"}.fa-cloudflare:before{content:"\e07d"}.fa-cloudscale:before{content:"\f383"}.fa-cloudsmith:before{content:"\f384"}.fa-cloudversify:before{content:"\f385"}.fa-cmplid:before{content:"\e360"}.fa-codepen:before{content:"\f1cb"}.fa-codiepie:before{content:"\f284"}.fa-confluence:before{content:"\f78d"}.fa-connectdevelop:before{content:"\f20e"}.fa-contao:before{content:"\f26d"}.fa-cotton-bureau:before{content:"\f89e"}.fa-cpanel:before{content:"\f388"}.fa-creative-commons:before{content:"\f25e"}.fa-creative-commons-by:before{content:"\f4e7"}.fa-creative-commons-nc:before{content:"\f4e8"}.fa-creative-commons-nc-eu:before{content:"\f4e9"}.fa-creative-commons-nc-jp:before{content:"\f4ea"}.fa-creative-commons-nd:before{content:"\f4eb"}.fa-creative-commons-pd:before{content:"\f4ec"}.fa-creative-commons-pd-alt:before{content:"\f4ed"}.fa-creative-commons-remix:before{content:"\f4ee"}.fa-creative-commons-sa:before{content:"\f4ef"}.fa-creative-commons-sampling:before{content:"\f4f0"}.fa-creative-commons-sampling-plus:before{content:"\f4f1"}.fa-creative-commons-share:before{content:"\f4f2"}.fa-creative-commons-zero:before{content:"\f4f3"}.fa-critical-role:before{content:"\f6c9"}.fa-css3:before{content:"\f13c"}.fa-css3-alt:before{content:"\f38b"}.fa-cuttlefish:before{content:"\f38c"}.fa-d-and-d:before{content:"\f38d"}.fa-d-and-d-beyond:before{content:"\f6ca"}.fa-dailymotion:before{content:"\e052"}.fa-dashcube:before{content:"\f210"}.fa-deezer:before{content:"\e077"}.fa-delicious:before{content:"\f1a5"}.fa-deploydog:before{content:"\f38e"}.fa-deskpro:before{content:"\f38f"}.fa-dev:before{content:"\f6cc"}.fa-deviantart:before{content:"\f1bd"}.fa-dhl:before{content:"\f790"}.fa-diaspora:before{content:"\f791"}.fa-digg:before{content:"\f1a6"}.fa-digital-ocean:before{content:"\f391"}.fa-discord:before{content:"\f392"}.fa-discourse:before{content:"\f393"}.fa-dochub:before{content:"\f394"}.fa-docker:before{content:"\f395"}.fa-draft2digital:before{content:"\f396"}.fa-dribbble:before{content:"\f17d"}.fa-dribbble-square:before{content:"\f397"}.fa-dropbox:before{content:"\f16b"}.fa-drupal:before{content:"\f1a9"}.fa-dyalog:before{content:"\f399"}.fa-earlybirds:before{content:"\f39a"}.fa-ebay:before{content:"\f4f4"}.fa-edge:before{content:"\f282"}.fa-edge-legacy:before{content:"\e078"}.fa-elementor:before{content:"\f430"}.fa-ello:before{content:"\f5f1"}.fa-ember:before{content:"\f423"}.fa-empire:before{content:"\f1d1"}.fa-envira:before{content:"\f299"}.fa-erlang:before{content:"\f39d"}.fa-ethereum:before{content:"\f42e"}.fa-etsy:before{content:"\f2d7"}.fa-evernote:before{content:"\f839"}.fa-expeditedssl:before{content:"\f23e"}.fa-facebook:before{content:"\f09a"}.fa-facebook-f:before{content:"\f39e"}.fa-facebook-messenger:before{content:"\f39f"}.fa-facebook-square:before{content:"\f082"}.fa-fantasy-flight-games:before{content:"\f6dc"}.fa-fedex:before{content:"\f797"}.fa-fedora:before{content:"\f798"}.fa-figma:before{content:"\f799"}.fa-firefox:before{content:"\f269"}.fa-firefox-browser:before{content:"\e007"}.fa-first-order:before{content:"\f2b0"}.fa-first-order-alt:before{content:"\f50a"}.fa-firstdraft:before{content:"\f3a1"}.fa-flickr:before{content:"\f16e"}.fa-flipboard:before{content:"\f44d"}.fa-fly:before{content:"\f417"}.fa-font-awesome-flag:before,.fa-font-awesome-logo-full:before,.fa-font-awesome:before{content:"\f2b4"}.fa-fonticons:before{content:"\f280"}.fa-fonticons-fi:before{content:"\f3a2"}.fa-fort-awesome:before{content:"\f286"}.fa-fort-awesome-alt:before{content:"\f3a3"}.fa-forumbee:before{content:"\f211"}.fa-foursquare:before{content:"\f180"}.fa-free-code-camp:before{content:"\f2c5"}.fa-freebsd:before{content:"\f3a4"}.fa-fulcrum:before{content:"\f50b"}.fa-galactic-republic:before{content:"\f50c"}.fa-galactic-senate:before{content:"\f50d"}.fa-get-pocket:before{content:"\f265"}.fa-gg:before{content:"\f260"}.fa-gg-circle:before{content:"\f261"}.fa-git:before{content:"\f1d3"}.fa-git-alt:before{content:"\f841"}.fa-git-square:before{content:"\f1d2"}.fa-github:before{content:"\f09b"}.fa-github-alt:before{content:"\f113"}.fa-github-square:before{content:"\f092"}.fa-gitkraken:before{content:"\f3a6"}.fa-gitlab:before{content:"\f296"}.fa-gitter:before{content:"\f426"}.fa-glide:before{content:"\f2a5"}.fa-glide-g:before{content:"\f2a6"}.fa-gofore:before{content:"\f3a7"}.fa-golang:before{content:"\e40f"}.fa-goodreads:before{content:"\f3a8"}.fa-goodreads-g:before{content:"\f3a9"}.fa-google:before{content:"\f1a0"}.fa-google-drive:before{content:"\f3aa"}.fa-google-pay:before{content:"\e079"}.fa-google-play:before{content:"\f3ab"}.fa-google-plus:before{content:"\f2b3"}.fa-google-plus-g:before{content:"\f0d5"}.fa-google-plus-square:before{content:"\f0d4"}.fa-google-wallet:before{content:"\f1ee"}.fa-gratipay:before{content:"\f184"}.fa-grav:before{content:"\f2d6"}.fa-gripfire:before{content:"\f3ac"}.fa-grunt:before{content:"\f3ad"}.fa-guilded:before{content:"\e07e"}.fa-gulp:before{content:"\f3ae"}.fa-hacker-news:before{content:"\f1d4"}.fa-hacker-news-square:before{content:"\f3af"}.fa-hackerrank:before{content:"\f5f7"}.fa-hips:before{content:"\f452"}.fa-hire-a-helper:before{content:"\f3b0"}.fa-hive:before{content:"\e07f"}.fa-hooli:before{content:"\f427"}.fa-hornbill:before{content:"\f592"}.fa-hotjar:before{content:"\f3b1"}.fa-houzz:before{content:"\f27c"}.fa-html5:before{content:"\f13b"}.fa-hubspot:before{content:"\f3b2"}.fa-ideal:before{content:"\e013"}.fa-imdb:before{content:"\f2d8"}.fa-instagram:before{content:"\f16d"}.fa-instagram-square:before{content:"\e055"}.fa-instalod:before{content:"\e081"}.fa-intercom:before{content:"\f7af"}.fa-internet-explorer:before{content:"\f26b"}.fa-invision:before{content:"\f7b0"}.fa-ioxhost:before{content:"\f208"}.fa-itch-io:before{content:"\f83a"}.fa-itunes:before{content:"\f3b4"}.fa-itunes-note:before{content:"\f3b5"}.fa-java:before{content:"\f4e4"}.fa-jedi-order:before{content:"\f50e"}.fa-jenkins:before{content:"\f3b6"}.fa-jira:before{content:"\f7b1"}.fa-joget:before{content:"\f3b7"}.fa-joomla:before{content:"\f1aa"}.fa-js:before{content:"\f3b8"}.fa-js-square:before{content:"\f3b9"}.fa-jsfiddle:before{content:"\f1cc"}.fa-kaggle:before{content:"\f5fa"}.fa-keybase:before{content:"\f4f5"}.fa-keycdn:before{content:"\f3ba"}.fa-kickstarter:before{content:"\f3bb"}.fa-kickstarter-k:before{content:"\f3bc"}.fa-korvue:before{content:"\f42f"}.fa-laravel:before{content:"\f3bd"}.fa-lastfm:before{content:"\f202"}.fa-lastfm-square:before{content:"\f203"}.fa-leanpub:before{content:"\f212"}.fa-less:before{content:"\f41d"}.fa-line:before{content:"\f3c0"}.fa-linkedin:before{content:"\f08c"}.fa-linkedin-in:before{content:"\f0e1"}.fa-linode:before{content:"\f2b8"}.fa-linux:before{content:"\f17c"}.fa-lyft:before{content:"\f3c3"}.fa-magento:before{content:"\f3c4"}.fa-mailchimp:before{content:"\f59e"}.fa-mandalorian:before{content:"\f50f"}.fa-markdown:before{content:"\f60f"}.fa-mastodon:before{content:"\f4f6"}.fa-maxcdn:before{content:"\f136"}.fa-mdb:before{content:"\f8ca"}.fa-medapps:before{content:"\f3c6"}.fa-medium-m:before,.fa-medium:before{content:"\f23a"}.fa-medrt:before{content:"\f3c8"}.fa-meetup:before{content:"\f2e0"}.fa-megaport:before{content:"\f5a3"}.fa-mendeley:before{content:"\f7b3"}.fa-microblog:before{content:"\e01a"}.fa-microsoft:before{content:"\f3ca"}.fa-mix:before{content:"\f3cb"}.fa-mixcloud:before{content:"\f289"}.fa-mixer:before{content:"\e056"}.fa-mizuni:before{content:"\f3cc"}.fa-modx:before{content:"\f285"}.fa-monero:before{content:"\f3d0"}.fa-napster:before{content:"\f3d2"}.fa-neos:before{content:"\f612"}.fa-nimblr:before{content:"\f5a8"}.fa-node:before{content:"\f419"}.fa-node-js:before{content:"\f3d3"}.fa-npm:before{content:"\f3d4"}.fa-ns8:before{content:"\f3d5"}.fa-nutritionix:before{content:"\f3d6"}.fa-octopus-deploy:before{content:"\e082"}.fa-odnoklassniki:before{content:"\f263"}.fa-odnoklassniki-square:before{content:"\f264"}.fa-old-republic:before{content:"\f510"}.fa-opencart:before{content:"\f23d"}.fa-openid:before{content:"\f19b"}.fa-opera:before{content:"\f26a"}.fa-optin-monster:before{content:"\f23c"}.fa-orcid:before{content:"\f8d2"}.fa-osi:before{content:"\f41a"}.fa-page4:before{content:"\f3d7"}.fa-pagelines:before{content:"\f18c"}.fa-palfed:before{content:"\f3d8"}.fa-patreon:before{content:"\f3d9"}.fa-paypal:before{content:"\f1ed"}.fa-penny-arcade:before{content:"\f704"}.fa-perbyte:before{content:"\e083"}.fa-periscope:before{content:"\f3da"}.fa-phabricator:before{content:"\f3db"}.fa-phoenix-framework:before{content:"\f3dc"}.fa-phoenix-squadron:before{content:"\f511"}.fa-php:before{content:"\f457"}.fa-pied-piper:before{content:"\f2ae"}.fa-pied-piper-alt:before{content:"\f1a8"}.fa-pied-piper-hat:before{content:"\f4e5"}.fa-pied-piper-pp:before{content:"\f1a7"}.fa-pied-piper-square:before{content:"\e01e"}.fa-pinterest:before{content:"\f0d2"}.fa-pinterest-p:before{content:"\f231"}.fa-pinterest-square:before{content:"\f0d3"}.fa-pix:before{content:"\e43a"}.fa-playstation:before{content:"\f3df"}.fa-product-hunt:before{content:"\f288"}.fa-pushed:before{content:"\f3e1"}.fa-python:before{content:"\f3e2"}.fa-qq:before{content:"\f1d6"}.fa-quinscape:before{content:"\f459"}.fa-quora:before{content:"\f2c4"}.fa-r-project:before{content:"\f4f7"}.fa-raspberry-pi:before{content:"\f7bb"}.fa-ravelry:before{content:"\f2d9"}.fa-react:before{content:"\f41b"}.fa-reacteurope:before{content:"\f75d"}.fa-readme:before{content:"\f4d5"}.fa-rebel:before{content:"\f1d0"}.fa-red-river:before{content:"\f3e3"}.fa-reddit:before{content:"\f1a1"}.fa-reddit-alien:before{content:"\f281"}.fa-reddit-square:before{content:"\f1a2"}.fa-redhat:before{content:"\f7bc"}.fa-renren:before{content:"\f18b"}.fa-replyd:before{content:"\f3e6"}.fa-researchgate:before{content:"\f4f8"}.fa-resolving:before{content:"\f3e7"}.fa-rev:before{content:"\f5b2"}.fa-rocketchat:before{content:"\f3e8"}.fa-rockrms:before{content:"\f3e9"}.fa-rust:before{content:"\e07a"}.fa-safari:before{content:"\f267"}.fa-salesforce:before{content:"\f83b"}.fa-sass:before{content:"\f41e"}.fa-schlix:before{content:"\f3ea"}.fa-scribd:before{content:"\f28a"}.fa-searchengin:before{content:"\f3eb"}.fa-sellcast:before{content:"\f2da"}.fa-sellsy:before{content:"\f213"}.fa-servicestack:before{content:"\f3ec"}.fa-shirtsinbulk:before{content:"\f214"}.fa-shopify:before{content:"\e057"}.fa-shopware:before{content:"\f5b5"}.fa-simplybuilt:before{content:"\f215"}.fa-sistrix:before{content:"\f3ee"}.fa-sith:before{content:"\f512"}.fa-sitrox:before{content:"\e44a"}.fa-sketch:before{content:"\f7c6"}.fa-skyatlas:before{content:"\f216"}.fa-skype:before{content:"\f17e"}.fa-slack-hash:before,.fa-slack:before{content:"\f198"}.fa-slideshare:before{content:"\f1e7"}.fa-snapchat-ghost:before,.fa-snapchat:before{content:"\f2ab"}.fa-snapchat-square:before{content:"\f2ad"}.fa-soundcloud:before{content:"\f1be"}.fa-sourcetree:before{content:"\f7d3"}.fa-speakap:before{content:"\f3f3"}.fa-speaker-deck:before{content:"\f83c"}.fa-spotify:before{content:"\f1bc"}.fa-square-font-awesome:before{content:"\f425"}.fa-font-awesome-alt:before,.fa-square-font-awesome-stroke:before{content:"\f35c"}.fa-squarespace:before{content:"\f5be"}.fa-stack-exchange:before{content:"\f18d"}.fa-stack-overflow:before{content:"\f16c"}.fa-stackpath:before{content:"\f842"}.fa-staylinked:before{content:"\f3f5"}.fa-steam:before{content:"\f1b6"}.fa-steam-square:before{content:"\f1b7"}.fa-steam-symbol:before{content:"\f3f6"}.fa-sticker-mule:before{content:"\f3f7"}.fa-strava:before{content:"\f428"}.fa-stripe:before{content:"\f429"}.fa-stripe-s:before{content:"\f42a"}.fa-studiovinari:before{content:"\f3f8"}.fa-stumbleupon:before{content:"\f1a4"}.fa-stumbleupon-circle:before{content:"\f1a3"}.fa-superpowers:before{content:"\f2dd"}.fa-supple:before{content:"\f3f9"}.fa-suse:before{content:"\f7d6"}.fa-swift:before{content:"\f8e1"}.fa-symfony:before{content:"\f83d"}.fa-teamspeak:before{content:"\f4f9"}.fa-telegram-plane:before,.fa-telegram:before{content:"\f2c6"}.fa-tencent-weibo:before{content:"\f1d5"}.fa-the-red-yeti:before{content:"\f69d"}.fa-themeco:before{content:"\f5c6"}.fa-themeisle:before{content:"\f2b2"}.fa-think-peaks:before{content:"\f731"}.fa-tiktok:before{content:"\e07b"}.fa-trade-federation:before{content:"\f513"}.fa-trello:before{content:"\f181"}.fa-tumblr:before{content:"\f173"}.fa-tumblr-square:before{content:"\f174"}.fa-twitch:before{content:"\f1e8"}.fa-twitter:before{content:"\f099"}.fa-twitter-square:before{content:"\f081"}.fa-typo3:before{content:"\f42b"}.fa-uber:before{content:"\f402"}.fa-ubuntu:before{content:"\f7df"}.fa-uikit:before{content:"\f403"}.fa-umbraco:before{content:"\f8e8"}.fa-uncharted:before{content:"\e084"}.fa-uniregistry:before{content:"\f404"}.fa-unity:before{content:"\e049"}.fa-unsplash:before{content:"\e07c"}.fa-untappd:before{content:"\f405"}.fa-ups:before{content:"\f7e0"}.fa-usb:before{content:"\f287"}.fa-usps:before{content:"\f7e1"}.fa-ussunnah:before{content:"\f407"}.fa-vaadin:before{content:"\f408"}.fa-viacoin:before{content:"\f237"}.fa-viadeo:before{content:"\f2a9"}.fa-viadeo-square:before{content:"\f2aa"}.fa-viber:before{content:"\f409"}.fa-vimeo:before{content:"\f40a"}.fa-vimeo-square:before{content:"\f194"}.fa-vimeo-v:before{content:"\f27d"}.fa-vine:before{content:"\f1ca"}.fa-vk:before{content:"\f189"}.fa-vnv:before{content:"\f40b"}.fa-vuejs:before{content:"\f41f"}.fa-watchman-monitoring:before{content:"\e087"}.fa-waze:before{content:"\f83f"}.fa-weebly:before{content:"\f5cc"}.fa-weibo:before{content:"\f18a"}.fa-weixin:before{content:"\f1d7"}.fa-whatsapp:before{content:"\f232"}.fa-whatsapp-square:before{content:"\f40c"}.fa-whmcs:before{content:"\f40d"}.fa-wikipedia-w:before{content:"\f266"}.fa-windows:before{content:"\f17a"}.fa-wirsindhandwerk:before,.fa-wsh:before{content:"\e2d0"}.fa-wix:before{content:"\f5cf"}.fa-wizards-of-the-coast:before{content:"\f730"}.fa-wodu:before{content:"\e088"}.fa-wolf-pack-battalion:before{content:"\f514"}.fa-wordpress:before{content:"\f19a"}.fa-wordpress-simple:before{content:"\f411"}.fa-wpbeginner:before{content:"\f297"}.fa-wpexplorer:before{content:"\f2de"}.fa-wpforms:before{content:"\f298"}.fa-wpressr:before{content:"\f3e4"}.fa-xbox:before{content:"\f412"}.fa-xing:before{content:"\f168"}.fa-xing-square:before{content:"\f169"}.fa-y-combinator:before{content:"\f23b"}.fa-yahoo:before{content:"\f19e"}.fa-yammer:before{content:"\f840"}.fa-yandex:before{content:"\f413"}.fa-yandex-international:before{content:"\f414"}.fa-yarn:before{content:"\f7e3"}.fa-yelp:before{content:"\f1e9"}.fa-yoast:before{content:"\f2b1"}.fa-youtube:before{content:"\f167"}.fa-youtube-square:before{content:"\f431"}.fa-zhihu:before{content:"\f63f"}:host,:root{--fa-font-regular:normal 400 1em/1 "Font Awesome 6 Free"}@font-face{font-family:"Font Awesome 6 Free";font-style:normal;font-weight:400;font-display:block;src:url(../webfonts/fa-regular-400.woff2) format("woff2"),url(../webfonts/fa-regular-400.ttf) format("truetype")}.fa-regular,.far{font-family:"Font Awesome 6 Free";font-weight:400}:host,:root{--fa-font-solid:normal 900 1em/1 "Font Awesome 6 Free"}@font-face{font-family:"Font Awesome 6 Free";font-style:normal;font-weight:900;font-display:block;src:url(../webfonts/fa-solid-900.woff2) format("woff2"),url(../webfonts/fa-solid-900.ttf) format("truetype")}.fa-solid,.fas{font-family:"Font Awesome 6 Free";font-weight:900}@font-face{font-family:"Font Awesome 5 Brands";font-display:block;font-weight:400;src:url(../webfonts/fa-brands-400.woff2) format("woff2"),url(../webfonts/fa-brands-400.ttf) format("truetype")}@font-face{font-family:"Font Awesome 5 Free";font-display:block;font-weight:900;src:url(../webfonts/fa-solid-900.woff2) format("woff2"),url(../webfonts/fa-solid-900.ttf) format("truetype")}@font-face{font-family:"Font Awesome 5 Free";font-display:block;font-weight:400;src:url(../webfonts/fa-regular-400.woff2) format("woff2"),url(../webfonts/fa-regular-400.ttf) format("truetype")}@font-face{font-family:"FontAwesome";font-display:block;src:url(../webfonts/fa-solid-900.woff2) format("woff2"),url(../webfonts/fa-solid-900.ttf) format("truetype")}@font-face{font-family:"FontAwesome";font-display:block;src:url(../webfonts/fa-brands-400.woff2) format("woff2"),url(../webfonts/fa-brands-400.ttf) format("truetype")}@font-face{font-family:"FontAwesome";font-display:block;src:url(../webfonts/fa-regular-400.woff2) format("woff2"),url(../webfonts/fa-regular-400.ttf) format("truetype");unicode-range:U+f003,U+f006,U+f014,U+f016-f017,U+f01a-f01b,U+f01d,U+f022,U+f03e,U+f044,U+f046,U+f05c-f05d,U+f06e,U+f070,U+f087-f088,U+f08a,U+f094,U+f096-f097,U+f09d,U+f0a0,U+f0a2,U+f0a4-f0a7,U+f0c5,U+f0c7,U+f0e5-f0e6,U+f0eb,U+f0f6-f0f8,U+f10c,U+f114-f115,U+f118-f11a,U+f11c-f11d,U+f133,U+f147,U+f14e,U+f150-f152,U+f185-f186,U+f18e,U+f190-f192,U+f196,U+f1c1-f1c9,U+f1d9,U+f1db,U+f1e3,U+f1ea,U+f1f7,U+f1f9,U+f20a,U+f247-f248,U+f24a,U+f24d,U+f255-f25b,U+f25d,U+f271-f274,U+f278,U+f27b,U+f28c,U+f28e,U+f29c,U+f2b5,U+f2b7,U+f2ba,U+f2bc,U+f2be,U+f2c0-f2c1,U+f2c3,U+f2d0,U+f2d2,U+f2d4,U+f2dc}@font-face{font-family:"FontAwesome";font-display:block;src:url(../webfonts/fa-v4compatibility.woff2) format("woff2"),url(../webfonts/fa-v4compatibility.ttf) format("truetype");unicode-range:U+f041,U+f047,U+f065-f066,U+f07d-f07e,U+f080,U+f08b,U+f08e,U+f090,U+f09a,U+f0ac,U+f0ae,U+f0b2,U+f0d0,U+f0d6,U+f0e4,U+f0ec,U+f10a-f10b,U+f123,U+f13e,U+f148-f149,U+f14c,U+f156,U+f15e,U+f160-f161,U+f163,U+f175-f178,U+f195,U+f1f8,U+f219,U+f250,U+f252,U+f27a}

--- File: static/bootstrap/js/bootstrap.bundle.min.js ---
   1	/*!
   2	  * Bootstrap v5.3.0-alpha1 (https://getbootstrap.com/)
   3	  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
   4	  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   5	  */
   6	!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).bootstrap=e()}(this,(function(){"use strict";const t="transitionend",e=t=>(t&&window.CSS&&window.CSS.escape&&(t=t.replace(/#([^\s"#']+)/g,((t,e)=>`#${CSS.escape(e)}`))),t),i=e=>{e.dispatchEvent(new Event(t))},n=t=>!(!t||"object"!=typeof t)&&(void 0!==t.jquery&&(t=t[0]),void 0!==t.nodeType),s=t=>n(t)?t.jquery?t[0]:t:"string"==typeof t&&t.length>0?document.querySelector(e(t)):null,o=t=>{if(!n(t)||0===t.getClientRects().length)return!1;const e="visible"===getComputedStyle(t).getPropertyValue("visibility"),i=t.closest("details:not([open])");if(!i)return e;if(i!==t){const e=t.closest("summary");if(e&&e.parentNode!==i)return!1;if(null===e)return!1}return e},r=t=>!t||t.nodeType!==Node.ELEMENT_NODE||!!t.classList.contains("disabled")||(void 0!==t.disabled?t.disabled:t.hasAttribute("disabled")&&"false"!==t.getAttribute("disabled")),a=t=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){const e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?a(t.parentNode):null},l=()=>{},c=t=>{t.offsetHeight},h=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,d=[],u=()=>"rtl"===document.documentElement.dir,f=t=>{var e;e=()=>{const e=h();if(e){const i=t.NAME,n=e.fn[i];e.fn[i]=t.jQueryInterface,e.fn[i].Constructor=t,e.fn[i].noConflict=()=>(e.fn[i]=n,t.jQueryInterface)}},"loading"===document.readyState?(d.length||document.addEventListener("DOMContentLoaded",(()=>{for(const t of d)t()})),d.push(e)):e()},p=(t,e=[],i=t)=>"function"==typeof t?t(...e):i,m=(e,n,s=!0)=>{if(!s)return void p(e);const o=(t=>{if(!t)return 0;let{transitionDuration:e,transitionDelay:i}=window.getComputedStyle(t);const n=Number.parseFloat(e),s=Number.parseFloat(i);return n||s?(e=e.split(",")[0],i=i.split(",")[0],1e3*(Number.parseFloat(e)+Number.parseFloat(i))):0})(n)+5;let r=!1;const a=({target:i})=>{i===n&&(r=!0,n.removeEventListener(t,a),p(e))};n.addEventListener(t,a),setTimeout((()=>{r||i(n)}),o)},g=(t,e,i,n)=>{const s=t.length;let o=t.indexOf(e);return-1===o?!i&&n?t[s-1]:t[0]:(o+=i?1:-1,n&&(o=(o+s)%s),t[Math.max(0,Math.min(o,s-1))])},_=/[^.]*(?=\..*)\.|.*/,b=/\..*/,v=/::\d+$/,y={};let w=1;const A={mouseenter:"mouseover",mouseleave:"mouseout"},E=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function T(t,e){return e&&`${e}::${w++}`||t.uidEvent||w++}function C(t){const e=T(t);return t.uidEvent=e,y[e]=y[e]||{},y[e]}function O(t,e,i=null){return Object.values(t).find((t=>t.callable===e&&t.delegationSelector===i))}function x(t,e,i){const n="string"==typeof e,s=n?i:e||i;let o=D(t);return E.has(o)||(o=t),[n,s,o]}function k(t,e,i,n,s){if("string"!=typeof e||!t)return;let[o,r,a]=x(e,i,n);if(e in A){const t=t=>function(e){if(!e.relatedTarget||e.relatedTarget!==e.delegateTarget&&!e.delegateTarget.contains(e.relatedTarget))return t.call(this,e)};r=t(r)}const l=C(t),c=l[a]||(l[a]={}),h=O(c,r,o?i:null);if(h)return void(h.oneOff=h.oneOff&&s);const d=T(r,e.replace(_,"")),u=o?function(t,e,i){return function n(s){const o=t.querySelectorAll(e);for(let{target:r}=s;r&&r!==this;r=r.parentNode)for(const a of o)if(a===r)return N(s,{delegateTarget:r}),n.oneOff&&I.off(t,s.type,e,i),i.apply(r,[s])}}(t,i,r):function(t,e){return function i(n){return N(n,{delegateTarget:t}),i.oneOff&&I.off(t,n.type,e),e.apply(t,[n])}}(t,r);u.delegationSelector=o?i:null,u.callable=r,u.oneOff=s,u.uidEvent=d,c[d]=u,t.addEventListener(a,u,o)}function L(t,e,i,n,s){const o=O(e[i],n,s);o&&(t.removeEventListener(i,o,Boolean(s)),delete e[i][o.uidEvent])}function S(t,e,i,n){const s=e[i]||{};for(const[o,r]of Object.entries(s))o.includes(n)&&L(t,e,i,r.callable,r.delegationSelector)}function D(t){return t=t.replace(b,""),A[t]||t}const I={on(t,e,i,n){k(t,e,i,n,!1)},one(t,e,i,n){k(t,e,i,n,!0)},off(t,e,i,n){if("string"!=typeof e||!t)return;const[s,o,r]=x(e,i,n),a=r!==e,l=C(t),c=l[r]||{},h=e.startsWith(".");if(void 0===o){if(h)for(const i of Object.keys(l))S(t,l,i,e.slice(1));for(const[i,n]of Object.entries(c)){const s=i.replace(v,"");a&&!e.includes(s)||L(t,l,r,n.callable,n.delegationSelector)}}else{if(!Object.keys(c).length)return;L(t,l,r,o,s?i:null)}},trigger(t,e,i){if("string"!=typeof e||!t)return null;const n=h();let s=null,o=!0,r=!0,a=!1;e!==D(e)&&n&&(s=n.Event(e,i),n(t).trigger(s),o=!s.isPropagationStopped(),r=!s.isImmediatePropagationStopped(),a=s.isDefaultPrevented());let l=new Event(e,{bubbles:o,cancelable:!0});return l=N(l,i),a&&l.preventDefault(),r&&t.dispatchEvent(l),l.defaultPrevented&&s&&s.preventDefault(),l}};function N(t,e={}){for(const[i,n]of Object.entries(e))try{t[i]=n}catch(e){Object.defineProperty(t,i,{configurable:!0,get:()=>n})}return t}const P=new Map,j={set(t,e,i){P.has(t)||P.set(t,new Map);const n=P.get(t);n.has(e)||0===n.size?n.set(e,i):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(n.keys())[0]}.`)},get:(t,e)=>P.has(t)&&P.get(t).get(e)||null,remove(t,e){if(!P.has(t))return;const i=P.get(t);i.delete(e),0===i.size&&P.delete(t)}};function M(t){if("true"===t)return!0;if("false"===t)return!1;if(t===Number(t).toString())return Number(t);if(""===t||"null"===t)return null;if("string"!=typeof t)return t;try{return JSON.parse(decodeURIComponent(t))}catch(e){return t}}function F(t){return t.replace(/[A-Z]/g,(t=>`-${t.toLowerCase()}`))}const H={setDataAttribute(t,e,i){t.setAttribute(`data-bs-${F(e)}`,i)},removeDataAttribute(t,e){t.removeAttribute(`data-bs-${F(e)}`)},getDataAttributes(t){if(!t)return{};const e={},i=Object.keys(t.dataset).filter((t=>t.startsWith("bs")&&!t.startsWith("bsConfig")));for(const n of i){let i=n.replace(/^bs/,"");i=i.charAt(0).toLowerCase()+i.slice(1,i.length),e[i]=M(t.dataset[n])}return e},getDataAttribute:(t,e)=>M(t.getAttribute(`data-bs-${F(e)}`))};class ${static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(t){return t=this._mergeConfigObj(t),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}_configAfterMerge(t){return t}_mergeConfigObj(t,e){const i=n(e)?H.getDataAttribute(e,"config"):{};return{...this.constructor.Default,..."object"==typeof i?i:{},...n(e)?H.getDataAttributes(e):{},..."object"==typeof t?t:{}}}_typeCheckConfig(t,e=this.constructor.DefaultType){for(const[s,o]of Object.entries(e)){const e=t[s],r=n(e)?"element":null==(i=e)?`${i}`:Object.prototype.toString.call(i).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(o).test(r))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${s}" provided type "${r}" but expected type "${o}".`)}var i}}class W extends ${constructor(t,e){super(),(t=s(t))&&(this._element=t,this._config=this._getConfig(e),j.set(this._element,this.constructor.DATA_KEY,this))}dispose(){j.remove(this._element,this.constructor.DATA_KEY),I.off(this._element,this.constructor.EVENT_KEY);for(const t of Object.getOwnPropertyNames(this))this[t]=null}_queueCallback(t,e,i=!0){m(t,e,i)}_getConfig(t){return t=this._mergeConfigObj(t,this._element),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}static getInstance(t){return j.get(s(t),this.DATA_KEY)}static getOrCreateInstance(t,e={}){return this.getInstance(t)||new this(t,"object"==typeof e?e:null)}static get VERSION(){return"5.3.0-alpha1"}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(t){return`${t}${this.EVENT_KEY}`}}const B=t=>{let i=t.getAttribute("data-bs-target");if(!i||"#"===i){let e=t.getAttribute("href");if(!e||!e.includes("#")&&!e.startsWith("."))return null;e.includes("#")&&!e.startsWith("#")&&(e=`#${e.split("#")[1]}`),i=e&&"#"!==e?e.trim():null}return e(i)},z={find:(t,e=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(e,t)),findOne:(t,e=document.documentElement)=>Element.prototype.querySelector.call(e,t),children:(t,e)=>[].concat(...t.children).filter((t=>t.matches(e))),parents(t,e){const i=[];let n=t.parentNode.closest(e);for(;n;)i.push(n),n=n.parentNode.closest(e);return i},prev(t,e){let i=t.previousElementSibling;for(;i;){if(i.matches(e))return[i];i=i.previousElementSibling}return[]},next(t,e){let i=t.nextElementSibling;for(;i;){if(i.matches(e))return[i];i=i.nextElementSibling}return[]},focusableChildren(t){const e=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((t=>`${t}:not([tabindex^="-"])`)).join(",");return this.find(e,t).filter((t=>!r(t)&&o(t)))},getSelectorFromElement(t){const e=B(t);return e&&z.findOne(e)?e:null},getElementFromSelector(t){const e=B(t);return e?z.findOne(e):null},getMultipleElementsFromSelector(t){const e=B(t);return e?z.find(e):[]}},R=(t,e="hide")=>{const i=`click.dismiss${t.EVENT_KEY}`,n=t.NAME;I.on(document,i,`[data-bs-dismiss="${n}"]`,(function(i){if(["A","AREA"].includes(this.tagName)&&i.preventDefault(),r(this))return;const s=z.getElementFromSelector(this)||this.closest(`.${n}`);t.getOrCreateInstance(s)[e]()}))};class q extends W{static get NAME(){return"alert"}close(){if(I.trigger(this._element,"close.bs.alert").defaultPrevented)return;this._element.classList.remove("show");const t=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,t)}_destroyElement(){this._element.remove(),I.trigger(this._element,"closed.bs.alert"),this.dispose()}static jQueryInterface(t){return this.each((function(){const e=q.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}R(q,"close"),f(q);const V='[data-bs-toggle="button"]';class K extends W{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(t){return this.each((function(){const e=K.getOrCreateInstance(this);"toggle"===t&&e[t]()}))}}I.on(document,"click.bs.button.data-api",V,(t=>{t.preventDefault();const e=t.target.closest(V);K.getOrCreateInstance(e).toggle()})),f(K);const Q={endCallback:null,leftCallback:null,rightCallback:null},X={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"};class Y extends ${constructor(t,e){super(),this._element=t,t&&Y.isSupported()&&(this._config=this._getConfig(e),this._deltaX=0,this._supportPointerEvents=Boolean(window.PointerEvent),this._initEvents())}static get Default(){return Q}static get DefaultType(){return X}static get NAME(){return"swipe"}dispose(){I.off(this._element,".bs.swipe")}_start(t){this._supportPointerEvents?this._eventIsPointerPenTouch(t)&&(this._deltaX=t.clientX):this._deltaX=t.touches[0].clientX}_end(t){this._eventIsPointerPenTouch(t)&&(this._deltaX=t.clientX-this._deltaX),this._handleSwipe(),p(this._config.endCallback)}_move(t){this._deltaX=t.touches&&t.touches.length>1?0:t.touches[0].clientX-this._deltaX}_handleSwipe(){const t=Math.abs(this._deltaX);if(t<=40)return;const e=t/this._deltaX;this._deltaX=0,e&&p(e>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?(I.on(this._element,"pointerdown.bs.swipe",(t=>this._start(t))),I.on(this._element,"pointerup.bs.swipe",(t=>this._end(t))),this._element.classList.add("pointer-event")):(I.on(this._element,"touchstart.bs.swipe",(t=>this._start(t))),I.on(this._element,"touchmove.bs.swipe",(t=>this._move(t))),I.on(this._element,"touchend.bs.swipe",(t=>this._end(t))))}_eventIsPointerPenTouch(t){return this._supportPointerEvents&&("pen"===t.pointerType||"touch"===t.pointerType)}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}const U="next",G="prev",J="left",Z="right",tt="slid.bs.carousel",et="carousel",it="active",nt={ArrowLeft:Z,ArrowRight:J},st={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},ot={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"};class rt extends W{constructor(t,e){super(t,e),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=z.findOne(".carousel-indicators",this._element),this._addEventListeners(),this._config.ride===et&&this.cycle()}static get Default(){return st}static get DefaultType(){return ot}static get NAME(){return"carousel"}next(){this._slide(U)}nextWhenVisible(){!document.hidden&&o(this._element)&&this.next()}prev(){this._slide(G)}pause(){this._isSliding&&i(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval((()=>this.nextWhenVisible()),this._config.interval)}_maybeEnableCycle(){this._config.ride&&(this._isSliding?I.one(this._element,tt,(()=>this.cycle())):this.cycle())}to(t){const e=this._getItems();if(t>e.length-1||t<0)return;if(this._isSliding)return void I.one(this._element,tt,(()=>this.to(t)));const i=this._getItemIndex(this._getActive());if(i===t)return;const n=t>i?U:G;this._slide(n,e[t])}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(t){return t.defaultInterval=t.interval,t}_addEventListeners(){this._config.keyboard&&I.on(this._element,"keydown.bs.carousel",(t=>this._keydown(t))),"hover"===this._config.pause&&(I.on(this._element,"mouseenter.bs.carousel",(()=>this.pause())),I.on(this._element,"mouseleave.bs.carousel",(()=>this._maybeEnableCycle()))),this._config.touch&&Y.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(const t of z.find(".carousel-item img",this._element))I.on(t,"dragstart.bs.carousel",(t=>t.preventDefault()));const t={leftCallback:()=>this._slide(this._directionToOrder(J)),rightCallback:()=>this._slide(this._directionToOrder(Z)),endCallback:()=>{"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((()=>this._maybeEnableCycle()),500+this._config.interval))}};this._swipeHelper=new Y(this._element,t)}_keydown(t){if(/input|textarea/i.test(t.target.tagName))return;const e=nt[t.key];e&&(t.preventDefault(),this._slide(this._directionToOrder(e)))}_getItemIndex(t){return this._getItems().indexOf(t)}_setActiveIndicatorElement(t){if(!this._indicatorsElement)return;const e=z.findOne(".active",this._indicatorsElement);e.classList.remove(it),e.removeAttribute("aria-current");const i=z.findOne(`[data-bs-slide-to="${t}"]`,this._indicatorsElement);i&&(i.classList.add(it),i.setAttribute("aria-current","true"))}_updateInterval(){const t=this._activeElement||this._getActive();if(!t)return;const e=Number.parseInt(t.getAttribute("data-bs-interval"),10);this._config.interval=e||this._config.defaultInterval}_slide(t,e=null){if(this._isSliding)return;const i=this._getActive(),n=t===U,s=e||g(this._getItems(),i,n,this._config.wrap);if(s===i)return;const o=this._getItemIndex(s),r=e=>I.trigger(this._element,e,{relatedTarget:s,direction:this._orderToDirection(t),from:this._getItemIndex(i),to:o});if(r("slide.bs.carousel").defaultPrevented)return;if(!i||!s)return;const a=Boolean(this._interval);this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(o),this._activeElement=s;const l=n?"carousel-item-start":"carousel-item-end",h=n?"carousel-item-next":"carousel-item-prev";s.classList.add(h),c(s),i.classList.add(l),s.classList.add(l),this._queueCallback((()=>{s.classList.remove(l,h),s.classList.add(it),i.classList.remove(it,h,l),this._isSliding=!1,r(tt)}),i,this._isAnimated()),a&&this.cycle()}_isAnimated(){return this._element.classList.contains("slide")}_getActive(){return z.findOne(".active.carousel-item",this._element)}_getItems(){return z.find(".carousel-item",this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(t){return u()?t===J?G:U:t===J?U:G}_orderToDirection(t){return u()?t===G?J:Z:t===G?Z:J}static jQueryInterface(t){return this.each((function(){const e=rt.getOrCreateInstance(this,t);if("number"!=typeof t){if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}}else e.to(t)}))}}I.on(document,"click.bs.carousel.data-api","[data-bs-slide], [data-bs-slide-to]",(function(t){const e=z.getElementFromSelector(this);if(!e||!e.classList.contains(et))return;t.preventDefault();const i=rt.getOrCreateInstance(e),n=this.getAttribute("data-bs-slide-to");return n?(i.to(n),void i._maybeEnableCycle()):"next"===H.getDataAttribute(this,"slide")?(i.next(),void i._maybeEnableCycle()):(i.prev(),void i._maybeEnableCycle())})),I.on(window,"load.bs.carousel.data-api",(()=>{const t=z.find('[data-bs-ride="carousel"]');for(const e of t)rt.getOrCreateInstance(e)})),f(rt);const at="show",lt="collapse",ct="collapsing",ht='[data-bs-toggle="collapse"]',dt={parent:null,toggle:!0},ut={parent:"(null|element)",toggle:"boolean"};class ft extends W{constructor(t,e){super(t,e),this._isTransitioning=!1,this._triggerArray=[];const i=z.find(ht);for(const t of i){const e=z.getSelectorFromElement(t),i=z.find(e).filter((t=>t===this._element));null!==e&&i.length&&this._triggerArray.push(t)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return dt}static get DefaultType(){return ut}static get NAME(){return"collapse"}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let t=[];if(this._config.parent&&(t=this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter((t=>t!==this._element)).map((t=>ft.getOrCreateInstance(t,{toggle:!1})))),t.length&&t[0]._isTransitioning)return;if(I.trigger(this._element,"show.bs.collapse").defaultPrevented)return;for(const e of t)e.hide();const e=this._getDimension();this._element.classList.remove(lt),this._element.classList.add(ct),this._element.style[e]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const i=`scroll${e[0].toUpperCase()+e.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(ct),this._element.classList.add(lt,at),this._element.style[e]="",I.trigger(this._element,"shown.bs.collapse")}),this._element,!0),this._element.style[e]=`${this._element[i]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(I.trigger(this._element,"hide.bs.collapse").defaultPrevented)return;const t=this._getDimension();this._element.style[t]=`${this._element.getBoundingClientRect()[t]}px`,c(this._element),this._element.classList.add(ct),this._element.classList.remove(lt,at);for(const t of this._triggerArray){const e=z.getElementFromSelector(t);e&&!this._isShown(e)&&this._addAriaAndCollapsedClass([t],!1)}this._isTransitioning=!0,this._element.style[t]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(ct),this._element.classList.add(lt),I.trigger(this._element,"hidden.bs.collapse")}),this._element,!0)}_isShown(t=this._element){return t.classList.contains(at)}_configAfterMerge(t){return t.toggle=Boolean(t.toggle),t.parent=s(t.parent),t}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const t=this._getFirstLevelChildren(ht);for(const e of t){const t=z.getElementFromSelector(e);t&&this._addAriaAndCollapsedClass([e],this._isShown(t))}}_getFirstLevelChildren(t){const e=z.find(":scope .collapse .collapse",this._config.parent);return z.find(t,this._config.parent).filter((t=>!e.includes(t)))}_addAriaAndCollapsedClass(t,e){if(t.length)for(const i of t)i.classList.toggle("collapsed",!e),i.setAttribute("aria-expanded",e)}static jQueryInterface(t){const e={};return"string"==typeof t&&/show|hide/.test(t)&&(e.toggle=!1),this.each((function(){const i=ft.getOrCreateInstance(this,e);if("string"==typeof t){if(void 0===i[t])throw new TypeError(`No method named "${t}"`);i[t]()}}))}}I.on(document,"click.bs.collapse.data-api",ht,(function(t){("A"===t.target.tagName||t.delegateTarget&&"A"===t.delegateTarget.tagName)&&t.preventDefault();for(const t of z.getMultipleElementsFromSelector(this))ft.getOrCreateInstance(t,{toggle:!1}).toggle()})),f(ft);var pt="top",mt="bottom",gt="right",_t="left",bt="auto",vt=[pt,mt,gt,_t],yt="start",wt="end",At="clippingParents",Et="viewport",Tt="popper",Ct="reference",Ot=vt.reduce((function(t,e){return t.concat([e+"-"+yt,e+"-"+wt])}),[]),xt=[].concat(vt,[bt]).reduce((function(t,e){return t.concat([e,e+"-"+yt,e+"-"+wt])}),[]),kt="beforeRead",Lt="read",St="afterRead",Dt="beforeMain",It="main",Nt="afterMain",Pt="beforeWrite",jt="write",Mt="afterWrite",Ft=[kt,Lt,St,Dt,It,Nt,Pt,jt,Mt];function Ht(t){return t?(t.nodeName||"").toLowerCase():null}function $t(t){if(null==t)return window;if("[object Window]"!==t.toString()){var e=t.ownerDocument;return e&&e.defaultView||window}return t}function Wt(t){return t instanceof $t(t).Element||t instanceof Element}function Bt(t){return t instanceof $t(t).HTMLElement||t instanceof HTMLElement}function zt(t){return"undefined"!=typeof ShadowRoot&&(t instanceof $t(t).ShadowRoot||t instanceof ShadowRoot)}const Rt={name:"applyStyles",enabled:!0,phase:"write",fn:function(t){var e=t.state;Object.keys(e.elements).forEach((function(t){var i=e.styles[t]||{},n=e.attributes[t]||{},s=e.elements[t];Bt(s)&&Ht(s)&&(Object.assign(s.style,i),Object.keys(n).forEach((function(t){var e=n[t];!1===e?s.removeAttribute(t):s.setAttribute(t,!0===e?"":e)})))}))},effect:function(t){var e=t.state,i={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,i.popper),e.styles=i,e.elements.arrow&&Object.assign(e.elements.arrow.style,i.arrow),function(){Object.keys(e.elements).forEach((function(t){var n=e.elements[t],s=e.attributes[t]||{},o=Object.keys(e.styles.hasOwnProperty(t)?e.styles[t]:i[t]).reduce((function(t,e){return t[e]="",t}),{});Bt(n)&&Ht(n)&&(Object.assign(n.style,o),Object.keys(s).forEach((function(t){n.removeAttribute(t)})))}))}},requires:["computeStyles"]};function qt(t){return t.split("-")[0]}var Vt=Math.max,Kt=Math.min,Qt=Math.round;function Xt(){var t=navigator.userAgentData;return null!=t&&t.brands?t.brands.map((function(t){return t.brand+"/"+t.version})).join(" "):navigator.userAgent}function Yt(){return!/^((?!chrome|android).)*safari/i.test(Xt())}function Ut(t,e,i){void 0===e&&(e=!1),void 0===i&&(i=!1);var n=t.getBoundingClientRect(),s=1,o=1;e&&Bt(t)&&(s=t.offsetWidth>0&&Qt(n.width)/t.offsetWidth||1,o=t.offsetHeight>0&&Qt(n.height)/t.offsetHeight||1);var r=(Wt(t)?$t(t):window).visualViewport,a=!Yt()&&i,l=(n.left+(a&&r?r.offsetLeft:0))/s,c=(n.top+(a&&r?r.offsetTop:0))/o,h=n.width/s,d=n.height/o;return{width:h,height:d,top:c,right:l+h,bottom:c+d,left:l,x:l,y:c}}function Gt(t){var e=Ut(t),i=t.offsetWidth,n=t.offsetHeight;return Math.abs(e.width-i)<=1&&(i=e.width),Math.abs(e.height-n)<=1&&(n=e.height),{x:t.offsetLeft,y:t.offsetTop,width:i,height:n}}function Jt(t,e){var i=e.getRootNode&&e.getRootNode();if(t.contains(e))return!0;if(i&&zt(i)){var n=e;do{if(n&&t.isSameNode(n))return!0;n=n.parentNode||n.host}while(n)}return!1}function Zt(t){return $t(t).getComputedStyle(t)}function te(t){return["table","td","th"].indexOf(Ht(t))>=0}function ee(t){return((Wt(t)?t.ownerDocument:t.document)||window.document).documentElement}function ie(t){return"html"===Ht(t)?t:t.assignedSlot||t.parentNode||(zt(t)?t.host:null)||ee(t)}function ne(t){return Bt(t)&&"fixed"!==Zt(t).position?t.offsetParent:null}function se(t){for(var e=$t(t),i=ne(t);i&&te(i)&&"static"===Zt(i).position;)i=ne(i);return i&&("html"===Ht(i)||"body"===Ht(i)&&"static"===Zt(i).position)?e:i||function(t){var e=/firefox/i.test(Xt());if(/Trident/i.test(Xt())&&Bt(t)&&"fixed"===Zt(t).position)return null;var i=ie(t);for(zt(i)&&(i=i.host);Bt(i)&&["html","body"].indexOf(Ht(i))<0;){var n=Zt(i);if("none"!==n.transform||"none"!==n.perspective||"paint"===n.contain||-1!==["transform","perspective"].indexOf(n.willChange)||e&&"filter"===n.willChange||e&&n.filter&&"none"!==n.filter)return i;i=i.parentNode}return null}(t)||e}function oe(t){return["top","bottom"].indexOf(t)>=0?"x":"y"}function re(t,e,i){return Vt(t,Kt(e,i))}function ae(t){return Object.assign({},{top:0,right:0,bottom:0,left:0},t)}function le(t,e){return e.reduce((function(e,i){return e[i]=t,e}),{})}const ce={name:"arrow",enabled:!0,phase:"main",fn:function(t){var e,i=t.state,n=t.name,s=t.options,o=i.elements.arrow,r=i.modifiersData.popperOffsets,a=qt(i.placement),l=oe(a),c=[_t,gt].indexOf(a)>=0?"height":"width";if(o&&r){var h=function(t,e){return ae("number"!=typeof(t="function"==typeof t?t(Object.assign({},e.rects,{placement:e.placement})):t)?t:le(t,vt))}(s.padding,i),d=Gt(o),u="y"===l?pt:_t,f="y"===l?mt:gt,p=i.rects.reference[c]+i.rects.reference[l]-r[l]-i.rects.popper[c],m=r[l]-i.rects.reference[l],g=se(o),_=g?"y"===l?g.clientHeight||0:g.clientWidth||0:0,b=p/2-m/2,v=h[u],y=_-d[c]-h[f],w=_/2-d[c]/2+b,A=re(v,w,y),E=l;i.modifiersData[n]=((e={})[E]=A,e.centerOffset=A-w,e)}},effect:function(t){var e=t.state,i=t.options.element,n=void 0===i?"[data-popper-arrow]":i;null!=n&&("string"!=typeof n||(n=e.elements.popper.querySelector(n)))&&Jt(e.elements.popper,n)&&(e.elements.arrow=n)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function he(t){return t.split("-")[1]}var de={top:"auto",right:"auto",bottom:"auto",left:"auto"};function ue(t){var e,i=t.popper,n=t.popperRect,s=t.placement,o=t.variation,r=t.offsets,a=t.position,l=t.gpuAcceleration,c=t.adaptive,h=t.roundOffsets,d=t.isFixed,u=r.x,f=void 0===u?0:u,p=r.y,m=void 0===p?0:p,g="function"==typeof h?h({x:f,y:m}):{x:f,y:m};f=g.x,m=g.y;var _=r.hasOwnProperty("x"),b=r.hasOwnProperty("y"),v=_t,y=pt,w=window;if(c){var A=se(i),E="clientHeight",T="clientWidth";A===$t(i)&&"static"!==Zt(A=ee(i)).position&&"absolute"===a&&(E="scrollHeight",T="scrollWidth"),(s===pt||(s===_t||s===gt)&&o===wt)&&(y=mt,m-=(d&&A===w&&w.visualViewport?w.visualViewport.height:A[E])-n.height,m*=l?1:-1),s!==_t&&(s!==pt&&s!==mt||o!==wt)||(v=gt,f-=(d&&A===w&&w.visualViewport?w.visualViewport.width:A[T])-n.width,f*=l?1:-1)}var C,O=Object.assign({position:a},c&&de),x=!0===h?function(t){var e=t.x,i=t.y,n=window.devicePixelRatio||1;return{x:Qt(e*n)/n||0,y:Qt(i*n)/n||0}}({x:f,y:m}):{x:f,y:m};return f=x.x,m=x.y,l?Object.assign({},O,((C={})[y]=b?"0":"",C[v]=_?"0":"",C.transform=(w.devicePixelRatio||1)<=1?"translate("+f+"px, "+m+"px)":"translate3d("+f+"px, "+m+"px, 0)",C)):Object.assign({},O,((e={})[y]=b?m+"px":"",e[v]=_?f+"px":"",e.transform="",e))}const fe={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(t){var e=t.state,i=t.options,n=i.gpuAcceleration,s=void 0===n||n,o=i.adaptive,r=void 0===o||o,a=i.roundOffsets,l=void 0===a||a,c={placement:qt(e.placement),variation:he(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:s,isFixed:"fixed"===e.options.strategy};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign({},e.styles.popper,ue(Object.assign({},c,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:r,roundOffsets:l})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign({},e.styles.arrow,ue(Object.assign({},c,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement})},data:{}};var pe={passive:!0};const me={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var e=t.state,i=t.instance,n=t.options,s=n.scroll,o=void 0===s||s,r=n.resize,a=void 0===r||r,l=$t(e.elements.popper),c=[].concat(e.scrollParents.reference,e.scrollParents.popper);return o&&c.forEach((function(t){t.addEventListener("scroll",i.update,pe)})),a&&l.addEventListener("resize",i.update,pe),function(){o&&c.forEach((function(t){t.removeEventListener("scroll",i.update,pe)})),a&&l.removeEventListener("resize",i.update,pe)}},data:{}};var ge={left:"right",right:"left",bottom:"top",top:"bottom"};function _e(t){return t.replace(/left|right|bottom|top/g,(function(t){return ge[t]}))}var be={start:"end",end:"start"};function ve(t){return t.replace(/start|end/g,(function(t){return be[t]}))}function ye(t){var e=$t(t);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function we(t){return Ut(ee(t)).left+ye(t).scrollLeft}function Ae(t){var e=Zt(t),i=e.overflow,n=e.overflowX,s=e.overflowY;return/auto|scroll|overlay|hidden/.test(i+s+n)}function Ee(t){return["html","body","#document"].indexOf(Ht(t))>=0?t.ownerDocument.body:Bt(t)&&Ae(t)?t:Ee(ie(t))}function Te(t,e){var i;void 0===e&&(e=[]);var n=Ee(t),s=n===(null==(i=t.ownerDocument)?void 0:i.body),o=$t(n),r=s?[o].concat(o.visualViewport||[],Ae(n)?n:[]):n,a=e.concat(r);return s?a:a.concat(Te(ie(r)))}function Ce(t){return Object.assign({},t,{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}function Oe(t,e,i){return e===Et?Ce(function(t,e){var i=$t(t),n=ee(t),s=i.visualViewport,o=n.clientWidth,r=n.clientHeight,a=0,l=0;if(s){o=s.width,r=s.height;var c=Yt();(c||!c&&"fixed"===e)&&(a=s.offsetLeft,l=s.offsetTop)}return{width:o,height:r,x:a+we(t),y:l}}(t,i)):Wt(e)?function(t,e){var i=Ut(t,!1,"fixed"===e);return i.top=i.top+t.clientTop,i.left=i.left+t.clientLeft,i.bottom=i.top+t.clientHeight,i.right=i.left+t.clientWidth,i.width=t.clientWidth,i.height=t.clientHeight,i.x=i.left,i.y=i.top,i}(e,i):Ce(function(t){var e,i=ee(t),n=ye(t),s=null==(e=t.ownerDocument)?void 0:e.body,o=Vt(i.scrollWidth,i.clientWidth,s?s.scrollWidth:0,s?s.clientWidth:0),r=Vt(i.scrollHeight,i.clientHeight,s?s.scrollHeight:0,s?s.clientHeight:0),a=-n.scrollLeft+we(t),l=-n.scrollTop;return"rtl"===Zt(s||i).direction&&(a+=Vt(i.clientWidth,s?s.clientWidth:0)-o),{width:o,height:r,x:a,y:l}}(ee(t)))}function xe(t){var e,i=t.reference,n=t.element,s=t.placement,o=s?qt(s):null,r=s?he(s):null,a=i.x+i.width/2-n.width/2,l=i.y+i.height/2-n.height/2;switch(o){case pt:e={x:a,y:i.y-n.height};break;case mt:e={x:a,y:i.y+i.height};break;case gt:e={x:i.x+i.width,y:l};break;case _t:e={x:i.x-n.width,y:l};break;default:e={x:i.x,y:i.y}}var c=o?oe(o):null;if(null!=c){var h="y"===c?"height":"width";switch(r){case yt:e[c]=e[c]-(i[h]/2-n[h]/2);break;case wt:e[c]=e[c]+(i[h]/2-n[h]/2)}}return e}function ke(t,e){void 0===e&&(e={});var i=e,n=i.placement,s=void 0===n?t.placement:n,o=i.strategy,r=void 0===o?t.strategy:o,a=i.boundary,l=void 0===a?At:a,c=i.rootBoundary,h=void 0===c?Et:c,d=i.elementContext,u=void 0===d?Tt:d,f=i.altBoundary,p=void 0!==f&&f,m=i.padding,g=void 0===m?0:m,_=ae("number"!=typeof g?g:le(g,vt)),b=u===Tt?Ct:Tt,v=t.rects.popper,y=t.elements[p?b:u],w=function(t,e,i,n){var s="clippingParents"===e?function(t){var e=Te(ie(t)),i=["absolute","fixed"].indexOf(Zt(t).position)>=0&&Bt(t)?se(t):t;return Wt(i)?e.filter((function(t){return Wt(t)&&Jt(t,i)&&"body"!==Ht(t)})):[]}(t):[].concat(e),o=[].concat(s,[i]),r=o[0],a=o.reduce((function(e,i){var s=Oe(t,i,n);return e.top=Vt(s.top,e.top),e.right=Kt(s.right,e.right),e.bottom=Kt(s.bottom,e.bottom),e.left=Vt(s.left,e.left),e}),Oe(t,r,n));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}(Wt(y)?y:y.contextElement||ee(t.elements.popper),l,h,r),A=Ut(t.elements.reference),E=xe({reference:A,element:v,strategy:"absolute",placement:s}),T=Ce(Object.assign({},v,E)),C=u===Tt?T:A,O={top:w.top-C.top+_.top,bottom:C.bottom-w.bottom+_.bottom,left:w.left-C.left+_.left,right:C.right-w.right+_.right},x=t.modifiersData.offset;if(u===Tt&&x){var k=x[s];Object.keys(O).forEach((function(t){var e=[gt,mt].indexOf(t)>=0?1:-1,i=[pt,mt].indexOf(t)>=0?"y":"x";O[t]+=k[i]*e}))}return O}function Le(t,e){void 0===e&&(e={});var i=e,n=i.placement,s=i.boundary,o=i.rootBoundary,r=i.padding,a=i.flipVariations,l=i.allowedAutoPlacements,c=void 0===l?xt:l,h=he(n),d=h?a?Ot:Ot.filter((function(t){return he(t)===h})):vt,u=d.filter((function(t){return c.indexOf(t)>=0}));0===u.length&&(u=d);var f=u.reduce((function(e,i){return e[i]=ke(t,{placement:i,boundary:s,rootBoundary:o,padding:r})[qt(i)],e}),{});return Object.keys(f).sort((function(t,e){return f[t]-f[e]}))}const Se={name:"flip",enabled:!0,phase:"main",fn:function(t){var e=t.state,i=t.options,n=t.name;if(!e.modifiersData[n]._skip){for(var s=i.mainAxis,o=void 0===s||s,r=i.altAxis,a=void 0===r||r,l=i.fallbackPlacements,c=i.padding,h=i.boundary,d=i.rootBoundary,u=i.altBoundary,f=i.flipVariations,p=void 0===f||f,m=i.allowedAutoPlacements,g=e.options.placement,_=qt(g),b=l||(_!==g&&p?function(t){if(qt(t)===bt)return[];var e=_e(t);return[ve(t),e,ve(e)]}(g):[_e(g)]),v=[g].concat(b).reduce((function(t,i){return t.concat(qt(i)===bt?Le(e,{placement:i,boundary:h,rootBoundary:d,padding:c,flipVariations:p,allowedAutoPlacements:m}):i)}),[]),y=e.rects.reference,w=e.rects.popper,A=new Map,E=!0,T=v[0],C=0;C<v.length;C++){var O=v[C],x=qt(O),k=he(O)===yt,L=[pt,mt].indexOf(x)>=0,S=L?"width":"height",D=ke(e,{placement:O,boundary:h,rootBoundary:d,altBoundary:u,padding:c}),I=L?k?gt:_t:k?mt:pt;y[S]>w[S]&&(I=_e(I));var N=_e(I),P=[];if(o&&P.push(D[x]<=0),a&&P.push(D[I]<=0,D[N]<=0),P.every((function(t){return t}))){T=O,E=!1;break}A.set(O,P)}if(E)for(var j=function(t){var e=v.find((function(e){var i=A.get(e);if(i)return i.slice(0,t).every((function(t){return t}))}));if(e)return T=e,"break"},M=p?3:1;M>0&&"break"!==j(M);M--);e.placement!==T&&(e.modifiersData[n]._skip=!0,e.placement=T,e.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function De(t,e,i){return void 0===i&&(i={x:0,y:0}),{top:t.top-e.height-i.y,right:t.right-e.width+i.x,bottom:t.bottom-e.height+i.y,left:t.left-e.width-i.x}}function Ie(t){return[pt,gt,mt,_t].some((function(e){return t[e]>=0}))}const Ne={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(t){var e=t.state,i=t.name,n=e.rects.reference,s=e.rects.popper,o=e.modifiersData.preventOverflow,r=ke(e,{elementContext:"reference"}),a=ke(e,{altBoundary:!0}),l=De(r,n),c=De(a,s,o),h=Ie(l),d=Ie(c);e.modifiersData[i]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:h,hasPopperEscaped:d},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":h,"data-popper-escaped":d})}},Pe={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(t){var e=t.state,i=t.options,n=t.name,s=i.offset,o=void 0===s?[0,0]:s,r=xt.reduce((function(t,i){return t[i]=function(t,e,i){var n=qt(t),s=[_t,pt].indexOf(n)>=0?-1:1,o="function"==typeof i?i(Object.assign({},e,{placement:t})):i,r=o[0],a=o[1];return r=r||0,a=(a||0)*s,[_t,gt].indexOf(n)>=0?{x:a,y:r}:{x:r,y:a}}(i,e.rects,o),t}),{}),a=r[e.placement],l=a.x,c=a.y;null!=e.modifiersData.popperOffsets&&(e.modifiersData.popperOffsets.x+=l,e.modifiersData.popperOffsets.y+=c),e.modifiersData[n]=r}},je={name:"popperOffsets",enabled:!0,phase:"read",fn:function(t){var e=t.state,i=t.name;e.modifiersData[i]=xe({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})},data:{}},Me={name:"preventOverflow",enabled:!0,phase:"main",fn:function(t){var e=t.state,i=t.options,n=t.name,s=i.mainAxis,o=void 0===s||s,r=i.altAxis,a=void 0!==r&&r,l=i.boundary,c=i.rootBoundary,h=i.altBoundary,d=i.padding,u=i.tether,f=void 0===u||u,p=i.tetherOffset,m=void 0===p?0:p,g=ke(e,{boundary:l,rootBoundary:c,padding:d,altBoundary:h}),_=qt(e.placement),b=he(e.placement),v=!b,y=oe(_),w="x"===y?"y":"x",A=e.modifiersData.popperOffsets,E=e.rects.reference,T=e.rects.popper,C="function"==typeof m?m(Object.assign({},e.rects,{placement:e.placement})):m,O="number"==typeof C?{mainAxis:C,altAxis:C}:Object.assign({mainAxis:0,altAxis:0},C),x=e.modifiersData.offset?e.modifiersData.offset[e.placement]:null,k={x:0,y:0};if(A){if(o){var L,S="y"===y?pt:_t,D="y"===y?mt:gt,I="y"===y?"height":"width",N=A[y],P=N+g[S],j=N-g[D],M=f?-T[I]/2:0,F=b===yt?E[I]:T[I],H=b===yt?-T[I]:-E[I],$=e.elements.arrow,W=f&&$?Gt($):{width:0,height:0},B=e.modifiersData["arrow#persistent"]?e.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},z=B[S],R=B[D],q=re(0,E[I],W[I]),V=v?E[I]/2-M-q-z-O.mainAxis:F-q-z-O.mainAxis,K=v?-E[I]/2+M+q+R+O.mainAxis:H+q+R+O.mainAxis,Q=e.elements.arrow&&se(e.elements.arrow),X=Q?"y"===y?Q.clientTop||0:Q.clientLeft||0:0,Y=null!=(L=null==x?void 0:x[y])?L:0,U=N+K-Y,G=re(f?Kt(P,N+V-Y-X):P,N,f?Vt(j,U):j);A[y]=G,k[y]=G-N}if(a){var J,Z="x"===y?pt:_t,tt="x"===y?mt:gt,et=A[w],it="y"===w?"height":"width",nt=et+g[Z],st=et-g[tt],ot=-1!==[pt,_t].indexOf(_),rt=null!=(J=null==x?void 0:x[w])?J:0,at=ot?nt:et-E[it]-T[it]-rt+O.altAxis,lt=ot?et+E[it]+T[it]-rt-O.altAxis:st,ct=f&&ot?function(t,e,i){var n=re(t,e,i);return n>i?i:n}(at,et,lt):re(f?at:nt,et,f?lt:st);A[w]=ct,k[w]=ct-et}e.modifiersData[n]=k}},requiresIfExists:["offset"]};function Fe(t,e,i){void 0===i&&(i=!1);var n,s,o=Bt(e),r=Bt(e)&&function(t){var e=t.getBoundingClientRect(),i=Qt(e.width)/t.offsetWidth||1,n=Qt(e.height)/t.offsetHeight||1;return 1!==i||1!==n}(e),a=ee(e),l=Ut(t,r,i),c={scrollLeft:0,scrollTop:0},h={x:0,y:0};return(o||!o&&!i)&&(("body"!==Ht(e)||Ae(a))&&(c=(n=e)!==$t(n)&&Bt(n)?{scrollLeft:(s=n).scrollLeft,scrollTop:s.scrollTop}:ye(n)),Bt(e)?((h=Ut(e,!0)).x+=e.clientLeft,h.y+=e.clientTop):a&&(h.x=we(a))),{x:l.left+c.scrollLeft-h.x,y:l.top+c.scrollTop-h.y,width:l.width,height:l.height}}function He(t){var e=new Map,i=new Set,n=[];function s(t){i.add(t.name),[].concat(t.requires||[],t.requiresIfExists||[]).forEach((function(t){if(!i.has(t)){var n=e.get(t);n&&s(n)}})),n.push(t)}return t.forEach((function(t){e.set(t.name,t)})),t.forEach((function(t){i.has(t.name)||s(t)})),n}var $e={placement:"bottom",modifiers:[],strategy:"absolute"};function We(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return!e.some((function(t){return!(t&&"function"==typeof t.getBoundingClientRect)}))}function Be(t){void 0===t&&(t={});var e=t,i=e.defaultModifiers,n=void 0===i?[]:i,s=e.defaultOptions,o=void 0===s?$e:s;return function(t,e,i){void 0===i&&(i=o);var s,r,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},$e,o),modifiersData:{},elements:{reference:t,popper:e},attributes:{},styles:{}},l=[],c=!1,h={state:a,setOptions:function(i){var s="function"==typeof i?i(a.options):i;d(),a.options=Object.assign({},o,a.options,s),a.scrollParents={reference:Wt(t)?Te(t):t.contextElement?Te(t.contextElement):[],popper:Te(e)};var r,c,u=function(t){var e=He(t);return Ft.reduce((function(t,i){return t.concat(e.filter((function(t){return t.phase===i})))}),[])}((r=[].concat(n,a.options.modifiers),c=r.reduce((function(t,e){var i=t[e.name];return t[e.name]=i?Object.assign({},i,e,{options:Object.assign({},i.options,e.options),data:Object.assign({},i.data,e.data)}):e,t}),{}),Object.keys(c).map((function(t){return c[t]}))));return a.orderedModifiers=u.filter((function(t){return t.enabled})),a.orderedModifiers.forEach((function(t){var e=t.name,i=t.options,n=void 0===i?{}:i,s=t.effect;if("function"==typeof s){var o=s({state:a,name:e,instance:h,options:n});l.push(o||function(){})}})),h.update()},forceUpdate:function(){if(!c){var t=a.elements,e=t.reference,i=t.popper;if(We(e,i)){a.rects={reference:Fe(e,se(i),"fixed"===a.options.strategy),popper:Gt(i)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(t){return a.modifiersData[t.name]=Object.assign({},t.data)}));for(var n=0;n<a.orderedModifiers.length;n++)if(!0!==a.reset){var s=a.orderedModifiers[n],o=s.fn,r=s.options,l=void 0===r?{}:r,d=s.name;"function"==typeof o&&(a=o({state:a,options:l,name:d,instance:h})||a)}else a.reset=!1,n=-1}}},update:(s=function(){return new Promise((function(t){h.forceUpdate(),t(a)}))},function(){return r||(r=new Promise((function(t){Promise.resolve().then((function(){r=void 0,t(s())}))}))),r}),destroy:function(){d(),c=!0}};if(!We(t,e))return h;function d(){l.forEach((function(t){return t()})),l=[]}return h.setOptions(i).then((function(t){!c&&i.onFirstUpdate&&i.onFirstUpdate(t)})),h}}var ze=Be(),Re=Be({defaultModifiers:[me,je,fe,Rt]}),qe=Be({defaultModifiers:[me,je,fe,Rt,Pe,Se,Me,ce,Ne]});const Ve=Object.freeze(Object.defineProperty({__proto__:null,popperGenerator:Be,detectOverflow:ke,createPopperBase:ze,createPopper:qe,createPopperLite:Re,top:pt,bottom:mt,right:gt,left:_t,auto:bt,basePlacements:vt,start:yt,end:wt,clippingParents:At,viewport:Et,popper:Tt,reference:Ct,variationPlacements:Ot,placements:xt,beforeRead:kt,read:Lt,afterRead:St,beforeMain:Dt,main:It,afterMain:Nt,beforeWrite:Pt,write:jt,afterWrite:Mt,modifierPhases:Ft,applyStyles:Rt,arrow:ce,computeStyles:fe,eventListeners:me,flip:Se,hide:Ne,offset:Pe,popperOffsets:je,preventOverflow:Me},Symbol.toStringTag,{value:"Module"})),Ke="dropdown",Qe="ArrowUp",Xe="ArrowDown",Ye="click.bs.dropdown.data-api",Ue="keydown.bs.dropdown.data-api",Ge="show",Je='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',Ze=`${Je}.show`,ti=".dropdown-menu",ei=u()?"top-end":"top-start",ii=u()?"top-start":"top-end",ni=u()?"bottom-end":"bottom-start",si=u()?"bottom-start":"bottom-end",oi=u()?"left-start":"right-start",ri=u()?"right-start":"left-start",ai={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},li={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"};class ci extends W{constructor(t,e){super(t,e),this._popper=null,this._parent=this._element.parentNode,this._menu=z.next(this._element,ti)[0]||z.prev(this._element,ti)[0]||z.findOne(ti,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return ai}static get DefaultType(){return li}static get NAME(){return Ke}toggle(){return this._isShown()?this.hide():this.show()}show(){if(r(this._element)||this._isShown())return;const t={relatedTarget:this._element};if(!I.trigger(this._element,"show.bs.dropdown",t).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav"))for(const t of[].concat(...document.body.children))I.on(t,"mouseover",l);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(Ge),this._element.classList.add(Ge),I.trigger(this._element,"shown.bs.dropdown",t)}}hide(){if(r(this._element)||!this._isShown())return;const t={relatedTarget:this._element};this._completeHide(t)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(t){if(!I.trigger(this._element,"hide.bs.dropdown",t).defaultPrevented){if("ontouchstart"in document.documentElement)for(const t of[].concat(...document.body.children))I.off(t,"mouseover",l);this._popper&&this._popper.destroy(),this._menu.classList.remove(Ge),this._element.classList.remove(Ge),this._element.setAttribute("aria-expanded","false"),H.removeDataAttribute(this._menu,"popper"),I.trigger(this._element,"hidden.bs.dropdown",t)}}_getConfig(t){if("object"==typeof(t=super._getConfig(t)).reference&&!n(t.reference)&&"function"!=typeof t.reference.getBoundingClientRect)throw new TypeError(`${Ke.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return t}_createPopper(){if(void 0===Ve)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let t=this._element;"parent"===this._config.reference?t=this._parent:n(this._config.reference)?t=s(this._config.reference):"object"==typeof this._config.reference&&(t=this._config.reference);const e=this._getPopperConfig();this._popper=qe(t,this._menu,e)}_isShown(){return this._menu.classList.contains(Ge)}_getPlacement(){const t=this._parent;if(t.classList.contains("dropend"))return oi;if(t.classList.contains("dropstart"))return ri;if(t.classList.contains("dropup-center"))return"top";if(t.classList.contains("dropdown-center"))return"bottom";const e="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return t.classList.contains("dropup")?e?ii:ei:e?si:ni}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_getPopperConfig(){const t={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||"static"===this._config.display)&&(H.setDataAttribute(this._menu,"popper","static"),t.modifiers=[{name:"applyStyles",enabled:!1}]),{...t,...p(this._config.popperConfig,[t])}}_selectMenuItem({key:t,target:e}){const i=z.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter((t=>o(t)));i.length&&g(i,e,t===Xe,!i.includes(e)).focus()}static jQueryInterface(t){return this.each((function(){const e=ci.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}static clearMenus(t){if(2===t.button||"keyup"===t.type&&"Tab"!==t.key)return;const e=z.find(Ze);for(const i of e){const e=ci.getInstance(i);if(!e||!1===e._config.autoClose)continue;const n=t.composedPath(),s=n.includes(e._menu);if(n.includes(e._element)||"inside"===e._config.autoClose&&!s||"outside"===e._config.autoClose&&s)continue;if(e._menu.contains(t.target)&&("keyup"===t.type&&"Tab"===t.key||/input|select|option|textarea|form/i.test(t.target.tagName)))continue;const o={relatedTarget:e._element};"click"===t.type&&(o.clickEvent=t),e._completeHide(o)}}static dataApiKeydownHandler(t){const e=/input|textarea/i.test(t.target.tagName),i="Escape"===t.key,n=[Qe,Xe].includes(t.key);if(!n&&!i)return;if(e&&!i)return;t.preventDefault();const s=this.matches(Je)?this:z.prev(this,Je)[0]||z.next(this,Je)[0]||z.findOne(Je,t.delegateTarget.parentNode),o=ci.getOrCreateInstance(s);if(n)return t.stopPropagation(),o.show(),void o._selectMenuItem(t);o._isShown()&&(t.stopPropagation(),o.hide(),s.focus())}}I.on(document,Ue,Je,ci.dataApiKeydownHandler),I.on(document,Ue,ti,ci.dataApiKeydownHandler),I.on(document,Ye,ci.clearMenus),I.on(document,"keyup.bs.dropdown.data-api",ci.clearMenus),I.on(document,Ye,Je,(function(t){t.preventDefault(),ci.getOrCreateInstance(this).toggle()})),f(ci);const hi=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",di=".sticky-top",ui="padding-right",fi="margin-right";class pi{constructor(){this._element=document.body}getWidth(){const t=document.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}hide(){const t=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,ui,(e=>e+t)),this._setElementAttributes(hi,ui,(e=>e+t)),this._setElementAttributes(di,fi,(e=>e-t))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,ui),this._resetElementAttributes(hi,ui),this._resetElementAttributes(di,fi)}isOverflowing(){return this.getWidth()>0}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(t,e,i){const n=this.getWidth();this._applyManipulationCallback(t,(t=>{if(t!==this._element&&window.innerWidth>t.clientWidth+n)return;this._saveInitialAttribute(t,e);const s=window.getComputedStyle(t).getPropertyValue(e);t.style.setProperty(e,`${i(Number.parseFloat(s))}px`)}))}_saveInitialAttribute(t,e){const i=t.style.getPropertyValue(e);i&&H.setDataAttribute(t,e,i)}_resetElementAttributes(t,e){this._applyManipulationCallback(t,(t=>{const i=H.getDataAttribute(t,e);null!==i?(H.removeDataAttribute(t,e),t.style.setProperty(e,i)):t.style.removeProperty(e)}))}_applyManipulationCallback(t,e){if(n(t))e(t);else for(const i of z.find(t,this._element))e(i)}}const mi="show",gi="mousedown.bs.backdrop",_i={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},bi={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"};class vi extends ${constructor(t){super(),this._config=this._getConfig(t),this._isAppended=!1,this._element=null}static get Default(){return _i}static get DefaultType(){return bi}static get NAME(){return"backdrop"}show(t){if(!this._config.isVisible)return void p(t);this._append();const e=this._getElement();this._config.isAnimated&&c(e),e.classList.add(mi),this._emulateAnimation((()=>{p(t)}))}hide(t){this._config.isVisible?(this._getElement().classList.remove(mi),this._emulateAnimation((()=>{this.dispose(),p(t)}))):p(t)}dispose(){this._isAppended&&(I.off(this._element,gi),this._element.remove(),this._isAppended=!1)}_getElement(){if(!this._element){const t=document.createElement("div");t.className=this._config.className,this._config.isAnimated&&t.classList.add("fade"),this._element=t}return this._element}_configAfterMerge(t){return t.rootElement=s(t.rootElement),t}_append(){if(this._isAppended)return;const t=this._getElement();this._config.rootElement.append(t),I.on(t,gi,(()=>{p(this._config.clickCallback)})),this._isAppended=!0}_emulateAnimation(t){m(t,this._getElement(),this._config.isAnimated)}}const yi=".bs.focustrap",wi="backward",Ai={autofocus:!0,trapElement:null},Ei={autofocus:"boolean",trapElement:"element"};class Ti extends ${constructor(t){super(),this._config=this._getConfig(t),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return Ai}static get DefaultType(){return Ei}static get NAME(){return"focustrap"}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),I.off(document,yi),I.on(document,"focusin.bs.focustrap",(t=>this._handleFocusin(t))),I.on(document,"keydown.tab.bs.focustrap",(t=>this._handleKeydown(t))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,I.off(document,yi))}_handleFocusin(t){const{trapElement:e}=this._config;if(t.target===document||t.target===e||e.contains(t.target))return;const i=z.focusableChildren(e);0===i.length?e.focus():this._lastTabNavDirection===wi?i[i.length-1].focus():i[0].focus()}_handleKeydown(t){"Tab"===t.key&&(this._lastTabNavDirection=t.shiftKey?wi:"forward")}}const Ci="hidden.bs.modal",Oi="show.bs.modal",xi="modal-open",ki="show",Li="modal-static",Si={backdrop:!0,focus:!0,keyboard:!0},Di={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"};class Ii extends W{constructor(t,e){super(t,e),this._dialog=z.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new pi,this._addEventListeners()}static get Default(){return Si}static get DefaultType(){return Di}static get NAME(){return"modal"}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){this._isShown||this._isTransitioning||I.trigger(this._element,Oi,{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(xi),this._adjustDialog(),this._backdrop.show((()=>this._showElement(t))))}hide(){this._isShown&&!this._isTransitioning&&(I.trigger(this._element,"hide.bs.modal").defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove(ki),this._queueCallback((()=>this._hideModal()),this._element,this._isAnimated())))}dispose(){for(const t of[window,this._dialog])I.off(t,".bs.modal");this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new vi({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Ti({trapElement:this._element})}_showElement(t){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;const e=z.findOne(".modal-body",this._dialog);e&&(e.scrollTop=0),c(this._element),this._element.classList.add(ki),this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,I.trigger(this._element,"shown.bs.modal",{relatedTarget:t})}),this._dialog,this._isAnimated())}_addEventListeners(){I.on(this._element,"keydown.dismiss.bs.modal",(t=>{if("Escape"===t.key)return this._config.keyboard?(t.preventDefault(),void this.hide()):void this._triggerBackdropTransition()})),I.on(window,"resize.bs.modal",(()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()})),I.on(this._element,"mousedown.dismiss.bs.modal",(t=>{I.one(this._element,"click.dismiss.bs.modal",(e=>{this._element===t.target&&this._element===e.target&&("static"!==this._config.backdrop?this._config.backdrop&&this.hide():this._triggerBackdropTransition())}))}))}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(xi),this._resetAdjustments(),this._scrollBar.reset(),I.trigger(this._element,Ci)}))}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(I.trigger(this._element,"hidePrevented.bs.modal").defaultPrevented)return;const t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._element.style.overflowY;"hidden"===e||this._element.classList.contains(Li)||(t||(this._element.style.overflowY="hidden"),this._element.classList.add(Li),this._queueCallback((()=>{this._element.classList.remove(Li),this._queueCallback((()=>{this._element.style.overflowY=e}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._scrollBar.getWidth(),i=e>0;if(i&&!t){const t=u()?"paddingLeft":"paddingRight";this._element.style[t]=`${e}px`}if(!i&&t){const t=u()?"paddingRight":"paddingLeft";this._element.style[t]=`${e}px`}}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(t,e){return this.each((function(){const i=Ii.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===i[t])throw new TypeError(`No method named "${t}"`);i[t](e)}}))}}I.on(document,"click.bs.modal.data-api",'[data-bs-toggle="modal"]',(function(t){const e=z.getElementFromSelector(this);["A","AREA"].includes(this.tagName)&&t.preventDefault(),I.one(e,Oi,(t=>{t.defaultPrevented||I.one(e,Ci,(()=>{o(this)&&this.focus()}))}));const i=z.findOne(".modal.show");i&&Ii.getInstance(i).hide(),Ii.getOrCreateInstance(e).toggle(this)})),R(Ii),f(Ii);const Ni="show",Pi="showing",ji="hiding",Mi=".offcanvas.show",Fi="hidePrevented.bs.offcanvas",Hi="hidden.bs.offcanvas",$i={backdrop:!0,keyboard:!0,scroll:!1},Wi={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class Bi extends W{constructor(t,e){super(t,e),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return $i}static get DefaultType(){return Wi}static get NAME(){return"offcanvas"}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){this._isShown||I.trigger(this._element,"show.bs.offcanvas",{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._backdrop.show(),this._config.scroll||(new pi).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(Pi),this._queueCallback((()=>{this._config.scroll&&!this._config.backdrop||this._focustrap.activate(),this._element.classList.add(Ni),this._element.classList.remove(Pi),I.trigger(this._element,"shown.bs.offcanvas",{relatedTarget:t})}),this._element,!0))}hide(){this._isShown&&(I.trigger(this._element,"hide.bs.offcanvas").defaultPrevented||(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add(ji),this._backdrop.hide(),this._queueCallback((()=>{this._element.classList.remove(Ni,ji),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||(new pi).reset(),I.trigger(this._element,Hi)}),this._element,!0)))}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){const t=Boolean(this._config.backdrop);return new vi({className:"offcanvas-backdrop",isVisible:t,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:t?()=>{"static"!==this._config.backdrop?this.hide():I.trigger(this._element,Fi)}:null})}_initializeFocusTrap(){return new Ti({trapElement:this._element})}_addEventListeners(){I.on(this._element,"keydown.dismiss.bs.offcanvas",(t=>{"Escape"===t.key&&(this._config.keyboard?this.hide():I.trigger(this._element,Fi))}))}static jQueryInterface(t){return this.each((function(){const e=Bi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}I.on(document,"click.bs.offcanvas.data-api",'[data-bs-toggle="offcanvas"]',(function(t){const e=z.getElementFromSelector(this);if(["A","AREA"].includes(this.tagName)&&t.preventDefault(),r(this))return;I.one(e,Hi,(()=>{o(this)&&this.focus()}));const i=z.findOne(Mi);i&&i!==e&&Bi.getInstance(i).hide(),Bi.getOrCreateInstance(e).toggle(this)})),I.on(window,"load.bs.offcanvas.data-api",(()=>{for(const t of z.find(Mi))Bi.getOrCreateInstance(t).show()})),I.on(window,"resize.bs.offcanvas",(()=>{for(const t of z.find("[aria-modal][class*=show][class*=offcanvas-]"))"fixed"!==getComputedStyle(t).position&&Bi.getOrCreateInstance(t).hide()})),R(Bi),f(Bi);const zi=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Ri=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,qi=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,Vi=(t,e)=>{const i=t.nodeName.toLowerCase();return e.includes(i)?!zi.has(i)||Boolean(Ri.test(t.nodeValue)||qi.test(t.nodeValue)):e.filter((t=>t instanceof RegExp)).some((t=>t.test(i)))},Ki={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},Qi={allowList:Ki,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},Xi={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},Yi={entry:"(string|element|function|null)",selector:"(string|element)"};class Ui extends ${constructor(t){super(),this._config=this._getConfig(t)}static get Default(){return Qi}static get DefaultType(){return Xi}static get NAME(){return"TemplateFactory"}getContent(){return Object.values(this._config.content).map((t=>this._resolvePossibleFunction(t))).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(t){return this._checkContent(t),this._config.content={...this._config.content,...t},this}toHtml(){const t=document.createElement("div");t.innerHTML=this._maybeSanitize(this._config.template);for(const[e,i]of Object.entries(this._config.content))this._setContent(t,i,e);const e=t.children[0],i=this._resolvePossibleFunction(this._config.extraClass);return i&&e.classList.add(...i.split(" ")),e}_typeCheckConfig(t){super._typeCheckConfig(t),this._checkContent(t.content)}_checkContent(t){for(const[e,i]of Object.entries(t))super._typeCheckConfig({selector:e,entry:i},Yi)}_setContent(t,e,i){const o=z.findOne(i,t);o&&((e=this._resolvePossibleFunction(e))?n(e)?this._putElementInTemplate(s(e),o):this._config.html?o.innerHTML=this._maybeSanitize(e):o.textContent=e:o.remove())}_maybeSanitize(t){return this._config.sanitize?function(t,e,i){if(!t.length)return t;if(i&&"function"==typeof i)return i(t);const n=(new window.DOMParser).parseFromString(t,"text/html"),s=[].concat(...n.body.querySelectorAll("*"));for(const t of s){const i=t.nodeName.toLowerCase();if(!Object.keys(e).includes(i)){t.remove();continue}const n=[].concat(...t.attributes),s=[].concat(e["*"]||[],e[i]||[]);for(const e of n)Vi(e,s)||t.removeAttribute(e.nodeName)}return n.body.innerHTML}(t,this._config.allowList,this._config.sanitizeFn):t}_resolvePossibleFunction(t){return p(t,[this])}_putElementInTemplate(t,e){if(this._config.html)return e.innerHTML="",void e.append(t);e.textContent=t.textContent}}const Gi=new Set(["sanitize","allowList","sanitizeFn"]),Ji="fade",Zi="show",tn=".modal",en="hide.bs.modal",nn="hover",sn="focus",on={AUTO:"auto",TOP:"top",RIGHT:u()?"left":"right",BOTTOM:"bottom",LEFT:u()?"right":"left"},rn={allowList:Ki,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,0],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},an={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"};class ln extends W{constructor(t,e){if(void 0===Ve)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(t,e),this._isEnabled=!0,this._timeout=0,this._isHovered=null,this._activeTrigger={},this._popper=null,this._templateFactory=null,this._newContent=null,this.tip=null,this._setListeners(),this._config.selector||this._fixTitle()}static get Default(){return rn}static get DefaultType(){return an}static get NAME(){return"tooltip"}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(){this._isEnabled&&(this._activeTrigger.click=!this._activeTrigger.click,this._isShown()?this._leave():this._enter())}dispose(){clearTimeout(this._timeout),I.off(this._element.closest(tn),en,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this._isWithContent()||!this._isEnabled)return;const t=I.trigger(this._element,this.constructor.eventName("show")),e=(a(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(t.defaultPrevented||!e)return;this._disposePopper();const i=this._getTipElement();this._element.setAttribute("aria-describedby",i.getAttribute("id"));const{container:n}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(n.append(i),I.trigger(this._element,this.constructor.eventName("inserted"))),this._popper=this._createPopper(i),i.classList.add(Zi),"ontouchstart"in document.documentElement)for(const t of[].concat(...document.body.children))I.on(t,"mouseover",l);this._queueCallback((()=>{I.trigger(this._element,this.constructor.eventName("shown")),!1===this._isHovered&&this._leave(),this._isHovered=!1}),this.tip,this._isAnimated())}hide(){if(this._isShown()&&!I.trigger(this._element,this.constructor.eventName("hide")).defaultPrevented){if(this._getTipElement().classList.remove(Zi),"ontouchstart"in document.documentElement)for(const t of[].concat(...document.body.children))I.off(t,"mouseover",l);this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1,this._isHovered=null,this._queueCallback((()=>{this._isWithActiveTrigger()||(this._isHovered||this._disposePopper(),this._element.removeAttribute("aria-describedby"),I.trigger(this._element,this.constructor.eventName("hidden")))}),this.tip,this._isAnimated())}}update(){this._popper&&this._popper.update()}_isWithContent(){return Boolean(this._getTitle())}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}_createTipElement(t){const e=this._getTemplateFactory(t).toHtml();if(!e)return null;e.classList.remove(Ji,Zi),e.classList.add(`bs-${this.constructor.NAME}-auto`);const i=(t=>{do{t+=Math.floor(1e6*Math.random())}while(document.getElementById(t));return t})(this.constructor.NAME).toString();return e.setAttribute("id",i),this._isAnimated()&&e.classList.add(Ji),e}setContent(t){this._newContent=t,this._isShown()&&(this._disposePopper(),this.show())}_getTemplateFactory(t){return this._templateFactory?this._templateFactory.changeContent(t):this._templateFactory=new Ui({...this._config,content:t,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{".tooltip-inner":this._getTitle()}}_getTitle(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}_initializeOnDelegatedTarget(t){return this.constructor.getOrCreateInstance(t.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(Ji)}_isShown(){return this.tip&&this.tip.classList.contains(Zi)}_createPopper(t){const e=p(this._config.placement,[this,t,this._element]),i=on[e.toUpperCase()];return qe(this._element,t,this._getPopperConfig(i))}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_resolvePossibleFunction(t){return p(t,[this._element])}_getPopperConfig(t){const e={placement:t,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:t=>{this._getTipElement().setAttribute("data-popper-placement",t.state.placement)}}]};return{...e,...p(this._config.popperConfig,[e])}}_setListeners(){const t=this._config.trigger.split(" ");for(const e of t)if("click"===e)I.on(this._element,this.constructor.eventName("click"),this._config.selector,(t=>{this._initializeOnDelegatedTarget(t).toggle()}));else if("manual"!==e){const t=e===nn?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),i=e===nn?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout");I.on(this._element,t,this._config.selector,(t=>{const e=this._initializeOnDelegatedTarget(t);e._activeTrigger["focusin"===t.type?sn:nn]=!0,e._enter()})),I.on(this._element,i,this._config.selector,(t=>{const e=this._initializeOnDelegatedTarget(t);e._activeTrigger["focusout"===t.type?sn:nn]=e._element.contains(t.relatedTarget),e._leave()}))}this._hideModalHandler=()=>{this._element&&this.hide()},I.on(this._element.closest(tn),en,this._hideModalHandler)}_fixTitle(){const t=this._element.getAttribute("title");t&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",t),this._element.setAttribute("data-bs-original-title",t),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout((()=>{this._isHovered&&this.show()}),this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout((()=>{this._isHovered||this.hide()}),this._config.delay.hide))}_setTimeout(t,e){clearTimeout(this._timeout),this._timeout=setTimeout(t,e)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(t){const e=H.getDataAttributes(this._element);for(const t of Object.keys(e))Gi.has(t)&&delete e[t];return t={...e,..."object"==typeof t&&t?t:{}},t=this._mergeConfigObj(t),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}_configAfterMerge(t){return t.container=!1===t.container?document.body:s(t.container),"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),t}_getDelegateConfig(){const t={};for(const[e,i]of Object.entries(this._config))this.constructor.Default[e]!==i&&(t[e]=i);return t.selector=!1,t.trigger="manual",t}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}static jQueryInterface(t){return this.each((function(){const e=ln.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}f(ln);const cn={...ln.Default,content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"},hn={...ln.DefaultType,content:"(null|string|element|function)"};class dn extends ln{static get Default(){return cn}static get DefaultType(){return hn}static get NAME(){return"popover"}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{".popover-header":this._getTitle(),".popover-body":this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(t){return this.each((function(){const e=dn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}f(dn);const un="click.bs.scrollspy",fn="active",pn="[href]",mn={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null,threshold:[.1,.5,1]},gn={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element",threshold:"array"};class _n extends W{constructor(t,e){super(t,e),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement="visible"===getComputedStyle(this._element).overflowY?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return mn}static get DefaultType(){return gn}static get NAME(){return"scrollspy"}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(const t of this._observableSections.values())this._observer.observe(t)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(t){return t.target=s(t.target)||document.body,t.rootMargin=t.offset?`${t.offset}px 0px -30%`:t.rootMargin,"string"==typeof t.threshold&&(t.threshold=t.threshold.split(",").map((t=>Number.parseFloat(t)))),t}_maybeEnableSmoothScroll(){this._config.smoothScroll&&(I.off(this._config.target,un),I.on(this._config.target,un,pn,(t=>{const e=this._observableSections.get(t.target.hash);if(e){t.preventDefault();const i=this._rootElement||window,n=e.offsetTop-this._element.offsetTop;if(i.scrollTo)return void i.scrollTo({top:n,behavior:"smooth"});i.scrollTop=n}})))}_getNewObserver(){const t={root:this._rootElement,threshold:this._config.threshold,rootMargin:this._config.rootMargin};return new IntersectionObserver((t=>this._observerCallback(t)),t)}_observerCallback(t){const e=t=>this._targetLinks.get(`#${t.target.id}`),i=t=>{this._previousScrollData.visibleEntryTop=t.target.offsetTop,this._process(e(t))},n=(this._rootElement||document.documentElement).scrollTop,s=n>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=n;for(const o of t){if(!o.isIntersecting){this._activeTarget=null,this._clearActiveClass(e(o));continue}const t=o.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(s&&t){if(i(o),!n)return}else s||t||i(o)}}_initializeTargetsAndObservables(){this._targetLinks=new Map,this._observableSections=new Map;const t=z.find(pn,this._config.target);for(const e of t){if(!e.hash||r(e))continue;const t=z.findOne(e.hash,this._element);o(t)&&(this._targetLinks.set(e.hash,e),this._observableSections.set(e.hash,t))}}_process(t){this._activeTarget!==t&&(this._clearActiveClass(this._config.target),this._activeTarget=t,t.classList.add(fn),this._activateParents(t),I.trigger(this._element,"activate.bs.scrollspy",{relatedTarget:t}))}_activateParents(t){if(t.classList.contains("dropdown-item"))z.findOne(".dropdown-toggle",t.closest(".dropdown")).classList.add(fn);else for(const e of z.parents(t,".nav, .list-group"))for(const t of z.prev(e,".nav-link, .nav-item > .nav-link, .list-group-item"))t.classList.add(fn)}_clearActiveClass(t){t.classList.remove(fn);const e=z.find("[href].active",t);for(const t of e)t.classList.remove(fn)}static jQueryInterface(t){return this.each((function(){const e=_n.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}}))}}I.on(window,"load.bs.scrollspy.data-api",(()=>{for(const t of z.find('[data-bs-spy="scroll"]'))_n.getOrCreateInstance(t)})),f(_n);const bn="ArrowLeft",vn="ArrowRight",yn="ArrowUp",wn="ArrowDown",An="active",En="fade",Tn="show",Cn='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',On=`.nav-link:not(.dropdown-toggle), .list-group-item:not(.dropdown-toggle), [role="tab"]:not(.dropdown-toggle), ${Cn}`;class xn extends W{constructor(t){super(t),this._parent=this._element.closest('.list-group, .nav, [role="tablist"]'),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),I.on(this._element,"keydown.bs.tab",(t=>this._keydown(t))))}static get NAME(){return"tab"}show(){const t=this._element;if(this._elemIsActive(t))return;const e=this._getActiveElem(),i=e?I.trigger(e,"hide.bs.tab",{relatedTarget:t}):null;I.trigger(t,"show.bs.tab",{relatedTarget:e}).defaultPrevented||i&&i.defaultPrevented||(this._deactivate(e,t),this._activate(t,e))}_activate(t,e){t&&(t.classList.add(An),this._activate(z.getElementFromSelector(t)),this._queueCallback((()=>{"tab"===t.getAttribute("role")?(t.removeAttribute("tabindex"),t.setAttribute("aria-selected",!0),this._toggleDropDown(t,!0),I.trigger(t,"shown.bs.tab",{relatedTarget:e})):t.classList.add(Tn)}),t,t.classList.contains(En)))}_deactivate(t,e){t&&(t.classList.remove(An),t.blur(),this._deactivate(z.getElementFromSelector(t)),this._queueCallback((()=>{"tab"===t.getAttribute("role")?(t.setAttribute("aria-selected",!1),t.setAttribute("tabindex","-1"),this._toggleDropDown(t,!1),I.trigger(t,"hidden.bs.tab",{relatedTarget:e})):t.classList.remove(Tn)}),t,t.classList.contains(En)))}_keydown(t){if(![bn,vn,yn,wn].includes(t.key))return;t.stopPropagation(),t.preventDefault();const e=[vn,wn].includes(t.key),i=g(this._getChildren().filter((t=>!r(t))),t.target,e,!0);i&&(i.focus({preventScroll:!0}),xn.getOrCreateInstance(i).show())}_getChildren(){return z.find(On,this._parent)}_getActiveElem(){return this._getChildren().find((t=>this._elemIsActive(t)))||null}_setInitialAttributes(t,e){this._setAttributeIfNotExists(t,"role","tablist");for(const t of e)this._setInitialAttributesOnChild(t)}_setInitialAttributesOnChild(t){t=this._getInnerElement(t);const e=this._elemIsActive(t),i=this._getOuterElement(t);t.setAttribute("aria-selected",e),i!==t&&this._setAttributeIfNotExists(i,"role","presentation"),e||t.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(t,"role","tab"),this._setInitialAttributesOnTargetPanel(t)}_setInitialAttributesOnTargetPanel(t){const e=z.getElementFromSelector(t);e&&(this._setAttributeIfNotExists(e,"role","tabpanel"),t.id&&this._setAttributeIfNotExists(e,"aria-labelledby",`#${t.id}`))}_toggleDropDown(t,e){const i=this._getOuterElement(t);if(!i.classList.contains("dropdown"))return;const n=(t,n)=>{const s=z.findOne(t,i);s&&s.classList.toggle(n,e)};n(".dropdown-toggle",An),n(".dropdown-menu",Tn),i.setAttribute("aria-expanded",e)}_setAttributeIfNotExists(t,e,i){t.hasAttribute(e)||t.setAttribute(e,i)}_elemIsActive(t){return t.classList.contains(An)}_getInnerElement(t){return t.matches(On)?t:z.findOne(On,t)}_getOuterElement(t){return t.closest(".nav-item, .list-group-item")||t}static jQueryInterface(t){return this.each((function(){const e=xn.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}}))}}I.on(document,"click.bs.tab",Cn,(function(t){["A","AREA"].includes(this.tagName)&&t.preventDefault(),r(this)||xn.getOrCreateInstance(this).show()})),I.on(window,"load.bs.tab",(()=>{for(const t of z.find('.active[data-bs-toggle="tab"], .active[data-bs-toggle="pill"], .active[data-bs-toggle="list"]'))xn.getOrCreateInstance(t)})),f(xn);const kn="hide",Ln="show",Sn="showing",Dn={animation:"boolean",autohide:"boolean",delay:"number"},In={animation:!0,autohide:!0,delay:5e3};class Nn extends W{constructor(t,e){super(t,e),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return In}static get DefaultType(){return Dn}static get NAME(){return"toast"}show(){I.trigger(this._element,"show.bs.toast").defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(kn),c(this._element),this._element.classList.add(Ln,Sn),this._queueCallback((()=>{this._element.classList.remove(Sn),I.trigger(this._element,"shown.bs.toast"),this._maybeScheduleHide()}),this._element,this._config.animation))}hide(){this.isShown()&&(I.trigger(this._element,"hide.bs.toast").defaultPrevented||(this._element.classList.add(Sn),this._queueCallback((()=>{this._element.classList.add(kn),this._element.classList.remove(Sn,Ln),I.trigger(this._element,"hidden.bs.toast")}),this._element,this._config.animation)))}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(Ln),super.dispose()}isShown(){return this._element.classList.contains(Ln)}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(t,e){switch(t.type){case"mouseover":case"mouseout":this._hasMouseInteraction=e;break;case"focusin":case"focusout":this._hasKeyboardInteraction=e}if(e)return void this._clearTimeout();const i=t.relatedTarget;this._element===i||this._element.contains(i)||this._maybeScheduleHide()}_setListeners(){I.on(this._element,"mouseover.bs.toast",(t=>this._onInteraction(t,!0))),I.on(this._element,"mouseout.bs.toast",(t=>this._onInteraction(t,!1))),I.on(this._element,"focusin.bs.toast",(t=>this._onInteraction(t,!0))),I.on(this._element,"focusout.bs.toast",(t=>this._onInteraction(t,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(t){return this.each((function(){const e=Nn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}return R(Nn),f(Nn),{Alert:q,Button:K,Carousel:rt,Collapse:ft,Dropdown:ci,Modal:Ii,Offcanvas:Bi,Popover:dn,ScrollSpy:_n,Tab:xn,Toast:Nn,Tooltip:ln}}));
   7	//# sourceMappingURL=bootstrap.bundle.min.js.map

--- File: static/css/main.css ---
   1	/* Reset and Base Styles */
   2	* {
   3	    box-sizing: border-box;
   4	    margin: 0;
   5	    padding: 0;
   6	}
   7	
   8	body {
   9	    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  10	    background-color: #121212; /* Very dark grey, almost black */
  11	    color: #e0e0e0; /* Light grey for text */
  12	    line-height: 1.6;
  13	    font-size: 16px;
  14	}
  15	
  16	/* Bootstrap overrides for custom color scheme */
  17	.btn-primary {
  18	    background-color: #4CAF50;
  19	    border-color: #45a049;
  20	}
  21	.btn-primary:hover {
  22	    background-color: #45a049;
  23	    border-color: #3e8e41;
  24	}
  25	body {
  26	    background-color: #121212;
  27	    color: #e0e0e0;
  28	}
  29	.card {
  30	    background-color: #1e1e1e;
  31	    border: 1px solid #282828;
  32	}
  33	.navbar, .bg-dark {
  34	    background-color: #1e1e1e !important;
  35	}
  36	.nav-link {
  37	    color: #e0e0e0 !important;
  38	}
  39	.nav-link.active {
  40	    color: #4CAF50 !important;
  41	}
  42	
  43	/* App Header */
  44	.app-header {
  45	    background-color: #1e1e1e; /* Darker shade for header */
  46	    padding: 1rem 2rem;
  47	    display: flex;
  48	    justify-content: space-between;
  49	    align-items: center;
  50	    border-bottom: 1px solid #333; /* Subtle border */
  51	}
  52	
  53	.logo-container {
  54	    display: flex;
  55	    align-items: center;
  56	}
  57	
  58	.site-logo {
  59	    height: 40px;
  60	    margin-right: 1rem;
  61	}
  62	
  63	.app-header h1 {
  64	    font-size: 1.5rem;
  65	    color: #4CAF50; /* Accent green from logo */
  66	    font-weight: 600;
  67	}
  68	
  69	.main-nav .nav-link {
  70	    color: #b0b0b0; /* Lighter grey for nav links */
  71	    text-decoration: none;
  72	    margin-left: 1.5rem;
  73	    padding: 0.5rem 0;
  74	    transition: color 0.3s ease, border-bottom-color 0.3s ease;
  75	    border-bottom: 2px solid transparent;
  76	}
  77	
  78	.main-nav .nav-link:hover, 
  79	.main-nav .nav-link.active {
  80	    color: #4CAF50; /* Accent green */
  81	    border-bottom-color: #4CAF50;
  82	}
  83	
  84	/* Main Container */
  85	.container {
  86	    max-width: 1400px;
  87	    margin: 2rem auto;
  88	    padding: 0 2rem;
  89	}
  90	
  91	/* Card Styles */
  92	.card {
  93	    background-color: #1e1e1e; /* Darker shade for cards */
  94	    border-radius: 8px;
  95	    padding: 1.5rem;
  96	    margin-bottom: 2rem;
  97	    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  98	    border: 1px solid #282828; /* Subtle border for cards */
  99	}
 100	
 101	.card h2, .card h3 {
 102	    color: #4CAF50; /* Accent green */
 103	    margin-bottom: 1rem;
 104	    font-weight: 500;
 105	    display: flex;
 106	    align-items: center;
 107	}
 108	
 109	.card h2 .icon, .card h3 .icon {
 110	    margin-right: 0.75rem;
 111	    font-size: 1.2em; /* Slightly larger icon */
 112	}
 113	
 114	.card p.description {
 115	    color: #a0a0a0; /* Softer grey for descriptions */
 116	    margin-bottom: 1rem;
 117	    font-size: 0.95em;
 118	}
 119	
 120	/* Form Elements */
 121	.form-group {
 122	    margin-bottom: 1.25rem;
 123	}
 124	
 125	.form-group label {
 126	    display: block;
 127	    color: #c0c0c0; /* Medium grey for labels */
 128	    margin-bottom: 0.5rem;
 129	    font-size: 0.9em;
 130	    font-weight: 500;
 131	}
 132	
 133	input[type="file"],
 134	input[type="text"],
 135	select {
 136	    width: 100%;
 137	    padding: 0.75rem;
 138	    background-color: #2c2c2c; /* Dark input background */
 139	    border: 1px solid #444; /* Slightly lighter border for inputs */
 140	    border-radius: 6px;
 141	    color: #e0e0e0;
 142	    font-size: 0.95em;
 143	    transition: border-color 0.3s ease, box-shadow 0.3s ease;
 144	}
 145	
 146	input[type="file"] {
 147	    padding: 0.5rem;
 148	}
 149	
 150	input[type="file"]::file-selector-button {
 151	    background-color: #4CAF50;
 152	    color: #ffffff;
 153	    border: none;
 154	    padding: 0.6rem 1rem;
 155	    border-radius: 4px;
 156	    cursor: pointer;
 157	    transition: background-color 0.3s ease;
 158	    margin-right: 10px;
 159	}
 160	
 161	input[type="file"]::file-selector-button:hover {
 162	    background-color: #45a049;
 163	}
 164	
 165	input:focus, select:focus {
 166	    outline: none;
 167	    border-color: #4CAF50;
 168	    box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.3);
 169	}
 170	
 171	/* Button Styles */
 172	.button {
 173	    padding: 0.75rem 1.5rem;
 174	    border-radius: 6px;
 175	    cursor: pointer;
 176	    text-decoration: none;
 177	    font-weight: 500;
 178	    font-size: 0.95em;
 179	    transition: background-color 0.3s ease, color 0.3s ease, transform 0.1s ease;
 180	    border: none;
 181	    display: inline-block;
 182	    text-align: center;
 183	}
 184	
 185	.button.primary {
 186	    background-color: #4CAF50; /* Accent green */
 187	    color: #ffffff;
 188	}
 189	
 190	.button.primary:hover {
 191	    background-color: #45a049; /* Darker green */
 192	    transform: translateY(-1px);
 193	}
 194	
 195	.button.secondary {
 196	    background-color: #333;
 197	    color: #e0e0e0;
 198	    border: 1px solid #555;
 199	}
 200	
 201	.button.secondary:hover {
 202	    background-color: #444;
 203	}
 204	
 205	.button.small {
 206	    padding: 0.5rem 1rem;
 207	    font-size: 0.85em;
 208	}
 209	
 210	.button.tiny {
 211	    padding: 0.3rem 0.7rem;
 212	    font-size: 0.75em;
 213	}
 214	
 215	.button-group {
 216	    display: flex;
 217	    gap: 1rem;
 218	    margin-top: 1rem;
 219	}
 220	
 221	/* Translation Section Specifics */
 222	.translation-options-grid {
 223	    display: grid;
 224	    grid-template-columns: 1fr;
 225	    gap: 2rem;
 226	}
 227	
 228	@media (min-width: 768px) {
 229	    .translation-options-grid {
 230	        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
 231	    }
 232	}
 233	
 234	.translation-method {
 235	    background-color: #252525; /* Slightly lighter than card for internal sections */
 236	    padding: 1.5rem;
 237	    border-radius: 6px;
 238	    border: 1px solid #303030;
 239	}
 240	
 241	.upload-options {
 242	    display: flex;
 243	    align-items: center;
 244	    gap: 0.5rem; /* Reduced gap */
 245	}
 246	
 247	.upload-options input[type="file"] {
 248	    flex-grow: 1;
 249	}
 250	
 251	.selected-file-display {
 252	    font-size: 0.85em;
 253	    color: #a0a0a0;
 254	    margin-top: 0.5rem;
 255	    padding: 0.5rem;
 256	    background-color: #2c2c2c;
 257	    border-radius: 4px;
 258	    border: 1px solid #383838;
 259	    word-break: break-all;
 260	}
 261	
 262	.language-options {
 263	    display: flex;
 264	    gap: 1rem;
 265	    margin: 1rem 0;
 266	}
 267	
 268	.language-options .form-group {
 269	    flex: 1;
 270	    margin-bottom: 0;
 271	}
 272	
 273	/* File Browser (Host & Inline) */
 274	.host-file-browser, .inline-file-browser {
 275	    margin-top: 1rem;
 276	    border: 1px solid #333;
 277	    border-radius: 6px;
 278	    background-color: #252525;
 279	    max-height: 300px; /* Limit height */
 280	}
 281	
 282	.browser-header {
 283	    padding: 0.75rem 1rem;
 284	    background-color: #2c2c2c;
 285	    border-bottom: 1px solid #333;
 286	    display: flex;
 287	    justify-content: space-between;
 288	    align-items: center;
 289	    font-size: 0.9em;
 290	    color: #c0c0c0;
 291	}
 292	
 293	.current-path-display {
 294	    font-style: italic;
 295	    color: #888;
 296	    font-size: 0.9em;
 297	}
 298	
 299	.browser-body, .browser-content {
 300	    max-height: 220px; /* Adjust based on overall browser height */
 301	    overflow-y: auto;
 302	    padding: 0.5rem;
 303	}
 304	
 305	.browser-list, .directory-list {
 306	    list-style: none;
 307	}
 308	
 309	.browser-list li, .directory-list li {
 310	    padding: 0.6rem 0.8rem;
 311	    cursor: pointer;
 312	    border-radius: 4px;
 313	    margin-bottom: 0.25rem;
 314	    transition: background-color 0.2s ease;
 315	    font-size: 0.9em;
 316	    display: flex;
 317	    align-items: center;
 318	}
 319	
 320	.browser-list li:hover, .directory-list li:hover {
 321	    background-color: #333;
 322	}
 323	
 324	.browser-list li.directory-item::before, .directory-list li.directory-item::before {
 325	    content: 'üìÅ';
 326	    margin-right: 0.5rem;
 327	    color: #4CAF50;
 328	}
 329	
 330	.browser-list li.file-item::before, .directory-list li.file-item::before {
 331	    content: 'üìÑ';
 332	    margin-right: 0.5rem;
 333	    color: #60a5fa; /* Light blue for files */
 334	}
 335	
 336	.browser-list li.parent-dir::before, .directory-list li.parent-dir::before {
 337	    content: '‚Ü©Ô∏è'; /* Or use an arrow icon */
 338	}
 339	
 340	.browser-actions {
 341	    padding: 1rem;
 342	    background-color: #2c2c2c;
 343	    border-top: 1px solid #333;
 344	    text-align: right;
 345	}
 346	
 347	/* Special Meanings */
 348	#special-meanings-container {
 349	    display: flex;
 350	    flex-direction: column;
 351	    gap: 0.75rem;
 352	    margin: 1rem 0;
 353	}
 354	
 355	.special-meaning-row {
 356	    display: flex;
 357	    align-items: center;
 358	    gap: 0.75rem;
 359	}
 360	
 361	.special-meaning-row input[type="text"] {
 362	    flex-grow: 1;
 363	}
 364	
 365	.remove-meaning-btn {
 366	    background-color: #ef5350; /* Reddish color for remove */
 367	    color: white;
 368	    border: none;
 369	    border-radius: 50%;
 370	    width: 30px;
 371	    height: 30px;
 372	    font-size: 1.2em;
 373	    cursor: pointer;
 374	    display: flex;
 375	    align-items: center;
 376	    justify-content: center;
 377	    transition: background-color 0.3s ease;
 378	}
 379	
 380	.remove-meaning-btn:hover {
 381	    background-color: #e53935;
 382	}
 383	
 384	.info-text small {
 385	    color: #888;
 386	    font-size: 0.85em;
 387	}
 388	
 389	/* Progress Feedback */
 390	.progress-feedback {
 391	    margin-top: 1.5rem;
 392	}
 393	
 394	.progress-container {
 395	    width: 100%;
 396	    background-color: #2c2c2c;
 397	    border-radius: 10px;
 398	    height: 20px; /* Consistent height */
 399	    position: relative;
 400	    overflow: hidden; /* Ensure fill stays within bounds */
 401	    margin-bottom: 0.5rem;
 402	}
 403	
 404	.progress-bar-fill {
 405	    background-color: #4CAF50;
 406	    height: 100%;
 407	    width: 0%; /* Controlled by JS */
 408	    border-radius: 10px;
 409	    transition: width 0.3s ease-out;
 410	}
 411	
 412	.progress-bar-text {
 413	    position: absolute;
 414	    top: 0;
 415	    left: 50%;
 416	    transform: translateX(-50%);
 417	    color: #fff;
 418	    font-size: 0.8em;
 419	    line-height: 20px; /* Match height */
 420	    font-weight: bold;
 421	    text-shadow: 1px 1px 1px rgba(0,0,0,0.5);
 422	}
 423	
 424	.status-text {
 425	    color: #b0b0b0;
 426	    font-size: 0.9em;
 427	    margin-bottom: 1rem;
 428	}
 429	
 430	.live-feed {
 431	    background-color: #252525;
 432	    padding: 1rem;
 433	    border-radius: 6px;
 434	    margin-top: 1rem;
 435	    border: 1px solid #303030;
 436	    max-height: 50vh; /* Increased from 200px to 50% of viewport height */
 437	    overflow-y: auto;
 438	}
 439	
 440	.live-feed h4 {
 441	    color: #c0c0c0;
 442	    font-size: 0.95em;
 443	    margin-bottom: 0.5rem;
 444	}
 445	
 446	#live-status-display p {
 447	    font-size: 0.85em;
 448	    color: #a0a0a0;
 449	    margin-bottom: 0.3rem;
 450	    overflow-wrap: break-word; /* Better word wrapping than break-all */
 451	}
 452	
 453	/* Recent and Archive Grid */
 454	.recent-and-archive-grid {
 455	    display: grid;
 456	    grid-template-columns: 1fr;
 457	    gap: 2rem;
 458	}
 459	
 460	@media (min-width: 992px) { /* Adjust breakpoint as needed */
 461	    .recent-and-archive-grid {
 462	        grid-template-columns: 1fr 1fr;
 463	    }
 464	}
 465	
 466	/* File List (Recent & Archive) */
 467	.file-list {
 468	    list-style: none;
 469	}
 470	
 471	.file-item {
 472	    background-color: #252525;
 473	    padding: 1rem;
 474	    border-radius: 6px;
 475	    margin-bottom: 0.75rem;
 476	    display: flex;
 477	    justify-content: space-between;
 478	    align-items: center;
 479	    border: 1px solid #303030;
 480	    transition: background-color 0.2s ease;
 481	}
 482	
 483	.file-item:hover {
 484	    background-color: #2c2c2c;
 485	}
 486	
 487	.file-info .file-name {
 488	    color: #e0e0e0;
 489	    font-weight: 500;
 490	    display: block;
 491	    margin-bottom: 0.25rem;
 492	}
 493	
 494	.file-info .file-meta {
 495	    font-size: 0.8em;
 496	    color: #888;
 497	}
 498	
 499	.file-actions {
 500	    display: flex;
 501	    gap: 0.5rem;
 502	}
 503	
 504	.empty-state, .loading-state {
 505	    color: #888;
 506	    font-style: italic;
 507	    padding: 1rem 0;
 508	}
 509	
 510	/* Modal Styles */
 511	.modal {
 512	    display: none; /* Hidden by default */
 513	    position: fixed;
 514	    z-index: 9999; /* Very high to ensure it's on top */
 515	    left: 0;
 516	    top: 0;
 517	    width: 100%;
 518	    height: 100%;
 519	    overflow: auto;
 520	    background-color: rgba(0, 0, 0, 0.7);
 521	}
 522	
 523	.modal.active {
 524	    opacity: 1;
 525	    visibility: visible;
 526	}
 527	
 528	.modal-content-wrapper {
 529	    background-color: #1e1e1e;
 530	    padding: 2rem;
 531	    border-radius: 8px;
 532	    width: 90%;
 533	    max-width: 700px;
 534	    max-height: 80vh;
 535	    display: flex;
 536	    flex-direction: column;
 537	    box-shadow: 0 8px 24px rgba(0,0,0,0.3);
 538	}
 539	
 540	.modal-header {
 541	    display: flex;
 542	    justify-content: space-between;
 543	    align-items: center;
 544	    border-bottom: 1px solid #333;
 545	    padding-bottom: 1rem;
 546	    margin-bottom: 1rem;
 547	}
 548	
 549	.modal-header h2 {
 550	    margin-bottom: 0; /* Override card h2 margin */
 551	}
 552	
 553	.close-modal-btn {
 554	    background: none;
 555	    border: none;
 556	    color: #aaa;
 557	    font-size: 1.8rem;
 558	    cursor: pointer;
 559	    padding: 0.5rem;
 560	    line-height: 1;
 561	}
 562	
 563	.close-modal-btn:hover {
 564	    color: #fff;
 565	}
 566	
 567	.modal-body {
 568	    overflow-y: auto;
 569	    flex-grow: 1;
 570	}
 571	
 572	#subtitle-preview {
 573	    background-color: #121212; /* Even darker for pre */
 574	    color: #c0c0c0;
 575	    padding: 1rem;
 576	    border-radius: 4px;
 577	    font-family: 'Courier New', Courier, monospace;
 578	    font-size: 0.9em;
 579	    white-space: pre-wrap;
 580	    word-break: break-all;
 581	}
 582	
 583	/* Flash Messages */
 584	.flash-messages-container {
 585	    margin-bottom: 1.5rem;
 586	}
 587	
 588	.flash-message {
 589	    padding: 1rem 1.5rem;
 590	    border-radius: 6px;
 591	    margin-bottom: 1rem;
 592	    display: flex;
 593	    justify-content: space-between;
 594	    align-items: center;
 595	    font-size: 0.95em;
 596	    border-left-width: 5px;
 597	    border-left-style: solid;
 598	}
 599	
 600	.flash-message.success {
 601	    background-color: rgba(76, 175, 80, 0.1);
 602	    border-color: #4CAF50;
 603	    color: #a5d6a7; /* Lighter green for text */
 604	}
 605	
 606	.flash-message.error {
 607	    background-color: rgba(239, 83, 80, 0.1);
 608	    border-color: #ef5350;
 609	    color: #ef9a9a; /* Lighter red for text */
 610	}
 611	
 612	.close-flash {
 613	    background: none;
 614	    border: none;
 615	    color: inherit;
 616	    font-size: 1.5rem;
 617	    cursor: pointer;
 618	    opacity: 0.7;
 619	    padding: 0.25rem 0.5rem;
 620	}
 621	
 622	.close-flash:hover {
 623	    opacity: 1;
 624	}
 625	
 626	/* App Footer */
 627	.app-footer {
 628	    text-align: center;
 629	    padding: 2rem;
 630	    margin-top: 2rem;
 631	    color: #888;
 632	    font-size: 0.85em;
 633	    border-top: 1px solid #333;
 634	}
 635	
 636	/* Utility classes */
 637	.hidden {
 638	    display: none !important;
 639	}
 640	
 641	/* Responsive adjustments */
 642	@media (max-width: 768px) {
 643	    .app-header {
 644	        flex-direction: column;
 645	        padding: 1rem;
 646	    }
 647	    .logo-container {
 648	        margin-bottom: 0.5rem;
 649	    }
 650	    .main-nav {
 651	        margin-top: 0.5rem;
 652	    }
 653	    .main-nav .nav-link {
 654	        margin: 0 0.5rem;
 655	    }
 656	    .container {
 657	        padding: 0 1rem;
 658	        margin-top: 1rem;
 659	    }
 660	    .card {
 661	        padding: 1rem;
 662	    }
 663	    .language-options {
 664	        flex-direction: column;
 665	    }
 666	    .button-group {
 667	        flex-direction: column;
 668	    }
 669	    .button-group .button {
 670	        width: 100%;
 671	    }
 672	}
 673	
 674	/* Main styles for SRT Subtitle Translator */
 675	body { 
 676	    font-family: sans-serif; 
 677	    margin: 0; 
 678	    padding: 0; 
 679	    background-color: #1e1e1e; /* Darker background */
 680	    color: #e0e0e0; /* Lighter text */
 681	}
 682	
 683	.container {
 684	    max-width: 1200px;
 685	    margin: 2em auto;
 686	    background: #252525; /* Darker container background */
 687	    padding: 2em;
 688	    border-radius: 8px;
 689	    box-shadow: 0 4px 10px rgba(0,0,0,0.3);
 690	}
 691	
 692	h1 { text-align: center; color: #f5f5f5; margin-top: 0; }
 693	
 694	h2 { 
 695	    color: #f5f5f5;
 696	    border-bottom: 1px solid #444;
 697	    padding-bottom: 0.5em; 
 698	}
 699	
 700	.nav-links {
 701	    text-align: center;
 702	    margin-bottom: 1.5em;
 703	}
 704	
 705	.nav-links a {
 706	    display: inline-block;
 707	    padding: 0.5em 1em;
 708	    margin: 0 0.5em;
 709	    color: #ccc; /* Lighter link color */
 710	    text-decoration: none;
 711	    border-radius: 4px;
 712	}
 713	
 714	.nav-links a:hover {
 715	    background-color: #333;
 716	    text-decoration: underline;
 717	}
 718	
 719	.nav-links a.active {
 720	    font-weight: bold;
 721	    border-bottom: 2px solid #4a6741; /* Mossy green */
 722	}
 723	
 724	/* Logo styles for subtitle translator */
 725	.logo-container {
 726	    display: flex;
 727	    justify-content: center;
 728	    align-items: center;
 729	    margin-bottom: 1.5em;
 730	}
 731	
 732	.site-logo {
 733	    max-width: 200px;
 734	    height: auto;
 735	    margin-bottom: 0.5em;
 736	}
 737	
 738	/* For smaller screens, reduce logo size */
 739	@media (max-width: 768px) {
 740	    .site-logo {
 741	        max-width: 150px;
 742	    }
 743	}
 744	
 745	/* Log viewer styles */
 746	#log-container { 
 747	    background-color: #1a1a1a; /* Darker log container */ 
 748	    color: #e0e0e0; 
 749	    padding: 1em; 
 750	    border-radius: 6px; 
 751	    font-family: monospace; 
 752	    height: 70vh; 
 753	    overflow-y: auto;
 754	    white-space: pre-wrap;
 755	    margin-top: 1em;
 756	    border: 1px solid #444;
 757	}
 758	
 759	.error { color: #ff5555; } /* More vivid error color */
 760	.warning { color: #f9e2af; }
 761	.info { color: #89b4fa; }
 762	.debug { color: #4a6741; } /* Mossy green for debug */
 763	
 764	.controls { 
 765	    margin-top: 1em; 
 766	    display: flex; 
 767	    align-items: center;
 768	    background: #333;
 769	    padding: 1em;
 770	    border-radius: 6px;
 771	    border: 1px solid #444;
 772	}
 773	
 774	.controls button { 
 775	    background-color: #4a6741; /* Mossy green */ 
 776	    border: none; 
 777	    color: #e0e0e0; 
 778	    padding: 0.5em 1em; 
 779	    margin-right: 1em;
 780	    border-radius: 4px;
 781	    cursor: pointer;
 782	    font-weight: bold;
 783	}
 784	
 785	.controls button:hover { background-color: #5a7b4f; } /* Lighter mossy green */
 786	.controls label { margin-right: 0.5em; }
 787	
 788	.settings-panel {
 789	    margin-top: 2em;
 790	    padding: 1em;
 791	    background-color: #333;
 792	    border-radius: 6px;
 793	    border: 1px solid #444;
 794	}
 795	
 796	.settings-panel h3 {
 797	    margin-top: 0;
 798	    color: #f5f5f5;
 799	    border-bottom: 1px solid #444;
 800	    padding-bottom: 0.5em;
 801	}
 802	
 803	.checkbox-container {
 804	    display: flex;
 805	    align-items: center;
 806	    margin-bottom: 0.5em;
 807	}
 808	
 809	.checkbox-container input[type="checkbox"] {
 810	    margin-right: 0.5em;
 811	}
 812	
 813	select, input[type="checkbox"], input[type="text"], input[type="file"] {
 814	    background-color: #333;
 815	    color: #e0e0e0;
 816	    border: 1px solid #444;
 817	    border-radius: 4px;
 818	    padding: 0.3em;
 819	}
 820	
 821	select option {
 822	    background-color: #333;
 823	    color: #e0e0e0;
 824	}
 825	
 826	/* Config editor styles */
 827	.config-container {
 828	    background: #313244;
 829	    border-radius: 6px;
 830	    padding: 1em;
 831	    border: 1px solid #444;
 832	    margin-top: 1em;
 833	}
 834	
 835	.form-group {
 836	    margin-bottom: 1em;
 837	}
 838	
 839	.form-group label {
 840	    display: block;
 841	    margin-bottom: 0.5em;
 842	    font-weight: bold;
 843	    color: #ccc;
 844	}
 845	
 846	.form-group input, .form-group select {
 847	    width: 100%;
 848	    padding: 0.5em;
 849	    border: 1px solid #444;
 850	    border-radius: 4px;
 851	    box-sizing: border-box;
 852	    background-color: #333;
 853	    color: #e0e0e0;
 854	}
 855	
 856	.buttons {
 857	    margin-top: 1.5em;
 858	    text-align: right;
 859	}
 860	
 861	.buttons button {
 862	    padding: 0.6em 1.2em;
 863	    border-radius: 4px;
 864	    cursor: pointer;
 865	    margin-left: 0.5em;
 866	    font-weight: bold;
 867	}
 868	
 869	.cancel {
 870	    background-color: #555;
 871	    border: 1px solid #666;
 872	    color: #f8f9fa;
 873	}
 874	
 875	.cancel:hover {
 876	    background-color: #666;
 877	}
 878	
 879	button[type="submit"] {
 880	    background-color: #4a6741; /* Mossy green */
 881	    color: white;
 882	    border: none;
 883	    padding: 10px 15px;
 884	    border-radius: 4px;
 885	    cursor: pointer;
 886	    font-weight: bold;
 887	}
 888	
 889	button[type="submit"]:hover {
 890	    background-color: #5a7b4f; /* Lighter mossy green */
 891	}
 892	
 893	.notification {
 894	    padding: 1em;
 895	    margin-bottom: 1em;
 896	    border-radius: 4px;
 897	    display: none;
 898	    border-left: 5px solid;
 899	}
 900	
 901	.notification.success {
 902	    background-color: rgba(74, 103, 65, 0.3); /* Mossy green with transparency */
 903	    border-color: #4a6741;
 904	    color: #a5c094;
 905	}
 906	
 907	.notification.error {
 908	    background-color: rgba(184, 67, 54, 0.3);
 909	    border-color: #b84336;
 910	    color: #e88e86;
 911	}
 912	
 913	.section {
 914	    background-color: #282a36;
 915	    padding: 1em;
 916	    border-radius: 4px;
 917	    margin-bottom: 1em;
 918	    box-shadow: 0 1px 3px rgba(0,0,0,0.2);
 919	    border: 1px solid #444;
 920	}
 921	
 922	.loading {
 923	    text-align: center;
 924	    padding: 2em;
 925	    color: #bac2de;
 926	}
 927	
 928	.search-box {
 929	    padding: 0.5em;
 930	    margin-bottom: 1em;
 931	    width: 100%;
 932	    border: 1px solid #444;
 933	    border-radius: 4px;
 934	    box-sizing: border-box;
 935	    background-color: #1a1a24;
 936	    color: #cdd6f4;
 937	}
 938	
 939	/* Highlight for search results */
 940	.highlight-search {
 941	    background-color: #45475a !important;
 942	    transition: background-color 0.3s ease;
 943	}
 944	
 945	small {
 946	    color: #bac2de;
 947	    font-weight: normal;
 948	    font-size: 0.9em;
 949	}
 950	
 951	/* Upload form styles */
 952	.upload-form {
 953	    background-color: #313244;
 954	    border-radius: 8px;
 955	    padding: 2em;
 956	    margin-bottom: 2em;
 957	    border: 1px solid #444;
 958	}
 959	
 960	.file-input-container {
 961	    margin-bottom: 1.5em;
 962	}
 963	
 964	.submit-container {
 965	    margin-top: 1.5em;
 966	    text-align: center;
 967	}
 968	
 969	.upload-button {
 970	    background-color: #4a6741; /* Mossy green */
 971	    color: white;
 972	    border: none;
 973	    padding: 10px 15px;
 974	    border-radius: 4px;
 975	    cursor: pointer;
 976	    font-weight: bold;
 977	}
 978	
 979	.upload-button:hover {
 980	    background-color: #5a7b4f; /* Lighter mossy green */
 981	}
 982	
 983	.file-list {
 984	    margin-top: 2em;
 985	}
 986	
 987	.file-item {
 988	    background-color: #333;
 989	    border-radius: 4px;
 990	    padding: 0.8em;
 991	    margin-bottom: 0.8em;
 992	    display: flex;
 993	    justify-content: space-between;
 994	    align-items: center;
 995	    border: 1px solid #444;
 996	}
 997	
 998	.file-actions {
 999	    display: flex;
1000	    gap: 8px;
1001	}
1002	
1003	.file-actions button {
1004	    background-color: #444;
1005	    color: #e0e0e0;
1006	    border: none;
1007	    padding: 0.4em 0.8em;
1008	    border-radius: 4px;
1009	    cursor: pointer;
1010	}
1011	
1012	.file-actions button:hover {
1013	    background-color: #555;
1014	}
1015	
1016	.file-actions button.download {
1017	    background-color: #4a6741; /* Mossy green */
1018	    color: white;
1019	}
1020	
1021	.file-actions button.download:hover {
1022	    background-color: #5a7b4f; /* Lighter mossy green */
1023	}
1024	
1025	/* Progress indicators */
1026	.progress-container {
1027	    margin-top: 1em;
1028	    background-color: #333;
1029	    border-radius: 6px;
1030	    padding: 1em;
1031	    border: 1px solid #444;
1032	    display: none;
1033	}
1034	
1035	.progress-bar {
1036	    height: 20px;
1037	    background-color: #1a1a24;
1038	    border-radius: 10px;
1039	    overflow: hidden;
1040	    position: relative;
1041	    margin-top: 0.5em;
1042	}
1043	
1044	.progress-fill {
1045	    height: 100%;
1046	    background-color: #4a6741; /* Mossy green */
1047	    width: 0%;
1048	    transition: width 0.3s;
1049	}
1050	
1051	.progress-text {
1052	    position: absolute;
1053	    top: 0;
1054	    left: 0;
1055	    right: 0;
1056	    text-align: center;
1057	    line-height: 20px;
1058	    color: #f5f5f5;
1059	    font-weight: bold;
1060	    mix-blend-mode: difference;
1061	}
1062	
1063	/* Progress container styles */
1064	.progress-container {
1065	    background: #333;
1066	    border-radius: 8px;
1067	    padding: 15px;
1068	    margin-bottom: 20px;
1069	    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
1070	}
1071	
1072	.progress-details {
1073	    margin-bottom: 10px;
1074	}
1075	
1076	.progress-bar-container {
1077	    height: 8px;
1078	    background: #444;
1079	    border-radius: 4px;
1080	    overflow: hidden;
1081	    margin-bottom: 10px;
1082	}
1083	
1084	.progress-bar {
1085	    height: 100%;
1086	    background: #4a6741; /* Mossy green */
1087	    transition: width 0.5s ease;
1088	}
1089	
1090	/* Current translation styles */
1091	.current-translation {
1092	    background: #333;
1093	    border-radius: 8px;
1094	    padding: 15px;
1095	    margin-bottom: 20px;
1096	    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
1097	}
1098	
1099	.original-text {
1100	    margin-bottom: 15px;
1101	    padding: 10px;
1102	    background: #313244;
1103	    border-radius: 4px;
1104	}
1105	
1106	.services-container {
1107	    margin-bottom: 15px;
1108	}
1109	
1110	.service-results {
1111	    display: flex;
1112	    flex-direction: column;
1113	    gap: 8px;
1114	}
1115	
1116	.service-result {
1117	    background: #45475a;
1118	    padding: 8px;
1119	    border-radius: 4px;
1120	}
1121	
1122	.service-name {
1123	    color: #cba6f7;
1124	    font-weight: bold;
1125	    margin-right: 8px;
1126	}
1127	
1128	.critic-feedback {
1129	    background: #333;
1130	    padding: 10px;
1131	    border-radius: 4px;
1132	    margin-bottom: 15px;
1133	    border-left: 3px solid #4a6741; /* Mossy green */
1134	}
1135	
1136	.final-translation {
1137	    background: #313244;
1138	    padding: 10px;
1139	    border-radius: 4px;
1140	}
1141	
1142	.time-taken {
1143	    color: #a6adc8;
1144	    font-size: 0.8em;
1145	    margin-top: 8px;
1146	    text-align: right;
1147	}
1148	
1149	/* Live console styles */
1150	.live-console {
1151	    background-color: #1a1a24;
1152	    border-radius: 6px;
1153	    height: 200px;
1154	    overflow-y: auto;
1155	    padding: 1em;
1156	    margin-top: 1em;
1157	    font-family: monospace;
1158	    white-space: pre-wrap;
1159	    border: 1px solid #444;
1160	    display: none;
1161	}
1162	
1163	.live-console-title {
1164	    margin-top: 1em;
1165	    font-weight: bold;
1166	    color: #bac2de;
1167	}
1168	
1169	/* Enhanced live status display styles */
1170	#live-status-display {
1171	    margin-top: 10px;
1172	    font-size: 0.95em;
1173	}
1174	
1175	/* Timing info styling */
1176	.timing {
1177	    color: #aaa;
1178	    font-size: 0.85em;
1179	    font-style: italic;
1180	}
1181	
1182	/* Improved status display */
1183	.improved {
1184	    color: #a5c094; /* Lighter mossy green */
1185	    font-size: 0.85em;
1186	    margin-left: 5px;
1187	}
1188	
1189	/* History section styles */
1190	.history-section {
1191	    margin-top: 25px;
1192	    border-top: 1px solid #444;
1193	    padding-top: 15px;
1194	}
1195	
1196	.history-section h3 {
1197	    color: #6a8a5e; /* Lighter mossy green */
1198	    margin-bottom: 15px;
1199	    font-size: 1.1em;
1200	}
1201	
1202	.history-container {
1203	    max-height: 400px;
1204	    overflow-y: auto;
1205	    padding-right: 5px;
1206	}
1207	
1208	.history-item {
1209	    margin-bottom: 10px;
1210	    border: 1px solid #444;
1211	    border-radius: 4px;
1212	    background: #333;
1213	}
1214	
1215	.history-header {
1216	    padding: 8px 12px;
1217	    background: #444;
1218	    border-radius: 4px 4px 0 0;
1219	    cursor: pointer;
1220	    display: flex;
1221	    justify-content: space-between;
1222	    align-items: center;
1223	}
1224	
1225	.history-header:hover {
1226	    background: #555;
1227	}
1228	
1229	.history-content {
1230	    padding: 10px 12px;
1231	    display: none; /* Hidden by default, shown on click */
1232	    border-top: 1px solid #444;
1233	    font-size: 0.9em;
1234	}
1235	
1236	.line-number {
1237	    font-weight: bold;
1238	    color: #aaa;
1239	}
1240	
1241	.expand-btn {
1242	    color: #6a8a5e; /* Lighter mossy green */
1243	    transition: transform 0.2s;
1244	}
1245	
1246	/* Critic feedback styling */
1247	.critic-feedback {
1248	    margin: 8px 0 8px 20px;
1249	    padding: 8px;
1250	    background: #333;
1251	    border-left: 3px solid #4a6741; /* Mossy green */
1252	    border-radius: 0 4px 4px 0;
1253	    font-size: 0.9em;
1254	}
1255	
1256	/* Current line styling */
1257	.translation-item.current {
1258	    background: #333;
1259	    border-left: 3px solid #4a6741; /* Mossy green */
1260	}
1261	
1262	.translation-item h3 {
1263	    color: #6a8a5e; /* Lighter mossy green */
1264	    margin-top: 0;
1265	    font-size: 1em;
1266	}
1267	
1268	/* Add these styles at the end */
1269	.history-section {
1270	    margin-top: 20px;
1271	    border-top: 1px solid #444;
1272	    padding-top: 10px;
1273	}
1274	
1275	.history-item {
1276	    margin-bottom: 15px;
1277	    padding: 10px;
1278	    border: 1px solid #444;
1279	    border-radius: 4px;
1280	    background: #1a1a24;
1281	}
1282	
1283	.history-header {
1284	    display: flex;
1285	    justify-content: space-between;
1286	    margin-bottom: 8px;
1287	    font-size: 0.9em;
1288	    color: #bac2de;
1289	}
1290	
1291	.translation-item {
1292	    margin: 10px 0;
1293	    padding: 10px;
1294	    background: #313244;
1295	    border-radius: 4px;
1296	}
1297	
1298	/* Translation Report Modal styles */
1299	#report-modal {
1300	    /* Override potentially conflicting styles */
1301	    display: none;
1302	    z-index: 9999;
1303	}
1304	
1305	.report-modal-content {
1306	    background-color: #252525;
1307	    margin: 5% auto;
1308	    padding: 25px;
1309	    border: 1px solid #444;
1310	    border-radius: 8px;
1311	    width: 80%;
1312	    max-width: 900px;
1313	    max-height: 85vh;
1314	    overflow-y: auto;
1315	    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
1316	}
1317	
1318	#report-modal-title {
1319	    color: #f5f5f5;
1320	    margin-top: 0;
1321	    border-bottom: 1px solid #444;
1322	    padding-bottom: 10px;
1323	}
1324	
1325	#report-loading {
1326	    text-align: center;
1327	    padding: 20px;
1328	    color: #cdd6f4;
1329	    font-style: italic;
1330	}
1331	
1332	.report-content {
1333	    color: #cdd6f4;
1334	}
1335	
1336	.report-section {
1337	    margin-bottom: 20px;
1338	    padding: 15px;
1339	    background-color: #252525;
1340	    border-radius: 5px;
1341	    border: 1px solid #333;
1342	}
1343	
1344	.report-section h3 {
1345	    margin-top: 0;
1346	    border-bottom: 1px solid #444;
1347	    padding-bottom: 8px;
1348	    margin-bottom: 15px;
1349	    color: #4CAF50;
1350	}
1351	
1352	.report-grid {
1353	    display: grid;
1354	    grid-template-columns: 1fr 2fr;
1355	    gap: 8px 15px;
1356	}
1357	
1358	.report-grid > div {
1359	    padding: 8px;
1360	}
1361	
1362	.report-grid > div:nth-child(odd) {
1363	    background-color: #45475a;
1364	    border-radius: 4px 0 0 4px;
1365	    text-align: right;
1366	}
1367	
1368	.report-grid > div:nth-child(even) {
1369	    background-color: #1e1e2e;
1370	    border-radius: 0 4px 4px 0;
1371	}
1372	
1373	.sample-subtitles {
1374	    display: flex;
1375	    flex-direction: column;
1376	    gap: 12px;
1377	}
1378	
1379	.subtitle-sample {
1380	    padding: 12px;
1381	    background-color: #1e1e2e;
1382	    border-radius: 6px;
1383	    border-left: 3px solid #89b4fa;
1384	}
1385	
1386	.subtitle-index {
1387	    font-weight: bold;
1388	    color: #f5c2e7;
1389	    margin-bottom: 5px;
1390	}
1391	
1392	.subtitle-time {
1393	    font-family: monospace;
1394	    color: #a6adc8;
1395	    margin-bottom: 8px;
1396	    font-size: 0.9em;
1397	}
1398	
1399	.subtitle-text {
1400	    line-height: 1.5;
1401	}
1402	
1403	.content-preview {
1404	    background-color: #1a1a24;
1405	    color: #cdd6f4;
1406	    padding: 15px;
1407	    border-radius: 4px;
1408	    overflow-x: auto;
1409	    font-family: monospace;
1410	    font-size: 0.9em;
1411	    max-height: 200px;
1412	    overflow-y: auto;
1413	}
1414	
1415	.error-message {
1416	    background-color: #382a37;
1417	    border-left: 4px solid #f38ba8;
1418	    color: #f38ba8;
1419	    padding: 15px;
1420	    border-radius: 0 4px 4px 0;
1421	}
1422	
1423	/* Make the report button stand out */
1424	.file-actions button.report-btn {
1425	    background-color: #4a6741; /* Mossy green */
1426	    color: white;
1427	}
1428	
1429	.file-actions button.report-btn:hover {
1430	    background-color: #5a7b4f; /* Lighter mossy green */
1431	}
1432	
1433	/* Flash messages */
1434	.flash-message {
1435	    margin-bottom: 15px;
1436	    padding: 12px 15px;
1437	    border-radius: 4px;
1438	    position: relative;
1439	}
1440	
1441	.flash-message.success {
1442	    background-color: rgba(74, 103, 65, 0.3); /* Mossy green with transparency */
1443	    color: #a5c094;
1444	    border-left: 4px solid #4a6741;
1445	}
1446	
1447	.flash-message.error {
1448	    background-color: rgba(184, 67, 54, 0.3);
1449	    color: #e88e86;
1450	    border-left: 4px solid #b84336;
1451	}
1452	
1453	.close-flash {
1454	    position: absolute;
1455	    right: 10px;
1456	    top: 10px;
1457	    background: none;
1458	    border: none;
1459	    color: inherit;
1460	    font-size: 20px;
1461	    cursor: pointer;
1462	    opacity: 0.7;
1463	}
1464	
1465	.close-flash:hover {
1466	    opacity: 1;
1467	}
1468	
1469	/* File browser styles */
1470	.directory-item, .file-item {
1471	    padding: 10px 15px;
1472	    cursor: pointer;
1473	    border-radius: 4px;
1474	    margin-bottom: 5px;
1475	    transition: background-color 0.2s;
1476	    display: flex;
1477	    align-items: center;
1478	}
1479	
1480	.directory-item {
1481	    background-color: #333;
1482	}
1483	
1484	.file-item {
1485	    background-color: #2a2a2a;
1486	}
1487	
1488	.directory-item:hover, .file-item:hover {
1489	    background-color: #444;
1490	}
1491	
1492	.directory-item.selected, .directory-item.select-current {
1493	    background-color: rgba(74, 103, 65, 0.3); /* Mossy green with opacity */
1494	    border-left: 3px solid #4a6741;
1495	}
1496	
1497	.directory-item.parent {
1498	    background-color: #252525;
1499	    font-style: italic;
1500	}
1501	
1502	#directory-browser {
1503	    max-height: 400px;
1504	    overflow-y: auto;
1505	    margin: 15px 0;
1506	    border: 1px solid #444;
1507	    border-radius: 4px;
1508	    background-color: #1e1e1e;
1509	}
1510	
1511	#current-path {
1512	    padding: 10px 15px;
1513	    background-color: #252525;
1514	    border-bottom: 1px solid #444;
1515	    word-break: break-all;
1516	}
1517	
1518	#directory-list {
1519	    list-style: none;
1520	    padding: 10px;
1521	    margin: 0;
1522	}
1523	
1524	.loading, .empty-message, .error-message {
1525	    padding: 15px;
1526	    text-align: center;
1527	    font-style: italic;
1528	}
1529	
1530	.error-message {
1531	    color: #e88e86;
1532	}
1533	
1534	.dir-icon, .file-icon {
1535	    margin-right: 10px;
1536	    font-size: 1.2em;
1537	}
1538	
1539	.modal-actions {
1540	    display: flex;
1541	    justify-content: flex-end;
1542	    gap: 10px;
1543	    margin-top: 20px;
1544	}
1545	
1546	/* Special styling for "Select this directory" option */
1547	.select-current {
1548	    margin-top: 10px;
1549	    background-color: rgba(74, 103, 65, 0.3) !important;
1550	    border: 1px dashed #4a6741;
1551	    font-weight: bold;
1552	}
1553	
1554	.select-current:hover {
1555	    background-color: rgba(74, 103, 65, 0.5) !important;
1556	}
1557	
1558	/* Directory modal specific styles */
1559	#directory-modal .modal-content {
1560	    width: 90%;
1561	    max-width: 800px;
1562	}
1563	
1564	#select-dir-btn {
1565	    background-color: #4a6741; /* Mossy green */
1566	    color: white;
1567	}
1568	
1569	#select-dir-btn:hover {
1570	    background-color: #5a7b4f; /* Lighter mossy green */
1571	}
1572	
1573	#cancel-dir-btn {
1574	    background-color: #555;
1575	}
1576	
1577	#cancel-dir-btn:hover {
1578	    background-color: #666;
1579	}
1580	
1581	/* Inline File Browser styles */
1582	.bulk-header {
1583	    display: flex;
1584	    justify-content: space-between;
1585	    align-items: center;
1586	    margin-bottom: 10px;
1587	}
1588	
1589	.bulk-controls {
1590	    display: flex;
1591	    gap: 5px;
1592	    align-items: center;
1593	}
1594	
1595	.icon-button {
1596	    background-color: #333;
1597	    color: #ccc;
1598	    border: none;
1599	    width: 30px;
1600	    height: 30px;
1601	    border-radius: 50%;
1602	    display: flex;
1603	    align-items: center;
1604	    justify-content: center;
1605	    cursor: pointer;
1606	    font-size: 16px;
1607	}
1608	
1609	.icon-button:hover {
1610	    background-color: #444;
1611	    color: #fff;
1612	}
1613	
1614	.inline-file-browser {
1615	    margin-top: 15px;
1616	    margin-bottom: 20px;
1617	    border: 1px solid #444;
1618	    border-radius: 6px;
1619	    overflow: hidden;
1620	    background-color: #252525;
1621	    display: none; /* Hidden by default */
1622	    position: relative; /* Ensure proper stacking */
1623	    z-index: 10; /* Higher z-index to appear above other elements */
1624	}
1625	
1626	.inline-file-browser.active {
1627	    display: block !important; /* Show when active with greater specificity */
1628	    opacity: 1 !important; /* Ensure full visibility */
1629	    visibility: visible !important; /* Ensure it's visible */
1630	}
1631	
1632	.browser-header {
1633	    padding: 10px 15px;
1634	    background-color: #333;
1635	    border-bottom: 1px solid #444;
1636	    font-size: 0.9em;
1637	    color: #e0e0e0;
1638	}
1639	
1640	.browser-content {
1641	    max-height: 200px;
1642	    overflow-y: auto;
1643	    border: 1px solid #444;
1644	    background-color: #252525;
1645	    padding: 10px;
1646	    border-radius: 4px;
1647	    margin-bottom: 10px;
1648	}
1649	
1650	.directory-list {
1651	    list-style: none;
1652	    padding: 0;
1653	    margin: 0;
1654	}
1655	
1656	.browser-actions {
1657	    padding: 10px;
1658	    background-color: #333;
1659	    border-top: 1px solid #444;
1660	    text-align: right;
1661	}
1662	
1663	/* Translation options layout */
1664	.translation-options {
1665	    display: flex;
1666	    flex-direction: column;
1667	    gap: 20px;
1668	    margin-bottom: 20px;
1669	}
1670	
1671	@media (min-width: 768px) {
1672	    .translation-options {
1673	        flex-direction: row;
1674	    }
1675	    
1676	    .translation-options > form,
1677	    .translation-options > .directory-browsing {
1678	        flex: 1;
1679	    }
1680	}
1681	
1682	/* Form layout improvements */
1683	#upload-form {
1684	    background-color: #333;
1685	    padding: 20px;
1686	    border-radius: 6px;
1687	    border: 1px solid #444;
1688	}
1689	
1690	.language-options {
1691	    display: flex;
1692	    gap: 15px;
1693	    margin-bottom: 15px;
1694	}
1695	
1696	.language-options .form-group {
1697	    flex: 1;
1698	}
1699	
1700	.directory-browsing {
1701	    background-color: #333;
1702	    padding: 20px;
1703	    border-radius: 6px;
1704	    border: 1px solid #444;
1705	}
1706	
1707	.directory-browsing .form-group {
1708	    margin-bottom: 15px;
1709	    display: flex;
1710	    align-items: center;
1711	    gap: 10px;
1712	}
1713	
1714	.directory-browsing .form-group label {
1715	    margin-bottom: 0;
1716	    font-weight: bold;
1717	}
1718	
1719	/* Make the file browser more compact and integrated */
1720	.inline-file-browser {
1721	    margin-top: 10px;
1722	    margin-bottom: 0;
1723	    display: none; /* Hidden by default */
1724	}
1725	
1726	.inline-file-browser.active {
1727	    display: block; /* Show when active */
1728	}
1729	
1730	.browser-content {
1731	    max-height: 200px;
1732	    overflow-y: auto;
1733	    border: 1px solid #444;
1734	    background-color: #252525;
1735	    padding: 10px;
1736	    border-radius: 4px;
1737	    margin-bottom: 10px;
1738	}
1739	
1740	.browser-header {
1741	    margin-bottom: 10px;
1742	    padding: 8px;
1743	    background-color: #252525;
1744	    border-radius: 4px;
1745	    border: 1px solid #444;
1746	}
1747	
1748	.browser-actions {
1749	    margin-top: 10px;
1750	}
1751	
1752	/* Update button styles to match theme */
1753	.upload-button, 
1754	#inline-select-dir-btn,
1755	#browse-btn {
1756	    background-color: #4a6741;
1757	    color: white;
1758	    display: inline-block; /* Ensure it's always visible */
1759	    padding: 8px 12px;
1760	    cursor: pointer;
1761	}
1762	
1763	.upload-button:hover, 
1764	#inline-select-dir-btn:hover,
1765	#browse-btn:hover {
1766	    background-color: #5a7b4f;
1767	}
1768	
1769	/* Directory list styling */
1770	.directory-list {
1771	    list-style: none;
1772	    padding: 0;
1773	    margin: 0;
1774	}
1775	
1776	.directory-item, .file-item {
1777	    padding: 8px 10px;
1778	    margin-bottom: 5px;
1779	    cursor: pointer;
1780	    border-radius: 3px;
1781	    display: flex;
1782	    align-items: center;
1783	}
1784	
1785	.directory-item {
1786	    background-color: rgba(74, 103, 65, 0.2);
1787	}
1788	
1789	.file-item {
1790	    background-color: rgba(255, 255, 255, 0.1);
1791	}
1792	
1793	.directory-item:hover, .file-item:hover {
1794	    background-color: rgba(74, 103, 65, 0.4);
1795	}
1796	
1797	.directory-item.parent {
1798	    background-color: rgba(100, 100, 100, 0.2);
1799	}
1800	
1801	.directory-item.select-current {
1802	    background-color: rgba(74, 103, 65, 0.6);
1803	    color: white;
1804	}
1805	
1806	.dir-icon, .file-icon {
1807	    margin-right: 10px;
1808	}
1809	
1810	.loading, .error-message, .empty-message {
1811	    padding: 8px;
1812	    font-style: italic;
1813	    color: #999;
1814	}
1815	
1816	.error-message {
1817	    color: #e77;
1818	}
1819	
1820	/* Update bulk header styling */
1821	.bulk-header {
1822	    margin-bottom: 15px;
1823	}
1824	
1825	/* Special meanings section styles */
1826	.special-meanings-section {
1827	    margin-top: 20px;
1828	    padding: 15px;
1829	    background-color: #333;
1830	    border-radius: 6px;
1831	    border: 1px solid #444;
1832	}
1833	
1834	.special-meanings-section h3 {
1835	    color: #6a8a5e; /* Lighter mossy green */
1836	    margin-top: 0;
1837	    margin-bottom: 10px;
1838	}
1839	
1840	.section-desc {
1841	    color: #bac2de;
1842	    margin-bottom: 15px;
1843	    font-size: 0.9em;
1844	}
1845	
1846	#special-meanings-container {
1847	    margin-top: 15px;
1848	    margin-bottom: 15px;
1849	}
1850	
1851	.special-meaning-row {
1852	    display: flex;
1853	    align-items: center;
1854	    margin-bottom: 10px;
1855	    gap: 10px;
1856	}
1857	
1858	.word-input, .meaning-input {
1859	    padding: 8px;
1860	    border: 1px solid #444;
1861	    background-color: #252525;
1862	    color: #e0e0e0;
1863	    border-radius: 4px;
1864	}
1865	
1866	.word-input {
1867	    flex: 1;
1868	    min-width: 150px;
1869	}
1870	
1871	.meaning-input {
1872	    flex: 2;
1873	}
1874	
1875	.remove-meaning-btn {
1876	    background-color: #b84336; /* Red */
1877	    color: white;
1878	    border: none;
1879	    border-radius: 4px;
1880	    cursor: pointer;
1881	    width: 30px;
1882	    height: 30px;
1883	    display: flex;
1884	    align-items: center;
1885	    justify-content: center;
1886	    font-size: 18px;
1887	}
1888	
1889	.remove-meaning-btn:hover {
1890	    background-color: #c85346; /* Lighter red */
1891	}
1892	
1893	#add-meaning-btn {
1894	    margin-top: 10px;
1895	    background-color: #4a6741; /* Mossy green */
1896	    color: white;
1897	    border: none;
1898	    padding: 8px 12px;
1899	    border-radius: 4px;
1900	    cursor: pointer;
1901	}
1902	
1903	#add-meaning-btn:hover {
1904	    background-color: #5a7b4f; /* Lighter mossy green */
1905	}
1906	
1907	.info-text {
1908	    margin-top: 10px;
1909	    color: #a6adc8;
1910	    font-size: 0.85em;
1911	}
1912	
1913	/* Host file browser styles */
1914	.host-file-browser {
1915	    border: 1px solid #333;
1916	    border-radius: 5px;
1917	    margin-top: 10px;
1918	    margin-bottom: 15px;
1919	    overflow: hidden;
1920	    background-color: #1a1a24;
1921	}
1922	
1923	.host-file-browser .browser-header {
1924	    padding: 8px 12px;
1925	    background-color: #272733;
1926	    border-bottom: 1px solid #333;
1927	    font-size: 0.9em;
1928	}
1929	
1930	.host-file-browser .browser-content {
1931	    max-height: 300px;
1932	    overflow-y: auto;
1933	}
1934	
1935	.host-file-browser .directory-list {
1936	    list-style: none;
1937	    padding: 0;
1938	    margin: 0;
1939	}
1940	
1941	.host-file-browser .directory-list li {
1942	    padding: 8px 12px;
1943	    border-bottom: 1px solid #2d2d3a;
1944	    cursor: pointer;
1945	    display: flex;
1946	    align-items: center;
1947	}
1948	
1949	.host-file-browser .directory-list li:hover {
1950	    background-color: #2d2d3a;
1951	}
1952	
1953	.host-file-browser .directory-list li.file-item {
1954	    color: #89b4fa;
1955	}
1956	
1957	.host-file-browser .directory-list li.directory-item {
1958	    color: #a6e3a1;
1959	}
1960	
1961	.host-file-browser .directory-list li.directory-item::before {
1962	    content: 'üìÅ';
1963	    margin-right: 5px;
1964	}
1965	
1966	.host-file-browser .directory-list li.file-item::before {
1967	    content: 'üìÑ';
1968	    margin-right: 5px;
1969	}
1970	
1971	.host-file-browser .directory-list li.up-level::before {
1972	    content: 'üìÇ';
1973	    margin-right: 5px;
1974	}
1975	
1976	.host-file-browser .directory-list li.selected {
1977	    background-color: #374165;
1978	    font-weight: bold;
1979	}
1980	
1981	.selected-file-info {
1982	    margin-top: 8px;
1983	    padding: 8px;
1984	    background-color: #272733;
1985	    border-radius: 4px;
1986	    font-size: 0.9em;
1987	    border-left: 4px solid #89b4fa;
1988	}
1989	
1990	.upload-options {
1991	    display: flex;
1992	    gap: 10px;
1993	    align-items: center;
1994	}
1995	
1996	.upload-options input[type="file"] {
1997	    flex: 1;
1998	}
1999	
2000	/* Host File Browser styles */
2001	.host-file-browser {
2002	    margin-top: 10px;
2003	    border: 1px solid #444;
2004	    border-radius: 6px;
2005	    background-color: #1a1a1e;
2006	    overflow: hidden;
2007	    margin-bottom: 15px;
2008	}
2009	
2010	.host-file-browser .browser-header {
2011	    padding: 8px 12px;
2012	    background-color: #2a2a32;
2013	    border-bottom: 1px solid #444;
2014	    color: #ddd;
2015	    font-size: 0.9em;
2016	}
2017	
2018	.host-file-browser .browser-content {
2019	    max-height: 300px;
2020	    overflow-y: auto;
2021	}
2022	
2023	.host-file-browser .directory-list {
2024	    list-style: none;
2025	    margin: 0;
2026	    padding: 0;
2027	}
2028	
2029	.host-file-browser .directory-list li {
2030	    padding: 8px 12px;
2031	    cursor: pointer;
2032	    border-bottom: 1px solid #333;
2033	    display: flex;
2034	    align-items: center;
2035	    transition: background-color 0.2s;
2036	}
2037	
2038	.host-file-browser .directory-list li:hover {
2039	    background-color: #2a2a36;
2040	}
2041	
2042	.host-file-browser .directory-list .directory-item {
2043	    color: #4a9bff;
2044	}
2045	
2046	.host-file-browser .directory-list .file-item {
2047	    color: #ddd;
2048	}
2049	
2050	.host-file-browser .directory-list .dir-icon,
2051	.host-file-browser .directory-list .file-icon {
2052	    margin-right: 8px;
2053	}
2054	
2055	.host-file-browser .directory-list .error-message,
2056	.host-file-browser .directory-list .empty-message,
2057	.host-file-browser .directory-list .no-files-message,
2058	.host-file-browser .directory-list .loading {
2059	    color: #888;
2060	    cursor: default;
2061	    justify-content: center;
2062	    padding: 15px;
2063	}
2064	
2065	.host-file-browser .directory-list .error-message {
2066	    color: #e55;
2067	}
2068	
2069	/* Selected file info display */
2070	.selected-file-info {
2071	    margin-top: 10px;
2072	    padding: 8px 12px;
2073	    background-color: #28283a;
2074	    border-radius: 4px;
2075	    display: flex;
2076	    align-items: center;
2077	    justify-content: space-between;
2078	}
2079	
2080	.selected-file-info button.small {
2081	    border: none;
2082	    background: none;
2083	    color: #aaa;
2084	    font-size: 1.2em;
2085	    cursor: pointer;
2086	    padding: 0 5px;
2087	}
2088	
2089	.selected-file-info button.small:hover {
2090	    color: #fff;
2091	}
2092	
2093	/* Adjust upload options to better display the browse host files button */
2094	.upload-options {
2095	    display: flex;
2096	    flex-direction: column;
2097	    gap: 10px;
2098	}
2099	
2100	@media (min-width: 768px) {
2101	    .upload-options {
2102	        flex-direction: row;
2103	        align-items: center;
2104	    }
2105	}
2106	
2107	#browse-host-file-btn {
2108	    white-space: nowrap;
2109	}
2110	
2111	/* Video Transcription Section Styles */
2112	.transcription-section {
2113	    margin-top: 20px;
2114	    padding-top: 20px;
2115	    border-top: 1px solid #444;
2116	}
2117	
2118	.transcription-section h3 {
2119	    color: #8be9fd;
2120	    margin-bottom: 10px;
2121	}
2122	
2123	#selected-video-path {
2124	    display: inline-block;
2125	    margin-left: 10px;
2126	    padding: 5px 8px;
2127	    background-color: #282a36;
2128	    border: 1px solid #44475a;
2129	    border-radius: 4px;
2130	    font-family: monospace;
2131	    max-width: 300px;
2132	    white-space: nowrap;
2133	    overflow: hidden;
2134	    text-overflow: ellipsis;
2135	}
2136	
2137	/* Video File Browser */
2138	#video-file-browser {
2139	    margin-top: 10px;
2140	    border: 1px solid #44475a;
2141	    border-radius: 6px;
2142	    background: #1e1f29;
2143	    max-height: 400px;
2144	    overflow-y: auto;
2145	    padding: 10px;
2146	}
2147	
2148	#video-dirs-list, #video-files-list {
2149	    margin: 5px 0;
2150	}
2151	
2152	#video-dirs-list .dir-item, 
2153	#video-files-list .file-item {
2154	    display: flex;
2155	    align-items: center;
2156	    padding: 5px;
2157	    cursor: pointer;
2158	    border-radius: 4px;
2159	}
2160	
2161	#video-dirs-list .dir-item:hover, 
2162	#video-files-list .file-item:hover {
2163	    background-color: #44475a;
2164	}
2165	
2166	#video-dirs-list .dir-icon, 
2167	#video-files-list .file-icon {
2168	    margin-right: 8px;
2169	}
2170	
2171	/* When in transcription mode, adjust the live status display */
2172	#live-status-display.transcription-mode {
2173	    background-color: #292a3a;
2174	}
2175	
2176	#transcribe-btn {
2177	    margin-top: 10px;
2178	}
2179	
2180	/* Report Modal Styles */
2181	.modal {
2182	    display: none; /* Hidden by default */
2183	    position: fixed;
2184	    z-index: 9999; /* Very high to ensure it's on top */
2185	    left: 0;
2186	    top: 0;
2187	    width: 100%;
2188	    height: 100%;
2189	    overflow: auto;
2190	    background-color: rgba(0, 0, 0, 0.7);
2191	}
2192	
2193	.modal-content {
2194	    background-color: #1e1e1e;
2195	    margin: 5% auto;
2196	    padding: 20px;
2197	    border: 1px solid #444;
2198	    width: 80%;
2199	    max-width: 800px;
2200	    border-radius: 8px;
2201	    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
2202	    max-height: 80vh;
2203	    overflow-y: auto;
2204	    position: relative; /* Ensure close button positioning works */
2205	}
2206	
2207	#report-modal {
2208	    /* Override potentially conflicting styles */
2209	    display: none;
2210	    z-index: 9999;
2211	}
2212	
2213	#report-modal .modal-content {
2214	    max-width: 900px;
2215	}
2216	
2217	.close, .report-modal-close {
2218	    color: #aaa;
2219	    float: right;
2220	    font-size: 28px;
2221	    font-weight: bold;
2222	    cursor: pointer;
2223	    position: absolute;
2224	    top: 10px;
2225	    right: 15px;
2226	}
2227	
2228	.close:hover, .close:focus,
2229	.report-modal-close:hover, .report-modal-close:focus {
2230	    color: #4CAF50;
2231	    text-decoration: none;
2232	}
2233	
2234	.modal-pre {
2235	    white-space: pre-wrap;
2236	    overflow-x: auto;
2237	    max-height: 500px;
2238	    background-color: #121212;
2239	    padding: 10px;
2240	    border-radius: 4px;
2241	    font-family: monospace;
2242	}
2243	
2244	/* Report Modal Specific Styles */
2245	.report-section {
2246	    margin-bottom: 20px;
2247	    padding: 15px;
2248	    background-color: #252525;
2249	    border-radius: 5px;
2250	    border: 1px solid #333;
2251	}
2252	
2253	.report-section h3 {
2254	    margin-top: 0;
2255	    border-bottom: 1px solid #444;
2256	    padding-bottom: 8px;
2257	    margin-bottom: 15px;
2258	    color: #4CAF50;
2259	}
2260	
2261	.report-grid {
2262	    display: grid;
2263	    grid-template-columns: 200px 1fr;
2264	    gap: 8px;
2265	    align-items: center;
2266	}
2267	
2268	.sample-subtitles {
2269	    display: flex;
2270	    flex-direction: column;
2271	    gap: 10px;
2272	}
2273	
2274	.subtitle-sample {
2275	    padding: 10px;
2276	    background-color: #333;
2277	    border-radius: 4px;
2278	    border-left: 3px solid #4CAF50;
2279	}
2280	
2281	.subtitle-index {
2282	    font-weight: bold;
2283	    color: #4CAF50;
2284	}
2285	
2286	.subtitle-time {
2287	    font-family: monospace;
2288	    color: #888;
2289	    margin-bottom: 5px;
2290	}
2291	
2292	.content-preview {
2293	    white-space: pre-wrap;
2294	    font-family: monospace;
2295	    font-size: 0.9em;
2296	    padding: 10px;
2297	    background-color: #121212;
2298	    border-radius: 4px;
2299	    max-height: 300px;
2300	    overflow-y: auto;
2301	}
2302	
2303	#report-loading {
2304	    text-align: center;
2305	    padding: 20px;
2306	}

--- File: static/images/sublogo.png ---
[Binary file (MIME: image/png, Size: 277KB) - content not included]


--- File: static/js/browser-debug.js ---
   1	// Debug utility for browser visibility issues
   2	console.log("Browser Visibility Debugger Loading...");
   3	
   4	function inspectElement(id) {
   5	    const element = document.getElementById(id);
   6	    if (!element) {
   7	        console.error(`Element #${id} not found`);
   8	        return null;
   9	    }
  10	    
  11	    const styles = window.getComputedStyle(element);
  12	    console.log(`===== Element #${id} Inspection =====`);
  13	    console.log(`Element exists: ${!!element}`);
  14	    console.log(`Display: ${styles.display}`);
  15	    console.log(`Visibility: ${styles.visibility}`);
  16	    console.log(`Position: ${styles.position}`);
  17	    console.log(`z-index: ${styles.zIndex}`);
  18	    console.log(`Height: ${styles.height}`);
  19	    console.log(`Width: ${styles.width}`);
  20	    console.log(`Opacity: ${styles.opacity}`);
  21	    console.log(`Classes: ${element.className}`);
  22	    console.log(`Inline style: ${element.style.cssText}`);
  23	    console.log(`Parent: ${element.parentElement?.tagName}`);
  24	    console.log(`Siblings: ${element.parentElement?.childElementCount || 0}`);
  25	    
  26	    return {
  27	        display: styles.display,
  28	        visibility: styles.visibility,
  29	        position: styles.position,
  30	        zIndex: styles.zIndex,
  31	        height: styles.height,
  32	        width: styles.width,
  33	        opacity: styles.opacity,
  34	        classes: element.className,
  35	        inlineStyle: element.style.cssText,
  36	        parent: element.parentElement?.tagName,
  37	        siblings: element.parentElement?.childElementCount || 0
  38	    };
  39	}
  40	
  41	// Run inspection on page load
  42	document.addEventListener('DOMContentLoaded', function() {
  43	    console.log("Running element inspections...");
  44	    
  45	    // Check the inline file browser
  46	    const browserInfo = inspectElement('inline-file-browser');
  47	    
  48	    // Check the browse button
  49	    const btnInfo = inspectElement('browse-btn');
  50	    
  51	    // Create a visual debugger overlay
  52	    const debugDiv = document.createElement('div');
  53	    debugDiv.style.position = 'fixed';
  54	    debugDiv.style.bottom = '10px';
  55	    debugDiv.style.right = '10px';
  56	    debugDiv.style.backgroundColor = 'rgba(0,0,0,0.8)';
  57	    debugDiv.style.color = '#0f0';
  58	    debugDiv.style.padding = '10px';
  59	    debugDiv.style.borderRadius = '5px';
  60	    debugDiv.style.zIndex = '9999';
  61	    debugDiv.style.fontSize = '12px';
  62	    debugDiv.style.maxWidth = '400px';
  63	    debugDiv.style.maxHeight = '200px';
  64	    debugDiv.style.overflow = 'auto';
  65	    debugDiv.style.fontFamily = 'monospace';
  66	    
  67	    debugDiv.innerHTML = `
  68	        <div style="margin-bottom:5px;font-weight:bold;">Browser Visibility Debug</div>
  69	        <div id="debug-browser-status">Browser hidden</div>
  70	        <div style="margin-top:5px;">
  71	            <button id="debug-toggle-browser" style="background:#333;color:#0f0;border:1px solid #0f0;padding:5px;">Toggle Browser</button>
  72	        </div>
  73	    `;
  74	    
  75	    document.body.appendChild(debugDiv);
  76	    
  77	    // Add functionality to debug toggle
  78	    const debugToggle = document.getElementById('debug-toggle-browser');
  79	    const debugStatus = document.getElementById('debug-browser-status');
  80	    
  81	    if (debugToggle && debugStatus) {
  82	        debugToggle.addEventListener('click', function() {
  83	            const browser = document.getElementById('inline-file-browser');
  84	            if (!browser) return;
  85	            
  86	            if (browser.style.display === 'block') {
  87	                browser.style.display = 'none';
  88	                debugStatus.textContent = 'Browser hidden';
  89	                debugStatus.style.color = '#f00';
  90	            } else {
  91	                browser.style.display = 'block';
  92	                debugStatus.textContent = 'Browser visible';
  93	                debugStatus.style.color = '#0f0';
  94	            }
  95	            
  96	            // Re-inspect after toggle
  97	            inspectElement('inline-file-browser');
  98	        });
  99	    }
 100	    
 101	    // Monitor browser visibility
 102	    setInterval(() => {
 103	        const browser = document.getElementById('inline-file-browser');
 104	        if (browser) {
 105	            const display = window.getComputedStyle(browser).display;
 106	            if (debugStatus) {
 107	                debugStatus.textContent = display !== 'none' ? 'Browser visible' : 'Browser hidden';
 108	                debugStatus.style.color = display !== 'none' ? '#0f0' : '#f00';
 109	            }
 110	        }
 111	    }, 1000);
 112	});
 113	
 114	// Add a listener for when browse button is clicked
 115	document.addEventListener('click', function(e) {
 116	    if (e.target && e.target.id === 'browse-btn') {
 117	        console.log('Browse button clicked!');
 118	        setTimeout(() => {
 119	            console.log('Checking browser visibility after click...');
 120	            inspectElement('inline-file-browser');
 121	        }, 100);
 122	    }
 123	});
 124	
 125	console.log("Browser Visibility Debugger Loaded!");


--- File: static/js/browser-fix.js ---
   1	// Dedicated browser fix script
   2	console.log("=== Browser Fix Script Loaded ===");
   3	
   4	// Add global function for directory browser troubleshooting
   5	window.forceBrowserVisible = function() {
   6	    const browser = document.getElementById('inline-file-browser');
   7	    if (browser) {
   8	        console.log("Forcing browser visibility");
   9	        browser.style.display = 'block';
  10	        browser.style.zIndex = '999';
  11	        browser.style.opacity = '1';
  12	        browser.style.visibility = 'visible';
  13	        browser.classList.add('active');
  14	        return "Browser visibility forced";
  15	    } else {
  16	        return "Browser element not found";
  17	    }
  18	};
  19	
  20	document.addEventListener('DOMContentLoaded', function() {
  21	    console.log("Applying browser visibility fixes...");
  22	    
  23	    // Get direct references to relevant elements
  24	    const inlineBrowser = document.getElementById('inline-file-browser');
  25	    const browseBtn = document.getElementById('browse-btn');
  26	    const toggleBtn = document.getElementById('toggle-browser-btn');
  27	    const dirList = document.getElementById('inline-directory-list');
  28	    
  29	    // Ensure toggle button is visible
  30	    if (toggleBtn) {
  31	        toggleBtn.style.display = 'inline-block';
  32	        console.log("Made toggle button visible");
  33	    }
  34	    
  35	    // Create browser element if it's missing
  36	    if (!inlineBrowser) {
  37	        console.log("Browser element missing - creating a new one");
  38	        const newBrowser = document.createElement('div');
  39	        newBrowser.id = 'inline-file-browser';
  40	        newBrowser.className = 'inline-file-browser';
  41	        newBrowser.innerHTML = `
  42	            <div class="browser-header">
  43	                <span>Directory Browser</span>
  44	                <span id="current-inline-path" class="current-path-display"></span>
  45	            </div>
  46	            <div class="browser-body">
  47	                <ul id="inline-directory-list" class="directory-list"></ul>
  48	            </div>
  49	            <div class="browser-actions">
  50	                <button type="button" id="inline-select-dir-btn" class="button primary">Translate This Directory</button>
  51	            </div>
  52	        `;
  53	        
  54	        // Find where to insert it
  55	        const container = document.querySelector('.card');
  56	        if (container) {
  57	            container.appendChild(newBrowser);
  58	            // Update our reference
  59	            inlineBrowser = newBrowser;
  60	            dirList = newBrowser.querySelector('.directory-list');
  61	            console.log("Created new browser element");
  62	        } else {
  63	            console.error("Could not find container for browser element");
  64	        }
  65	    }
  66	    
  67	    // Add backup direct click handler for the browse button
  68	    if (browseBtn) {
  69	        console.log("Adding additional click handler to browse button");
  70	        browseBtn.addEventListener('click', function(e) {
  71	            console.log("Backup handler: Browse button clicked");
  72	            
  73	            if (inlineBrowser) {
  74	                // Force display regardless of other settings
  75	                inlineBrowser.style.display = 'block';
  76	                inlineBrowser.classList.add('active');
  77	                
  78	                // Check if display worked
  79	                setTimeout(() => {
  80	                    console.log(`Inline browser display status: ${getComputedStyle(inlineBrowser).display}`);
  81	                }, 10);
  82	                
  83	                // Try to load directory listing
  84	                if (dirList) {
  85	                    // Show loading indicator
  86	                    dirList.innerHTML = '<li class="loading">Loading directory list...</li>';
  87	                    
  88	                    // Fetch from the API directly
  89	                    fetch('/api/browse_dirs?path=')
  90	                        .then(response => {
  91	                            if (!response.ok) {
  92	                                throw new Error(`Error ${response.status}: ${response.statusText}`);
  93	                            }
  94	                            
  95	                            // Check if response is JSON (to handle HTML error pages)
  96	                            const contentType = response.headers.get('content-type');
  97	                            if (!contentType || !contentType.includes('application/json')) {
  98	                                throw new Error('Server returned non-JSON response');
  99	                            }
 100	                            
 101	                            return response.json();
 102	                        })
 103	                        .then(data => {
 104	                            console.log("Directory data received:", data);
 105	                            
 106	                            // Display directories
 107	                            let html = '';
 108	                            if (data.directories && data.directories.length > 0) {
 109	                                data.directories.forEach(dir => {
 110	                                    html += `<li class="directory-item" data-path="${dir.path}">
 111	                                              <span class="dir-icon">üìÅ</span> ${dir.name}
 112	                                            </li>`;
 113	                                });
 114	                            } else {
 115	                                html = '<li class="empty-message">No directories found</li>';
 116	                            }
 117	                            dirList.innerHTML = html;
 118	                            
 119	                            // Add click handlers to directory items
 120	                            dirList.querySelectorAll('.directory-item').forEach(item => {
 121	                                item.addEventListener('click', function() {
 122	                                    // Get path from data attribute
 123	                                    const path = this.getAttribute('data-path');
 124	                                    if (path && typeof browseInlineDirectory === 'function') {
 125	                                        browseInlineDirectory(path);
 126	                                    } else {
 127	                                        console.log(`Would navigate to: ${path}`);
 128	                                    }
 129	                                });
 130	                            });
 131	                        })
 132	                        .catch(error => {
 133	                            console.error("Error fetching directories:", error);
 134	                            dirList.innerHTML = '<li class="error-message">Error loading directories</li>';
 135	                        });
 136	                }
 137	            }
 138	        });
 139	    }
 140	    
 141	    console.log("Browser fixes applied.");
 142	});


--- File: static/js/config_editor.js ---
   1	// Configuration Editor JavaScript functionality
   2	document.addEventListener('DOMContentLoaded', function() {
   3	    const configForm = document.getElementById('config-form');
   4	    const configSections = document.getElementById('config-sections');
   5	    const resetBtn = document.getElementById('reset-btn');
   6	    const saveBtn = document.getElementById('save-btn');
   7	    const notification = document.getElementById('notification');
   8	    const searchInput = document.getElementById('search-config');
   9	    
  10	    let originalConfig = {};
  11	    
  12	    // Fetch configuration from the server
  13	    async function fetchConfig() {
  14	        try {
  15	            const response = await fetch('/api/config');
  16	            if (!response.ok) {
  17	                throw new Error(`HTTP error! status: ${response.status}`);
  18	            }
  19	            
  20	            const data = await response.json();
  21	            originalConfig = data;
  22	            renderConfigForm(data);
  23	            return data;
  24	        } catch (error) {
  25	            console.error('Error fetching configuration:', error);
  26	            showNotification('Error loading configuration: ' + error.message, 'error');
  27	            return null;
  28	        }
  29	    }
  30	    
  31	    // Render the configuration form
  32	    function renderConfigForm(config) {
  33	        configSections.innerHTML = '';
  34	        
  35	        // For each section in the config
  36	        Object.keys(config).forEach(section => {
  37	            const sectionDiv = document.createElement('div');
  38	            sectionDiv.className = 'section';
  39	            sectionDiv.dataset.section = section;
  40	            
  41	            const sectionTitle = document.createElement('h2');
  42	            sectionTitle.textContent = formatSectionName(section);
  43	            sectionDiv.appendChild(sectionTitle);
  44	            
  45	            // For each option in the section
  46	            Object.keys(config[section]).forEach(option => {
  47	                const formGroup = document.createElement('div');
  48	                formGroup.className = 'form-group';
  49	                formGroup.dataset.option = option;
  50	                
  51	                const label = document.createElement('label');
  52	                label.setAttribute('for', `${section}-${option}`);
  53	                label.textContent = formatOptionName(option);
  54	                
  55	                // Add a small description if available
  56	                if (getOptionDescription(section, option)) {
  57	                    const description = document.createElement('small');
  58	                    description.textContent = ' - ' + getOptionDescription(section, option);
  59	                    label.appendChild(description);
  60	                }
  61	                
  62	                const input = createInputForOption(section, option, config[section][option]);
  63	                
  64	                formGroup.appendChild(label);
  65	                formGroup.appendChild(input);
  66	                sectionDiv.appendChild(formGroup);
  67	            });
  68	            
  69	            configSections.appendChild(sectionDiv);
  70	        });
  71	    }
  72	    
  73	    // Create appropriate input element based on option type
  74	    function createInputForOption(section, option, value) {
  75	        const inputId = `${section}-${option}`;
  76	        let input;
  77	        
  78	        // Special case for boolean values
  79	        if (typeof value === 'boolean' || value === 'true' || value === 'false') {
  80	            input = document.createElement('select');
  81	            const trueOption = document.createElement('option');
  82	            trueOption.value = 'true';
  83	            trueOption.textContent = 'Yes';
  84	            if (value === true || value === 'true') {
  85	                trueOption.selected = true;
  86	            }
  87	            
  88	            const falseOption = document.createElement('option');
  89	            falseOption.value = 'false';
  90	            falseOption.textContent = 'No';
  91	            if (value === false || value === 'false') {
  92	                falseOption.selected = true;
  93	            }
  94	            
  95	            input.appendChild(trueOption);
  96	            input.appendChild(falseOption);
  97	        } 
  98	        // Special case for certain known dropdowns
  99	        else if (isSelectOption(section, option)) {
 100	            input = document.createElement('select');
 101	            getSelectOptions(section, option).forEach(opt => {
 102	                const optionEl = document.createElement('option');
 103	                optionEl.value = opt.value;
 104	                optionEl.textContent = opt.label;
 105	                if (value === opt.value) {
 106	                    optionEl.selected = true;
 107	                }
 108	                input.appendChild(optionEl);
 109	            });
 110	        }
 111	        // Default text input
 112	        else {
 113	            input = document.createElement('input');
 114	            input.type = 'text';
 115	            input.value = value;
 116	        }
 117	        
 118	        input.id = inputId;
 119	        input.name = `${section}:${option}`;
 120	        
 121	        return input;
 122	    }
 123	    
 124	    // Format section names for display (e.g., "deepl_api" -> "DeepL API")
 125	    function formatSectionName(section) {
 126	        return section
 127	            .split('_')
 128	            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
 129	            .join(' ');
 130	    }
 131	    
 132	    // Format option names for display (e.g., "api_key" -> "API Key")
 133	    function formatOptionName(option) {
 134	        return option
 135	            .split('_')
 136	            .map(word => {
 137	                // Keep API, URL etc. uppercase
 138	                if (['api', 'url', 'id'].includes(word.toLowerCase())) {
 139	                    return word.toUpperCase();
 140	                }
 141	                return word.charAt(0).toUpperCase() + word.slice(1);
 142	            })
 143	            .join(' ');
 144	    }
 145	    
 146	    // Check if an option should be a select dropdown
 147	    function isSelectOption(section, option) {
 148	        const selectOptions = {
 149	            'general': ['default_source_language', 'default_target_language'],
 150	            'translation_services': ['service_priority']
 151	        };
 152	        
 153	        return selectOptions[section] && selectOptions[section].includes(option);
 154	    }
 155	    
 156	    // Get options for select dropdowns
 157	    function getSelectOptions(section, option) {
 158	        if (section === 'general' && (option === 'default_source_language' || option === 'default_target_language')) {
 159	            return [
 160	                { value: 'en', label: 'English' },
 161	                { value: 'es', label: 'Spanish' },
 162	                { value: 'fr', label: 'French' },
 163	                { value: 'de', label: 'German' },
 164	                { value: 'it', label: 'Italian' },
 165	                { value: 'pt', label: 'Portuguese' },
 166	                { value: 'ru', label: 'Russian' },
 167	                { value: 'ja', label: 'Japanese' },
 168	                { value: 'ko', label: 'Korean' },
 169	                { value: 'zh', label: 'Chinese' },
 170	                { value: 'da', label: 'Danish' },
 171	                { value: 'nl', label: 'Dutch' },
 172	                { value: 'fi', label: 'Finnish' },
 173	                { value: 'sv', label: 'Swedish' },
 174	                { value: 'no', label: 'Norwegian' }
 175	            ];
 176	        } else if (section === 'translation_services' && option === 'service_priority') {
 177	            return [
 178	                { value: 'deepl,openai,ollama', label: 'DeepL ‚Üí OpenAI ‚Üí Ollama' },
 179	                { value: 'openai,deepl,ollama', label: 'OpenAI ‚Üí DeepL ‚Üí Ollama' },
 180	                { value: 'ollama,deepl,openai', label: 'Ollama ‚Üí DeepL ‚Üí OpenAI' },
 181	                { value: 'deepl,ollama,openai', label: 'DeepL ‚Üí Ollama ‚Üí OpenAI' },
 182	                { value: 'openai,ollama,deepl', label: 'OpenAI ‚Üí Ollama ‚Üí DeepL' },
 183	                { value: 'ollama,openai,deepl', label: 'Ollama ‚Üí OpenAI ‚Üí DeepL' }
 184	            ];
 185	        }
 186	        
 187	        return [];
 188	    }
 189	    
 190	    // Get descriptions for options
 191	    function getOptionDescription(section, option) {
 192	        const descriptions = {
 193	            'deepl_api': {
 194	                'api_key': 'Your DeepL API key',
 195	                'use_pro': 'Whether to use DeepL Pro API'
 196	            },
 197	            'openai_api': {
 198	                'api_key': 'Your OpenAI API key',
 199	                'model': 'The OpenAI model to use (e.g., gpt-4)'
 200	            },
 201	            'ollama': {
 202	                'enabled': 'Enable Ollama local model translation',
 203	                'host': 'Ollama host URL',
 204	                'model': 'Model to use (e.g., llama3)'
 205	            },
 206	            'general': {
 207	                'debug_mode': 'Enable detailed logging for debugging',
 208	                'save_intermediates': 'Save intermediate translation steps'
 209	            },
 210	            'translation_services': {
 211	                'service_priority': 'Order in which translation services are tried'
 212	            }
 213	        };
 214	        
 215	        return descriptions[section] && descriptions[section][option] 
 216	            ? descriptions[section][option] 
 217	            : '';
 218	    }
 219	    
 220	    // Show notification
 221	    function showNotification(message, type) {
 222	        notification.textContent = message;
 223	        notification.className = 'notification ' + type;
 224	        notification.style.display = 'block';
 225	        
 226	        // Hide after 5 seconds
 227	        setTimeout(() => {
 228	            notification.style.display = 'none';
 229	        }, 5000);
 230	    }
 231	    
 232	    // Save configuration
 233	    async function saveConfig(configData) {
 234	        try {
 235	            const response = await fetch('/api/config', {
 236	                method: 'POST',
 237	                headers: {
 238	                    'Content-Type': 'application/json'
 239	                },
 240	                body: JSON.stringify(configData)
 241	            });
 242	            
 243	            if (!response.ok) {
 244	                throw new Error(`HTTP error! status: ${response.status}`);
 245	            }
 246	            
 247	            const result = await response.json();
 248	            
 249	            if (result.success) {
 250	                showNotification('Configuration saved successfully!', 'success');
 251	                originalConfig = configData; // Update original config
 252	            } else {
 253	                showNotification('Error saving configuration: ' + result.message, 'error');
 254	            }
 255	        } catch (error) {
 256	            console.error('Error saving configuration:', error);
 257	            showNotification('Error saving configuration: ' + error.message, 'error');
 258	        }
 259	    }
 260	    
 261	    // Get form data as object
 262	    function getFormData() {
 263	        const formData = {};
 264	        
 265	        document.querySelectorAll('.section').forEach(section => {
 266	            const sectionName = section.dataset.section;
 267	            formData[sectionName] = {};
 268	            
 269	            section.querySelectorAll('.form-group').forEach(group => {
 270	                const optionName = group.dataset.option;
 271	                const input = group.querySelector('input, select');
 272	                
 273	                let value = input.value;
 274	                
 275	                // Convert string boolean values to actual booleans
 276	                if (value === 'true' || value === 'false') {
 277	                    value = value === 'true';
 278	                }
 279	                
 280	                formData[sectionName][optionName] = value;
 281	            });
 282	        });
 283	        
 284	        return formData;
 285	    }
 286	    
 287	    // Handle form submission
 288	    configForm.addEventListener('submit', function(e) {
 289	        e.preventDefault();
 290	        const configData = getFormData();
 291	        saveConfig(configData);
 292	    });
 293	    
 294	    // Handle reset button
 295	    resetBtn.addEventListener('click', function() {
 296	        renderConfigForm(originalConfig);
 297	        showNotification('Form reset to original values', 'info');
 298	    });
 299	    
 300	    // Search functionality
 301	    searchInput.addEventListener('input', function() {
 302	        const searchTerm = this.value.toLowerCase();
 303	        
 304	        document.querySelectorAll('.section').forEach(section => {
 305	            let sectionVisible = false;
 306	            const sectionName = formatSectionName(section.dataset.section).toLowerCase();
 307	            
 308	            // If section name matches, show entire section
 309	            if (sectionName.includes(searchTerm)) {
 310	                section.style.display = 'block';
 311	                sectionVisible = true;
 312	                
 313	                // Reset all form groups in this section
 314	                section.querySelectorAll('.form-group').forEach(group => {
 315	                    group.style.display = 'block';
 316	                    group.classList.remove('highlight-search');
 317	                });
 318	            } else {
 319	                // Check individual options
 320	                section.querySelectorAll('.form-group').forEach(group => {
 321	                    const optionName = formatOptionName(group.dataset.option).toLowerCase();
 322	                    const inputValue = group.querySelector('input, select').value.toLowerCase();
 323	                    const description = getOptionDescription(section.dataset.section, group.dataset.option).toLowerCase();
 324	                    
 325	                    if (optionName.includes(searchTerm) || inputValue.includes(searchTerm) || description.includes(searchTerm)) {
 326	                        group.style.display = 'block';
 327	                        group.classList.add('highlight-search');
 328	                        sectionVisible = true;
 329	                    } else {
 330	                        group.style.display = 'none';
 331	                        group.classList.remove('highlight-search');
 332	                    }
 333	                });
 334	                
 335	                section.style.display = sectionVisible ? 'block' : 'none';
 336	            }
 337	        });
 338	    });
 339	    
 340	    // Initialize
 341	    fetchConfig();
 342	});

--- File: static/js/debug_browser.js ---
[Empty file]


--- File: static/js/log_viewer.js ---
   1	// Log viewer JavaScript functionality
   2	document.addEventListener('DOMContentLoaded', function() {
   3	    const logContainer = document.getElementById('log-container');
   4	    const refreshBtn = document.getElementById('refresh-btn');
   5	    const autoRefreshCheckbox = document.getElementById('auto-refresh');
   6	    const followLogsCheckbox = document.getElementById('follow-logs');
   7	    const logLevelSelect = document.getElementById('log-level');
   8	    const statusSpan = document.getElementById('status');
   9	    
  10	    let autoRefreshInterval;
  11	    let lastTimestamp = 0;
  12	    
  13	    // Function to fetch logs from the server
  14	    async function fetchLogs() {
  15	        try {
  16	            const response = await fetch('/api/logs');
  17	            if (!response.ok) {
  18	                throw new Error(`HTTP error! status: ${response.status}`);
  19	            }
  20	            
  21	            const data = await response.json();
  22	            displayLogs(data.logs);
  23	            
  24	            // Update timestamp of last fetch
  25	            lastTimestamp = new Date().getTime();
  26	            statusSpan.textContent = `Last updated: ${new Date().toLocaleTimeString()}`;
  27	            
  28	            return data.logs;
  29	        } catch (error) {
  30	            console.error('Error fetching logs:', error);
  31	            logContainer.innerHTML = `<span class="error">Error loading logs: ${error.message}</span>`;
  32	            return [];
  33	        }
  34	    }
  35	    
  36	    // Function to display logs with color coding
  37	    function displayLogs(logs) {
  38	        if (!logs || logs.length === 0) {
  39	            logContainer.innerHTML = '<span class="info">No logs available</span>';
  40	            return;
  41	        }
  42	        
  43	        const filteredLogs = filterLogsByLevel(logs);
  44	        
  45	        if (filteredLogs.length === 0) {
  46	            logContainer.innerHTML = `<span class="info">No logs matching the selected level</span>`;
  47	            return;
  48	        }
  49	        
  50	        let html = '';
  51	        filteredLogs.forEach(log => {
  52	            let logClass = '';
  53	            if (log.includes('[ERROR]')) {
  54	                logClass = 'error';
  55	            } else if (log.includes('[WARNING]')) {
  56	                logClass = 'warning';
  57	            } else if (log.includes('[INFO]')) {
  58	                logClass = 'info';
  59	            } else if (log.includes('[DEBUG]')) {
  60	                logClass = 'debug';
  61	            }
  62	            
  63	            html += `<div class="${logClass}">${log}</div>`;
  64	        });
  65	        
  66	        logContainer.innerHTML = html;
  67	        
  68	        // Auto-scroll to bottom if enabled
  69	        if (followLogsCheckbox.checked) {
  70	            logContainer.scrollTop = logContainer.scrollHeight;
  71	        }
  72	    }
  73	    
  74	    // Filter logs by selected level
  75	    function filterLogsByLevel(logs) {
  76	        const level = logLevelSelect.value;
  77	        
  78	        if (level === 'all') {
  79	            return logs;
  80	        }
  81	        
  82	        return logs.filter(log => {
  83	            if (level === 'error') {
  84	                return log.includes('[ERROR]');
  85	            } else if (level === 'warning') {
  86	                return log.includes('[ERROR]') || log.includes('[WARNING]');
  87	            } else if (level === 'info') {
  88	                return log.includes('[ERROR]') || log.includes('[WARNING]') || log.includes('[INFO]');
  89	            }
  90	            return true;
  91	        });
  92	    }
  93	    
  94	    // Initial fetch
  95	    fetchLogs();
  96	    
  97	    // Set up auto-refresh
  98	    function setupAutoRefresh() {
  99	        clearInterval(autoRefreshInterval);
 100	        
 101	        if (autoRefreshCheckbox.checked) {
 102	            autoRefreshInterval = setInterval(fetchLogs, 3000); // 3 seconds
 103	        }
 104	    }
 105	    
 106	    // Event listeners
 107	    refreshBtn.addEventListener('click', () => {
 108	        fetchLogs();
 109	    });
 110	    
 111	    autoRefreshCheckbox.addEventListener('change', setupAutoRefresh);
 112	    
 113	    logLevelSelect.addEventListener('change', () => {
 114	        fetchLogs();
 115	    });
 116	    
 117	    // Set up initial auto-refresh state
 118	    setupAutoRefresh();
 119	});

--- File: static/js/main.js ---
   1	// Main JavaScript file for Subtitle Translator
   2	
   3	// --- Global Variables ---
   4	let currentPath = '';
   5	let selectedDirectory = '';
   6	let bulkProgressInterval = null;
   7	let currentJobId = null; // Keep track of the current single translation job
   8	// Track expanded history items by their line_number
   9	let expandedHistoryItems = new Set();
  10	let browserVisible = false; // File Browser State Management
  11	let isTranslationActive = false; // Flag to track if a translation is running
  12	let selectedVideoPath = null;
  13	let videoFileCache = {};
  14	let currentVideoPath = '';
  15	
  16	// Helper function to log debug messages
  17	function debug(message) {
  18	    console.log(`[DEBUG] ${message}`);
  19	}
  20	
  21	// --- Consolidated DOMContentLoaded Listener ---
  22	document.addEventListener('DOMContentLoaded', function() {
  23	    console.log("Document loaded, initializing...");
  24	
  25	    // Load special meanings from file first
  26	    loadSpecialMeaningsFromFile();
  27	
  28	    // Check for active translations as soon as page loads
  29	    checkForActiveTranslations();
  30	
  31	    // Check if we have a saved state for the file browser visibility
  32	    const savedState = localStorage.getItem('inlineFileBrowserVisible');
  33	    if (savedState === 'true') {
  34	        showInlineFileBrowser();
  35	    }
  36	    
  37	    // Initialize with home directory
  38	    if (browserVisible) {
  39	        browseInlineDirectory('');
  40	    }
  41	    
  42	    // --- Host File Browser Handling ---
  43	    const browseHostFileBtn = document.getElementById('browse-host-file-btn');
  44	    const hostFileBrowser = document.getElementById('host-file-browser');
  45	    
  46	    if (browseHostFileBtn) {
  47	        browseHostFileBtn.addEventListener('click', function() {
  48	            if (hostFileBrowser) {
  49	                // Toggle file browser visibility
  50	                if (hostFileBrowser.style.display === 'none') {
  51	                    hostFileBrowser.style.display = 'block';
  52	                    // Load files only if the list is empty
  53	                    const fileList = document.getElementById('host-file-list');
  54	                    if (fileList && (!fileList.children.length || fileList.innerHTML === '')) {
  55	                        browseHostFiles('');
  56	                    }
  57	                } else {
  58	                    hostFileBrowser.style.display = 'none';
  59	                }
  60	            }
  61	        });
  62	    }
  63	    
  64	    // Event delegation for the host file list
  65	    const hostFileList = document.getElementById('host-file-list');
  66	    if (hostFileList) {
  67	        hostFileList.addEventListener('click', function(event) {
  68	            const item = event.target.closest('li');
  69	            if (!item) return;
  70	            
  71	            if (item.classList.contains('directory-item')) {
  72	                // If directory, navigate into it
  73	                const path = item.dataset.path;
  74	                if (path) {
  75	                    browseHostFiles(path);
  76	                }
  77	            } else if (item.classList.contains('file-item')) {
  78	                // If file, select it
  79	                const filePath = item.dataset.path;
  80	                if (filePath) {
  81	                    selectHostFile(filePath, item.textContent);
  82	                }
  83	            }
  84	        });
  85	    }
  86	
  87	    // --- Form Handling ---
  88	    const uploadForm = document.getElementById('upload-form');
  89	    if (uploadForm) {
  90	        uploadForm.addEventListener('submit', function(e) {
  91	            e.preventDefault();
  92	            console.log("Form submitted, preparing to upload file");
  93	
  94	            const fileInput = document.getElementById('subtitle-file');
  95	            const hostFilePath = document.getElementById('host-file-path').value;
  96	
  97	            // Check if we have either a file upload or a host file path
  98	            if (!fileInput.files.length && !hostFilePath) {
  99	                alert("Please select a subtitle file to translate");
 100	                return;
 101	            }
 102	
 103	            console.log("Using host file path:", hostFilePath);
 104	            console.log("Selected file:", fileInput.files.length ? fileInput.files[0].name : "None (using host file)");
 105	
 106	            const formData = new FormData();
 107	            
 108	            // If we have a host file path, add it to the form data
 109	            if (hostFilePath) {
 110	                formData.append('host_file_path', hostFilePath);
 111	            } else {
 112	                // Otherwise use the file upload
 113	                formData.append('file', fileInput.files[0]);
 114	            }
 115	            
 116	            formData.append('source_language', document.getElementById('source-language').value);
 117	            formData.append('target_language', document.getElementById('target-language').value);
 118	            
 119	            // Collect special word meanings and add to the form data if any exist
 120	            const specialMeanings = collectSpecialMeanings();
 121	            if (specialMeanings.length > 0) {
 122	                formData.append('special_meanings', JSON.stringify(specialMeanings));
 123	            }
 124	
 125	            const statusContainer = document.getElementById('status-container');
 126	            if (statusContainer) {
 127	                statusContainer.style.display = 'block';
 128	                // Clear previous live status on new upload
 129	                const liveStatusDisplay = document.getElementById('live-status-display');
 130	                if (liveStatusDisplay) {
 131	                    liveStatusDisplay.innerHTML = '<p>Initializing translation...</p>';
 132	                }
 133	                console.log("Showing status container and initializing live display");
 134	            }
 135	
 136	            const resultContainer = document.getElementById('result-container');
 137	            if (resultContainer) resultContainer.style.display = 'none';
 138	
 139	            fetch('/api/translate', {
 140	                method: 'POST',
 141	                body: formData
 142	            })
 143	            .then(response => response.json())
 144	            .then(data => {
 145	                console.log("Translation job API response:", data);
 146	                if (data.job_id) {
 147	                    console.log("Job ID received:", data.job_id);
 148	                    pollJobStatus(data.job_id); // Start polling job status
 149	                    // No need to call updateLiveStatusDisplay here, interval handles it
 150	                } else {
 151	                    console.error("No job ID received:", data.message || "Unknown error");
 152	                    alert("Error: " + (data.message || "Failed to start translation job"));
 153	                    if (statusContainer) statusContainer.style.display = 'none'; // Hide status if start failed
 154	                }
 155	            })
 156	            .catch(error => {
 157	                console.error("Error starting translation:", error);
 158	                alert("Error: " + error.message);
 159	                 if (statusContainer) statusContainer.style.display = 'none'; // Hide status on error
 160	            });
 161	        });
 162	    } else {
 163	        console.error("Upload form not found!");
 164	    }
 165	
 166	    // --- Modal Handling ---
 167	    const modal = document.getElementById('modal');
 168	    const closeModalBtn = document.querySelector('.close');
 169	    if (closeModalBtn && modal) {
 170	        closeModalBtn.addEventListener('click', function() {
 171	            modal.style.display = 'none';
 172	        });
 173	    }
 174	    
 175	    window.addEventListener('click', function(event) {
 176	        if (event.target == modal && modal) {
 177	            modal.style.display = 'none';
 178	        }
 179	    });
 180	
 181	    // --- Subtitle Archive ---
 182	    loadSubtitleArchive(); // Initial load
 183	
 184	    // --- Directory Browser ---
 185	    const browseDirBtn = document.getElementById('browse-btn');
 186	    
 187	    if (browseDirBtn) {
 188	        debug("Adding click event listener to Browse Directories button");
 189	        browseDirBtn.addEventListener('click', function() {
 190	            debug("Browse Directories button clicked");
 191	            
 192	            // Always show the browser and update UI state
 193	            showInlineFileBrowser();
 194	            
 195	            // Always reload directory content
 196	            const lastPath = localStorage.getItem('lastBrowsedPath') || '';
 197	            debug(`Browsing to directory: ${lastPath || 'root'}`);
 198	            browseInlineDirectory(lastPath);
 199	            
 200	            // Check if browser is visible after changes
 201	            const browser = document.getElementById('inline-file-browser');
 202	            if (browser) {
 203	                debug(`Browser display state after click: ${getComputedStyle(browser).display}`);
 204	            }
 205	        });
 206	    } else {
 207	        console.error("Browse Directories button not found");
 208	    }
 209	
 210	    // Set up toggle browser button
 211	    const toggleBrowserBtn = document.getElementById('toggle-browser-btn');
 212	    if (toggleBrowserBtn) {
 213	        debug("Adding click event listener to toggle browser button");
 214	        toggleBrowserBtn.addEventListener('click', function() {
 215	            debug("Toggle browser button clicked");
 216	            if (browserVisible) {
 217	                hideInlineFileBrowser();
 218	            } else {
 219	                showInlineFileBrowser();
 220	                // Load directory listing if it's empty
 221	                if (document.getElementById('inline-directory-list').children.length === 0) {
 222	                    browseInlineDirectory('');
 223	                }
 224	            }
 225	        });
 226	    } else {
 227	        console.error("Toggle browser button not found");
 228	    }
 229	
 230	    // Set up inline select directory button
 231	    const inlineSelectDirBtn = document.getElementById('inline-select-dir-btn');
 232	    if (inlineSelectDirBtn) {
 233	        debug("Adding click event listener to inline select directory button");
 234	        inlineSelectDirBtn.addEventListener('click', function() {
 235	            debug("Inline select directory button clicked");
 236	            if (!selectedDirectory) {
 237	                alert('Please navigate to and select a directory first');
 238	                return;
 239	            }
 240	            
 241	            // Start bulk translation with the selected directory
 242	            startBulkTranslation(selectedDirectory);
 243	        });
 244	    } else {
 245	        console.error("Inline select directory button not found");
 246	    }
 247	
 248	    // --- Flash Messages ---
 249	    document.querySelectorAll('.close-flash').forEach(btn => {
 250	        btn.addEventListener('click', function() {
 251	            this.parentElement.style.display = 'none';
 252	        });
 253	    });
 254	
 255	    // --- Live Status Updates ---
 256	    console.log("Setting up live status updates interval");
 257	    setInterval(updateLiveStatusDisplay, 1500); // Poll every 1.5 seconds
 258	    updateLiveStatusDisplay(); // Initial call
 259	
 260	    // --- View Buttons in Recent Files (Event delegation for dynamically loaded content) ---
 261	    const subtitleArchiveContainer = document.getElementById('subtitle-archive');
 262	    if (subtitleArchiveContainer) {
 263	        subtitleArchiveContainer.addEventListener('click', function(event) {
 264	            if (event.target.classList.contains('view-btn')) {
 265	                const fileId = event.target.dataset.file;
 266	                if (fileId) {
 267	                    viewSubtitle(fileId);
 268	                } else {
 269	                    console.error("View button clicked, but no file ID found in data-file attribute.");
 270	                }
 271	            }
 272	            // Handle report button clicks
 273	            if (event.target.classList.contains('report-btn')) {
 274	                const filename = event.target.dataset.file;
 275	                if (filename) {
 276	                    viewTranslationReport(filename);
 277	                } else {
 278	                    console.error("Report button clicked, but no file ID found in data-file attribute.");
 279	                }
 280	            }
 281	            // Add similar handlers for download/delete if needed
 282	            if (event.target.classList.contains('download')) {
 283	                 const filename = event.target.dataset.file;
 284	                 if (filename) {
 285	                     downloadSubtitle(filename);
 286	                 }
 287	            }
 288	            if (event.target.classList.contains('delete')) {
 289	                 const filename = event.target.dataset.file;
 290	                 if (filename) {
 291	                     deleteSubtitle(filename);
 292	                 }
 293	            }
 294	        });
 295	    }
 296	
 297	    // --- Set up video file browser ---
 298	    const browseVideoBtn = document.getElementById('browse-video-btn');
 299	    const videoFileBrowser = document.getElementById('video-file-browser');
 300	    const videoDirsList = document.getElementById('video-dirs-list');
 301	    const videoFilesList = document.getElementById('video-files-list');
 302	    const videoCurrentPath = document.getElementById('video-current-path');
 303	    const selectedVideoPathSpan = document.getElementById('selected-video-path');
 304	    
 305	    if (browseVideoBtn) {
 306	        browseVideoBtn.addEventListener('click', function() {
 307	            debug("Video browser button clicked");
 308	            if (videoFileBrowser.style.display === 'none' || videoFileBrowser.style.display === '') {
 309	                videoFileBrowser.style.display = 'block';
 310	                loadVideoDirectories(''); // Load root directories
 311	            } else {
 312	                videoFileBrowser.style.display = 'none';
 313	            }
 314	        });
 315	    }
 316	    
 317	    // Function to load directories for the video file browser
 318	    function loadVideoDirectories(path) {
 319	        debug(`Loading video directories for path: ${path}`);
 320	        currentVideoPath = path;
 321	        
 322	        // Use the cache if available
 323	        if (videoFileCache[path]) {
 324	            renderVideoFilesBrowser(videoFileCache[path]);
 325	            return;
 326	        }
 327	        
 328	        fetch(`/api/browse_videos?path=${encodeURIComponent(path)}`)
 329	            .then(response => {
 330	                if (!response.ok) {
 331	                    // Try to parse error message from JSON response
 332	                    return response.json()
 333	                        .then(data => {
 334	                            throw new Error(data.error || `Server error: ${response.status}`);
 335	                        })
 336	                        .catch(jsonError => {
 337	                            // If not JSON, throw with status
 338	                            throw new Error(`Error ${response.status}: ${response.statusText}`);
 339	                        });
 340	                }
 341	                
 342	                // Check for JSON content type
 343	                const contentType = response.headers.get('content-type');
 344	                if (!contentType || !contentType.includes('application/json')) {
 345	                    throw new Error('Server returned non-JSON response (HTML instead of JSON)');
 346	                }
 347	                
 348	                return response.json();
 349	            })
 350	            .then(data => {
 351	                // Cache the response
 352	                videoFileCache[path] = data;
 353	                renderVideoFilesBrowser(data);
 354	            })
 355	            .catch(error => {
 356	                console.error('Error loading directories:', error);
 357	                videoDirsList.innerHTML = '<div class="error">Error loading directories</div>';
 358	            });
 359	    }
 360	    
 361	    // Function to render the video files browser content
 362	    function renderVideoFilesBrowser(data) {
 363	        if (data.error) {
 364	            videoDirsList.innerHTML = `<div class="error">${data.error}</div>`;
 365	            videoFilesList.innerHTML = '';
 366	            return;
 367	        }
 368	        
 369	        // Update current path display
 370	        videoCurrentPath.textContent = data.current_path || 'Root';
 371	        
 372	        // Create a parent directory link if we're not at root
 373	        let dirsHtml = '';
 374	        if (data.parent_path !== null && data.parent_path !== '') {
 375	            dirsHtml += `<div class="dir-item parent-dir" data-path="${data.parent_path}">
 376	                <span class="dir-icon">üìÅ</span>
 377	                <span class="dir-name">..</span>
 378	            </div>`;
 379	        }
 380	        
 381	        // Add all directories
 382	        if (data.directories && data.directories.length > 0) {
 383	            data.directories.forEach(dir => {
 384	                dirsHtml += `<div class="dir-item" data-path="${dir.path}">
 385	                    <span class="dir-icon">üìÅ</span>
 386	                    <span class="dir-name">${dir.name}</span>
 387	                </div>`;
 388	            });
 389	        } else if (!data.parent_path) {
 390	            dirsHtml += '<div class="no-dirs">No directories found</div>';
 391	        }
 392	        
 393	        videoDirsList.innerHTML = dirsHtml;
 394	        
 395	        // Add click events to directory items
 396	        videoDirsList.querySelectorAll('.dir-item').forEach(item => {
 397	            item.addEventListener('click', function() {
 398	                const dirPath = this.getAttribute('data-path');
 399	                loadVideoDirectories(dirPath);
 400	            });
 401	        });
 402	        
 403	        // Add video files
 404	        let filesHtml = '';
 405	        if (data.files && data.files.length > 0) {
 406	            data.files.forEach(file => {
 407	                filesHtml += `<div class="file-item" data-path="${file.path}">
 408	                    <span class="file-icon">üé¨</span>
 409	                    <span class="file-name">${file.name}</span>
 410	                </div>`;
 411	            });
 412	        } else {
 413	            filesHtml = '<div class="no-files">No video files found</div>';
 414	        }
 415	        
 416	        videoFilesList.innerHTML = filesHtml;
 417	        
 418	        // Add click events to file items
 419	        videoFilesList.querySelectorAll('.file-item').forEach(item => {
 420	            item.addEventListener('click', function() {
 421	                const filePath = this.getAttribute('data-path');
 422	                const fileName = this.querySelector('.file-name').textContent;
 423	                selectedVideoPath = filePath;
 424	                
 425	                // Update the display and hide the browser
 426	                const selectedVideoPathDisplay = document.getElementById('selected-video-path-display');
 427	                if (selectedVideoPathDisplay) {
 428	                    selectedVideoPathDisplay.value = fileName;
 429	                    selectedVideoPathDisplay.title = filePath;
 430	                }
 431	                
 432	                selectedVideoPathSpan.textContent = fileName;
 433	                selectedVideoPathSpan.title = filePath;
 434	                videoFileBrowser.style.display = 'none';
 435	                
 436	                debug(`Selected video file: ${filePath}`);
 437	            });
 438	        });
 439	    }
 440	    
 441	    // --- Setup video transcription form ---
 442	    const videoTranscribeForm = document.getElementById('video-transcribe-form');
 443	    if (videoTranscribeForm) {
 444	        videoTranscribeForm.addEventListener('submit', function(e) {
 445	            e.preventDefault();
 446	            
 447	            if (!selectedVideoPath) {
 448	                alert('Please select a video file first');
 449	                return;
 450	            }
 451	            
 452	            // Show the status container with a checking server message
 453	            const statusContainer = document.getElementById('status-container');
 454	            const progressBar = document.getElementById('progress-bar');
 455	            const progressText = document.getElementById('progress-text'); // Ensure this ID matches HTML
 456	            const statusMessage = document.getElementById('status-message');
 457	            const liveStatusDisplay = document.getElementById('live-status-display');
 458	
 459	            if(statusContainer) statusContainer.style.display = 'block';
 460	            if(progressBar) {
 461	                progressBar.style.width = '0%';
 462	                progressBar.style.backgroundColor = '#28a745'; // Reset to green
 463	            }
 464	            if(progressText) progressText.textContent = '0%';
 465	            if(statusMessage) statusMessage.textContent = 'Checking whisper server connection...';
 466	            if(liveStatusDisplay) liveStatusDisplay.innerHTML = '<p>Checking if transcription server is available...</p>';
 467	            
 468	            // First check if the server is reachable
 469	            fetch('/api/whisper/check_server')
 470	                .then(response => response.json())
 471	                .then(data => {
 472	                    // Always proceed if TCP connection is successful (regardless of HTTP endpoint status)
 473	                    // faster-whisper servers often don't implement health or root endpoints
 474	                    if (data.success) {
 475	                        let message = data.message;
 476	                        if (data.partial) {
 477	                            message = "Server appears to be running but not responding to HTTP test requests. Proceeding with transcription anyway.";
 478	                        }
 479	                        
 480	                        if(statusMessage) statusMessage.textContent = 'Server is reachable, starting transcription...';
 481	                        if(liveStatusDisplay) liveStatusDisplay.innerHTML = '<p>Preparing to send video to transcription server...</p>';
 482	                        
 483	                        startVideoTranscription();
 484	                    } else {
 485	                        // Server is not reachable at all
 486	                        if(statusMessage) statusMessage.textContent = `Error: ${data.message}`;
 487	                        if(progressBar) progressBar.style.backgroundColor = '#ff4444';
 488	                        if(liveStatusDisplay) liveStatusDisplay.innerHTML = `
 489	                            <p class="error-message">Cannot connect to the transcription server at ${data.server_url}</p>
 490	                            <p>Please check that the server is running and accessible from your network.</p>
 491	                            <p>Error details: ${data.message}</p>
 492	                        `;
 493	                    }
 494	                })
 495	                .catch(error => {
 496	                    console.error('Error checking server availability:', error);
 497	                    if(statusMessage) statusMessage.textContent = `Error checking server: ${error.message}`;
 498	                    if(progressBar) progressBar.style.backgroundColor = '#ff4444';
 499	                    if(liveStatusDisplay) liveStatusDisplay.innerHTML = `
 500	                        <p class="error-message">Network error while checking server availability.</p>
 501	                        <p>Please check your network connection and try again.</p>
 502	                    `;
 503	                });
 504	        });
 505	    }
 506	
 507	    // Function to start video transcription after server check
 508	    function startVideoTranscription() {
 509	        // Get the selected language or leave empty for auto-detect
 510	        const language = document.getElementById('video-language').value;
 511	        
 512	        // Create form data
 513	        const formData = new FormData();
 514	        formData.append('video_file_path', selectedVideoPath);
 515	        if (language) {
 516	            formData.append('language', language);
 517	        }
 518	        
 519	        // Update status
 520	        const statusMessage = document.getElementById('status-message');
 521	        const liveStatusDisplay = document.getElementById('live-status-display');
 522	        if(statusMessage) statusMessage.textContent = 'Sending video to transcription service...';
 523	        if(liveStatusDisplay) liveStatusDisplay.innerHTML = '<p>Sending video file to server...</p>';
 524	        
 525	        // Make the API call
 526	        fetch('/api/video_to_srt', {
 527	            method: 'POST',
 528	            body: formData
 529	        })
 530	        .then(response => response.json())
 531	        .then(data => {
 532	            if (data.status === 'success') {
 533	                // Start polling for job status
 534	                const jobId = data.job_id;
 535	                currentJobId = jobId; // Set currentJobId here
 536	                pollJobStatus(jobId); // This will now handle transcription progress internally
 537	                
 538	                if(statusMessage) statusMessage.textContent = 'Transcription job started successfully';
 539	                if(liveStatusDisplay) liveStatusDisplay.innerHTML = '<p>Video uploaded, transcription in progress...</p>';
 540	            } else {
 541	                throw new Error(data.error || 'Failed to start transcription');
 542	            }
 543	        })
 544	        .catch(error => {
 545	            console.error('Error starting transcription:', error);
 546	            if(statusMessage) statusMessage.textContent = `Error: ${error.message}`;
 547	            const progressBar = document.getElementById('progress-bar');
 548	            if(progressBar) progressBar.style.backgroundColor = '#ff4444';
 549	            if(liveStatusDisplay) liveStatusDisplay.innerHTML = `
 550	                <p class="error-message">Error starting transcription:</p>
 551	                <p>${error.message}</p>
 552	            `;
 553	        });
 554	    }
 555	
 556	    console.log("Initialization complete.");
 557	}); // --- End of Consolidated DOMContentLoaded Listener ---
 558	
 559	
 560	// --- Function Definitions (pollJobStatus, updateLiveStatusDisplay, etc.) ---
 561	
 562	// Poll for overall job completion status (distinct from live line-by-line status)
 563	function pollJobStatus(jobId) {
 564	    console.log(`[Job ${jobId}] Starting to poll job status.`);
 565	    currentJobId = jobId; // Store the current job ID
 566	
 567	    function checkStatus() {
 568	        fetch(`/api/job_status/${jobId}`)
 569	            .then(response => {
 570	                if (!response.ok) {
 571	                    throw new Error(`HTTP error! status: ${response.status}`);
 572	                }
 573	                return response.json();
 574	            })
 575	            .then(data => {
 576	                console.log(`[Job ${jobId}] Status:`, data);
 577	                const statusMessageEl = document.getElementById('status-message');
 578	                const progressBarEl = document.getElementById('progress-bar');
 579	                const progressTextEl = document.getElementById('progress-text'); // Changed from progress-percent
 580	
 581	                // Update general job status message first
 582	                if(statusMessageEl) statusMessageEl.textContent = data.message || `Job ${data.status}.`;
 583	
 584	                if (data.status === 'completed' || data.status === 'failed' || data.status === 'error') {
 585	                    if (progressBarEl) progressBarEl.style.width = (data.status === 'completed' ? '100%' : '0%');
 586	                    if (progressTextEl) progressTextEl.textContent = (data.status === 'completed' ? '100%' : '0%');
 587	                    
 588	                    // Stop polling if job is done or failed
 589	                    console.log(`[Job ${jobId}] Polling stopped. Status: ${data.status}`);
 590	                    // Refresh archive on completion or failure to reflect new files or states
 591	                    loadSubtitleArchive(); 
 592	                    return; 
 593	                } else if (data.status === 'processing' || data.status === 'transcribing' || data.status === 'queued') {
 594	                    // If job is ongoing (processing, transcribing, or even queued and about to start), 
 595	                    // fetch detailed transcription progress.
 596	                    fetch(`/api/transcription_progress/${jobId}`)
 597	                        .then(response => {
 598	                            if (!response.ok) {
 599	                                // If the job ID is not found, it might be an old job or an error.
 600	                                if (response.status === 404) {
 601	                                    console.warn(`[Job ${jobId}] Transcription progress not found (404). Job might be initializing or completed elsewhere.`);
 602	                                    // Keep general status message from job_status
 603	                                    return null; // Or a default object: { percent: 0, message: "Waiting for progress..."}
 604	                                }
 605	                                throw new Error(`HTTP error! status: ${response.status}`);
 606	                            }
 607	                            return response.json();
 608	                        })
 609	                        .then(progressData => {
 610	                            if (progressData) { // Check if progressData is not null
 611	                                console.log(`[Job ${jobId}] Transcription Progress:`, progressData);
 612	                                if (statusMessageEl) {
 613	                                    // Prefer the more specific message from transcription_progress if available
 614	                                    statusMessageEl.textContent = progressData.message || data.message || 'Processing...';
 615	                                }
 616	                                if (progressBarEl) {
 617	                                    progressBarEl.style.width = `${progressData.percent || 0}%`;
 618	                                    progressBarEl.style.backgroundColor = '#28a745'; // Green for progress
 619	                                }
 620	                                if (progressTextEl) {
 621	                                    progressTextEl.textContent = `${progressData.percent || 0}%`;
 622	                                }
 623	                            } else {
 624	                                // Handle case where progressData is null (e.g., 404 handled above)
 625	                                // Keep the general status message from job_status
 626	                                if (progressBarEl) progressBarEl.style.width = `${data.progress || 0}%`; // Fallback to job's overall progress
 627	                                if (progressTextEl) progressTextEl.textContent = `${data.progress || 0}%`;
 628	                            }
 629	                        })
 630	                        .catch(error => {
 631	                            console.error(`[Job ${jobId}] Error fetching transcription progress:`, error);
 632	                            // Keep the general status message from job_status if detailed progress fails
 633	                            if(statusMessageEl) statusMessageEl.textContent = data.message || 'Processing...';
 634	                            if (progressBarEl) progressBarEl.style.backgroundColor = '#ffc107'; // Yellow for warning/error in fetch
 635	                        });
 636	                    // Continue polling for the main job status
 637	                    setTimeout(checkStatus, 2000);
 638	                } else {
 639	                     console.warn(`[Job ${jobId}] Unexpected status: ${data.status}. Message: ${data.message}`);
 640	                     if(statusMessageEl) statusMessageEl.textContent = data.message || 'Processing...';
 641	                     // Still poll, but maybe less frequently or log this state
 642	                     setTimeout(checkStatus, 5000); 
 643	                }
 644	            })
 645	            .catch(error => {
 646	                console.error(`[Job ${jobId}] Error checking job status:`, error);
 647	                const statusMessageEl = document.getElementById('status-message');
 648	                if(statusMessageEl) statusMessageEl.textContent = 'Error checking job status. Retrying...';
 649	                const progressBarEl = document.getElementById('progress-bar');
 650	                if (progressBarEl) progressBarEl.style.backgroundColor = '#dc3545'; // Red for error
 651	                
 652	                // Don't stop polling on network errors, just wait longer
 653	                setTimeout(checkStatus, 5000);
 654	            });
 655	    }
 656	
 657	    // Start the first check
 658	    checkStatus();
 659	}
 660	
 661	
 662	// Update the live status display based on /api/live_status
 663	function updateLiveStatusDisplay() {
 664	    fetch('/api/live_status')
 665	        .then(response => response.json())
 666	        .then(data => {
 667	            // Log data for debugging
 668	            console.log("Live status data:", data);
 669	
 670	            const liveStatusDisplay = document.getElementById('live-status-display');
 671	            if (!liveStatusDisplay) {
 672	                console.error("Live status display element (#live-status-display) not found!");
 673	                return;
 674	            }
 675	
 676	            const statusContainer = document.getElementById('status-container');
 677	
 678	            // Check for bulk translation mode and update global flag
 679	            if (data.status === 'translating' || data.status === 'processing') {
 680	                window.bulkTranslationActive = true;
 681	            }
 682	
 683	            // Check if we have data from the current property or directly in the response
 684	            const hasMeaningfulDataInCurrent = data.current && 
 685	                ((data.current.line_number && data.current.line_number > 0) || 
 686	                 data.current.original || 
 687	                 data.current.first_pass || 
 688	                 data.current.final || 
 689	                 data.current.critic || 
 690	                 data.current.standard_critic);
 691	
 692	            // Also check for data directly in the response (for backwards compatibility)
 693	            const hasMeaningfulDataDirect = (data.line_number && data.line_number > 0) || 
 694	                data.original || 
 695	                data.first_pass || 
 696	                data.final || 
 697	                data.critic;
 698	
 699	            // Use data from either source
 700	            const hasMeaningfulData = hasMeaningfulDataInCurrent || hasMeaningfulDataDirect;
 701	            
 702	            // Also check if we're in an active translation state based on status and flag
 703	            const isActiveTranslation = data.status === 'processing' || 
 704	                                      data.status === 'translating' || 
 705	                                      window.bulkTranslationActive === true;
 706	
 707	            // Create a "fake" current object if needed based on top-level data
 708	            // This helps standardize processing regardless of where the data comes from
 709	            if (!data.current && hasMeaningfulDataDirect) {
 710	                data.current = {
 711	                    line_number: data.line_number || 0,
 712	                    original: data.original || '',
 713	                    first_pass: data.first_pass || '',
 714	                    standard_critic: data.critic || '',
 715	                    final: data.final || '',
 716	                    timing: data.timing || {}
 717	                };
 718	            }
 719	
 720	            // If we have actual line-by-line data to show
 721	            if (hasMeaningfulData) {
 722	                console.log("Found meaningful translation data, displaying live status");
 723	                
 724	                // Ensure the main status container is visible
 725	                if (statusContainer && statusContainer.style.display === 'none') {
 726	                    statusContainer.style.display = 'block';
 727	                }
 728	
 729	                let statusHTML = `<div class="current-translation">`;
 730	
 731	                // Filename
 732	                const filename = data.filename || data.current_file || '';
 733	                if (filename) { 
 734	                    statusHTML += `<p><strong>File:</strong> ${filename}</p>`;
 735	                }
 736	
 737	                // Progress (Line number / Total)
 738	                const currentLine = data.current ? data.current.line_number : (data.current_line || data.line_number || 0);
 739	                const totalLines = data.total_lines || 0;
 740	                
 741	                if (currentLine > 0 && totalLines > 0) {
 742	                    statusHTML += `<p><strong>Progress:</strong> ${currentLine} / ${totalLines} lines</p>`;
 743	                    const percent = Math.round((currentLine / totalLines) * 100);
 744	                    statusHTML += `
 745	                        <div class="progress-bar-container">
 746	                            <div class="progress-bar" style="width: ${percent}%"></div>
 747	                        </div>
 748	                    `;
 749	                } else if (currentLine > 0) {
 750	                    statusHTML += `<p><strong>Processing Line:</strong> ${currentLine}</p>`;
 751	                }
 752	
 753	                // Current line details
 754	                statusHTML += `<div class="translation-item current">`;
 755	                statusHTML += `<h3>Current Line</h3>`;
 756	                
 757	                // Extract current line details from either data.current or directly from data
 758	                const original = data.current ? data.current.original : data.original;
 759	                const firstPass = data.current ? data.current.first_pass : data.first_pass;
 760	                const critic = data.current ? (data.current.standard_critic || data.current.critic) : data.critic;
 761	                const criticChanged = data.current ? data.current.critic_changed : data.critic_changed;
 762	                const final = data.current ? data.current.final : data.final;
 763	                const timing = data.current && data.current.timing ? data.current.timing : (data.timing || {});
 764	                
 765	                if (original) {
 766	                    statusHTML += `<p><strong>Original:</strong> ${original}</p>`;
 767	                }
 768	                
 769	                if (firstPass) {
 770	                    let timingInfo = '';
 771	                    if (timing.first_pass) {
 772	                        timingInfo = ` <span class="timing">(${timing.first_pass.toFixed(2)}s)</span>`;
 773	                    }
 774	                    statusHTML += `<p><strong>First Pass:</strong> ${firstPass}${timingInfo}</p>`;
 775	                }
 776	                
 777	                if (critic) {
 778	                    let timingInfo = '';
 779	                    let actionInfo = '';
 780	                    
 781	                    if (timing.critic) {
 782	                        timingInfo = ` <span class="timing">(${timing.critic.toFixed(2)}s)</span>`;
 783	                    }
 784	                    
 785	                    // Critic feedback if available
 786	                    if (data.critic_action && data.critic_action.feedback) {
 787	                        actionInfo = `<div class="critic-feedback"><em>${data.critic_action.feedback}</em></div>`;
 788	                    } else if (data.current && data.current.critic_action && data.current.critic_action.feedback) {
 789	                        actionInfo = `<div class="critic-feedback"><em>${data.current.critic_action.feedback}</em></div>`;
 790	                    }
 791	                    
 792	                    statusHTML += `<p><strong>Critic:</strong> ${critic} ${criticChanged ? '<span class="improved">(Improved)</span>' : ''}${timingInfo}</p>`;
 793	                    statusHTML += actionInfo;
 794	                }
 795	                
 796	                // Display final translation (or best available)
 797	                const finalToShow = final || critic || firstPass;
 798	                if (finalToShow) {
 799	                    let timingInfo = '';
 800	                    if (timing.total) {
 801	                        timingInfo = ` <span class="timing">(Total: ${timing.total.toFixed(2)}s)</span>`;
 802	                    }
 803	                    statusHTML += `<p><strong>Current Best:</strong> ${finalToShow}${timingInfo}</p>`;
 804	                }
 805	                statusHTML += `</div>`; // End translation-item
 806	                statusHTML += `</div>`; // End current-translation
 807	
 808	                // Process history data
 809	                const processedLines = data.processed_lines || 
 810	                                     (data.current && data.current.processed_lines) || 
 811	                                     [];
 812	                                     
 813	                if (processedLines.length > 0) {
 814	                    statusHTML += `<div class="history-section">
 815	                        <h3>Recent Translation History</h3>
 816	                        <div class="history-container" id="history-container">`;
 817	                    
 818	                    // Show the history items in reverse order (newest first)
 819	                    processedLines.slice().reverse().forEach((line, index) => {
 820	                        let timingInfo = '';
 821	                        if (line.timing && line.timing.total) {
 822	                            timingInfo = ` <span class="timing">(${line.timing.total.toFixed(2)}s)</span>`;
 823	                        }
 824	                        
 825	                        const lineNum = line.line_number;
 826	                        const isExpanded = expandedHistoryItems.has(lineNum);
 827	                        statusHTML += `
 828	                            <div class="history-item" data-line-number="${lineNum}">
 829	                                <div class="history-header">
 830	                                    <span class="line-number">Line #${lineNum}</span>
 831	                                    <span class="expand-btn" data-line-number="${lineNum}">${isExpanded ? '‚ñ≤' : '‚ñº'}</span>
 832	                                    ${timingInfo}
 833	                                </div>
 834	                                <div class="history-content" id="history-content-${lineNum}" style="display: ${isExpanded ? 'block' : 'none'};">
 835	                                    <p><strong>Original:</strong> ${line.original || ''}</p>`;
 836	                                    
 837	                        if (line.first_pass) {
 838	                            statusHTML += `<p><strong>First Pass:</strong> ${line.first_pass || ''}</p>`;
 839	                        }
 840	                        
 841	                        if (line.critic || line.standard_critic) {
 842	                            const criticText = line.critic || line.standard_critic;
 843	                            statusHTML += `<p><strong>Critic:</strong> ${criticText} ${line.critic_changed ? '<span class="improved">(Improved)</span>' : ''}</p>`;
 844	                        }
 845	                        
 846	                        // Always show final translation
 847	                        const lineFinal = line.final || line.critic || line.standard_critic || line.first_pass || '';
 848	                        statusHTML += `<p><strong>Final:</strong> ${lineFinal}</p>
 849	                                </div>
 850	                            </div>`;
 851	                    });
 852	                    
 853	                    statusHTML += `</div></div>`; // End history-container and history-section
 854	                }
 855	
 856	                // Update the DOM with our generated HTML
 857	                liveStatusDisplay.innerHTML = statusHTML;
 858	                liveStatusDisplay.style.display = 'block';
 859	                
 860	                // Setup event handlers for collapsible history items
 861	                setupHistoryItemEventHandlers();
 862	
 863	            } else if (isActiveTranslation) {
 864	                // If job is active but no line data yet, show initializing message
 865	                if (statusContainer && statusContainer.style.display === 'none') {
 866	                    statusContainer.style.display = 'block';
 867	                }
 868	                liveStatusDisplay.innerHTML = `<p>Initializing translation, please wait...</p>`;
 869	                liveStatusDisplay.style.display = 'block';
 870	                
 871	                // Check for progress data and manually trigger a progress check
 872	                if (data.status === 'translating' || data.status === 'processing') {
 873	                    console.log("Translation is active, but no line data yet. Triggering bulk progress check...");
 874	                    // Try to force a progress check to get more data
 875	                    fetch('/api/progress')
 876	                        .then(response => response.json())
 877	                        .then(progressData => {
 878	                            console.log("Forced progress check data:", progressData);
 879	                            // If progress data has current info, force a live status update
 880	                            if (progressData.current && progressData.current.original) {
 881	                                console.log("Found line data in progress API, updating live status...");
 882	                                setTimeout(updateLiveStatusDisplay, 500);
 883	                            }
 884	                        })
 885	                        .catch(error => {
 886	                            console.error("Error in forced progress check:", error);
 887	                        });
 888	                }
 889	            } else if (data.status === 'idle' || data.status === 'completed' || data.status === 'failed') {
 890	                // Show appropriate waiting message based on status
 891	                if (!currentJobId && !window.bulkTranslationActive) { 
 892	                    liveStatusDisplay.innerHTML = `<p>Waiting for translation to start...</p>`;
 893	                } else {
 894	                    liveStatusDisplay.innerHTML = `<p>Waiting for next line data...</p>`;
 895	                }
 896	            } else {
 897	                // Default fallback
 898	                if (!currentJobId && !window.bulkTranslationActive) {
 899	                    liveStatusDisplay.innerHTML = `<p>Waiting for translation to start...</p>`;
 900	                }
 901	            }
 902	        })
 903	        .catch(error => {
 904	            console.error("Error fetching live status:", error);
 905	            const liveStatusDisplay = document.getElementById('live-status-display');
 906	            if (liveStatusDisplay) {
 907	                liveStatusDisplay.innerHTML = `<p class="error">Error fetching live status updates.</p>`;
 908	            }
 909	        });
 910	}
 911	
 912	// ** NEW FUNCTION ** - Set up event handlers for history items
 913	function setupHistoryItemEventHandlers() {
 914	    // Use a proper event delegation approach that works with dynamically created elements
 915	    const historyContainer = document.getElementById('history-container');
 916	    
 917	    if (!historyContainer) {
 918	        console.log("History container not found - no history items to display yet");
 919	        return; // Exit gracefully - there are no history items yet
 920	    }
 921	    
 922	    // Remove any existing event listeners to prevent duplication
 923	    const newHistoryContainer = historyContainer.cloneNode(true);
 924	    historyContainer.parentNode.replaceChild(newHistoryContainer, historyContainer);
 925	    
 926	    // Add the event listener to the container for delegation
 927	    newHistoryContainer.addEventListener('click', function(event) {
 928	        // Check if the clicked element is an expand button or its parent header
 929	        const expandBtn = event.target.closest('.expand-btn');
 930	        if (expandBtn) {
 931	            const lineNum = parseInt(expandBtn.getAttribute('data-line-number'));
 932	            if (!isNaN(lineNum)) {
 933	                const historyContent = document.getElementById(`history-content-${lineNum}`);
 934	                if (historyContent) {
 935	                    // Toggle display state
 936	                    const isVisible = historyContent.style.display !== 'none';
 937	                    historyContent.style.display = isVisible ? 'none' : 'block';
 938	                    // Toggle the expand button icon
 939	                    expandBtn.textContent = isVisible ? '‚ñº' : '‚ñ≤';
 940	                    // Track expanded/collapsed state by line number
 941	                    if (!isVisible) {
 942	                        expandedHistoryItems.add(lineNum);
 943	                    } else {
 944	                        expandedHistoryItems.delete(lineNum);
 945	                    }
 946	                }
 947	            }
 948	        }
 949	    });
 950	    
 951	    console.log("History item event handlers set up successfully");
 952	}
 953	
 954	
 955	// --- Other Helper Functions (loadSubtitleArchive, viewSubtitle, etc.) ---
 956	
 957	function loadSubtitleArchive() {
 958	    const subtitleArchiveContainer = document.getElementById('subtitle-archive');
 959	    if (!subtitleArchiveContainer) return;
 960	
 961	    fetch('/api/list_subs')
 962	        .then(response => response.json())
 963	        .then(data => {
 964	            if (data.files && data.files.length > 0) {
 965	                renderSubtitleArchive(data.files);
 966	            } else {
 967	                subtitleArchiveContainer.innerHTML = '<p>No subtitle files found in the archive.</p>';
 968	            }
 969	        })
 970	        .catch(error => {
 971	            console.error('Error loading subtitle archive:', error);
 972	            subtitleArchiveContainer.innerHTML = '<p>Error loading subtitle archive.</p>';
 973	        });
 974	}
 975	
 976	function renderSubtitleArchive(files) {
 977	     const subtitleArchiveContainer = document.getElementById('subtitle-archive');
 978	     if (!subtitleArchiveContainer) return;
 979	
 980	    let html = '<ul class="file-list">';
 981	    files.forEach(file => {
 982	        // Extract job ID or identifier if possible, otherwise use filename
 983	        // This depends on how files are named/stored
 984	        const fileId = file; // Assuming filename is the ID for now
 985	        html += `
 986	            <li class="file-item">
 987	                <span class="file-name">${file}</span>
 988	                <div class="file-actions">
 989	                    <button class="download" data-file="${file}">Download</button>
 990	                    <button class="view-btn" data-file="${fileId}">View</button>
 991	                    <button class="report-btn" data-file="${file}">Report</button>
 992	                    <button class="delete" data-file="${file}">Delete</button>
 993	                </div>
 994	            </li>
 995	        `;
 996	    });
 997	    html += '</ul>';
 998	    subtitleArchiveContainer.innerHTML = html;
 999	}
1000	
1001	// Make download/delete/view functions globally accessible
1002	// These are now primarily triggered by event delegation in DOMContentLoaded
1003	window.downloadSubtitle = function(filename) {
1004	    window.location.href = `/download_sub/${encodeURIComponent(filename)}`;
1005	};
1006	
1007	window.deleteSubtitle = function(filename) {
1008	    if (confirm(`Are you sure you want to delete ${filename}?`)) {
1009	        fetch(`/api/delete_sub/${encodeURIComponent(filename)}`, { method: 'DELETE' })
1010	            .then(response => response.json())
1011	            .then(data => {
1012	                if (data.success) {
1013	                    loadSubtitleArchive(); // Reload the archive
1014	                } else {
1015	                    alert(data.error || 'Failed to delete the file.');
1016	                }
1017	            })
1018	            .catch(error => {
1019	                console.error('Error deleting subtitle:', error);
1020	                alert('Network error while trying to delete the file.');
1021	            });
1022	    }
1023	};
1024	
1025	window.viewSubtitle = function(fileIdOrName) {
1026	    // Assuming the backend /api/view_subtitle expects the filename or job ID
1027	    const modal = document.getElementById('modal');
1028	    const modalTitle = document.getElementById('modal-title');
1029	    const modalTextContent = document.getElementById('modal-text-content');
1030	
1031	    if (!modal || !modalTitle || !modalTextContent) {
1032	        console.error("Modal elements not found for viewing subtitle.", {
1033	            modal: !!modal,
1034	            modalTitle: !!modalTitle,
1035	            modalTextContent: !!modalTextContent
1036	        });
1037	        return;
1038	    }
1039	
1040	    fetch(`/api/view_subtitle/${encodeURIComponent(fileIdOrName)}`)
1041	        .then(response => response.json())
1042	        .then(data => {
1043	            if (data.success) {
1044	                modalTitle.textContent = data.filename || 'Subtitle Preview'; // Use filename from response if available
1045	                modalTextContent.textContent = data.content || 'No content available.';
1046	                modal.style.display = 'block';
1047	            } else {
1048	                alert(data.message || 'Failed to view subtitle file.');
1049	            }
1050	        })
1051	        .catch(error => {
1052	            console.error('Error viewing subtitle:', error);
1053	            alert('Network error while trying to view the subtitle file.');
1054	        });
1055	};
1056	
1057	window.viewTranslationReport = function(filename) {
1058	    console.log(`Opening translation report for: ${filename}`);
1059	    
1060	    // Create or get the report modal
1061	    let reportModal = document.getElementById('report-modal');
1062	    
1063	    // If the report modal doesn't exist yet, create it
1064	    if (!reportModal) {
1065	        reportModal = document.createElement('div');
1066	        reportModal.id = 'report-modal';
1067	        reportModal.className = 'modal';
1068	        
1069	        // Create modal content with proper styling
1070	        reportModal.innerHTML = `
1071	            <div class="modal-content card report-modal-content">
1072	                <span class="close report-modal-close">&times;</span>
1073	                <h2 id="report-modal-title">Translation Report</h2>
1074	                <div id="report-loading">Loading report data...</div>
1075	                <div id="report-content" class="report-content"></div>
1076	            </div>
1077	        `;
1078	        
1079	        // Add modal to the body
1080	        document.body.appendChild(reportModal);
1081	        
1082	        // Add event listener to close button
1083	        const closeBtn = reportModal.querySelector('.report-modal-close');
1084	        if (closeBtn) {
1085	            closeBtn.addEventListener('click', function() {
1086	                reportModal.style.display = 'none';
1087	            });
1088	        }
1089	        
1090	        // Close modal when clicking outside the content
1091	        window.addEventListener('click', function(event) {
1092	            if (event.target === reportModal) {
1093	                reportModal.style.display = 'none';
1094	            }
1095	        });
1096	    }
1097	    
1098	    // Show the modal and loading state
1099	    console.log('Setting report modal display to block');
1100	    reportModal.style.display = 'block';
1101	    const reportLoading = document.getElementById('report-loading');
1102	    const reportContent = document.getElementById('report-content');
1103	    const reportTitle = document.getElementById('report-modal-title');
1104	    
1105	    if (reportLoading) reportLoading.style.display = 'block';
1106	    if (reportContent) reportContent.innerHTML = '';
1107	    
1108	    // Fetch the translation report data
1109	    fetch(`/api/translation_report/${encodeURIComponent(filename)}`)
1110	        .then(response => response.json())
1111	        .then(data => {
1112	            console.log('Received translation report data:', data);
1113	            if (reportLoading) reportLoading.style.display = 'none';
1114	            
1115	            if (data.success) {
1116	                // Set the title
1117	                if (reportTitle) reportTitle.textContent = `Translation Report: ${data.filename}`;
1118	                
1119	                // Build the report HTML
1120	                let reportHTML = `
1121	                    <div class="report-section">
1122	                        <h3>File Information</h3>
1123	                        <div class="report-grid">
1124	                            <div><strong>Filename:</strong></div>
1125	                            <div>${data.filename}</div>
1126	                            
1127	                            <div><strong>Created:</strong></div>
1128	                            <div>${data.creation_time}</div>
1129	                            
1130	                            <div><strong>File Size:</strong></div>
1131	                            <div>${data.file_size_formatted}</div>
1132	                            
1133	                            <div><strong>Source Language:</strong></div>
1134	                            <div>${getLanguageName(data.source_language)}</div>
1135	                            
1136	                            <div><strong>Target Language:</strong></div>
1137	                            <div>${getLanguageName(data.target_language)}</div>
1138	                        </div>
1139	                    </div>
1140	                    
1141	                    <div class="report-section">
1142	                        <h3>Statistics</h3>
1143	                        <div class="report-grid">
1144	                            <div><strong>Total Subtitles:</strong></div>
1145	                            <div>${data.total_subtitles}</div>
1146	                            
1147	                            <div><strong>Total Words:</strong></div>
1148	                            <div>${data.total_words}</div>
1149	                            
1150	                            <div><strong>Total Characters:</strong></div>
1151	                            <div>${data.total_chars}</div>
1152	                            
1153	                            <div><strong>Average Line Length:</strong></div>
1154	                            <div>${data.avg_line_length} characters</div>
1155	                        </div>
1156	                    </div>
1157	                `;
1158	                
1159	                // Add sample subtitles section if available
1160	                if (data.samples && data.samples.length > 0) {
1161	                    reportHTML += `
1162	                        <div class="report-section">
1163	                            <h3>Sample Subtitles</h3>
1164	                            <div class="sample-subtitles">
1165	                    `;
1166	                    
1167	                    data.samples.forEach(sample => {
1168	                        reportHTML += `
1169	                            <div class="subtitle-sample">
1170	                                <div class="subtitle-index">#${sample.index}</div>
1171	                                <div class="subtitle-time">${sample.time}</div>
1172	                                <div class="subtitle-text">${sample.text}</div>
1173	                            </div>
1174	                        `;
1175	                    });
1176	                    
1177	                    reportHTML += `
1178	                            </div>
1179	                        </div>
1180	                    `;
1181	                }
1182	                
1183	                // Add content preview section if available
1184	                if (data.content_preview) {
1185	                    reportHTML += `
1186	                        <div class="report-section">
1187	                            <h3>Content Preview</h3>
1188	                            <pre class="content-preview">${data.content_preview}</pre>
1189	                        </div>
1190	                    `;
1191	                }
1192	                
1193	                // Display the report
1194	                if (reportContent) reportContent.innerHTML = reportHTML;
1195	                
1196	            } else {
1197	                // Display error
1198	                if (reportContent) {
1199	                    reportContent.innerHTML = `
1200	                        <div class="error-message">
1201	                            <p>Error retrieving translation report:</p>
1202	                            <p>${data.message || 'Unknown error'}</p>
1203	                        </div>
1204	                    `;
1205	                }
1206	            }
1207	        })
1208	        .catch(error => {
1209	            console.error('Error fetching translation report:', error);
1210	            
1211	            if (reportLoading) reportLoading.style.display = 'none';
1212	            if (reportContent) {
1213	                reportContent.innerHTML = `
1214	                    <div class="error-message">
1215	                        <p>Network error while trying to fetch the translation report.</p>
1216	                        <p>${error.message}</p>
1217	                    </div>
1218	                `;
1219	            }
1220	        });
1221	};
1222	
1223	// Helper function to get full language name from code
1224	function getLanguageName(code) {
1225	    const languageMap = {
1226	        'en': 'English',
1227	        'es': 'Spanish',
1228	        'fr': 'French',
1229	        'de': 'German',
1230	        'it': 'Italian',
1231	        'pt': 'Portuguese',
1232	        'ru': 'Russian',
1233	        'ja': 'Japanese',
1234	        'ko': 'Korean',
1235	        'zh': 'Chinese',
1236	        'da': 'Danish',
1237	        'nl': 'Dutch',
1238	        'fi': 'Finnish',
1239	        'sv': 'Swedish',
1240	        'no': 'Norwegian'
1241	    };
1242	    
1243	    return languageMap[code] || code;
1244	}
1245	
1246	
1247	// --- Directory Browser Functions ---
1248	// ... (Directory browser functions remain unchanged) ...
1249	function openDirectoryBrowser(path = '') {
1250	    const directoryModal = document.getElementById('directory-modal');
1251	    if(directoryModal) directoryModal.style.display = 'block';
1252	    loadDirectories(path);
1253	}
1254	
1255	function loadDirectories(path) {
1256	    selectedDirectory = ''; // Reset selection when loading new path
1257	    const directoryList = document.getElementById('directory-list');
1258	    const currentPathDisplay = document.getElementById('current-path');
1259	
1260	    if (!directoryList || !currentPathDisplay) {
1261	        console.error("Directory browser elements not found.");
1262	        return;
1263	    }
1264	
1265	    fetch(`/api/browse_dirs?path=${encodeURIComponent(path)}`)
1266	        .then(response => {
1267	            if (!response.ok) {
1268	                // Try to parse error message from JSON response
1269	                return response.json()
1270	                    .then(data => {
1271	                        throw new Error(data.error || `Server error: ${response.status}`);
1272	                    })
1273	                    .catch(jsonError => {
1274	                        // If not JSON, throw with status
1275	                        throw new Error(`Error ${response.status}: ${response.statusText}`);
1276	                    });
1277	            }
1278	            
1279	            // Check for JSON content type
1280	            const contentType = response.headers.get('content-type');
1281	            if (!contentType || !contentType.includes('application/json')) {
1282	                throw new Error('Server returned non-JSON response (HTML instead of JSON)');
1283	            }
1284	            
1285	            return response.json();
1286	        })
1287	        .then(data => {
1288	            if (data.error) {
1289	                alert(data.error);
1290	                return;
1291	            }
1292	
1293	            currentPath = data.current_path;
1294	            currentPathDisplay.textContent = `Current: ${currentPath || '/'}`; // Show '/' for root
1295	
1296	            let html = '';
1297	            if (data.parent_path !== null && data.parent_path !== undefined) { // Check parent path exists
1298	                html += `<li class="directory-item up-level" data-path="${data.parent_path}">.. (Up)</li>`;
1299	            }
1300	
1301	            if (data.directories && data.directories.length > 0) {
1302	                data.directories.forEach(dir => {
1303	                    html += `<li class="directory-item" data-path="${dir.path}">${dir.name}/</li>`;
1304	                });
1305	            } else if (!data.parent_path && (!data.directories || data.directories.length === 0)) { // Only show if no parent and no dirs
1306	                 html += '<li class="empty-message">No subdirectories found</li>';
1307	            }
1308	
1309	
1310	            directoryList.innerHTML = html;
1311	
1312	            // Add click listeners
1313	            directoryList.querySelectorAll('.directory-item').forEach(item => {
1314	                item.addEventListener('click', function() {
1315	                    // Single click: Select visually and store path
1316	                    directoryList.querySelectorAll('.directory-item').forEach(i => i.classList.remove('selected'));
1317	                    this.classList.add('selected');
1318	                    selectedDirectory = this.dataset.path;
1319	                });
1320	                 item.addEventListener('dblclick', function() {
1321	                    // Double click: Navigate into directory
1322	                    const newPath = this.dataset.path;
1323	                    loadDirectories(newPath);
1324	                });
1325	            });
1326	        })
1327	        .catch(error => {
1328	            console.error('Error loading directories:', error);
1329	            directoryList.innerHTML = '<li class="error-message">Error loading directories</li>';
1330	        });
1331	}
1332	
1333	
1334	// --- Bulk Translation Functions ---
1335	// ... (Bulk translation functions remain unchanged) ...
1336	function startBulkTranslation(directory) {
1337	     const bulkTranslationStatus = document.getElementById('bulk-translation-status');
1338	     const bulkProgressBar = document.getElementById('bulk-progress-bar');
1339	     const bulkProgressText = document.getElementById('bulk-progress-text');
1340	     const bulkStatusMessage = document.getElementById('bulk-status-message');
1341	     const bulkDownloadLink = document.getElementById('bulk-download-link');
1342	     const downloadZipLink = document.getElementById('download-zip-link');
1343	
1344	
1345	    if (!directory) {
1346	        alert('No directory selected.');
1347	        return;
1348	    }
1349	     if (!bulkTranslationStatus || !bulkProgressBar || !bulkProgressText || !bulkStatusMessage || !bulkDownloadLink || !downloadZipLink) {
1350	        console.error("Bulk translation status elements not found.");
1351	        return;
1352	    }
1353	
1354	
1355	    bulkTranslationStatus.style.display = 'block';
1356	    bulkProgressBar.style.width = '0%';
1357	    bulkProgressText.textContent = '0%';
1358	    bulkStatusMessage.textContent = 'Starting bulk translation scan...';
1359	    bulkDownloadLink.style.display = 'none';
1360	
1361	    fetch('/api/start-scan', {
1362	        method: 'POST',
1363	        headers: { 'Content-Type': 'application/json' },
1364	        body: JSON.stringify({ path: directory })
1365	    })
1366	    .then(response => response.json())
1367	    .then(data => {
1368	        if (data.ok) {
1369	            bulkStatusMessage.textContent = 'Scan started. Monitoring progress...';
1370	            if (bulkProgressInterval) clearInterval(bulkProgressInterval);
1371	            bulkProgressInterval = setInterval(checkBulkProgress, 2000); // Check every 2 seconds
1372	        } else {
1373	            bulkStatusMessage.textContent = `Error: ${data.error || 'Failed to start bulk translation'}`;
1374	        }
1375	    })
1376	    .catch(error => {
1377	        console.error('Error starting bulk translation:', error);
1378	        bulkStatusMessage.textContent = 'Network error starting bulk translation.';
1379	    });
1380	}
1381	
1382	function checkBulkProgress() {
1383	     const bulkTranslationStatus = document.getElementById('bulk-translation-status');
1384	     const bulkProgressBar = document.getElementById('bulk-progress-bar');
1385	     const bulkProgressText = document.getElementById('bulk-progress-text');
1386	     const bulkStatusMessage = document.getElementById('bulk-status-message');
1387	     const bulkDownloadLink = document.getElementById('bulk-download-link');
1388	     const downloadZipLink = document.getElementById('download-zip-link');
1389	
1390	     if (!bulkTranslationStatus || !bulkProgressBar || !bulkProgressText || !bulkStatusMessage || !bulkDownloadLink || !downloadZipLink) {
1391	        console.error("Bulk translation status elements not found during progress check.");
1392	        if (bulkProgressInterval) clearInterval(bulkProgressInterval); // Stop polling if elements are gone
1393	        return;
1394	    }
1395	
1396	    fetch('/api/progress')
1397	        .then(response => response.json())
1398	        .then(data => {
1399	            console.log("Bulk progress check data:", data);
1400	            bulkStatusMessage.textContent = data.message || 'Processing...';
1401	
1402	            if (data.total_files > 0) {
1403	                const progress = Math.round((data.done_files / data.total_files) * 100);
1404	                bulkProgressBar.style.width = `${progress}%`;
1405	                bulkProgressText.textContent = `${progress}%`;
1406	            } else {
1407	                 bulkProgressBar.style.width = `0%`; // Reset if no total files yet
1408	                 bulkProgressText.textContent = `0%`;
1409	            }
1410	
1411	            // Force update of live translation status display if there's line-by-line data
1412	            if (data.current && data.current.original && data.current.line_number) {
1413	                // Set a flag to indicate bulk translation is active
1414	                window.bulkTranslationActive = true;
1415	                
1416	                // Force update of the live status display to show line-by-line progress
1417	                const liveStatusDisplay = document.getElementById('live-status-display');
1418	                if (liveStatusDisplay && liveStatusDisplay.innerHTML.includes('Waiting for translation to start')) {
1419	                    // If the display shows the waiting message but we have active translation data,
1420	                    // force an immediate update of the live status display
1421	                    updateLiveStatusDisplay();
1422	                }
1423	            }
1424	
1425	            if (data.status === 'completed' || data.status === 'failed') {
1426	                if (bulkProgressInterval) clearInterval(bulkProgressInterval);
1427	                window.bulkTranslationActive = false;
1428	
1429	                if (data.status === 'completed') {
1430	                     bulkProgressBar.style.width = '100%';
1431	                     bulkProgressText.textContent = '100%';
1432	                     if (data.zip_path) {
1433	                        downloadZipLink.href = `/download-zip?temp=${encodeURIComponent(data.zip_path)}`;
1434	                        bulkDownloadLink.style.display = 'block';
1435	                    }
1436	                    loadSubtitleArchive(); // Refresh archive
1437	                } else {
1438	                    // Failed state already covered by message update
1439	                     bulkStatusMessage.textContent = `Error: ${data.message || 'Bulk translation failed'}`;
1440	                }
1441	            }
1442	        })
1443	        .catch(error => {
1444	            console.error('Error checking bulk progress:', error);
1445	            // Optionally update status message on error
1446	            // bulkStatusMessage.textContent = 'Error checking progress.';
1447	            // Consider stopping polling after multiple errors?
1448	        });
1449	}
1450	
1451	// --- File Browser Functions ---
1452	
1453	// Show inline file browser
1454	function showInlineFileBrowser() {
1455	    debug("In showInlineFileBrowser()");
1456	    const browser = document.getElementById('inline-file-browser');
1457	    if (!browser) {
1458	        console.error("Inline file browser element not found");
1459	        return;
1460	    }
1461	    
1462	    browser.classList.add('active');
1463	    browser.style.display = 'block'; // Override the inline style
1464	    browser.style.zIndex = '100'; // Ensure it appears above other content
1465	    browser.style.opacity = '1'; // Make sure it's fully visible
1466	    
1467	    const toggleBtn = document.getElementById('toggle-browser-btn');
1468	    if (toggleBtn) {
1469	        toggleBtn.style.display = 'block'; // Make toggle visible
1470	        toggleBtn.textContent = 'üîΩ';
1471	        toggleBtn.title = 'Hide file browser';
1472	    }
1473	    
1474	    browserVisible = true;
1475	    localStorage.setItem('inlineFileBrowserVisible', 'true');
1476	    debug("Inline file browser shown");
1477	}
1478	
1479	// Hide inline file browser
1480	function hideInlineFileBrowser() {
1481	    debug("In hideInlineFileBrowser()");
1482	    const browser = document.getElementById('inline-file-browser');
1483	    if (!browser) {
1484	        console.error("Inline file browser element not found");
1485	        return;
1486	    }
1487	    
1488	    browser.classList.remove('active');
1489	    browser.style.display = 'none'; // Override the inline style
1490	    
1491	    const toggleBtn = document.getElementById('toggle-browser-btn');
1492	    if (toggleBtn) {
1493	        toggleBtn.textContent = 'üîç';
1494	        toggleBtn.title = 'Show file browser';
1495	    }
1496	    
1497	    browserVisible = false;
1498	    localStorage.setItem('inlineFileBrowserVisible', 'false');
1499	    debug("Inline file browser hidden");
1500	}
1501	
1502	// Browse directory - inline version
1503	function browseInlineDirectory(path) {
1504	    debug(`In browseInlineDirectory(), path: ${path}`);
1505	    const dirList = document.getElementById('inline-directory-list');
1506	    if (!dirList) {
1507	        console.error("Directory list element not found");
1508	        return;
1509	    }
1510	
1511	    dirList.innerHTML = '<li class="loading">Loading directories...</li>';
1512	    
1513	    // Update current path display
1514	    const pathDisplay = document.getElementById('current-path-display');
1515	    if (pathDisplay) {
1516	        pathDisplay.textContent = path || 'Root Directory';
1517	    }
1518	    
1519	    // Save the current path to localStorage
1520	    if (path) {
1521	        localStorage.setItem('lastBrowsedPath', path);
1522	    }
1523	    
1524	    // Fetch directories from the server
1525	    debug(`Fetching directories from: /api/browse_dirs?path=${encodeURIComponent(path)}`);
1526	    fetch(`/api/browse_dirs?path=${encodeURIComponent(path)}`)
1527	        .then(response => {
1528	            if (!response.ok) {
1529	                // Try to parse error message from JSON response
1530	                return response.json()
1531	                    .then(data => {
1532	                        throw new Error(data.error || `Server error: ${response.status}`);
1533	                    })
1534	                    .catch(jsonError => {
1535	                        // If not JSON, throw with status
1536	                        throw new Error(`Error ${response.status}: ${response.statusText}`);
1537	                    });
1538	            }
1539	            
1540	            // Check for JSON content type
1541	            const contentType = response.headers.get('content-type');
1542	            if (!contentType || !contentType.includes('application/json')) {
1543	                throw new Error('Server returned non-JSON response (HTML instead of JSON)');
1544	            }
1545	            
1546	            return response.json();
1547	        })
1548	        .then(data => {
1549	            debug("Directory data received:", data);
1550	            // Clear existing list
1551	            dirList.innerHTML = '';
1552	            
1553	            // Get parent path from API response
1554	            const parentPath = data.parent_path || '';
1555	            const currentPath = data.current_path || path || '';
1556	            
1557	            // Add parent directory option if not at root
1558	            if (parentPath && parentPath !== currentPath) {
1559	                const parentItem = document.createElement('li');
1560	                parentItem.className = 'directory-item parent';
1561	                parentItem.innerHTML = '<span class="dir-icon">üìÅ</span> <span class="dir-name">..</span>';
1562	                parentItem.addEventListener('click', function() {
1563	                    browseInlineDirectory(parentPath);
1564	                });
1565	                dirList.appendChild(parentItem);
1566	            }
1567	            
1568	            // Process the directories array from the API response
1569	            const directories = data.directories || [];
1570	            if (directories.length > 0) {
1571	                directories.forEach(dir => {
1572	                    const listItem = document.createElement('li');
1573	                    listItem.className = 'directory-item';
1574	                    
1575	                    // Create icon and name elements
1576	                    const icon = document.createElement('span');
1577	                    icon.className = 'dir-icon';
1578	                    icon.textContent = 'üìÅ';
1579	                    
1580	                    const name = document.createElement('span');
1581	                    name.className = 'dir-name';
1582	                    name.textContent = dir.name;
1583	                    
1584	                    // Add to list item
1585	                    listItem.appendChild(icon);
1586	                    listItem.appendChild(name);
1587	                    
1588	                    // Add click handler for directories
1589	                    listItem.addEventListener('click', function() {
1590	                        browseInlineDirectory(dir.path);
1591	                    });
1592	                    
1593	                    dirList.appendChild(listItem);
1594	                });
1595	                
1596	                // Special option to select the current directory
1597	                const selectCurrentDirItem = document.createElement('li');
1598	                selectCurrentDirItem.className = 'directory-item select-current';
1599	                selectCurrentDirItem.innerHTML = '<span class="dir-icon">‚úì</span> <span class="dir-name">Select this directory</span>';
1600	                selectCurrentDirItem.addEventListener('click', function() {
1601	                    selectedDirectory = currentPath;
1602	                    
1603	                    // Update the display with the selected directory
1604	                    const pathDisplay = document.getElementById('current-path-display');
1605	                    if (pathDisplay) {
1606	                        pathDisplay.innerHTML = `<strong>Selected:</strong> ${selectedDirectory}`;
1607	                    }
1608	                    
1609	                    localStorage.setItem('selectedDirectory', selectedDirectory);
1610	                });
1611	                dirList.appendChild(selectCurrentDirItem);
1612	            } else {
1613	                const emptyItem = document.createElement('li');
1614	                emptyItem.className = 'empty-message';
1615	                emptyItem.textContent = 'No directories found';
1616	                dirList.appendChild(emptyItem);
1617	            }
1618	            
1619	            // Update the selected directory
1620	            selectedDirectory = currentPath;
1621	            localStorage.setItem('selectedDirectory', selectedDirectory);
1622	        })
1623	        .catch(error => {
1624	            console.error('Error browsing directories:', error);
1625	            dirList.innerHTML = `<li class="error-message">${error.message}</li>`;
1626	        });
1627	}
1628	
1629	// Start bulk translation process
1630	function startBulkTranslation(directoryPath) {
1631	    console.log(`Starting bulk translation for directory: ${directoryPath}`);
1632	    
1633	    // Show the bulk translation status
1634	    const bulkStatus = document.getElementById('bulk-translation-status');
1635	    if (bulkStatus) {
1636	        bulkStatus.style.display = 'block';
1637	    }
1638	    
1639	    // Update UI
1640	    const statusMessage = document.getElementById('bulk-status-message');
1641	    const progressBar = document.getElementById('bulk-progress-bar');
1642	    const progressText = document.getElementById('bulk-progress-text');
1643	    const downloadLink = document.getElementById('bulk-download-link');
1644	    
1645	    if (statusMessage) {
1646	        statusMessage.textContent = `Starting bulk translation for ${directoryPath}...`;
1647	    }
1648	    if (progressBar) {
1649	        progressBar.style.width = '0%';
1650	    }
1651	    if (progressText) {
1652	        progressText.textContent = '0%';
1653	    }
1654	    if (downloadLink) {
1655	        downloadLink.style.display = 'none';
1656	    }
1657	    
1658	    // Call the API to start the scan
1659	    fetch('/api/start-scan', {
1660	        method: 'POST',
1661	        headers: {
1662	            'Content-Type': 'application/json'
1663	        },
1664	        body: JSON.stringify({ path: directoryPath })
1665	    })
1666	    .then(response => {
1667	        if (!response.ok) {
1668	            return response.json().then(data => {
1669	                throw new Error(data.error || 'Failed to start bulk translation');
1670	            });
1671	        }
1672	        return response.json();
1673	    })
1674	    .then(data => {
1675	        if (data.ok) {
1676	            // Start polling for progress updates
1677	            startProgressPolling();
1678	        } else {
1679	            throw new Error(data.error || 'Unknown error starting translation');
1680	        }
1681	    })
1682	    .catch(error => {
1683	        console.error('Error starting bulk translation:', error);
1684	        if (statusMessage) {
1685	            statusMessage.textContent = `Error: ${error.message}`;
1686	        }
1687	        if (progressBar) {
1688	            progressBar.style.width = '0%';
1689	        }
1690	    });
1691	}
1692	
1693	// Poll for translation progress
1694	let progressInterval = null;
1695	function startProgressPolling() {
1696	    // Clear any existing interval
1697	    if (progressInterval) {
1698	        clearInterval(progressInterval);
1699	    }
1700	    
1701	    // Poll every 2 seconds
1702	    progressInterval = setInterval(updateBulkProgress, 2000);
1703	    
1704	    // Initial update
1705	    updateBulkProgress();
1706	}
1707	
1708	// Update the bulk translation progress
1709	function updateBulkProgress() {
1710	    fetch('/api/progress')
1711	        .then(response => response.json())
1712	        .then(data => {
1713	            // Update status message
1714	            const statusMessage = document.getElementById('bulk-status-message');
1715	            const progressBar = document.getElementById('bulk-progress-bar');
1716	            const progressText = document.getElementById('bulk-progress-text');
1717	            const downloadLink = document.getElementById('bulk-download-link');
1718	            const downloadZipLink = document.getElementById('download-zip-link');
1719	            
1720	            if (statusMessage) {
1721	                statusMessage.textContent = data.message || 'Processing...';
1722	            }
1723	            
1724	            // Calculate and update progress bar
1725	            let progressPercent = 0;
1726	            if (data.total_files > 0) {
1727	                progressPercent = Math.round((data.done_files / data.total_files) * 100);
1728	            }
1729	            
1730	            if (progressBar) {
1731	                progressBar.style.width = `${progressPercent}%`;
1732	            }
1733	            if (progressText) {
1734	                progressText.textContent = `${progressPercent}%`;
1735	            }
1736	            
1737	            // Check if the process is complete
1738	            if (data.status === 'completed') {
1739	                clearInterval(progressInterval);
1740	                
1741	                // Show download link if available
1742	                if (data.zip_path && downloadLink && downloadZipLink) {
1743	                    downloadZipLink.href = `/download-zip?temp=${encodeURIComponent(data.zip_path)}`;
1744	                    downloadLink.style.display = 'block';
1745	                }
1746	            }
1747	            
1748	            // Check if the process failed
1749	            if (data.status === 'failed') {
1750	                clearInterval(progressInterval);
1751	                if (statusMessage) {
1752	                    statusMessage.textContent = `Error: ${data.message}`;
1753	                }
1754	            }
1755	        })
1756	        .catch(error => {
1757	            console.error('Error updating progress:', error);
1758	        });
1759	}
1760	
1761	// Function to check for active translations when page loads
1762	function checkForActiveTranslations() {
1763	    console.log("Checking for active translations...");
1764	    
1765	    // Fetch the current progress state from the server
1766	    fetch('/api/progress')
1767	        .then(response => response.json())
1768	        .then(data => {
1769	            console.log("Translation status check:", data);
1770	            
1771	            // Check if there's an active translation running
1772	            if (data.status === 'scanning' || data.status === 'processing' || data.status === 'translating') {
1773	                console.log("Active translation found:", data.status);
1774	                isTranslationActive = true;
1775	                
1776	                // Show the status container
1777	                const statusContainer = document.getElementById('status-container');
1778	                if (statusContainer) {
1779	                    statusContainer.style.display = 'block';
1780	                }
1781	                
1782	                // If it's a bulk translation, show bulk translation status
1783	                if (data.mode === 'bulk') {
1784	                    console.log("Active bulk translation found");
1785	                    const bulkStatus = document.getElementById('bulk-translation-status');
1786	                    if (bulkStatus) {
1787	                        bulkStatus.style.display = 'block';
1788	                    }
1789	                    
1790	                    // Start progress polling
1791	                    if (bulkProgressInterval) clearInterval(bulkProgressInterval);
1792	                    bulkProgressInterval = setInterval(checkBulkProgress, 2000);
1793	                }
1794	                
1795	                // Optionally display a message that we've reconnected to an active translation
1796	                const statusMessage = document.getElementById('status-message');
1797	                if (statusMessage) {
1798	                    statusMessage.textContent = "Reconnected to active translation: " + (data.message || data.status);
1799	                }
1800	                
1801	                // For single file jobs, store the job ID if available
1802	                if (data.mode === 'single' && data.job_id) {
1803	                    currentJobId = data.job_id;
1804	                    // Start job polling with the recovered job ID
1805	                    console.log(`Reconnected to translation job ${currentJobId}`);
1806	                    pollJobStatus(currentJobId);
1807	                }
1808	            } else if (data.status === 'completed') {
1809	                // Handle completed translation that wasn't acknowledged
1810	                console.log("Found completed translation:", data);
1811	                
1812	                // Show the result container
1813	                const resultContainer = document.getElementById('result-container');
1814	                const resultMessage = document.getElementById('result-message');
1815	                
1816	                if (resultContainer) resultContainer.style.display = 'block';
1817	                if (resultMessage) resultMessage.innerHTML = `<p>Translation completed: ${data.message || 'Translation completed successfully!'}</p>`;
1818	                
1819	                // Show download link if zip file is available for bulk translations
1820	                if (data.mode === 'bulk' && data.zip_path) {
1821	                    const bulkDownloadLink = document.getElementById('bulk-download-link');
1822	                    const downloadZipLink = document.getElementById('download-zip-link');
1823	                    
1824	                    if (bulkDownloadLink && downloadZipLink) {
1825	                        downloadZipLink.href = `/download-zip?temp=${encodeURIComponent(data.zip_path)}`;
1826	                        bulkDownloadLink.style.display = 'block';
1827	                    }
1828	                }
1829	                
1830	                // Refresh the subtitle archive list
1831	                loadSubtitleArchive();
1832	            }
1833	        })
1834	        .catch(error => {
1835	            console.error("Error checking for active translations:", error);
1836	        });
1837	}
1838	
1839	// --- Special Meanings Section ---
1840	
1841	// Add event listener for the add meaning button
1842	document.addEventListener('DOMContentLoaded', function() {
1843	    const addMeaningBtn = document.getElementById('add-meaning-btn');
1844	    if (addMeaningBtn) {
1845	        addMeaningBtn.addEventListener('click', addSpecialMeaningRow);
1846	    }
1847	
1848	    // Setup remove buttons for existing rows
1849	    setupRemoveButtons();
1850	});
1851	
1852	// Function to add a new special meaning row
1853	function addSpecialMeaningRow() {
1854	    const container = document.getElementById('special-meanings-container');
1855	    
1856	    // Create new row
1857	    const newRow = document.createElement('div');
1858	    newRow.className = 'special-meaning-row';
1859	    
1860	    // Add input fields and remove button
1861	    newRow.innerHTML = `
1862	        <input type="text" class="word-input" placeholder="Word or phrase">
1863	        <input type="text" class="meaning-input" placeholder="Meaning/context">
1864	        <button type="button" class="remove-meaning-btn">√ó</button>
1865	    `;
1866	    
1867	    // Add the new row to the container
1868	    container.appendChild(newRow);
1869	    
1870	    // Setup the remove button for the new row
1871	    setupRemoveButtons();
1872	}
1873	
1874	// Function to set up all remove buttons
1875	function setupRemoveButtons() {
1876	    document.querySelectorAll('.remove-meaning-btn').forEach(button => {
1877	        // Remove existing event listeners to prevent duplicates
1878	        const newButton = button.cloneNode(true);
1879	        button.parentNode.replaceChild(newButton, button);
1880	        
1881	        // Add new event listener
1882	        newButton.addEventListener('click', function() {
1883	            const row = this.parentNode;
1884	            row.remove();
1885	        });
1886	    });
1887	}
1888	
1889	// Function to collect all special meanings as an array of objects
1890	function collectSpecialMeanings() {
1891	    const specialMeanings = [];
1892	    const rows = document.querySelectorAll('.special-meaning-row');
1893	    
1894	    rows.forEach(row => {
1895	        const wordInput = row.querySelector('.word-input');
1896	        const meaningInput = row.querySelector('.meaning-input');
1897	        
1898	        if (wordInput && meaningInput) {
1899	            const word = wordInput.value.trim();
1900	            const meaning = meaningInput.value.trim();
1901	            
1902	            if (word && meaning) {
1903	                specialMeanings.push({ word, meaning });
1904	            }
1905	        }
1906	    });
1907	    
1908	    console.log('Collected special meanings:', specialMeanings);
1909	    return specialMeanings;
1910	}
1911	
1912	// Function to load special meanings from the file when the page loads
1913	function loadSpecialMeaningsFromFile() {
1914	    console.log("Loading special meanings from file...");
1915	    
1916	    fetch('/api/special_meanings')
1917	        .then(response => response.json())
1918	        .then(data => {
1919	            if (data.success && data.meanings && data.meanings.length > 0) {
1920	                console.log(`Loaded ${data.meanings.length} special meanings from file:`, data.meanings);
1921	                
1922	                // Get the container element
1923	                const container = document.getElementById('special-meanings-container');
1924	                if (!container) {
1925	                    console.error("Special meanings container not found");
1926	                    return;
1927	                }
1928	                
1929	                // Clear existing rows
1930	                container.innerHTML = '';
1931	                
1932	                // Create a row for each meaning
1933	                data.meanings.forEach(meaning => {
1934	                    const row = document.createElement('div');
1935	                    row.className = 'special-meaning-row';
1936	                    
1937	                    row.innerHTML = `
1938	                        <input type="text" class="word-input" placeholder="Word or phrase" value="${escapeHtml(meaning.word)}">
1939	                        <input type="text" class="meaning-input" placeholder="Meaning/context" value="${escapeHtml(meaning.meaning)}">
1940	                        <button type="button" class="remove-meaning-btn">√ó</button>
1941	                    `;
1942	                    
1943	                    container.appendChild(row);
1944	                });
1945	                
1946	                // Set up the remove buttons for the newly created rows
1947	                setupRemoveButtons();
1948	                
1949	                // Add a save button if it doesn't exist
1950	                let saveBtn = document.getElementById('save-meanings-btn');
1951	                if (!saveBtn) {
1952	                    saveBtn = document.createElement('button');
1953	                    saveBtn.id = 'save-meanings-btn';
1954	                    saveBtn.className = 'primary';
1955	                    saveBtn.textContent = 'Save Meanings';
1956	                    saveBtn.addEventListener('click', saveSpecialMeanings);
1957	                    
1958	                    // Add it after the add meaning button
1959	                    const addBtn = document.getElementById('add-meaning-btn');
1960	                    if (addBtn && addBtn.parentNode) {
1961	                        addBtn.parentNode.insertBefore(saveBtn, addBtn.nextSibling);
1962	                    }
1963	                }
1964	            } else {
1965	                console.log("No special meanings found in file or error loading");
1966	            }
1967	        })
1968	        .catch(error => {
1969	            console.error("Error loading special meanings from file:", error);
1970	        });
1971	}
1972	
1973	// Function to save special meanings to the file
1974	function saveSpecialMeanings() {
1975	    const meanings = collectSpecialMeanings();
1976	    
1977	    fetch('/api/special_meanings', {
1978	        method: 'POST',
1979	        headers: {
1980	            'Content-Type': 'application/json'
1981	        },
1982	        body: JSON.stringify({ meanings: meanings })
1983	    })
1984	    .then(response => response.json())
1985	    .then(data => {
1986	        if (data.success) {
1987	            alert(`Saved ${meanings.length} special meanings to file`);
1988	        } else {
1989	            alert(`Error saving special meanings: ${data.message || 'Unknown error'}`);
1990	        }
1991	    })
1992	    .catch(error => {
1993	        console.error("Error saving special meanings:", error);
1994	        alert(`Error saving special meanings: ${error.message}`);
1995	    });
1996	}
1997	
1998	// Helper function to escape HTML to prevent XSS
1999	function escapeHtml(str) {
2000	    return str
2001	        .replace(/&/g, "&amp;")
2002	        .replace(/</g, "&lt;")
2003	        .replace(/>/g, "&gt;")
2004	        .replace(/"/g, "&quot;")
2005	        .replace(/'/g, "&#039;");
2006	}
2007	
2008	// --- Host File Browser Functions ---
2009	function browseHostFiles(path) {
2010	    console.log(`Browsing host files at path: ${path}`);
2011	    const hostFileList = document.getElementById('host-file-list');
2012	    
2013	    // Show loading indicator
2014	    if (hostFileList) {
2015	        hostFileList.innerHTML = '<li class="loading">Loading files...</li>';
2016	    }
2017	    
2018	    // Call the API to browse files
2019	    fetch(`/api/browse_files?path=${encodeURIComponent(path)}`)
2020	        .then(response => {
2021	            if (!response.ok) {
2022	                // Try to parse error message from JSON response
2023	                return response.json()
2024	                    .then(data => {
2025	                        throw new Error(data.error || `Server error: ${response.status}`);
2026	                    })
2027	                    .catch(jsonError => {
2028	                        // If not JSON, throw with status
2029	                        throw new Error(`Error ${response.status}: ${response.statusText}`);
2030	                    });
2031	            }
2032	            
2033	            // Check for JSON content type
2034	            const contentType = response.headers.get('content-type');
2035	            if (!contentType || !contentType.includes('application/json')) {
2036	                throw new Error('Server returned non-JSON response (HTML instead of JSON)');
2037	            }
2038	            
2039	            return response.json();
2040	        })
2041	        .then(data => {
2042	            console.log("Got file browser data:", data);
2043	            
2044	            // Clear the list
2045	            hostFileList.innerHTML = '';
2046	            
2047	            // Add parent directory option if not at root
2048	            if (data.parent_path) {
2049	                const parentItem = document.createElement('li');
2050	                parentItem.className = 'directory-item up-level';
2051	                parentItem.innerHTML = '<span class="dir-icon">üìÅ</span> <span class="dir-name">..</span>';
2052	                parentItem.dataset.path = data.parent_path;
2053	                hostFileList.appendChild(parentItem);
2054	            }
2055	            
2056	            // Add directories
2057	            if (data.directories && data.directories.length > 0) {
2058	                data.directories.forEach(dir => {
2059	                    const dirItem = document.createElement('li');
2060	                    dirItem.className = 'directory-item';
2061	                    dirItem.innerHTML = `<span class="dir-icon">üìÅ</span> <span class="dir-name">${dir.name}</span>`;
2062	                    dirItem.dataset.path = dir.path;
2063	                    hostFileList.appendChild(dirItem);
2064	                });
2065	            }
2066	            
2067	            // Add files
2068	            if (data.files && data.files.length > 0) {
2069	                data.files.forEach(file => {
2070	                    const fileItem = document.createElement('li');
2071	                    fileItem.className = 'file-item';
2072	                    fileItem.innerHTML = `<span class="file-icon">üìÑ</span> <span class="file-name">${file.name}</span>`;
2073	                    fileItem.dataset.path = file.path;
2074	                    hostFileList.appendChild(fileItem);
2075	                });
2076	            }
2077	            
2078	            // Show message if empty
2079	            if (!data.directories?.length && !data.files?.length) {
2080	                const emptyItem = document.createElement('li');
2081	                emptyItem.className = 'empty-message';
2082	                emptyItem.textContent = 'No subtitle files found in this directory';
2083	                hostFileList.appendChild(emptyItem);
2084	            }
2085	            
2086	            // Update current path display
2087	            const pathDisplay = document.getElementById('host-current-path');
2088	            if (pathDisplay) {
2089	                pathDisplay.textContent = data.current_path || 'Root';
2090	            }
2091	        })
2092	        .catch(error => {
2093	            console.error('Error browsing files:', error);
2094	            hostFileList.innerHTML = `<li class="error-message">${error.message}</li>`;
2095	        });
2096	}
2097	
2098	// Function to select a host file for translation
2099	function selectHostFile(filePath, fileName) {
2100	    console.log(`Selected host file: ${filePath}`);
2101	    
2102	    // Hide the file browser
2103	    const hostFileBrowser = document.getElementById('host-file-browser');
2104	    if (hostFileBrowser) {
2105	        hostFileBrowser.style.display = 'none';
2106	    }
2107	    
2108	    // Update the input field with the selected file path
2109	    const fileInput = document.getElementById('host-file-path');
2110	    if (fileInput) {
2111	        fileInput.value = filePath;
2112	    }
2113	    
2114	    // Update the selected file display
2115	    const selectedFileDisplay = document.getElementById('selected-host-file');
2116	    if (selectedFileDisplay) {
2117	        selectedFileDisplay.textContent = fileName || filePath.split('/').pop();
2118	        selectedFileDisplay.style.display = 'block';
2119	    }
2120	    
2121	    // If we have a form, update its action to use the host file
2122	    const form = document.getElementById('upload-form');
2123	    if (form) {
2124	        form.dataset.useHostFile = 'true';
2125	    }
2126	}

--- File: subs/translation_report.txt ---
   1	================================================================================
   2	SUBTITLE TRANSLATION REPORT
   3	Generated: 2025-04-18 18:34:41
   4	--------------------------------------------------------------------------------
   5	Source language: en
   6	Target language: da
   7	================================================================================
   8	
   9	TRANSLATION DETAILS
  10	--------------------------------------------------------------------------------
  11	Line 1:
  12	  Original: "- #BRACKET_OPEN#snoring#BRACKET_CLOSE# - #BRACKET_OPEN#crickets chirping#BRACKET_CLOSE#"
  13	  Google: "-#bracket_open#snorken#bracket_close# -#bracket_open#crickets chirping#bracket_close#"
  14	  Ollama: "- #BRACKET_OPEN#snorken#BRACKET_CLOSE# - #BRACKET_OPEN#cirkende cikader#BRACKET_CLOSE#"
  15	  First pass: "- [snorken]
  16	- [cirkeder]"
  17	  Final: "- [snorken]
  18	- [cirkeder]"
  19	------------------------------------------------------------
  20	Line 2:
  21	  Original: "#BRACKET_OPEN#squeals#BRACKET_CLOSE#"
  22	  Google: "#Bracket_open#skrig#bracket_close#"
  23	  Ollama: "#BRACKET_OPEN#skrig#BRACKET_CLOSE#"
  24	  First pass: "[hvinen]"
  25	  Final: "[hvinen]"
  26	------------------------------------------------------------
  27	Line 3:
  28	  Original: "- #BRACKET_OPEN#grunts#BRACKET_CLOSE# - #BRACKET_OPEN#squeals#BRACKET_CLOSE#"
  29	  Google: "-#bracket_open#grynt#bracket_close# -#bracket_open#squeals#bracket_close#"
  30	  Ollama: "- #BRACKET_OPEN#st√∏n#BRACKET_CLOSE# - #BRACKET_OPEN#hvin#BRACKET_CLOSE#"
  31	  First pass: "- [st√∏n]
  32	- [hvinen]"
  33	  Final: "- [st√∏n]
  34	- [hvinen]"
  35	------------------------------------------------------------
  36	Line 4:
  37	  Original: "#BRACKET_OPEN#snorts#BRACKET_CLOSE#"
  38	  Google: "#Bracket_open#snorts#bracket_close#"
  39	  Ollama: "#BRACKET_OPEN#snorts#BRACKET_CLOSE#"
  40	  First pass: "[sn√∏ft]"
  41	  Final: "[sn√∏ft]"
  42	------------------------------------------------------------
  43	Line 5:
  44	  Original: "which is why I, Kipo Oak, am inviting you..."
  45	  Google: "Derfor er jeg, Kipo Oak, jeg inviterer dig ..."
  46	  Ollama: "hvilket er grunden til, at jeg, Kipo Oak, inviterer dig..."
  47	  First pass: "Hvilket er grunden til, at jeg, Kipo Oak,
  48	inviterer jer til. .."
  49	  Critic: "Hvilket er grunden til, at jeg, Kipo Oak, inviterer jer til. .." (CHANGED)
  50	  Final: "Hvilket er grunden til, at jeg, Kipo Oak, inviterer jer til. .."
  51	------------------------------------------------------------
  52	Line 6:
  53	  Original: "to Prahm."
  54	  Google: "til Prahm."
  55	  Ollama: "til Prahm."
  56	  First pass: "Til Prahm."
  57	  Final: "Til Prahm."
  58	------------------------------------------------------------
  59	Line 7:
  60	  Original: "Huh, prom? Like a dance?"
  61	  Google: "Huh, prom? Ligesom en dans?"
  62	  Ollama: "Hmm, prom? Som en fest?"
  63	  First pass: "Hvad, prom? Som i en dans?"
  64	  Critic: "Hvad, prom? Som i en fest?" (CHANGED)
  65	  Final: "Hvad, prom? Som i en fest?"
  66	------------------------------------------------------------
  67	Line 8:
  68	  Original: "No, Prahm, like, P-R-A-H-M."
  69	  Google: "Nej, Prahm, ligesom P-R-A-H-M."
  70	  Ollama: "Nej, Prahm, som i P-R-A-H-M."
  71	  First pass: "Nej, Prahm, som i P-R-A-H-M."
  72	  Final: "Nej, Prahm, som i P-R-A-H-M."
  73	------------------------------------------------------------
  74	Line 9:
  75	  Original: "A Party Reconciling All Humans and Mutes."
  76	  Google: "En fest, der forsoner alle mennesker og mutes."
  77	  Ollama: "En fest der forsoner alle mennesker og stumme."
  78	  First pass: "En fest, der forsoner alle mennesker og mutanter."
  79	  Final: "En fest, der forsoner alle mennesker og mutanter."
  80	------------------------------------------------------------
  81	Line 10:
  82	  Original: "But also, yes. There will be dancing."
  83	  Google: "Men ogs√•, ja. Der vil v√¶re dans."
  84	  Ollama: "Men ogs√•, ja. Der bliver dans."
  85	  First pass: "Men ogs√•, ja. Der vil v√¶re dans."
  86	  Final: "Men ogs√•, ja. Der vil v√¶re dans."
  87	------------------------------------------------------------
  88	Line 11:
  89	  Original: "Yes!"
  90	  Google: "Ja!"
  91	  Ollama: "Ja!"
  92	  First pass: "Ja!"
  93	  Final: "Ja!"
  94	------------------------------------------------------------
  95	Line 12:
  96	  Original: "If you could hear the Timbercats shred on a banjo,"
  97	  Google: "Hvis du kunne h√∏re Timbercats makulere p√• en banjo,"
  98	  Ollama: "Hvis du kunne h√∏re Timbercats spille vildt p√• en banjo,"
  99	  First pass: "Hvis du kunne h√∏re Timbercats spille p√• banjo,"
 100	  Final: "Hvis du kunne h√∏re Timbercats spille p√• banjo,"
 101	------------------------------------------------------------
 102	Line 13:
 103	  Original: "and if they could taste one of Mrs. Graham's cakes,"
 104	  Google: "Og hvis de kunne smage en af ‚Äã‚Äãfru Grahams kager,"
 105	  Ollama: "Og hvis de kunne smage bare √©n af fru Grahams kager,"
 106	  First pass: "Og hvis de kunne smage
 107	√©n af fru Grahams kager,"
 108	  Critic: "Og hvis de kunne smage √©n af fru Grahams kager," (CHANGED)
 109	  Final: "Og hvis de kunne smage √©n af fru Grahams kager,"
 110	------------------------------------------------------------
 111	Line 14:
 112	  Original: "there's no way you'd hate each other."
 113	  Google: "Der er ingen m√•de, du hader hinanden p√•."
 114	  Ollama: "Der er ingen m√•de, I ville hade hinanden p√•."
 115	  First pass: "Der er ingen m√•de, I ville hade hinanden p√•."
 116	  Final: "Der er ingen m√•de, I ville hade hinanden p√•."
 117	------------------------------------------------------------
 118	Line 15:
 119	  Original: "If you come to Prahm, you'll see that you have more in common than you think."
 120	  Google: "Hvis du kommer til Prahm, ser du, at du har mere til f√¶lles, end du tror."
 121	  Ollama: "Hvis du kommer til Prahm, vil du opdage, at I har mere til f√¶lles, end du tror."
 122	  First pass: "Hvis du kommer til Prahm, vil du se, at I har mere til f√¶lles, end I tror."
 123	  Final: "Hvis du kommer til Prahm, vil du se, at I har mere til f√¶lles, end I tror."
 124	------------------------------------------------------------
 125	Line 16:
 126	  Original: "#BRACKET_OPEN#Emilia#BRACKET_CLOSE# This is clearly a trap!"
 127	  Google: "#Bracket_open#emilia#bracket_close#dette er helt klart en f√¶lde!"
 128	  Ollama: "#BRACKET_OPEN#Emilia#BRACKET_CLOSE# Det er tydeligvis en f√¶lde!"
 129	  First pass: "[Emilia]
 130	Det er en f√¶lde!"
 131	  Final: "[Emilia]
 132	Det er en f√¶lde!"
 133	------------------------------------------------------------
 134	Line 17:
 135	  Original: "Who throws a party in the middle of a war?"
 136	  Google: "Hvem kaster en fest midt i en krig?"
 137	  Ollama: "Hvem holder fest midt under en krig?"
 138	  First pass: "Hvem holder fest midt under en krig?"
 139	  Final: "Hvem holder fest midt under en krig?"
 140	------------------------------------------------------------
 141	Line 18:
 142	  Original: "#BRACKET_OPEN#everyone#BRACKET_CLOSE# Kipo."
 143	  Google: "#Bracket_open#alle#bracket_close#kipo."
 144	  Ollama: "#BRACKET_OPEN#alle#BRACKET_CLOSE# Kipo."
 145	  First pass: "[alle]
 146	Kipo."
 147	  Critic: "[alle] Kipo." (CHANGED)
 148	  Final: "[alle] Kipo."
 149	------------------------------------------------------------
 150	Line 19:
 151	  Original: "#BRACKET_OPEN#snorts#BRACKET_CLOSE#"
 152	  Google: "#Bracket_open#snorts#bracket_close#"
 153	  Ollama: "#BRACKET_OPEN#snorts#BRACKET_CLOSE#"
 154	  First pass: "[fnyser]"
 155	  Final: "[fnyser]"
 156	------------------------------------------------------------
 157	Line 20:
 158	  Original: "So, what do you say?"
 159	  Google: "S√• hvad siger du?"
 160	  Ollama: "S√•, hvad siger du?"
 161	  First pass: "S√•, hvad siger du?"
 162	  Final: "S√•, hvad siger du?"
 163	------------------------------------------------------------
 164	Line 21:
 165	  Original: "Yes, yes, a thousand times yes!"
 166	  Google: "Ja, ja, tusind gange ja!"
 167	  Ollama: "Ja, ja, tusind gange ja!"
 168	  First pass: "Ja, ja, tusind gange ja!"
 169	  Final: "Ja, ja, tusind gange ja!"
 170	------------------------------------------------------------
 171	Line 22:
 172	  Original: "We're not war people, we're burrow people."
 173	  Google: "Vi er ikke krigsfolk, vi griber folk."
 174	  Ollama: "Vi er ikke et krigsfolk, vi er et folk der graver huler."
 175	  First pass: "Vi er ikke et krigsfolk, vi er et hulefolk."
 176	  Final: "Vi er ikke et krigsfolk, vi er et hulefolk."
 177	------------------------------------------------------------
 178	Line 23:
 179	  Original: "We like fun museums and giving each other compliments."
 180	  Google: "Vi kan godt lide sjove museer og give hinanden komplimenter."
 181	  Ollama: "Vi kan godt lide sjove museer og at give hinanden komplimenter."
 182	  First pass: "Vi kan godt lide sjove museer og at give hinanden komplimenter."
 183	  Final: "Vi kan godt lide sjove museer og at give hinanden komplimenter."
 184	------------------------------------------------------------
 185	Line 24:
 186	  Original: "- You're doing great, Doag! - #BRACKET_OPEN#Doag#BRACKET_CLOSE# Thank you."
 187	  Google: "- Du klarer dig godt, Doag! -#bracket_open#doag#bracket_close#tak."
 188	  Ollama: "- Du klarer dig godt, Doag! - #BRACKET_OPEN#Doag#BRACKET_CLOSE# Tak."
 189	  First pass: "- Du klarer dig godt, Doag!
 190	- Doag: Tak."
 191	  Critic: "- Du klarer dig godt, Doag! - Doag: Tak." (CHANGED)
 192	  Final: "- Du klarer dig godt, Doag! - Doag: Tak."
 193	------------------------------------------------------------
 194	Line 25:
 195	  Original: "Great! Meet us tomorrow at Skyscraper Ridge."
 196	  Google: "Stor! M√∏d os i morgen p√• Skycraper Ridge."
 197	  Ollama: "Fantastisk! M√∏d os i morgen ved Skyscraper Ridge."
 198	  First pass: "Fantastisk! M√∏d os i morgen ved Skyscraper Ridge."
 199	  Final: "Fantastisk! M√∏d os i morgen ved Skyscraper Ridge."
 200	------------------------------------------------------------
 201	Line 26:
 202	  Original: "- I'll be going. - #BRACKET_OPEN#crowd gasping#BRACKET_CLOSE#"
 203	  Google: "- Jeg g√•r. -#bracket_open#crowd gisping#bracket_close#"
 204	  Ollama: "- Jeg tager afsted. - #BRACKET_OPEN#publikum gisper#BRACKET_CLOSE#"
 205	  First pass: "- Jeg tager med.
 206	- [Forundede r√•b]"
 207	  Critic: "- Jeg tager med. - [Forundrede r√•b]" (CHANGED)
 208	  Final: "- Jeg tager med. - [Forundrede r√•b]"
 209	------------------------------------------------------------
 210	Line 27:
 211	  Original: "Really?"
 212	  Google: "Virkelig?"
 213	  Ollama: "Virkelig?"
 214	  First pass: "Virkelig?"
 215	  Final: "Virkelig?"
 216	------------------------------------------------------------
 217	Line 28:
 218	  Original: "Cool."
 219	  Google: "Afk√∏le."
 220	  Ollama: "Sejt."
 221	  First pass: "Cool."
 222	  Final: "Cool."
 223	------------------------------------------------------------
 224	Line 29:
 225	  Original: "#BRACKET_OPEN#people laughing#BRACKET_CLOSE#"
 226	  Google: "#Bracket_open#folk griner#bracket_close#"
 227	  Ollama: "#BRACKET_OPEN#folk der griner#BRACKET_CLOSE#"
 228	  First pass: "[folk ler]"
 229	  Final: "[folk ler]"
 230	------------------------------------------------------------
 231	Line 30:
 232	  Original: "#BRACKET_OPEN#laughing continues#BRACKET_CLOSE#"
 233	  Google: "#Bracket_open#griner forts√¶tter#bracket_close#"
 234	  Ollama: "#BRACKET_OPEN#latter forts√¶tter#BRACKET_CLOSE#"
 235	  First pass: "[latteren forts√¶tter]"
 236	  Final: "[latteren forts√¶tter]"
 237	------------------------------------------------------------
 238	Line 31:
 239	  Original: "#BRACKET_OPEN#gasps#BRACKET_CLOSE#"
 240	  Google: "#Bracket_open#gisps#bracket_close#"
 241	  Ollama: "#BRACKET_OPEN#hv√¶ser#BRACKET_CLOSE#"
 242	  First pass: "[ud√•nder]"
 243	  Critic: "[gisp]" (CHANGED)
 244	  Final: "[gisp]"
 245	------------------------------------------------------------
 246	Line 32:
 247	  Original: "I accept your invitation."
 248	  Google: "Jeg accepterer din invitation."
 249	  Ollama: "Jeg accepterer din invitation."
 250	  First pass: "Jeg accepterer jeres invitation."
 251	  Final: "Jeg accepterer jeres invitation."
 252	------------------------------------------------------------
 253	Line 33:
 254	  Original: "#BRACKET_OPEN#gasps#BRACKET_CLOSE#"
 255	  Google: "#Bracket_open#gisps#bracket_close#"
 256	  Ollama: "#√•nden i halsen#"
 257	  First pass: "[gasps]"
 258	  Final: "[gasps]"
 259	------------------------------------------------------------
 260	Line 34:
 261	  Original: "#BRACKET_OPEN#cooing#BRACKET_CLOSE#"
 262	  Google: "#Bracket_open#cooing#bracket_close#"
 263	  Ollama: "#BRACKET_OPEN#kvidren#BRACKET_CLOSE#"
 264	  First pass: "[kv√¶kker]"
 265	  Final: "[kv√¶kker]"
 266	------------------------------------------------------------
 267	Line 35:
 268	  Original: "#BRACKET_OPEN#intro theme playing#BRACKET_CLOSE#"
 269	  Google: "#Bracket_open#intro tema spiller#bracket_close#"
 270	  Ollama: "#BRACKET_OPEN#introtema spiller#BRACKET_CLOSE#"
 271	  First pass: "[Introtema afspilles]"
 272	  Final: "[Introtema afspilles]"
 273	------------------------------------------------------------
 274	Line 36:
 275	  Original: "#BRACKET_OPEN#grunting, panting#BRACKET_CLOSE#"
 276	  Google: "#Bracket_open#grynting, pusting#bracket_close#"
 277	  Ollama: "#BRACKET_OPEN#st√∏nnen, gispen#BRACKET_CLOSE#"
 278	  First pass: "[St√∏nnen, pusten]"
 279	  Final: "[St√∏nnen, pusten]"
 280	------------------------------------------------------------
 281	Line 37:
 282	  Original: "Gah! Feel the Zane!"
 283	  Google: "Gah! F√∏l zane!"
 284	  Ollama: "Gah! M√¶rk Zane!"
 285	  First pass: "Gah! M√¶rk Zane!"
 286	  Final: "Gah! M√¶rk Zane!"
 287	------------------------------------------------------------
 288	Line 38:
 289	  Original: "- All clear. - Zane, you don't have to do that anymore."
 290	  Google: "- Alt klart. - Zane, du beh√∏ver ikke at g√∏re det l√¶ngere."
 291	  Ollama: "- Alt klart. - Zane, du beh√∏ver ikke g√∏re det mere."
 292	  First pass: "- Alt er klart.
 293	- Zane, du beh√∏ver ikke g√∏re det mere."
 294	  Critic: "- Alt er klart. - Zane, du beh√∏ver ikke g√∏re det l√¶ngere." (CHANGED)
 295	  Final: "- Alt er klart. - Zane, du beh√∏ver ikke g√∏re det l√¶ngere."
 296	------------------------------------------------------------
 297	Line 39:
 298	  Original: "Right, because I'm on the side of the mutes, now."
 299	  Google: "Rigtigt, fordi jeg er p√• siden af ‚Äã‚Äãmutene nu."
 300	  Ollama: "Okay, fint, for jeg er p√• de tavses side, nu."
 301	  First pass: "Okay, fordi jeg er p√• de stummes side, nu."
 302	  Critic: "Okay, fordi jeg er p√• de stummes side nu." (CHANGED)
 303	  Final: "Okay, fordi jeg er p√• de stummes side nu."
 304	------------------------------------------------------------
 305	Line 40:
 306	  Original: "So, who's the enemy?"
 307	  Google: "S√• hvem er fjenden?"
 308	  Ollama: "S√• hvem er fjenden?"
 309	  First pass: "S√•, hvem er fjenden?"
 310	  Final: "S√•, hvem er fjenden?"
 311	------------------------------------------------------------
 312	Line 41:
 313	  Original: "There isn't one."
 314	  Google: "Der er ikke en."
 315	  Ollama: "Der er ingen."
 316	  First pass: "Der er ingen."
 317	  Final: "Der er ingen."
 318	------------------------------------------------------------
 319	Line 42:
 320	  Original: "Right. What if I like doing it?"
 321	  Google: "H√∏jre. Hvad hvis jeg kan lide at g√∏re det?"
 322	  Ollama: "Hvad s√•, hvis jeg faktisk kan lide det?"
 323	  First pass: "Okay. Hvad nu hvis jeg kan lide det?"
 324	  Final: "Okay. Hvad nu hvis jeg kan lide det?"
 325	------------------------------------------------------------
 326	Line 43:
 327	  Original: "Then follow your bliss, buddy."
 328	  Google: "F√∏lg derefter din Bliss, Buddy."
 329	  Ollama: "F√∏lg din lykke, makker."
 330	  First pass: "F√∏lg din lykke, makker."
 331	  Final: "F√∏lg din lykke, makker."
 332	------------------------------------------------------------
 333	Line 44:
 334	  Original: "Gah! I'm doing it!"
 335	  Google: "Gah! Jeg g√∏r det!"
 336	  Ollama: "Gah! Jeg g√∏r det!"
 337	  First pass: "Gah! Jeg g√∏r det!"
 338	  Final: "Gah! Jeg g√∏r det!"
 339	------------------------------------------------------------
 340	Line 45:
 341	  Original: "- Yeah, baby, do it! - #BRACKET_OPEN#grunting#BRACKET_CLOSE#"
 342	  Google: "- Ja, skat, g√∏r det! -#bracket_open#grynting#bracket_close#"
 343	  Ollama: "- Ja, skat, g√∏r det! - #BRACKET_OPEN#st√∏n#BRACKET_CLOSE#"
 344	  First pass: "- Ja, baby, g√∏r det! -
 345	[st√∏nnen]"
 346	  Critic: "- Ja, baby, g√∏r det! - [st√∏nnen]" (CHANGED)
 347	  Final: "- Ja, baby, g√∏r det! - [st√∏nnen]"
 348	------------------------------------------------------------
 349	Line 46:
 350	  Original: "- Hah! - Uhh!"
 351	  Google: "- hah! - uhh!"
 352	  Ollama: "- Ha! - √òh!"
 353	  First pass: "- Hah!
 354	- Uhh!"
 355	  Critic: "- Hah! - Uhh!" (CHANGED)
 356	  Final: "- Hah! - Uhh!"
 357	------------------------------------------------------------
 358	Line 47:
 359	  Original: "- Huh! - Gah!"
 360	  Google: "- Huh! - Gah!"
 361	  Ollama: "- √òh! - Av!"
 362	  First pass: "- Hmm!
 363	- Gah!"
 364	  Critic: "- Hmm! - Gah!" (CHANGED)
 365	  Final: "- Hmm! - Gah!"
 366	------------------------------------------------------------
 367	Line 48:
 368	  Original: "Ha!"
 369	  Google: "Ha!"
 370	  Ollama: "Ha!"
 371	  First pass: "Ha!"
 372	  Final: "Ha!"
 373	------------------------------------------------------------
 374	Line 49:
 375	  Original: "Something's not right."
 376	  Google: "Noget er ikke rigtigt."
 377	  Ollama: "Noget er galt."
 378	  First pass: "Der er noget galt."
 379	  Final: "Der er noget galt."
 380	------------------------------------------------------------
 381	Line 50:
 382	  Original: "Is it the walking? 'Cause I hate walking, too."
 383	  Google: "Er det g√•turen? Fordi jeg ogs√• hader at g√•."
 384	  Ollama: "Er det fordi du g√•r? For jeg hader ogs√• at g√•."
 385	  First pass: "Er det g√•turen? For jeg hader ogs√• at g√•."
 386	  Critic: "Er det g√•turen? For jeg kan heller ikke lide at g√•." (CHANGED)
 387	  Final: "Er det g√•turen? For jeg kan heller ikke lide at g√•."
 388	------------------------------------------------------------
 389	Line 51:
 390	  Original: "Why don't we skate everywhere? Think about that, hm?"
 391	  Google: "Hvorfor skater vi ikke overalt? T√¶nk over det, hm?"
 392	  Ollama: "Hvorfor skater vi ikke bare overalt? T√¶nk lige over det, hm?"
 393	  First pass: "Hvorfor skater vi ikke bare overalt? T√¶nk over det, hm?"
 394	  Final: "Hvorfor skater vi ikke bare overalt? T√¶nk over det, hm?"
 395	------------------------------------------------------------
 396	Line 52:
 397	  Original: "It's not that. I-it's Emilia."
 398	  Google: "Det er ikke det. Jeg-det er Emilia."
 399	  Ollama: "Det er ikke det. Det er‚Ä¶ Emilia."
 400	  First pass: "Det er ikke det. Jeg. .. det er Emilia."
 401	  Final: "Det er ikke det. Jeg. .. det er Emilia."
 402	------------------------------------------------------------
 403	Line 53:
 404	  Original: "She agreed to Prahm, then smiled."
 405	  Google: "Hun accepterede Prahm og smilede derefter."
 406	  Ollama: "Hun accepterede Prahm og smilede."
 407	  First pass: "Hun indvilligede sig i Prahm og smilede s√•."
 408	  Final: "Hun indvilligede sig i Prahm og smilede s√•."
 409	------------------------------------------------------------
 410	Line 54:
 411	  Original: "Something's up. I can feel it."
 412	  Google: "Noget er op. Jeg kan f√∏le det."
 413	  Ollama: "Noget er galt. Jeg kan m√¶rke det."
 414	  First pass: "Der er noget galt. Jeg kan m√¶rke det."
 415	  Final: "Der er noget galt. Jeg kan m√¶rke det."
 416	------------------------------------------------------------
 417	Line 55:
 418	  Original: "Even if you're right, I don't think she can do anything."
 419	  Google: "Selv hvis du har ret, tror jeg ikke, hun kan g√∏re noget."
 420	  Ollama: "Selv hvis du har ret, tror jeg ikke, hun kan g√∏re noget."
 421	  First pass: "Selv hvis du har ret, tror jeg ikke, hun kan g√∏re noget ved det."
 422	  Final: "Selv hvis du har ret, tror jeg ikke, hun kan g√∏re noget ved det."
 423	------------------------------------------------------------
 424	Line 56:
 425	  Original: "She knows her cure won't work on me, and she's lost her army."
 426	  Google: "Hun ved, at hendes kur ikke fungerer p√• mig, og hun har mistet sin h√¶r."
 427	  Ollama: "Hun ved, at hendes kur ikke vil virke p√• mig, og hun har mistet sin h√¶r."
 428	  First pass: "Hun ved, at hendes kur ikke vil virke p√• mig, og hun har mistet sin h√¶r."
 429	  Final: "Hun ved, at hendes kur ikke vil virke p√• mig, og hun har mistet sin h√¶r."
 430	------------------------------------------------------------
 431	Line 57:
 432	  Original: "It kinda feels like we won."
 433	  Google: "Det f√∏les som om vi vandt."
 434	  Ollama: "Det f√∏les lidt som om, vi vandt."
 435	  First pass: "Det f√∏les lidt som om, vi har vundet."
 436	  Final: "Det f√∏les lidt som om, vi har vundet."
 437	------------------------------------------------------------
 438	Line 58:
 439	  Original: "Well, half won."
 440	  Google: "N√•, halvt vandt."
 441	  Ollama: "N√•, halvdelen vandt."
 442	  First pass: "N√•ja, halvt vundet."
 443	  Final: "N√•ja, halvt vundet."
 444	------------------------------------------------------------
 445	Line 59:
 446	  Original: "We only have until tomorrow to convince all of the mutes in Las Vistas"
 447	  Google: "Vi har kun indtil i morgen for at overbevise alle mutene i las -udsigterne"
 448	  Ollama: "Vi har kun til i morgen til at overbevise alle de stumme i Las Vistas."
 449	  First pass: "Vi har kun til i morgen til at overbevise alle stumme i Las Vistas"
 450	  Critic: "Vi har kun til i morgen til at overbevise alle de stumme i Las Vistas" (CHANGED)
 451	  Final: "Vi har kun til i morgen til at overbevise alle de stumme i Las Vistas"
 452	------------------------------------------------------------
 453	Line 60:
 454	  Original: "to come to a party with the people who just attacked them."
 455	  Google: "At komme til en fest med de mennesker, der netop angreb dem."
 456	  Ollama: "At komme til en fest med de folk, der lige har angrebet dem."
 457	  First pass: "Til at komme til en fest med dem,
 458	der lige har angrebet dem."
 459	  Critic: "Til at komme til en fest med dem, der lige har angrebet dem." (CHANGED)
 460	  Final: "Til at komme til en fest med dem, der lige har angrebet dem."
 461	------------------------------------------------------------
 462	Line 61:
 463	  Original: "I'll help. I'm charismatic and people respect my strong jawline."
 464	  Google: "Jeg hj√¶lper. Jeg er karismatisk, og folk respekterer min st√¶rke k√¶be."
 465	  Ollama: "Jeg hj√¶lper. Jeg er karismatisk, og folk respekterer min markante k√¶belinje."
 466	  First pass: "Jeg hj√¶lper. Jeg er karismatisk, og folk respekterer min st√¶rke k√¶belinje."
 467	  Final: "Jeg hj√¶lper. Jeg er karismatisk, og folk respekterer min st√¶rke k√¶belinje."
 468	------------------------------------------------------------
 469	Line 62:
 470	  Original: "Um... that is true,"
 471	  Google: "Um ... det er sandt,"
 472	  Ollama: "√òh‚Ä¶ det er rigtigt."
 473	  First pass: "√òh. .. det er rigtigt,"
 474	  Critic: "√òh. .. det er rigtigt." (CHANGED)
 475	  Final: "√òh. .. det er rigtigt."
 476	------------------------------------------------------------
 477	Line 63:
 478	  Original: "but I think you, Doag, and everyone else from the boat"
 479	  Google: "Men jeg tror, ‚Äã‚Äãdu, Doag og alle andre fra b√•den"
 480	  Ollama: "men jeg tror, du, Doag, og alle andre fra b√•den"
 481	  First pass: "Men jeg tror, du, Doag,
 482	og alle andre fra b√•den"
 483	  Critic: "Men jeg tror, du, Doag, og alle andre fra b√•den" (CHANGED)
 484	  Final: "Men jeg tror, du, Doag, og alle andre fra b√•den"
 485	------------------------------------------------------------
 486	Line 64:
 487	  Original: "should just meet me after."
 488	  Google: "skulle bare m√∏de mig efter."
 489	  Ollama: "skulle bare m√∏de mig bagefter."
 490	  First pass: "B√∏r bare m√∏des med mig bagefter."
 491	  Critic: "B√∏r bare m√∏des med mig efterf√∏lgende." (CHANGED)
 492	  Final: "B√∏r bare m√∏des med mig efterf√∏lgende."
 493	------------------------------------------------------------
 494	Line 65:
 495	  Original: "They might be a teeny bit upset that‚Äî"
 496	  Google: "De er m√•ske en teeny smule ked af det‚Äî"
 497	  Ollama: "De er m√•ske en smule irriterede over, at‚Äî"
 498	  First pass: "De er m√•ske en smule irriterede over, at‚Äî"
 499	  Final: "De er m√•ske en smule irriterede over, at‚Äî"
 500	------------------------------------------------------------
 501	Line 66:
 502	  Original: "You didn't sink the boat?"
 503	  Google: "S√¶nkede du ikke b√•den?"
 504	  Ollama: "S√¶nkede du ikke b√•den?"
 505	  First pass: "Du sank ikke b√•den?"
 506	  Final: "Du sank ikke b√•den?"
 507	------------------------------------------------------------
 508	Line 67:
 509	  Original: "#BRACKET_OPEN#angry mumbling and shouting#BRACKET_CLOSE#"
 510	  Google: "#Bracket_open#vred mumling og r√•bende#bracket_close#"
 511	  Ollama: "#BRACKET_OPEN#vred mumlen og r√•ben#BRACKET_CLOSE#"
 512	  First pass: "[vred mumlen og r√•ben]"
 513	  Final: "[vred mumlen og r√•ben]"
 514	------------------------------------------------------------
 515	Line 68:
 516	  Original: "Are you really gonna just stand by and let this happen?"
 517	  Google: "Skal du virkelig st√• ved og lade dette ske?"
 518	  Ollama: "Skal du virkelig bare st√• og se p√•, at det sker?"
 519	  First pass: "St√•r du virkelig bare og ser p√•, at det sker?"
 520	  Final: "St√•r du virkelig bare og ser p√•, at det sker?"
 521	------------------------------------------------------------
 522	Line 69:
 523	  Original: "#BRACKET_OPEN#clears throat#BRACKET_CLOSE# Doctor, we can't just give up."
 524	  Google: "#Bracket_open#rydder hals#bracket_close#l√¶ge, vi kan ikke bare give op."
 525	  Ollama: "#BRACKET_OPEN#hoster#BRACKET_CLOSE# L√¶ge, vi kan ikke bare give op."
 526	  First pass: "[hoster sig] L√¶ge, vi kan ikke bare give op."
 527	  Final: "[hoster sig] L√¶ge, vi kan ikke bare give op."
 528	------------------------------------------------------------
 529	Line 70:
 530	  Original: "I don't give up."
 531	  Google: "Jeg giver ikke op."
 532	  Ollama: "Jeg giver ikke op."
 533	  First pass: "Jeg giver ikke op."
 534	  Final: "Jeg giver ikke op."
 535	------------------------------------------------------------
 536	Line 71:
 537	  Original: "#BRACKET_OPEN#roaring#BRACKET_CLOSE#"
 538	  Google: "#Bracket_open#br√∏lende#bracket_close#"
 539	  Ollama: "#BRACKET_OPEN#br√∏lende#BRACKET_CLOSE#"
 540	  First pass: "[br√∏l]"
 541	  Final: "[br√∏l]"
 542	------------------------------------------------------------
 543	Line 72:
 544	  Original: "#BRACKET_OPEN#gasps#BRACKET_CLOSE# I'll turn on the emitter!"
 545	  Google: "#Bracket_open#gisps#bracket_close#Jeg t√¶nder for emitteren!"
 546	  Ollama: "#BRACKET_OPEN#gisp#BRACKET_CLOSE# Jeg t√¶nder for senderen!"
 547	  First pass: "[gisp] Jeg t√¶nder for senderen!"
 548	  Final: "[gisp] Jeg t√¶nder for senderen!"
 549	------------------------------------------------------------
 550	Line 73:
 551	  Original: "No, Greta. Let it come."
 552	  Google: "Nej, Greta. Lad det komme."
 553	  Ollama: "Nej, Greta. Lad det komme."
 554	  First pass: "Nej, Greta. Lad det komme."
 555	  Final: "Nej, Greta. Lad det komme."
 556	------------------------------------------------------------
 557	Line 74:
 558	  Original: "#BRACKET_OPEN#Timbercat#BRACKET_CLOSE# So, instead of sinking the boat,"
 559	  Google: "#Bracket_open#Timbercat#bracket_close#s√• i stedet for at synke b√•den,"
 560	  Ollama: "#BRACKET_OPEN#Timbercat#BRACKET_CLOSE# S√• i stedet for at lade b√•den synke,"
 561	  First pass: "[Timbercat]
 562	S√• i stedet for at s√¶nke b√•den, inviterede du dem til en dans?"
 563	  Critic: "[Timbercat] S√• i stedet for at s√¶nke b√•den," (CHANGED)
 564	  Final: "[Timbercat] S√• i stedet for at s√¶nke b√•den,"
 565	------------------------------------------------------------
 566	Line 75:
 567	  Original: "you invited them to a dance?"
 568	  Google: "du inviterede dem til en dans?"
 569	  Ollama: "Inviterede du dem til at danse?"
 570	  First pass: "S√• inviterede du dem til en dans?"
 571	  Final: "S√• inviterede du dem til en dans?"
 572	------------------------------------------------------------
 573	Line 76:
 574	  Original: "- Who does that? - Kipo."
 575	  Google: "- Hvem g√∏r det? - Kipo."
 576	  Ollama: "- Hvem g√∏r det? - Kipo."
 577	  First pass: "- Hvem g√∏r det?
 578	- Kipo."
 579	  Critic: "- Hvem g√∏r det? - Kipo." (CHANGED)
 580	  Final: "- Hvem g√∏r det? - Kipo."
 581	------------------------------------------------------------
 582	Line 77:
 583	  Original: "Listen. Sinking the boat wasn't the answer."
 584	  Google: "Lytte. S√¶nkning af b√•den var ikke svaret."
 585	  Ollama: "Lyt. At s√¶nke b√•den var ikke l√∏sningen."
 586	  First pass: "Lyt. At s√¶nke b√•den var ikke l√∏sningen."
 587	  Final: "Lyt. At s√¶nke b√•den var ikke l√∏sningen."
 588	------------------------------------------------------------
 589	Line 78:
 590	  Original: "But Prahm won't bring our friends back from what the humans did to them."
 591	  Google: "Men Prahm bringer ikke vores venner tilbage fra, hvad mennesker gjorde mod dem."
 592	  Ollama: "Men Prahm kan ikke bringe vores venner tilbage fra det, menneskerne gjorde mod dem."
 593	  First pass: "Men Prahm kan ikke bringe vores venner tilbage fra det, menneskene gjorde mod dem."
 594	  Critic: "Men Prahm kan ikke bringe vores venner tilbage fra det, menneskene gjorde ved dem." (CHANGED)
 595	  Final: "Men Prahm kan ikke bringe vores venner tilbage fra det, menneskene gjorde ved dem."
 596	------------------------------------------------------------
 597	Line 79:
 598	  Original: "I tried to make BradLand, but in the end, it was more like SadLand."
 599	  Google: "Jeg pr√∏vede at lave Bradland, men til sidst var det mere som Sadland."
 600	  Ollama: "Jeg pr√∏vede at skabe Bradland, men det endte med at ligne mere Sadland."
 601	  First pass: "Jeg pr√∏vede at skabe BradLand, men i sidste ende var det mere som SadLand."
 602	  Final: "Jeg pr√∏vede at skabe BradLand, men i sidste ende var det mere som SadLand."
 603	------------------------------------------------------------
 604	Line 80:
 605	  Original: "- #BRACKET_OPEN#meows#BRACKET_CLOSE# - Aah!"
 606	  Google: "-#bracket_open#meows#bracket_close# - aah!"
 607	  Ollama: "- #BRACKET_OPEN#mjau#BRACKET_CLOSE# - √Öh!"
 608	  First pass: "- [mjaven]
 609	- √Öh!"
 610	  Critic: "- Mjav! - √Öh!" (CHANGED)
 611	  Final: "- Mjav! - √Öh!"
 612	------------------------------------------------------------
 613	Line 81:
 614	  Original: "- #BRACKET_OPEN#hissing#BRACKET_CLOSE# - #BRACKET_OPEN#Jamack#BRACKET_CLOSE# No, Yumyan!"
 615	  Google: "-#bracket_open#susing#bracket_close# -#bracket_open#jamack#bracket_close#nej, yumyan!"
 616	  Ollama: "- #BRACKET_OPEN#hv√¶sen#BRACKET_CLOSE# - #BRACKET_OPEN#Jamack#BRACKET_CLOSE# Nej, Yumyan!"
 617	  First pass: "- [hissing]
 618	- [Jamack] Nej, Yumyan!"
 619	  Final: "- [hissing]
 620	- [Jamack] Nej, Yumyan!"
 621	------------------------------------------------------------
 622	Line 82:
 623	  Original: "No‚ÄîYumyan, no! Bad kitty!"
 624	  Google: "Nej - Yumyan, nej! Bad Kitty!"
 625	  Ollama: "Nej ‚Äì Yumyan, nej! Slemme kat!"
 626	  First pass: "Nej‚ÄîYumyan, nej! Slemme kat!"
 627	  Final: "Nej‚ÄîYumyan, nej! Slemme kat!"
 628	------------------------------------------------------------
 629	Line 83:
 630	  Original: "I know we've lost friends. I understand why you want revenge."
 631	  Google: "Jeg ved, at vi har mistet venner. Jeg forst√•r, hvorfor du vil have h√¶vn."
 632	  Ollama: "Jeg ved, vi har mistet venner. Jeg forst√•r, hvorfor du vil have h√¶vn."
 633	  First pass: "Jeg ved, vi har mistet venner. Jeg forst√•r, hvorfor du vil have h√¶vn."
 634	  Final: "Jeg ved, vi har mistet venner. Jeg forst√•r, hvorfor du vil have h√¶vn."
 635	------------------------------------------------------------
 636	Line 84:
 637	  Original: "I'm asking a lot, but if you can forgive today,"
 638	  Google: "Jeg sp√∏rger meget, men hvis du kan tilgive i dag,"
 639	  Ollama: "Jeg beder om meget, men hvis du kan tilgive i dag,"
 640	  First pass: "Jeg beder om meget, men hvis du kan tilgive i dag,"
 641	  Final: "Jeg beder om meget, men hvis du kan tilgive i dag,"
 642	------------------------------------------------------------
 643	Line 85:
 644	  Original: "we can build a better tomorrow."
 645	  Google: "Vi kan bygge en bedre i morgen."
 646	  Ollama: "Vi kan skabe en bedre fremtid."
 647	  First pass: "S√• kan vi skabe en bedre fremtid."
 648	  Final: "S√• kan vi skabe en bedre fremtid."
 649	------------------------------------------------------------
 650	Line 86:
 651	  Original: "That's how we make sure this never happens again."
 652	  Google: "S√•dan s√∏rger vi for, at dette aldrig sker igen."
 653	  Ollama: "S√•dan sikrer vi, at det aldrig sker igen."
 654	  First pass: "Det er s√•dan, vi sikrer, at det aldrig sker igen."
 655	  Final: "Det er s√•dan, vi sikrer, at det aldrig sker igen."
 656	------------------------------------------------------------
 657	Line 87:
 658	  Original: "You can't forgive someone that's not sorry!"
 659	  Google: "Du kan ikke tilgive nogen, der ikke er ked af det!"
 660	  Ollama: "Du kan ikke tilgive nogen, der ikke er ked af det!"
 661	  First pass: "Man kan ikke tilgive nogen, der ikke er ked af det!"
 662	  Final: "Man kan ikke tilgive nogen, der ikke er ked af det!"
 663	------------------------------------------------------------
 664	Line 88:
 665	  Original: "- I wanted a sunk boat! - #BRACKET_OPEN#angry crowd noise#BRACKET_CLOSE#"
 666	  Google: "- Jeg ville have en sunket b√•d! -#bracket_open#vred publikum st√∏j#bracket_close#"
 667	  Ollama: "- Jeg ville have en sunket b√•d! - #BRACKET_OPEN#vred publikumsr√•ben#BRACKET_CLOSE#"
 668	  First pass: "- Jeg ville have et sunket skib!"
 669	  Critic: "- Jeg ville have et sunket skib! - [vredesr√•b]" (CHANGED)
 670	  Final: "- Jeg ville have et sunket skib! - [vredesr√•b]"
 671	------------------------------------------------------------
 672	Line 89:
 673	  Original: "Yeah! I want them to apologize for what they did to Camille."
 674	  Google: "Ja! Jeg vil have dem til at undskylde, hvad de gjorde med Camille."
 675	  Ollama: "Ja! Jeg vil have, at de undskylder for, hvad de har gjort mod Camille."
 676	  First pass: "Ja! Jeg vil have dem til at undskylde for, hvad de gjorde mod Camille."
 677	  Final: "Ja! Jeg vil have dem til at undskylde for, hvad de gjorde mod Camille."
 678	------------------------------------------------------------
 679	Line 90:
 680	  Original: "- #BRACKET_OPEN#voice 1#BRACKET_CLOSE# Yeah, and Jeff! - #BRACKET_OPEN#voice 2#BRACKET_CLOSE# Oh, wait, no the wolfs..."
 681	  Google: "-#bracket_open#stemme 1#bracket_close#yeah og jeff! -#bracket_open#stemme 2#bracket_close#√Öh, vent, nej ulven ..."
 682	  Ollama: "- #BRACKET_OPEN#stemme 1#BRACKET_CLOSE# Ja, og Jeff! - #BRACKET_OPEN#stemme 2#BRACKET_CLOSE# √Öh, vent, nej ulvene..."
 683	  First pass: "- Ja, og Jeff!
 684	- √Öh, vent, nej ulvene. .."
 685	  Critic: "- Ja, og Jeff!
 686	- √Öh, vent, nej, ulvene. .." (CHANGED)
 687	  Final: "- Ja, og Jeff!
 688	- √Öh, vent, nej, ulvene. .."
 689	------------------------------------------------------------
 690	Line 91:
 691	  Original: "- #BRACKET_OPEN#voice 3#BRACKET_CLOSE# And Carton! - #BRACKET_OPEN#voice 4#BRACKET_CLOSE# And Wheels!"
 692	  Google: "-#bracket_open#stemme 3#bracket_close#og karton! -#bracket_open#stemme 4#bracket_close#og hjul!"
 693	  Ollama: "- #BRACKET_OPEN#stemme 3#BRACKET_CLOSE# Og Carton! - #BRACKET_OPEN#stemme 4#BRACKET_CLOSE# Og hjul!"
 694	  First pass: "- [stemme 3] Og Carton!
 695	- [stemme 4] Og Wheels!"
 696	  Critic: "- [stemme 3] Og Carton! - [stemme 4] Og Wheels!" (CHANGED)
 697	  Final: "- [stemme 3] Og Carton! - [stemme 4] Og Wheels!"
 698	------------------------------------------------------------
 699	Line 92:
 700	  Original: "And Yumyan."
 701	  Google: "Og Yumyan."
 702	  Ollama: "Og Yumyan."
 703	  First pass: "Og Yumyan."
 704	  Final: "Og Yumyan."
 705	------------------------------------------------------------
 706	Line 93:
 707	  Original: "Sorry, Kipo. We can't afford to lose anyone else."
 708	  Google: "Beklager, Kipo. Vi har ikke r√•d til at miste nogen anden."
 709	  Ollama: "Beklager, Kipo. Vi kan ikke t√•le at miste nogen anden."
 710	  First pass: "Beklager, Kipo. Vi har ikke r√•d til
 711	at miste nogen andre."
 712	  Critic: "Beklager, Kipo. Vi har ikke r√•d til at miste flere." (CHANGED)
 713	  Final: "Beklager, Kipo. Vi har ikke r√•d til at miste flere."
 714	------------------------------------------------------------
 715	Line 94:
 716	  Original: "I hereby resign from HMUFA."
 717	  Google: "Jeg fratr√¶der hermed fra Hmufa."
 718	  Ollama: "Jeg tr√¶der hermed tilbage fra HMUFA."
 719	  First pass: "Jeg tr√¶der hermed tilbage fra HMUFA."
 720	  Final: "Jeg tr√¶der hermed tilbage fra HMUFA."
 721	------------------------------------------------------------
 722	Line 95:
 723	  Original: "Wait, what?"
 724	  Google: "Vent, hvad?"
 725	  Ollama: "Vent lige, hvad?"
 726	  First pass: "Vent lige hvad?"
 727	  Final: "Vent lige hvad?"
 728	------------------------------------------------------------
 729	Line 96:
 730	  Original: "Uh..."
 731	  Google: "√Öh ..."
 732	  Ollama: "√òh..."
 733	  First pass: "√òh. .."
 734	  Final: "√òh. .."
 735	------------------------------------------------------------
 736	Line 97:
 737	  Original: "Me too, man."
 738	  Google: "Mig ogs√•, mand."
 739	  Ollama: "Mig ogs√•, mand."
 740	  First pass: "Jeg ogs√•, mand."
 741	  Final: "Jeg ogs√•, mand."
 742	------------------------------------------------------------
 743	Line 98:
 744	  Original: "They all left."
 745	  Google: "De forlod alle."
 746	  Ollama: "De gik alle v√¶k."
 747	  First pass: "De forlod alle sammen."
 748	  Final: "De forlod alle sammen."
 749	------------------------------------------------------------
 750	Line 99:
 751	  Original: "#BRACKET_OPEN#footsteps approaching#BRACKET_CLOSE#"
 752	  Google: "#Bracket_open#fodspor n√¶rmer sig#bracket_close#"
 753	  Ollama: "#BRACKET_OPEN#fodspor n√¶rmer sig#BRACKET_CLOSE#"
 754	  First pass: "[n√¶rmende fodtrin]"
 755	  Final: "[n√¶rmende fodtrin]"
 756	------------------------------------------------------------
 757	Line 100:
 758	  Original: "Not everyone."
 759	  Google: "Ikke alle."
 760	  Ollama: "Ikke alle."
 761	  First pass: "Ikke alle."
 762	  Final: "Ikke alle."
 763	------------------------------------------------------------
 764	Line 101:
 765	  Original: "You guys are staying?"
 766	  Google: "Fyre bliver?"
 767	  Ollama: "Bliver I?"
 768	  First pass: "Bliver I her?"
 769	  Final: "Bliver I her?"
 770	------------------------------------------------------------
 771	Line 102:
 772	  Original: "Every Prahm needs a king."
 773	  Google: "Hver Prahm har brug for en konge."
 774	  Ollama: "Hver Prahm har brug for en konge."
 775	  First pass: "Enhver Prahm har brug for en konge."
 776	  Final: "Enhver Prahm har brug for en konge."
 777	------------------------------------------------------------
 778	Line 103:
 779	  Original: "Yeah, and, you know, I already got my suit on, so."
 780	  Google: "Ja, og du ved, jeg har allerede f√•et min dragt p√•, s√•."
 781	  Ollama: "Ja, og alts√•, jeg har allerede taget jakkes√¶ttet p√•, s√•."
 782	  First pass: "Ja, og, alts√•, jeg har jo allerede min dragt p√•, s√•."
 783	  Final: "Ja, og, alts√•, jeg har jo allerede min dragt p√•, s√•."
 784	------------------------------------------------------------
 785	Line 104:
 786	  Original: "And I, Dave, also stay bravely by your side."
 787	  Google: "Og jeg, Dave, forbliver ogs√• modigt ved din side."
 788	  Ollama: "Og jeg, Dave, st√•r ogs√• modigt ved din side."
 789	  First pass: "Og jeg, Dave, bliver ogs√• modigt st√•ende ved din side."
 790	  Final: "Og jeg, Dave, bliver ogs√• modigt st√•ende ved din side."
 791	------------------------------------------------------------
 792	Line 105:
 793	  Original: "What a guy, ain't he amazing? I met him once, he was cool."
 794	  Google: "Hvad en fyr, er han ikke forbl√∏ffende? Jeg m√∏dte ham en gang, han var cool."
 795	  Ollama: "Hold da op, han er ikke fantastisk? Jeg m√∏dte ham √©n gang, han var cool."
 796	  First pass: "Hold da, han er fantastisk, ikke? Jeg m√∏dte ham engang, han var cool."
 797	  Final: "Hold da, han er fantastisk, ikke? Jeg m√∏dte ham engang, han var cool."
 798	------------------------------------------------------------
 799	Line 106:
 800	  Original: "- #BRACKET_OPEN#coughs#BRACKET_CLOSE# - #BRACKET_OPEN#gasps#BRACKET_CLOSE#"
 801	  Google: "-#bracket_open#hoste#bracket_close# -#bracket_open#gisps#bracket_close#"
 802	  Ollama: "- #BRACKET_OPEN#hoster#BRACKET_CLOSE# - #BRACKET_OPEN#st√∏nner#BRACKET_CLOSE#"
 803	  First pass: "- [hoste]
 804	- [gisp]"
 805	  Final: "- [hoste]
 806	- [gisp]"
 807	------------------------------------------------------------
 808	Line 107:
 809	  Original: "I live here. You guys should go."
 810	  Google: "Jeg bor her. I skal g√•."
 811	  Ollama: "Jeg bor her. I skal g√•."
 812	  First pass: "Jeg bor her. I skulle g√•."
 813	  Final: "Jeg bor her. I skulle g√•."
 814	------------------------------------------------------------
 815	Line 108:
 816	  Original: "Huh!"
 817	  Google: "Huh!"
 818	  Ollama: "√òh!"
 819	  First pass: "√òh!"
 820	  Final: "√òh!"
 821	------------------------------------------------------------
 822	Line 109:
 823	  Original: "#BRACKET_OPEN#exhales#BRACKET_CLOSE# I needed that."
 824	  Google: "#Bracket_open#ud√•nding#bracket_close#jeg havde brug for det."
 825	  Ollama: "#BRACKET_OPEN#ud√•nder#BRACKET_CLOSE# Jeg tr√¶ngte til det."
 826	  First pass: "[ud√•nder] Det havde jeg brug for."
 827	  Critic: "[ud√•nder] Det var tiltr√¶ngt." (CHANGED)
 828	  Final: "[ud√•nder] Det var tiltr√¶ngt."
 829	------------------------------------------------------------
 830	Line 110:
 831	  Original: "OK. Now we decorate."
 832	  Google: "OK. Nu pynter vi."
 833	  Ollama: "OK. Nu pynter vi."
 834	  First pass: "Okay. Nu dekorerer vi."
 835	  Final: "Okay. Nu dekorerer vi."
 836	------------------------------------------------------------
 837	Line 111:
 838	  Original: "Wait, Prahm's not off? But they said no."
 839	  Google: "Vent, Prahm er ikke slukket? Men de sagde nej."
 840	  Ollama: "Vent, er Prahm ikke slukket? Men de sagde jo nej."
 841	  First pass: "Vent lige, er Prahm ikke taget afsted? Men de sagde jo nej."
 842	  Final: "Vent lige, er Prahm ikke taget afsted? Men de sagde jo nej."
 843	------------------------------------------------------------
 844	Line 112:
 845	  Original: "They seemed pretty mad, remember?"
 846	  Google: "De virkede temmelig gale, kan du huske?"
 847	  Ollama: "De virkede ret vrede, kan du huske?"
 848	  First pass: "De s√• ret sure ud, kan du huske?"
 849	  Critic: "De s√• ret sure ud, kan du huske det?" (CHANGED)
 850	  Final: "De s√• ret sure ud, kan du huske det?"
 851	------------------------------------------------------------
 852	Line 113:
 853	  Original: "We just didn't ask them right."
 854	  Google: "Vi spurgte dem bare ikke rigtigt."
 855	  Ollama: "Vi spurgte dem bare ikke ordentligt."
 856	  First pass: "Vi spurgte dem bare ikke ordentligt."
 857	  Critic: "Vi spurgte dem bare ikke rigtigt." (CHANGED)
 858	  Final: "Vi spurgte dem bare ikke rigtigt."
 859	------------------------------------------------------------
 860	Line 114:
 861	  Original: "They need an apology."
 862	  Google: "De har brug for en undskyldning."
 863	  Ollama: "De skal have en undskyldning."
 864	  First pass: "De skal have en undskyldning."
 865	  Final: "De skal have en undskyldning."
 866	------------------------------------------------------------
 867	Line 115:
 868	  Original: "- And it needs to come from us. - Right."
 869	  Google: "- og det skal komme fra os. - Rigtigt."
 870	  Ollama: "- Og det skal komme fra os. - Ja."
 871	  First pass: "- Og det skal komme fra os.
 872	- Lige pr√¶cis."
 873	  Critic: "- Og det skal komme fra os. - Lige pr√¶cis." (CHANGED)
 874	  Final: "- Og det skal komme fra os. - Lige pr√¶cis."
 875	------------------------------------------------------------
 876	Line 116:
 877	  Original: "And we need to live it. We need to dance it."
 878	  Google: "Og vi er n√∏dt til at leve det. Vi er n√∏dt til at danse det."
 879	  Ollama: "Og vi skal leve det. Vi skal danse det."
 880	  First pass: "Og vi skal leve det.
 881	Vi skal danse det."
 882	  Critic: "Og vi skal leve det. Vi skal danse det." (CHANGED)
 883	  Final: "Og vi skal leve det. Vi skal danse det."
 884	------------------------------------------------------------
 885	Line 117:
 886	  Original: "- Yes! - Dance it?"
 887	  Google: "- Ja! - Dans det?"
 888	  Ollama: "- Ja! - Skal vi danse?"
 889	  First pass: "- Ja!
 890	- Dans det?"
 891	  Critic: "- Ja! - Dans det?" (CHANGED)
 892	  Final: "- Ja! - Dans det?"
 893	------------------------------------------------------------
 894	Line 118:
 895	  Original: "We need to Prahm-pose."
 896	  Google: "Vi er n√∏dt til at prahm-pose."
 897	  Ollama: "Vi er n√∏dt til at prahm-pose."
 898	  First pass: "Vi skal Prahm-pose."
 899	  Final: "Vi skal Prahm-pose."
 900	------------------------------------------------------------
 901	Line 119:
 902	  Original: "I have no idea what you guys are talking about."
 903	  Google: "Jeg har ingen id√© om, hvad I taler om."
 904	  Ollama: "Jeg har ingen anelse om, hvad I snakker om."
 905	  First pass: "Jeg har ingen id√© om, hvad I taler om."
 906	  Final: "Jeg har ingen id√© om, hvad I taler om."
 907	------------------------------------------------------------
 908	Line 120:
 909	  Original: "Right. Prahm-posing is an ancient tradition"
 910	  Google: "H√∏jre. Prahm-posing er en gammel tradition"
 911	  Ollama: "H√∏jre. Prahm-posing er en gammel tradition."
 912	  First pass: "Okay. Prahm-posing er en gammel tradition"
 913	  Final: "Okay. Prahm-posing er en gammel tradition"
 914	------------------------------------------------------------
 915	Line 121:
 916	  Original: "that goes all the way back to the old world."
 917	  Google: "Det g√•r helt tilbage til den gamle verden."
 918	  Ollama: "Det g√•r helt tilbage til den gamle verden."
 919	  First pass: "Der g√•r helt tilbage til den gamle verden."
 920	  Final: "Der g√•r helt tilbage til den gamle verden."
 921	------------------------------------------------------------
 922	Line 122:
 923	  Original: "If you want someone to go with you to Prahm, you've got to Prahm-pose to them."
 924	  Google: "Hvis du vil have nogen til at g√• med dig til Prahm, er du n√∏dt til at prahm-pose til dem."
 925	  Ollama: "Hvis du vil have nogen med til Prahm, m√• du "Prahm-forsl√•" dem."
 926	  First pass: "Hvis du vil have nogen med til Prahm, skal du Prahm-pose til dem."
 927	  Critic: "Hvis du vil have nogen med til Prahm, skal du Prahm-pose dem." (CHANGED)
 928	  Final: "Hvis du vil have nogen med til Prahm, skal du Prahm-pose dem."
 929	------------------------------------------------------------
 930	Line 123:
 931	  Original: "It's the perfect way to get the mutes to join us."
 932	  Google: "Det er den perfekte m√•de at f√• mutene til at slutte sig til os."
 933	  Ollama: "Det er den perfekte m√•de at f√• de stumme til at slutte sig til os."
 934	  First pass: "Det er den perfekte m√•de
 935	for at f√• de tavse med os."
 936	  Critic: "Det er den perfekte m√•de at f√• de tavse til at deltage." (CHANGED)
 937	  Final: "Det er den perfekte m√•de at f√• de tavse til at deltage."
 938	------------------------------------------------------------
 939	Line 124:
 940	  Original: "Plus, nobody can say no to a float."
 941	  Google: "Plus, ingen kan sige nej til en float."
 942	  Ollama: "Plus, ingen kan sige nej til en float."
 943	  First pass: "Plus, ingen kan sige nej til en optogsvogn."
 944	  Final: "Plus, ingen kan sige nej til en optogsvogn."
 945	------------------------------------------------------------
 946	Line 125:
 947	  Original: "What's a float?"
 948	  Google: "Hvad er en float?"
 949	  Ollama: "Hvad er en float?"
 950	  First pass: "Hvad er en float?"
 951	  Final: "Hvad er en float?"
 952	------------------------------------------------------------
 953	Line 126:
 954	  Original: "Only the most exciting and visual way to celebrate all of our differences."
 955	  Google: "Kun den mest sp√¶ndende og visuelle m√•de at fejre alle vores forskelle p√•."
 956	  Ollama: "Kun den mest sp√¶ndende og visuelle m√•de at fejre alle vores forskelle p√•."
 957	  First pass: "Den mest sp√¶ndende og visuelle m√•de at fejre alle vores forskelle p√•."
 958	  Final: "Den mest sp√¶ndende og visuelle m√•de at fejre alle vores forskelle p√•."
 959	------------------------------------------------------------
 960	Line 127:
 961	  Original: "Hoo! Hah!"
 962	  Google: "Hoo! Hah!"
 963	  Ollama: "Hoo! Ha!"
 964	  First pass: "Hoo! Hah!"
 965	  Final: "Hoo! Hah!"
 966	------------------------------------------------------------
 967	Line 128:
 968	  Original: "Whoo! Hah!"
 969	  Google: "Whoo! Hah!"
 970	  Ollama: "Whoo! Ha!"
 971	  First pass: "Whoo! Hah!"
 972	  Final: "Whoo! Hah!"
 973	------------------------------------------------------------
 974	Line 129:
 975	  Original: "#BRACKET_OPEN#Scarlemagne#BRACKET_CLOSE# After this works and Prahm is a raging success,"
 976	  Google: "#Bracket_open#Scarlemagne#bracket_close#efter dette fungerer og Prahm er en rasende succes,"
 977	  Ollama: "#BRACKET_OPEN#Scarlemagne#BRACKET_CLOSE# N√•r det her fungerer, og Prahm er en stor succes,"
 978	  First pass: "Scarlemagne Efter det her virker, og Prahm er en bragende succes,"
 979	  Critic: "Scarlemagne Efter det her virker, og Prahm bliver en bragende succes," (CHANGED)
 980	  Final: "Scarlemagne Efter det her virker, og Prahm bliver en bragende succes,"
 981	------------------------------------------------------------
 982	Line 130:
 983	  Original: "I'm guessing it'll take nine minutes for Emilia to turn on us and attack."
 984	  Google: "Jeg g√¶tter p√•, at det tager ni minutter for Emilia at t√¶nde for os og angribe."
 985	  Ollama: "Jeg g√¶tter p√•, at det tager ni minutter, f√∏r Emilia vender sig mod os og angriber."
 986	  First pass: "Jeg g√¶tter p√•, at det vil tage ni minutter, f√∏r Emilia vender sig imod os og angriber."
 987	  Critic: "Jeg g√¶tter p√•, at det vil tage ni minutter, f√∏r Emilia vender sig mod os og angriber." (CHANGED)
 988	  Final: "Jeg g√¶tter p√•, at det vil tage ni minutter, f√∏r Emilia vender sig mod os og angriber."
 989	------------------------------------------------------------
 990	Line 131:
 991	  Original: "I would've guessed five."
 992	  Google: "Jeg ville have g√¶ttet fem."
 993	  Ollama: "Jeg ville have g√¶ttet fem."
 994	  First pass: "Jeg havde g√¶ttet fem minutter."
 995	  Final: "Jeg havde g√¶ttet fem minutter."
 996	------------------------------------------------------------
 997	Line 132:
 998	  Original: "So, we're in agreement?"
 999	  Google: "S√• vi er enige?"
1000	  Ollama: "S√• er vi enige?"
1001	  First pass: "S√•, er vi enige?"
1002	  Final: "S√•, er vi enige?"
1003	------------------------------------------------------------
1004	Line 133:
1005	  Original: "Um, did you pilfer the pail of flora?"
1006	  Google: "Um, lod du floraens spand?"
1007	  Ollama: "√òh, stjal du spanden med blomster?"
1008	  First pass: "√òh, stjal du spanden med blomster?"
1009	  Final: "√òh, stjal du spanden med blomster?"
1010	------------------------------------------------------------
1011	Line 134:
1012	  Original: "- No. - Then who did?"
1013	  Google: "- Nej. - Hvem gjorde da?"
1014	  Ollama: "- Nej. - Hvem var det s√•?"
1015	  First pass: "- Nej.
1016	- Hvem har s√• gjort det?"
1017	  Critic: "- Nej. - Hvem har s√• gjort det?" (CHANGED)
1018	  Final: "- Nej. - Hvem har s√• gjort det?"
1019	------------------------------------------------------------
1020	Line 135:
1021	  Original: "I made a you."
1022	  Google: "Jeg lavede en dig."
1023	  Ollama: "Jeg har lavet en dig."
1024	  First pass: "Jeg lavede en dig."
1025	  Final: "Jeg lavede en dig."
1026	------------------------------------------------------------
1027	Line 136:
1028	  Original: "I'm‚ÄîI'm sorry, why do I only have one eye?"
1029	  Google: "Jeg er - jeg er ked af det, hvorfor har jeg kun et √∏je?"
1030	  Ollama: "Jeg er ‚Äì jeg er ked af det, hvorfor har jeg kun √©t √∏je?"
1031	  First pass: "Jeg‚Äîjeg er ked af det, hvorfor har jeg kun √©t √∏je?"
1032	  Final: "Jeg‚Äîjeg er ked af det, hvorfor har jeg kun √©t √∏je?"
1033	------------------------------------------------------------
1034	Line 137:
1035	  Original: "I got tired."
1036	  Google: "Jeg blev tr√¶t."
1037	  Ollama: "Jeg blev tr√¶t."
1038	  First pass: "Jeg blev tr√¶t."
1039	  Final: "Jeg blev tr√¶t."
1040	------------------------------------------------------------
1041	Line 138:
1042	  Original: "#BRACKET_OPEN#groans#BRACKET_CLOSE#"
1043	  Google: "#Bracket_open#st√∏nn#bracket_close#"
1044	  Ollama: "#BRACKET_OPEN#st√∏n#BRACKET_CLOSE#"
1045	  First pass: "[st√∏nner]"
1046	  Final: "[st√∏nner]"
1047	------------------------------------------------------------
1048	Line 139:
1049	  Original: "#BRACKET_OPEN#imitates airplane#BRACKET_CLOSE#"
1050	  Google: "#Bracket_open#imiterer fly#bracket_close#"
1051	  Ollama: "#BRACKET_OPEN#imiterer fly#BRACKET_CLOSE#"
1052	  First pass: "[imiterer flyvemaskine]"
1053	  Final: "[imiterer flyvemaskine]"
1054	------------------------------------------------------------
1055	Line 140:
1056	  Original: "Whatchu thinkin' 'bout?"
1057	  Google: "Hvad t√¶nker det?"
1058	  Ollama: "Hvad t√¶nker du p√•?"
1059	  First pass: "Hvad t√¶nker du p√•?"
1060	  Final: "Hvad t√¶nker du p√•?"
1061	------------------------------------------------------------
1062	Line 141:
1063	  Original: "Troy. I wanna ask him to Prahm, but it's gotta be really good."
1064	  Google: "Troy. Jeg vil gerne bede ham om Prahm, men det skal v√¶re rigtig godt."
1065	  Ollama: "Troy. Jeg vil gerne invitere ham til Prahm, men det skal v√¶re virkelig godt."
1066	  First pass: "Troy. Jeg vil sp√∏rge ham om Prahm, men det skal v√¶re virkelig godt."
1067	  Critic: "Troy. Jeg vil sp√∏rge ham om Prahm, men det skal v√¶re rigtig godt." (CHANGED)
1068	  Final: "Troy. Jeg vil sp√∏rge ham om Prahm, men det skal v√¶re rigtig godt."
1069	------------------------------------------------------------
1070	Line 142:
1071	  Original: "You know, to make up for how we can't just hang out"
1072	  Google: "Du ved, for at kompensere for, hvordan vi ikke bare kan h√¶nge ud"
1073	  Ollama: "Du ved, for at g√∏re op for, at vi ikke bare kan ses."
1074	  First pass: "Du ved, for at g√∏re op for, at vi ikke bare kan h√¶nge ud"
1075	  Critic: "Du ved, for at kompensere for, at vi ikke bare kan h√¶nge ud" (CHANGED)
1076	  Final: "Du ved, for at kompensere for, at vi ikke bare kan h√¶nge ud"
1077	------------------------------------------------------------
1078	Line 143:
1079	  Original: "because we're always saving the world."
1080	  Google: "Fordi vi altid redder verden."
1081	  Ollama: "Fordi vi altid redder verden."
1082	  First pass: "Fordi vi altid redder verden."
1083	  Final: "Fordi vi altid redder verden."
1084	------------------------------------------------------------
1085	Line 144:
1086	  Original: "Whoa! I was thinking about how french fries are the perfect food."
1087	  Google: "Whoa! Jeg t√¶nkte p√•, hvordan pommes frites er den perfekte mad."
1088	  Ollama: "Whoa! Jeg t√¶nkte p√•, hvor perfekte pommes frites er."
1089	  First pass: "Whoa! Jeg t√¶nkte p√•, hvor perfekte pommes frites er."
1090	  Final: "Whoa! Jeg t√¶nkte p√•, hvor perfekte pommes frites er."
1091	------------------------------------------------------------
1092	Line 145:
1093	  Original: "Well, Troy is the french fries of boyfriends,"
1094	  Google: "N√•, Troy er de franske pommes frites af k√¶rester,"
1095	  Ollama: "Tja, Troy er den kedelige k√¶reste-type."
1096	  First pass: "N√•, Troy er pommes frites-versionen af k√¶rester,"
1097	  Critic: "N√•, Troy er pommes frites-udgaven af k√¶rester," (CHANGED)
1098	  Final: "N√•, Troy er pommes frites-udgaven af k√¶rester,"
1099	------------------------------------------------------------
1100	Line 146:
1101	  Original: "and he deserves the perfect Prahm-posal."
1102	  Google: "Og han fortjener den perfekte Prahm-Posal."
1103	  Ollama: "Og han fortjener det perfekte Prahm-forslag."
1104	  First pass: "Og han fortjener det perfekte Prahm-forslag."
1105	  Final: "Og han fortjener det perfekte Prahm-forslag."
1106	------------------------------------------------------------
1107	Line 147:
1108	  Original: "OK, if we're not grabbing some french fries,"
1109	  Google: "OK, hvis vi ikke griber fat i nogle pommes frites,"
1110	  Ollama: "Okay, hvis vi ikke f√•r nogle pommes frites,"
1111	  First pass: "Okay, hvis vi ikke skal have nogle pommes frites,"
1112	  Final: "Okay, hvis vi ikke skal have nogle pommes frites,"
1113	------------------------------------------------------------
1114	Line 148:
1115	  Original: "you need to stop bringing them up."
1116	  Google: "Du skal stoppe med at bringe dem op."
1117	  Ollama: "Du skal holde op med at tale om dem."
1118	  First pass: "Du skal stoppe med at tale om dem."
1119	  Critic: "Du skal stoppe med at bringe dem p√• bane." (CHANGED)
1120	  Final: "Du skal stoppe med at bringe dem p√• bane."
1121	------------------------------------------------------------
1122	Line 149:
1123	  Original: "You brought them up!"
1124	  Google: "Du bragte dem op!"
1125	  Ollama: "Du opdrog dem!"
1126	  First pass: "Du n√¶vnte dem!"
1127	  Critic: "Du startede med at n√¶vne dem!" (CHANGED)
1128	  Final: "Du startede med at n√¶vne dem!"
1129	------------------------------------------------------------
1130	Line 150:
1131	  Original: "Huh?"
1132	  Google: "Huh?"
1133	  Ollama: "Hvad?"
1134	  First pass: "Hvad?"
1135	  Final: "Hvad?"
1136	------------------------------------------------------------
1137	Line 151:
1138	  Original: "The ladder's missing, too?"
1139	  Google: "Stigen mangler ogs√•?"
1140	  Ollama: "Stigen mangler ogs√•?"
1141	  First pass: "Mangler stigen ogs√•?"
1142	  Final: "Mangler stigen ogs√•?"
1143	------------------------------------------------------------
1144	Line 152:
1145	  Original: "T'would appear we have a saboteur in our midst."
1146	  Google: "Det vises, at vi har en saboteur i vores midte."
1147	  Ollama: "Det ser ud til, at vi har en sabot√∏r blandt os."
1148	  First pass: "Det ser ud til, at vi har en sabot√∏r iblandt os."
1149	  Final: "Det ser ud til, at vi har en sabot√∏r iblandt os."
1150	------------------------------------------------------------
1151	Line 153:
1152	  Original: "What?"
1153	  Google: "Hvad?"
1154	  Ollama: "Hvad?"
1155	  First pass: "Hvad?"
1156	  Final: "Hvad?"
1157	------------------------------------------------------------
1158	Line 154:
1159	  Original: "#BRACKET_OPEN#mega walrus growling#BRACKET_CLOSE#"
1160	  Google: "#Bracket_open#mega hvalrus knurrende#bracket_close#"
1161	  Ollama: "#BRACKET_OPEN#k√¶mpe hvalross br√∏lende#BRACKET_CLOSE#"
1162	  First pass: "[mega-hvalrossens br√∏l]"
1163	  Final: "[mega-hvalrossens br√∏l]"
1164	------------------------------------------------------------
1165	Line 155:
1166	  Original: "#BRACKET_OPEN#screaming#BRACKET_CLOSE#"
1167	  Google: "#Bracket_open#skrigende#bracket_close#"
1168	  Ollama: "#BRACKET_OPEN#skrigende#BRACKET_CLOSE#"
1169	  First pass: "[skrig]"
1170	  Final: "[skrig]"
1171	------------------------------------------------------------
1172	Line 156:
1173	  Original: "#BRACKET_OPEN#hisses#BRACKET_CLOSE# Bad walrus! Get out of here!"
1174	  Google: "#Bracket_open#suses#bracket_close#d√•rlig hvalrus! G√• ud herfra!"
1175	  Ollama: "#BRACKET_OPEN#hv√¶ser#BRACKET_CLOSE# D√•rlig hvalrus! Forsvind herfra!"
1176	  First pass: "[hv√¶ser] Slem s√¶l! Ud med dig!"
1177	  Critic: "[hv√¶ser] Slem walrus! Ud med dig!" (CHANGED)
1178	  Final: "[hv√¶ser] Slem walrus! Ud med dig!"
1179	------------------------------------------------------------
1180	Line 157:
1181	  Original: "#BRACKET_OPEN#screaming#BRACKET_CLOSE#"
1182	  Google: "#Bracket_open#skrigende#bracket_close#"
1183	  Ollama: "#BRACKET_OPEN#skrigende#BRACKET_CLOSE#"
1184	  First pass: "[skrig]"
1185	  Final: "[skrig]"
1186	------------------------------------------------------------
1187	Line 158:
1188	  Original: "Looks like your Prahm date's here."
1189	  Google: "Det ser ud til, at din Prahm -dato er her."
1190	  Ollama: "Din Prahm-date er her, ser det ud til."
1191	  First pass: "Ser ud til, at din Prahm-date er her."
1192	  Final: "Ser ud til, at din Prahm-date er her."
1193	------------------------------------------------------------
1194	Line 159:
1195	  Original: "#BRACKET_OPEN#cheering and applause#BRACKET_CLOSE#"
1196	  Google: "#Bracket_open#jubel og bifald#bracket_close#"
1197	  Ollama: "#BRACKET_OPEN#jubel og klapsalver#BRACKET_CLOSE#"
1198	  First pass: "[jubel og klapsalver]"
1199	  Final: "[jubel og klapsalver]"
1200	------------------------------------------------------------
1201	Line 160:
1202	  Original: "#BRACKET_OPEN#Kipo exhales#BRACKET_CLOSE# Amazing job, everyone!"
1203	  Google: "#Bracket_open#kipo ud√•nder#bracket_close#fantastiske job, alle sammen!"
1204	  Ollama: "#BRACKET_OPEN#Kipo √•nder ud#BRACKET_CLOSE# Fantastisk arbejde, alle sammen!"
1205	  First pass: "[Kipo √•nder ud] Fantastisk arbejde, allesammen!"
1206	  Final: "[Kipo √•nder ud] Fantastisk arbejde, allesammen!"
1207	------------------------------------------------------------
1208	Line 161:
1209	  Original: "Now, let's rehearse. Positions!"
1210	  Google: "Lad os √∏ve. Positioner!"
1211	  Ollama: "Lad os √∏ve. Positioner!"
1212	  First pass: "Nu skal vi √∏ve. P√• plads!"
1213	  Final: "Nu skal vi √∏ve. P√• plads!"
1214	------------------------------------------------------------
1215	Line 162:
1216	  Original: "Hmm."
1217	  Google: "Hmm."
1218	  Ollama: "Hmm."
1219	  First pass: "Hmm."
1220	  Final: "Hmm."
1221	------------------------------------------------------------
1222	Line 163:
1223	  Original: "Kipo, can we talk to you?"
1224	  Google: "Kipo, kan vi tale med dig?"
1225	  Ollama: "Kipo, kan vi tale med dig?"
1226	  First pass: "Kipo, kan vi tale med dig?"
1227	  Final: "Kipo, kan vi tale med dig?"
1228	------------------------------------------------------------
1229	Line 164:
1230	  Original: "Like, together? Both of you?"
1231	  Google: "Ligesom sammen? Begge af jer?"
1232	  Ollama: "Ligesom, sammen? I to?"
1233	  First pass: "Alts√•, sammen? Begge to?"
1234	  Critic: "Alts√•, sammen? I to?" (CHANGED)
1235	  Final: "Alts√•, sammen? I to?"
1236	------------------------------------------------------------
1237	Line 165:
1238	  Original: "Oh, my gosh! You bonded!"
1239	  Google: "√Öh, min gosh! Du er bundet!"
1240	  Ollama: "√Öh, min Gud! I er blevet t√¶tte!"
1241	  First pass: "√Öh, min Gud! I er blevet knyttet sammen!"
1242	  Final: "√Öh, min Gud! I er blevet knyttet sammen!"
1243	------------------------------------------------------------
1244	Line 166:
1245	  Original: "- That's not what's happening. - Not a big deal!"
1246	  Google: "- Det er ikke, hvad der sker. - Ikke en big deal!"
1247	  Ollama: "- Det er ikke det, der sker. - Det er ikke s√• slemt!"
1248	  First pass: "- Det er ikke det, der sker.
1249	- Det er ikke noget problem!"
1250	  Critic: "- Det er ikke det, der sker. - Det er ikke noget stort!" (CHANGED)
1251	  Final: "- Det er ikke det, der sker. - Det er ikke noget stort!"
1252	------------------------------------------------------------
1253	Line 167:
1254	  Original: "OK. When she says go, we burst out the top."
1255	  Google: "OK. N√•r hun siger, brast vi ud af toppen."
1256	  Ollama: "OK. N√•r hun siger go, stormer vi ud af toppen."
1257	  First pass: "Okay. N√•r hun siger go, brister vi ud gennem toppen."
1258	  Final: "Okay. N√•r hun siger go, brister vi ud gennem toppen."
1259	------------------------------------------------------------
1260	Line 168:
1261	  Original: "For reasons most obvious, we don't trust Emilia."
1262	  Google: "Af de mest √•benlyse grunde stoler vi ikke p√• Emilia."
1263	  Ollama: "Af de mest √•benlyse grunde stoler vi ikke p√• Emilia."
1264	  First pass: "Af √•benlyse √•rsager stoler vi ikke p√• Emilia."
1265	  Final: "Af √•benlyse √•rsager stoler vi ikke p√• Emilia."
1266	------------------------------------------------------------
1267	Line 169:
1268	  Original: "We've noticed that a paint bucket and a ladder have gone missing."
1269	  Google: "Vi har bem√¶rket, at en malingsspand og en stige er forsvundet."
1270	  Ollama: "Vi har bem√¶rket, at en malingspand og en stige mangler."
1271	  First pass: "Vi har bem√¶rket, at en spand maling og en stige er forsvundet."
1272	  Critic: "Vi har bem√¶rket, at en spand maling og en stige er blevet stj√•let." (CHANGED)
1273	  Final: "Vi har bem√¶rket, at en spand maling og en stige er blevet stj√•let."
1274	------------------------------------------------------------
1275	Line 170:
1276	  Original: "OK. A-are you saying this is the same thing or two different things?"
1277	  Google: "OK. A-siger du, at dette er den samme ting eller to forskellige ting?"
1278	  Ollama: "Okay. Siger du, at det er det samme, eller to forskellige ting?"
1279	  First pass: "OK. Mener du, at det er det samme, eller to forskellige ting?"
1280	  Critic: "OK. Mener du, det er det samme, eller to forskellige ting?" (CHANGED)
1281	  Final: "OK. Mener du, det er det samme, eller to forskellige ting?"
1282	------------------------------------------------------------
1283	Line 171:
1284	  Original: "We don't know, but we should mount our defenses immediately."
1285	  Google: "Vi ved det ikke, men vi skal straks montere vores forsvar."
1286	  Ollama: "Vi ved det ikke, men vi b√∏r straks forberede vores forsvar."
1287	  First pass: "Vi ved det ikke, men vi b√∏r forst√¶rke vores forsvar √∏jeblikkeligt."
1288	  Critic: "Vi ved det ikke, men vi b√∏r forst√¶rke vores forsvar omg√•ende." (CHANGED)
1289	  Final: "Vi ved det ikke, men vi b√∏r forst√¶rke vores forsvar omg√•ende."
1290	------------------------------------------------------------
1291	Line 172:
1292	  Original: "OK. Possible that you're bringing out the worst in each other."
1293	  Google: "OK. Muligt at du bringer det v√¶rste ud i hinanden."
1294	  Ollama: "OK. Muligt, at I tr√¶kker det v√¶rste frem i hinanden."
1295	  First pass: "OK. M√•ske frembringer I det v√¶rste i hinanden."
1296	  Critic: "OK. M√•ske tr√¶kker I det v√¶rste frem i hinanden." (CHANGED)
1297	  Final: "OK. M√•ske tr√¶kker I det v√¶rste frem i hinanden."
1298	------------------------------------------------------------
1299	Line 173:
1300	  Original: "Come on, isn't it obvious?"
1301	  Google: "Kom nu, er det ikke indlysende?"
1302	  Ollama: "Kom nu, er det ikke √•benlyst?"
1303	  First pass: "Kom nu, er det ikke indlysende?"
1304	  Final: "Kom nu, er det ikke indlysende?"
1305	------------------------------------------------------------
1306	Line 174:
1307	  Original: "Emilia doesn't want Prahm to happen, so, she's being a sabater."
1308	  Google: "Emilia √∏nsker ikke, at Prahm skal ske, s√• hun er en sabater."
1309	  Ollama: "Emilia √∏nsker ikke, at Prahm skal ske, s√• hun er en sabot√∏r."
1310	  First pass: "Emilia √∏nsker ikke, at Prahm skal ske, s√• hun er en sabot√∏r."
1311	  Final: "Emilia √∏nsker ikke, at Prahm skal ske, s√• hun er en sabot√∏r."
1312	------------------------------------------------------------
1313	Line 175:
1314	  Original: "#BRACKET_OPEN#clears throat#BRACKET_CLOSE# Saboteur."
1315	  Google: "#Bracket_open#rydder hals#bracket_close#saboteur."
1316	  Ollama: "#BRACKET_OPEN#hoster sig#BRACKET_CLOSE# Sabot√∏r."
1317	  First pass: "Sabot√∏r."
1318	  Final: "Sabot√∏r."
1319	------------------------------------------------------------
1320	Line 176:
1321	  Original: "OK. Well, I didn't invite Emilia to a battle."
1322	  Google: "OK. N√•, jeg inviterede ikke Emilia til en kamp."
1323	  Ollama: "OK. Jamen, jeg inviterede ikke Emilia til en kamp."
1324	  First pass: "OK. Jeg inviterede ikke Emilia til en kamp."
1325	  Final: "OK. Jeg inviterede ikke Emilia til en kamp."
1326	------------------------------------------------------------
1327	Line 177:
1328	  Original: "Prahm only works if we all believe in it."
1329	  Google: "Prahm fungerer kun, hvis vi alle tror p√• det."
1330	  Ollama: "Prahm virker kun, hvis vi alle tror p√• det."
1331	  First pass: "Prahm virker kun, hvis vi alle tror p√• det."
1332	  Final: "Prahm virker kun, hvis vi alle tror p√• det."
1333	------------------------------------------------------------
1334	Line 178:
1335	  Original: "You can't seriously believe"
1336	  Google: "Du kan ikke alvorligt tro"
1337	  Ollama: "Du kan ikke seri√∏st mene det."
1338	  First pass: "Du kan virkelig ikke tro p√•, at"
1339	  Final: "Du kan virkelig ikke tro p√•, at"
1340	------------------------------------------------------------
1341	Line 179:
1342	  Original: "Emilia is going to give up her life's work to frolic with mutes."
1343	  Google: "Emilia vil opgive sit livs arbejde for at boltre sig med mutes."
1344	  Ollama: "Emilia vil opgive sit livsv√¶rk for at lege med stumme."
1345	  First pass: "Emilia vil opgive sit livsv√¶rk for at lege med stumme."
1346	  Final: "Emilia vil opgive sit livsv√¶rk for at lege med stumme."
1347	------------------------------------------------------------
1348	Line 180:
1349	  Original: "I won't know unless I give her the chance."
1350	  Google: "Jeg ved ikke, medmindre jeg giver hende chancen."
1351	  Ollama: "Jeg ved det ikke, f√∏r jeg giver hende en chance."
1352	  First pass: "Jeg ved det ikke, medmindre jeg giver hende chancen."
1353	  Final: "Jeg ved det ikke, medmindre jeg giver hende chancen."
1354	------------------------------------------------------------
1355	Line 181:
1356	  Original: "- Uh, Kipo? - I'm not changing my mind on this."
1357	  Google: "- √•h, kipo? - Jeg √¶ndrer ikke mening om dette."
1358	  Ollama: "- √òh, Kipo? - Jeg √¶ndrer ikke mening."
1359	  First pass: "- √òh, Kipo?
1360	- Jeg √¶ndrer ikke mening om det her."
1361	  Critic: "- √òh, Kipo? - Jeg √¶ndrer ikke mening om det her." (CHANGED)
1362	  Final: "- √òh, Kipo? - Jeg √¶ndrer ikke mening om det her."
1363	------------------------------------------------------------
1364	Line 182:
1365	  Original: "The float's gone."
1366	  Google: "Float er v√¶k."
1367	  Ollama: "Fl√•den er v√¶k."
1368	  First pass: "Fl√•den er v√¶k."
1369	  Final: "Fl√•den er v√¶k."
1370	------------------------------------------------------------
1371	Line 183:
1372	  Original: "Oh, come on!"
1373	  Google: "√Öh, kom nu!"
1374	  Ollama: "√Öh, kom nu!"
1375	  First pass: "√Öh, kom nu!"
1376	  Final: "√Öh, kom nu!"
1377	------------------------------------------------------------
1378	Line 184:
1379	  Original: "Ugh! No more tracks."
1380	  Google: "Ugh! Ikke flere numre."
1381	  Ollama: "Ugh! Ingen flere spor."
1382	  First pass: "Ugh! Der er ikke flere spor."
1383	  Final: "Ugh! Der er ikke flere spor."
1384	------------------------------------------------------------
1385	Line 185:
1386	  Original: "And I still can't pick up the sabater's scent."
1387	  Google: "Og jeg kan stadig ikke hente sabaterens duft."
1388	  Ollama: "Og jeg kan stadig ikke finde sabaterens duft."
1389	  First pass: "Og jeg kan stadig ikke opfange sabot√∏rens duft."
1390	  Final: "Og jeg kan stadig ikke opfange sabot√∏rens duft."
1391	------------------------------------------------------------
1392	Line 186:
1393	  Original: "#BRACKET_OPEN#sighs#BRACKET_CLOSE# OK. Now you're just doing it to annoy me."
1394	  Google: "#Bracket_open#sukk#bracket_close#ok. Nu g√∏r du det bare for at irritere mig."
1395	  Ollama: "#BRACKET_OPEN#sukker#BRACKET_CLOSE# Okay. Nu g√∏r du det bare for at irritere mig."
1396	  First pass: "[sukker] OK. Nu g√∏r du det bare for at irritere mig."
1397	  Critic: "OK. Nu g√∏r du det bare for at irritere mig." (CHANGED)
1398	  Final: "OK. Nu g√∏r du det bare for at irritere mig."
1399	------------------------------------------------------------
1400	Line 187:
1401	  Original: "#BRACKET_OPEN#leaves rustling#BRACKET_CLOSE#"
1402	  Google: "#Bracket_open#blade rustling#bracket_close#"
1403	  Ollama: "#BRACKET_OPEN#blade raslende#BRACKET_CLOSE#"
1404	  First pass: "[Raslende blade]"
1405	  Final: "[Raslende blade]"
1406	------------------------------------------------------------
1407	Line 188:
1408	  Original: "Ah! Come out, Emilia!"
1409	  Google: "Ah! Kom ud, Emilia!"
1410	  Ollama: "√Öh! Kom frem, Emilia!"
1411	  First pass: "Ah! Kom frem, Emilia!"
1412	  Final: "Ah! Kom frem, Emilia!"
1413	------------------------------------------------------------
1414	Line 189:
1415	  Original: "- Aah! - Who's Emilia?"
1416	  Google: "- aah! - Hvem er Emilia?"
1417	  Ollama: "- √Öh! - Hvem er Emilia?"
1418	  First pass: "- Aah!
1419	- Hvem er Emilia?"
1420	  Critic: "- Aah! - Hvem er Emilia?" (CHANGED)
1421	  Final: "- Aah! - Hvem er Emilia?"
1422	------------------------------------------------------------
1423	Line 190:
1424	  Original: "Are you looking for her? 'Cause you found us."
1425	  Google: "Leder du efter hende? Fordi du fandt os."
1426	  Ollama: "Leder du efter hende? For du har fundet os."
1427	  First pass: "Leder du efter hende?
1428	Fordi du har fundet os."
1429	  Critic: "Leder du efter hende? For du har fundet os." (CHANGED)
1430	  Final: "Leder du efter hende? For du har fundet os."
1431	------------------------------------------------------------
1432	Line 191:
1433	  Original: "- But who are we? - That's Kameko."
1434	  Google: "- Men hvem er vi? - Det er Kameko."
1435	  Ollama: "- Men hvem er vi? - Det er Kameko."
1436	  First pass: "- Men hvem er vi?
1437	- Det er Kameko."
1438	  Critic: "- Men hvem er vi? - Det er Kameko." (CHANGED)
1439	  Final: "- Men hvem er vi? - Det er Kameko."
1440	------------------------------------------------------------
1441	Line 192:
1442	  Original: "And that's Jeanine."
1443	  Google: "Og det er Jeanine."
1444	  Ollama: "Og det er Jeanine."
1445	  First pass: "Og det er Jeanine."
1446	  Final: "Og det er Jeanine."
1447	------------------------------------------------------------
1448	Line 193:
1449	  Original: "Ugh, of course. Treasure Squirrels."
1450	  Google: "Ugh, selvf√∏lgelig. Treasure egern."
1451	  Ollama: "Ugh, selvf√∏lgelig. Skatteegern."
1452	  First pass: "Ugh, selvf√∏lgelig. Skatteegern."
1453	  Final: "Ugh, selvf√∏lgelig. Skatteegern."
1454	------------------------------------------------------------
1455	Line 194:
1456	  Original: "Well, our friends mysteriously vanished inside a giant float and‚Äî"
1457	  Google: "N√•, vores venner forsvandt mystisk inde i en k√¶mpe flyder og‚Äî"
1458	  Ollama: "N√•, vores venner forsvandt mystisk inde i en k√¶mpe flyder ‚Äì"
1459	  First pass: "N√•, vores venner forsvandt mystisk inde i en k√¶mpe fl√•de og‚Äî"
1460	  Final: "N√•, vores venner forsvandt mystisk inde i en k√¶mpe fl√•de og‚Äî"
1461	------------------------------------------------------------
1462	Line 195:
1463	  Original: "#BRACKET_OPEN#laughs#BRACKET_CLOSE# What a coincidence!"
1464	  Google: "#Bracket_open#griner#bracket_close#hvad en tilf√¶ldighed!"
1465	  Ollama: "#BRACKET_OPEN#griner#BRACKET_CLOSE# Hvad er det for en tilf√¶ldighed!"
1466	  First pass: "[griner] Sikke et tilf√¶lde!"
1467	  Final: "[griner] Sikke et tilf√¶lde!"
1468	------------------------------------------------------------
1469	Line 196:
1470	  Original: "We just found a float at Skyscraper Ridge!"
1471	  Google: "Vi fandt lige en float p√• Skycraper Ridge!"
1472	  Ollama: "Vi har lige fundet en flyder ved Skyscraper Ridge!"
1473	  First pass: "Vi har lige fundet en flyder ved Skyscraper Ridge!"
1474	  Final: "Vi har lige fundet en flyder ved Skyscraper Ridge!"
1475	------------------------------------------------------------
1476	Line 197:
1477	  Original: "And then we hid it!"
1478	  Google: "Og s√• skjulte vi det!"
1479	  Ollama: "Og s√• skjulte vi det!"
1480	  First pass: "Og s√• skjulte vi den!"
1481	  Final: "Og s√• skjulte vi den!"
1482	------------------------------------------------------------
1483	Line 198:
1484	  Original: "#BRACKET_OPEN#whispering#BRACKET_CLOSE# We hide all our treasures to keep them safe."
1485	  Google: "#Bracket_open#hvisking#bracket_close#vi skjuler alle vores skatte for at holde dem i sikkerhed."
1486	  Ollama: "#BRACKET_OPEN#hvisken#BRACKET_CLOSE# Vi gemmer alle vores skatte for at holde dem sikre."
1487	  First pass: "Vi gemmer alle vores skatte
1488	for at holde dem sikre."
1489	  Critic: "Vi gemmer alle vores skatte for at holde dem sikre." (CHANGED)
1490	  Final: "Vi gemmer alle vores skatte for at holde dem sikre."
1491	------------------------------------------------------------
1492	Line 199:
1493	  Original: "So, Emilia wasn't our saboteur."
1494	  Google: "S√• Emilia var ikke vores Saboteur."
1495	  Ollama: "S√• var Emilia alts√• ikke vores sabot√∏r."
1496	  First pass: "S√• Emilia var ikke vores sabot√∏r."
1497	  Critic: "S√• var Emilia alts√• ikke vores sabot√∏r." (CHANGED)
1498	  Final: "S√• var Emilia alts√• ikke vores sabot√∏r."
1499	------------------------------------------------------------
1500	Line 200:
1501	  Original: "- I suppose not. - This time."
1502	  Google: "- Jeg formoder ikke. - Denne gang."
1503	  Ollama: "- Jeg formoder ikke. - Denne gang."
1504	  First pass: "- Det tror jeg ikke.
1505	- Denne gang."
1506	  Critic: "- Det tror jeg ikke. - Denne gang." (CHANGED)
1507	  Final: "- Det tror jeg ikke. - Denne gang."
1508	------------------------------------------------------------
1509	Line 201:
1510	  Original: "That float was filled with people."
1511	  Google: "Den float var fyldt med mennesker."
1512	  Ollama: "Den flydende platform var fyldt med mennesker."
1513	  First pass: "Den vogn var fyldt med mennesker."
1514	  Final: "Den vogn var fyldt med mennesker."
1515	------------------------------------------------------------
1516	Line 202:
1517	  Original: "So, if you could show us where you hid it‚Äî"
1518	  Google: "S√• hvis du kunne vise os, hvor du skjulte det -"
1519	  Ollama: "S√• hvis du ville vise os, hvor du gemte det ‚Äì"
1520	  First pass: "S√• hvis I kunne vise os,
1521	hvor I gemte den‚Äî"
1522	  Critic: "S√• hvis I kunne vise os, hvor I gemte den‚Äî" (CHANGED)
1523	  Final: "S√• hvis I kunne vise os, hvor I gemte den‚Äî"
1524	------------------------------------------------------------
1525	Line 203:
1526	  Original: "Yeah! Let's go save your treasures!"
1527	  Google: "Ja! Lad os gemme dine skatte!"
1528	  Ollama: "Ja! Lad os redde dine skatte!"
1529	  First pass: "Ja! Lad os g√• hen og redde jeres skatte!"
1530	  Final: "Ja! Lad os g√• hen og redde jeres skatte!"
1531	------------------------------------------------------------
1532	Line 204:
1533	  Original: "Eh... uh..."
1534	  Google: "Eh ... √•h ..."
1535	  Ollama: "√òh... √∏h..."
1536	  First pass: "√òh. .. √∏h. .."
1537	  Final: "√òh. .. √∏h. .."
1538	------------------------------------------------------------
1539	Line 205:
1540	  Original: "- What are we waiting for? - For you to tell us where they are."
1541	  Google: "- Hvad venter vi p√•? - For dig at fort√¶lle os, hvor de er."
1542	  Ollama: "- Hvad venter vi p√•? - At du fort√¶ller os, hvor de er."
1543	  First pass: "- Hvad venter vi p√•?
1544	- At I fort√¶ller os, hvor de er."
1545	  Critic: "- Hvad venter vi p√•? - At I fort√¶ller os, hvor de er." (CHANGED)
1546	  Final: "- Hvad venter vi p√•? - At I fort√¶ller os, hvor de er."
1547	------------------------------------------------------------
1548	Line 206:
1549	  Original: "Oh, yeah! #BRACKET_OPEN#laughs#BRACKET_CLOSE#"
1550	  Google: "√Öh, ja! #Bracket_open#griner#bracket_close#"
1551	  Ollama: "√Öh, ja! #BRACKET_OPEN#griner#BRACKET_CLOSE#"
1552	  First pass: "√Öh, ja! [laughs]"
1553	  Final: "√Öh, ja! [laughs]"
1554	------------------------------------------------------------
1555	Line 207:
1556	  Original: "- That's Kameko, by the way. - And that's Jeanine!"
1557	  Google: "- Det er forresten Kameko. - Og det er Jeanine!"
1558	  Ollama: "- Det er i √∏vrigt Kameko. - Og det er Jeanine!"
1559	  First pass: "- Det er Kameko, forresten.
1560	- Og det er Jeanine!"
1561	  Critic: "- Det er Kameko, forresten. - Og det er Jeanine!" (CHANGED)
1562	  Final: "- Det er Kameko, forresten. - Og det er Jeanine!"
1563	------------------------------------------------------------
1564	Line 208:
1565	  Original: "We're going on a treasure hunt!"
1566	  Google: "Vi g√•r p√• en skattejagt!"
1567	  Ollama: "Vi g√•r p√• skattejagt!"
1568	  First pass: "Vi skal p√• skattejagt!"
1569	  Final: "Vi skal p√• skattejagt!"
1570	------------------------------------------------------------
1571	Line 209:
1572	  Original: "- Oh, good. This is gonna be fun. - We're going on a treasure hunt!"
1573	  Google: "- √Öh, god. Dette bliver sjovt. - Vi g√•r p√• en skattejagt!"
1574	  Ollama: "- √Öh, godt. Det her bliver sjovt. - Vi tager p√• skattejagt!"
1575	  First pass: "- √Öh, godt. Det bliver sjovt.
1576	- Vi skal p√• skattejagt!"
1577	  Critic: "- √Öh, godt. Det bliver sjovt. - Vi skal p√• skattejagt!" (CHANGED)
1578	  Final: "- √Öh, godt. Det bliver sjovt. - Vi skal p√• skattejagt!"
1579	------------------------------------------------------------
1580	Line 210:
1581	  Original: "We're going on a treasure hunt!"
1582	  Google: "Vi g√•r p√• en skattejagt!"
1583	  Ollama: "Vi g√•r p√• skattejagt!"
1584	  First pass: "Vi tager p√• skattejagt!"
1585	  Final: "Vi tager p√• skattejagt!"
1586	------------------------------------------------------------
1587	Line 211:
1588	  Original: "Uh, Kipo?"
1589	  Google: "√Öh, kipo?"
1590	  Ollama: "√Öh, Kipo?"
1591	  First pass: "√òh, Kipo?"
1592	  Final: "√òh, Kipo?"
1593	------------------------------------------------------------
1594	Line 212:
1595	  Original: "Hey, Kipo! It's getting hot in here!"
1596	  Google: "Hej, Kipo! Det bliver varmt herinde!"
1597	  Ollama: "Hej, Kipo! Det bliver varmt herinde!"
1598	  First pass: "Hej, Kipo! Det bliver varmt herinde!"
1599	  Final: "Hej, Kipo! Det bliver varmt herinde!"
1600	------------------------------------------------------------
1601	Line 213:
1602	  Original: "Yeah, why'd you move us?"
1603	  Google: "Ja, hvorfor flyttede du os?"
1604	  Ollama: "Ja, hvorfor flyttede du os?"
1605	  First pass: "Ja, hvorfor flyttede du os?"
1606	  Final: "Ja, hvorfor flyttede du os?"
1607	------------------------------------------------------------
1608	Line 214:
1609	  Original: "Why do you think she's not answering us?"
1610	  Google: "Hvorfor tror du, at hun ikke svarer os?"
1611	  Ollama: "Hvorfor tror du, hun ikke svarer os?"
1612	  First pass: "Hvorfor tror du, hun ikke svarer os?"
1613	  Final: "Hvorfor tror du, hun ikke svarer os?"
1614	------------------------------------------------------------
1615	Line 215:
1616	  Original: "Are we dead?"
1617	  Google: "Er vi d√∏de?"
1618	  Ollama: "Er vi d√∏de?"
1619	  First pass: "Er vi d√∏de?"
1620	  Final: "Er vi d√∏de?"
1621	------------------------------------------------------------
1622	Line 216:
1623	  Original: "#BRACKET_OPEN#gasps#BRACKET_CLOSE#"
1624	  Google: "#Bracket_open#gisps#bracket_close#"
1625	  Ollama: "#√•nden i halsen#"
1626	  First pass: "[ud√•nder]"
1627	  Final: "[ud√•nder]"
1628	------------------------------------------------------------
1629	Line 217:
1630	  Original: "Panic setting in. #BRACKET_OPEN#chuckles#BRACKET_CLOSE#"
1631	  Google: "Panikindstilling i.#Bracket_open#Chuckles#Bracket_Close#"
1632	  Ollama: "Panikken melder sig. #BRACKET_OPEN#fniser#BRACKET_CLOSE#"
1633	  First pass: "Panikken begynder at melde sig. [griner]"
1634	  Critic: "Panikken begynder at melde sig. [fniser]" (CHANGED)
1635	  Final: "Panikken begynder at melde sig. [fniser]"
1636	------------------------------------------------------------
1637	Line 218:
1638	  Original: "Everyone stay calm!"
1639	  Google: "Alle forbliver rolige!"
1640	  Ollama: "Alle bevar roen!"
1641	  First pass: "Alle bliv rolige!"
1642	  Final: "Alle bliv rolige!"
1643	------------------------------------------------------------
1644	Line 219:
1645	  Original: "We're going on a treasure hunt!"
1646	  Google: "Vi g√•r p√• en skattejagt!"
1647	  Ollama: "Vi g√•r p√• skattejagt!"
1648	  First pass: "Vi skal p√• skattejagt!"
1649	  Final: "Vi skal p√• skattejagt!"
1650	------------------------------------------------------------
1651	Line 220:
1652	  Original: "- We're going on a treasure hunt! - Treasure hunt! Treasure hunt!"
1653	  Google: "- Vi g√•r p√• en skattejagt! - Skatjagt! Skatjagt!"
1654	  Ollama: "- Vi skal p√• skattejagt! - Skattejagt! Skattejagt!"
1655	  First pass: "- Vi tager p√• skattejagt!
1656	- Skattejagt! Skattejagt!"
1657	  Critic: "- Vi tager p√• skattejagt! - Skattejagt! Skattejagt!" (CHANGED)
1658	  Final: "- Vi tager p√• skattejagt! - Skattejagt! Skattejagt!"
1659	------------------------------------------------------------
1660	Line 221:
1661	  Original: "- On a treasure hunt! - Here we go!"
1662	  Google: "- P√• en skattejagt! - Her g√•r vi!"
1663	  Ollama: "- P√• skattejagt! - Lad os komme afsted!"
1664	  First pass: "- P√• skattejagt! 
1665	- Lad os komme i gang!"
1666	  Critic: "- P√• skattejagt! - Lad os komme i gang!" (CHANGED)
1667	  Final: "- P√• skattejagt! - Lad os komme i gang!"
1668	------------------------------------------------------------
1669	Line 222:
1670	  Original: "- Ah, ah, ah, ah, - Ho, ho, ho, ho!"
1671	  Google: "- Ah, ah, ah, ah, - ho, ho, ho, ho!"
1672	  Ollama: "- Ah, ah, ah, ah, - Ho, ho, ho, ho!"
1673	  First pass: "- Ah, ah, ah, ah,
1674	- Ho, ho, ho, ho!"
1675	  Final: "- Ah, ah, ah, ah,
1676	- Ho, ho, ho, ho!"
1677	------------------------------------------------------------
1678	Line 223:
1679	  Original: "Where is the float? Tell us! Tell us, now!"
1680	  Google: "Hvor er float? Fort√¶l os! Fort√¶l os nu!"
1681	  Ollama: "Hvor er fl√•den? Fort√¶l os det! Fort√¶l os det nu!"
1682	  First pass: "Hvor er fl√•den? Fort√¶l os! Fort√¶l os det nu!"
1683	  Critic: "Hvor er fl√•den? Fort√¶l os det! Fort√¶l os det nu!" (CHANGED)
1684	  Final: "Hvor er fl√•den? Fort√¶l os det! Fort√¶l os det nu!"
1685	------------------------------------------------------------
1686	Line 224:
1687	  Original: "- You're looking for a float? - What a coincidence. We found one!"
1688	  Google: "- Leder du efter en float? - Hvilken tilf√¶ldighed. Vi fandt en!"
1689	  Ollama: "- Leder du efter en float? - Sikke en tilf√¶ldighed! Vi har fundet en!"
1690	  First pass: "- Er du p√• udkig efter en fl√•de?
1691	- Sikke en tilf√¶ldighed. Vi har fundet en!"
1692	  Final: "- Er du p√• udkig efter en fl√•de?
1693	- Sikke en tilf√¶ldighed. Vi har fundet en!"
1694	------------------------------------------------------------
1695	Line 225:
1696	  Original: "We know! You were going to show us where you hid it."
1697	  Google: "Vi ved! Du skulle vise os, hvor du skjulte det."
1698	  Ollama: "Vi ved det! Du skulle vise os, hvor du gemte det."
1699	  First pass: "Vi ved det! Du skulle vise os, hvor du gemte den."
1700	  Critic: "Vi ved det! Du skulle vise os, hvor du havde gemt den." (CHANGED)
1701	  Final: "Vi ved det! Du skulle vise os, hvor du havde gemt den."
1702	------------------------------------------------------------
1703	Line 226:
1704	  Original: "We can never remember where we put our treasures."
1705	  Google: "Vi kan aldrig huske, hvor vi s√¶tter vores skatte."
1706	  Ollama: "Vi kan aldrig huske, hvor vi gemmer vores skatte."
1707	  First pass: "Vi kan aldrig huske, hvor vi gemmer vores skatte."
1708	  Final: "Vi kan aldrig huske, hvor vi gemmer vores skatte."
1709	------------------------------------------------------------
1710	Line 227:
1711	  Original: "- Shocker. - No, that's Kameko."
1712	  Google: "- Shocker. - Nej, det er Kameko."
1713	  Ollama: "- Shocker. - Nej, det er Kameko."
1714	  First pass: "- Sikke en overraskelse.
1715	- Nej, det er Kameko."
1716	  Critic: "- Sikke en overraskelse. - Nej, det er Kameko." (CHANGED)
1717	  Final: "- Sikke en overraskelse. - Nej, det er Kameko."
1718	------------------------------------------------------------
1719	Line 228:
1720	  Original: "And that's Treasure Hill."
1721	  Google: "Og det er Treasure Hill."
1722	  Ollama: "Og det er Treasure Hill."
1723	  First pass: "Og det er Skattebjerget."
1724	  Final: "Og det er Skattebjerget."
1725	------------------------------------------------------------
1726	Line 229:
1727	  Original: "By chance, do you bury your treasures there?"
1728	  Google: "Ved en tilf√¶ldighed begraver du dine skatte der?"
1729	  Ollama: "Ved en tilf√¶ldighed, begraver du dine skatte der?"
1730	  First pass: "Tilf√¶ldigvis, begraver I jeres skatte der?"
1731	  Final: "Tilf√¶ldigvis, begraver I jeres skatte der?"
1732	------------------------------------------------------------
1733	Line 230:
1734	  Original: "Oh-ho, ho! I just remembered that yes!"
1735	  Google: "Oh-ho, ho! Jeg huskede bare det ja!"
1736	  Ollama: "Oh-ho, ho! Det huskede jeg lige!"
1737	  First pass: "Ho-ho, ho! Jeg kom lige i tanke om det!"
1738	  Final: "Ho-ho, ho! Jeg kom lige i tanke om det!"
1739	------------------------------------------------------------
1740	Line 231:
1741	  Original: "#BRACKET_OPEN#laughing#BRACKET_CLOSE#"
1742	  Google: "#Bracket_open#griner#bracket_close#"
1743	  Ollama: "#BRACKET_OPEN#griner#BRACKET_CLOSE#"
1744	  First pass: "[griner]"
1745	  Final: "[griner]"
1746	------------------------------------------------------------
1747	Line 232:
1748	  Original: "#BRACKET_OPEN#growl#BRACKET_CLOSE#"
1749	  Google: "#Bracket_open#knurr#bracket_close#"
1750	  Ollama: "#BRACKET_OPEN#knurh#BRACKET_CLOSE#"
1751	  First pass: "[knurren]"
1752	  Final: "[knurren]"
1753	------------------------------------------------------------
1754	Line 233:
1755	  Original: "Benson! Dave! Anyone!"
1756	  Google: "Benson! Dave! Nogen!"
1757	  Ollama: "Benson! Dave! Nogen!"
1758	  First pass: "Benson! Dave! Nogen!"
1759	  Final: "Benson! Dave! Nogen!"
1760	------------------------------------------------------------
1761	Line 234:
1762	  Original: "#BRACKET_OPEN#laughing#BRACKET_CLOSE#"
1763	  Google: "#Bracket_open#griner#bracket_close#"
1764	  Ollama: "#BRACKET_OPEN#griner#BRACKET_CLOSE#"
1765	  First pass: "[latter]"
1766	  Final: "[latter]"
1767	------------------------------------------------------------
1768	Line 235:
1769	  Original: "#BRACKET_OPEN#laughing#BRACKET_CLOSE#"
1770	  Google: "#Bracket_open#griner#bracket_close#"
1771	  Ollama: "#BRACKET_OPEN#griner#BRACKET_CLOSE#"
1772	  First pass: "[latter]"
1773	  Final: "[latter]"
1774	------------------------------------------------------------
1775	Line 236:
1776	  Original: "Good suggestion to play a game, Lio."
1777	  Google: "Godt forslag til at spille et spil, Lio."
1778	  Ollama: "Godt forslag, Lio ‚Äì lad os spille et spil."
1779	  First pass: "Godt forslag at lege en leg, Lio."
1780	  Final: "Godt forslag at lege en leg, Lio."
1781	------------------------------------------------------------
1782	Line 237:
1783	  Original: "It calmed everyone down."
1784	  Google: "Det beroligede alle."
1785	  Ollama: "Det beroligede alle."
1786	  First pass: "Det beroligede alle."
1787	  Final: "Det beroligede alle."
1788	------------------------------------------------------------
1789	Line 238:
1790	  Original: "Almost everyone."
1791	  Google: "N√¶sten alle."
1792	  Ollama: "N√¶sten alle."
1793	  First pass: "N√¶sten alle."
1794	  Final: "N√¶sten alle."
1795	------------------------------------------------------------
1796	Line 239:
1797	  Original: "#BRACKET_OPEN#anxious chuckling#BRACKET_CLOSE#"
1798	  Google: "#Bracket_open#√¶ngstelig chuckling#bracket_close#"
1799	  Ollama: "#BRACKET_OPEN#nerv√∏s latter#BRACKET_CLOSE#"
1800	  First pass: "[nerv√∏s latter]"
1801	  Critic: "[nerv√∏s latterlyd]" (CHANGED)
1802	  Final: "[nerv√∏s latterlyd]"
1803	------------------------------------------------------------
1804	Line 240:
1805	  Original: "Hah! Too fast."
1806	  Google: "Hah! For hurtigt."
1807	  Ollama: "Hah! For hurtigt."
1808	  First pass: "Ha! For hurtigt."
1809	  Final: "Ha! For hurtigt."
1810	------------------------------------------------------------
1811	Line 241:
1812	  Original: "I've got the reflexes of a tiger shark."
1813	  Google: "Jeg har reflekser af en tigerhaj."
1814	  Ollama: "Jeg har en tigerhajs reflekser."
1815	  First pass: "Jeg har reflekserne fra en tigerhaj."
1816	  Final: "Jeg har reflekserne fra en tigerhaj."
1817	------------------------------------------------------------
1818	Line 242:
1819	  Original: "- Tiger sharks don't have good refl‚Äî aah! - Hah! Gotcha."
1820	  Google: "- Tigerhajer har ikke gode refleks - aah! - hah! Gotcha."
1821	  Ollama: "- Tigerhajer har ikke gode reflekser ‚Äì aah! ‚Äì hah! Fanged dig!"
1822	  First pass: "- Tigerhajer har ikke gode reflekser ‚Äì √•h!
1823	- Ha! Fangede dig."
1824	  Critic: "- Tigerhajer har ikke gode reflekser ‚Äì √•h! - Ha! Jeg fik dig." (CHANGED)
1825	  Final: "- Tigerhajer har ikke gode reflekser ‚Äì √•h! - Ha! Jeg fik dig."
1826	------------------------------------------------------------
1827	Line 243:
1828	  Original: "- #BRACKET_OPEN#laughing#BRACKET_CLOSE# - #BRACKET_OPEN#loud thud#BRACKET_CLOSE#"
1829	  Google: "-#bracket_open#griner#bracket_close# -#bracket_open#h√∏jt thud#bracket_close#"
1830	  Ollama: "- #BRACKET_OPEN#latter#BRACKET_CLOSE# - #BRACKET_OPEN#h√∏jt dunk#BRACKET_CLOSE#"
1831	  First pass: "- [laughing]
1832	- [h√∏jt dunk]"
1833	  Final: "- [laughing]
1834	- [h√∏jt dunk]"
1835	------------------------------------------------------------
1836	Line 244:
1837	  Original: "I'm starting to think we're trapped in here!"
1838	  Google: "Jeg begynder at tro, at vi er fanget her!"
1839	  Ollama: "Jeg begynder at tro, at vi er fanget her!"
1840	  First pass: "Jeg begynder at tro, at vi er fanget herinde!"
1841	  Final: "Jeg begynder at tro, at vi er fanget herinde!"
1842	------------------------------------------------------------
1843	Line 245:
1844	  Original: "Hey guys, I'm sensing some freaked-out vibes,"
1845	  Google: "Hej fyre, jeg fornemmer nogle freaked-out vibes,"
1846	  Ollama: "Hej folkens, jeg fornemmer, at der er en trykket stemning."
1847	  First pass: "Hey folkens, jeg fornemmer,
1848	some ret paniske vibes."
1849	  Critic: "Hey folkens, jeg fornemmer nogle ret paniske vibes." (CHANGED)
1850	  Final: "Hey folkens, jeg fornemmer nogle ret paniske vibes."
1851	------------------------------------------------------------
1852	Line 246:
1853	  Original: "- but I know Kipo will find us. - I'm gonna die!"
1854	  Google: "- Men jeg ved, at Kipo vil finde os. - Jeg d√∏r!"
1855	  Ollama: "- Men jeg ved, at Kipo nok skal finde os. - Jeg d√∏r!"
1856	  First pass: "- men jeg ved, at Kipo nok skal finde os.
1857	- Jeg kommer til at d√∏!"
1858	  Final: "- men jeg ved, at Kipo nok skal finde os.
1859	- Jeg kommer til at d√∏!"
1860	------------------------------------------------------------
1861	Line 247:
1862	  Original: "I didn't even get to ask him to Prahm."
1863	  Google: "Jeg fik ikke engang bede ham om Prahm."
1864	  Ollama: "Jeg n√•ede ikke engang at sp√∏rge ham om Prahm."
1865	  First pass: "Jeg n√•ede ikke engang at sp√∏rge ham om Prahm."
1866	  Final: "Jeg n√•ede ikke engang at sp√∏rge ham om Prahm."
1867	------------------------------------------------------------
1868	Line 248:
1869	  Original: "#BRACKET_OPEN#laughing#BRACKET_CLOSE#"
1870	  Google: "#Bracket_open#griner#bracket_close#"
1871	  Ollama: "#BRACKET_OPEN#griner#BRACKET_CLOSE#"
1872	  First pass: "[latter]"
1873	  Final: "[latter]"
1874	------------------------------------------------------------
1875	Line 249:
1876	  Original: "I get it. Asking someone to Prahm is a lot of pressure."
1877	  Google: "Jeg f√•r det. At bede nogen om Prahm er meget pres."
1878	  Ollama: "Jeg forst√•r det. At invitere nogen til Prahm er en stor pressionsfaktor."
1879	  First pass: "Jeg forst√•r det. At sp√∏rge nogen til Prahm er et stort pres."
1880	  Final: "Jeg forst√•r det. At sp√∏rge nogen til Prahm er et stort pres."
1881	------------------------------------------------------------
1882	Line 250:
1883	  Original: "I just want it to be perfect."
1884	  Google: "Jeg vil bare have, at det skal v√¶re perfekt."
1885	  Ollama: "Jeg vil bare have, at det er perfekt."
1886	  First pass: "Jeg vil bare have det til at v√¶re perfekt."
1887	  Final: "Jeg vil bare have det til at v√¶re perfekt."
1888	------------------------------------------------------------
1889	Line 251:
1890	  Original: "Don't worry about all of that."
1891	  Google: "Du skal ikke bekymre dig om alt dette."
1892	  Ollama: "Bekymr dig ikke om det hele."
1893	  First pass: "Bare rolig med alt det."
1894	  Final: "Bare rolig med alt det."
1895	------------------------------------------------------------
1896	Line 252:
1897	  Original: "You just have to be confident. Check it out."
1898	  Google: "Du skal bare v√¶re selvsikker. Tjek det ud."
1899	  Ollama: "Du skal bare v√¶re selvsikker. Tjek lige det ud."
1900	  First pass: "Du skal bare v√¶re selvsikker. Se her."
1901	  Critic: "Du skal bare v√¶re selvsikker. Pr√∏v at se." (CHANGED)
1902	  Final: "Du skal bare v√¶re selvsikker. Pr√∏v at se."
1903	------------------------------------------------------------
1904	Line 253:
1905	  Original: "Hey, Song, you wanna go to Prahm with me?"
1906	  Google: "Hej, sang, vil du g√• til Prahm med mig?"
1907	  Ollama: "Hej Song, vil du med til Prahm?"
1908	  First pass: "Hey, Song, vil du med til Prahm?"
1909	  Final: "Hey, Song, vil du med til Prahm?"
1910	------------------------------------------------------------
1911	Line 254:
1912	  Original: "No... duh!"
1913	  Google: "Nej ... duh!"
1914	  Ollama: "Ja... selvf√∏lgelig!"
1915	  First pass: "Ja. .. selvf√∏lgelig!"
1916	  Final: "Ja. .. selvf√∏lgelig!"
1917	------------------------------------------------------------
1918	Line 255:
1919	  Original: "Whoo! What a ride. #BRACKET_OPEN#chuckles#BRACKET_CLOSE# I was nervous when I heard no,"
1920	  Google: "Whoo! Hvad en tur. #Bracket_open#chuckles#bracket_close#jeg var nerv√∏s, da jeg h√∏rte nej,"
1921	  Ollama: "Whoo! Sikke en tur! #chuckles# Jeg var nerv√∏s, da jeg h√∏rte et nej."
1922	  First pass: "Whoo! Sikke en tur. [griner] Jeg var nerv√∏s, da jeg h√∏rte et nej,"
1923	  Final: "Whoo! Sikke en tur. [griner] Jeg var nerv√∏s, da jeg h√∏rte et nej,"
1924	------------------------------------------------------------
1925	Line 256:
1926	  Original: "but I felt a lot better when you got to the "duh.""
1927	  Google: "Men jeg f√∏lte mig meget bedre, da du kom til "duh.""
1928	  Ollama: "Men jeg fik det meget bedre, da du n√•ede til "duh."
1929	  First pass: "Men jeg fik det meget bedre, da du sagde 'duh'."
1930	  Critic: "Men jeg fik det meget bedre, da du svarede 'duh'." (CHANGED)
1931	  Final: "Men jeg fik det meget bedre, da du svarede 'duh'."
1932	------------------------------------------------------------
1933	Line 257:
1934	  Original: "Your turn."
1935	  Google: "Din tur."
1936	  Ollama: "Din tur."
1937	  First pass: "Din tur."
1938	  Final: "Din tur."
1939	------------------------------------------------------------
1940	Line 258:
1941	  Original: "#BRACKET_OPEN#exhales#BRACKET_CLOSE#"
1942	  Google: "#Bracket_open#ud√•nding#bracket_close#"
1943	  Ollama: "#BRACKET_OPEN#ud√•nder#BRACKET_CLOSE#"
1944	  First pass: "[ud√•nder]"
1945	  Final: "[ud√•nder]"
1946	------------------------------------------------------------
1947	Line 259:
1948	  Original: "Hey, Troy."
1949	  Google: "Hej, Troy."
1950	  Ollama: "Hej, Troy."
1951	  First pass: "Hej, Troy."
1952	  Final: "Hej, Troy."
1953	------------------------------------------------------------
1954	Line 260:
1955	  Original: "- You wanna go to‚Äî huh? - #BRACKET_OPEN#roaring#BRACKET_CLOSE#"
1956	  Google: "- Vil du g√• til - he? -#bracket_open#br√∏lende#bracket_close#"
1957	  Ollama: "- Vil du med til‚Äî hva? - #BRACKET_OPEN#br√∏lende#BRACKET_CLOSE#"
1958	  First pass: "- Vil du med‚Äî huh?"
1959	  Final: "- Vil du med‚Äî huh?"
1960	------------------------------------------------------------
1961	Line 261:
1962	  Original: "Kipo! Over here!"
1963	  Google: "Kipo! Herovre!"
1964	  Ollama: "Kipo! Herover!"
1965	  First pass: "Kipo! Herover!"
1966	  Final: "Kipo! Herover!"
1967	------------------------------------------------------------
1968	Line 262:
1969	  Original: "Please help us, there's not much air left!"
1970	  Google: "Hj√¶lp os, der er ikke meget luft tilbage!"
1971	  Ollama: "Hj√¶lp os, der er ikke meget luft tilbage!"
1972	  First pass: "Hj√¶lp os, der er ikke meget luft tilbage!"
1973	  Final: "Hj√¶lp os, der er ikke meget luft tilbage!"
1974	------------------------------------------------------------
1975	Line 263:
1976	  Original: "What? I need air!"
1977	  Google: "Hvad? Jeg har brug for luft!"
1978	  Ollama: "Hvad? Jeg har brug for luft!"
1979	  First pass: "Hvad? Jeg har brug for luft!"
1980	  Final: "Hvad? Jeg har brug for luft!"
1981	------------------------------------------------------------
1982	Line 264:
1983	  Original: "- #BRACKET_OPEN#Lio in distance#BRACKET_CLOSE# Over here! Kipo! - #BRACKET_OPEN#gasps#BRACKET_CLOSE#"
1984	  Google: "-#bracket_open#lio i afstand#bracket_close#herover! Kipo! -#bracket_open#gisps#bracket_close#"
1985	  Ollama: "‚Äì #BRACKET_OPEN#Lio p√• afstand#BRACKET_CLOSE# Herhenne! Kipo! ‚Äì #BRACKET_OPEN#√•nder#BRACKET_CLOSE#"
1986	  First pass: "- [Lio i det fjerne] Herover! Kipo!
1987	- [st√∏nner]"
1988	  Critic: "- [Lio i det fjerne] Herover! Kipo! - [st√∏nner]" (CHANGED)
1989	  Final: "- [Lio i det fjerne] Herover! Kipo! - [st√∏nner]"
1990	------------------------------------------------------------
1991	Line 265:
1992	  Original: "#BRACKET_OPEN#growls#BRACKET_CLOSE#"
1993	  Google: "#Bracket_open#knurr#bracket_close#"
1994	  Ollama: "#BRACKET_OPEN#knurrer#BRACKET_CLOSE#"
1995	  First pass: "[br√∏ler]"
1996	  Final: "[br√∏ler]"
1997	------------------------------------------------------------
1998	Line 266:
1999	  Original: "Treasure!"
2000	  Google: "Skat!"
2001	  Ollama: "Skat!"
2002	  First pass: "Skatte!"
2003	  Final: "Skatte!"
2004	------------------------------------------------------------
2005	Line 267:
2006	  Original: "#BRACKET_OPEN#Wolf#BRACKET_CLOSE# That's our stuff! The float's gotta be in there, too."
2007	  Google: "#Bracket_open#ulv#bracket_close#det er vores ting! Flyderen skal ogs√• v√¶re derinde."
2008	  Ollama: "#BRACKET_OPEN#Ulven#BRACKET_CLOSE# Det er vores grej! Flyderen skal ogs√• v√¶re der."
2009	  First pass: "[Ulvehyl] Det er vores ting! Fl√•den m√• ogs√• v√¶re derinde."
2010	  Critic: "[Ulvehyl] Det er vores ting! Fl√•den skal ogs√• v√¶re derinde." (CHANGED)
2011	  Final: "[Ulvehyl] Det er vores ting! Fl√•den skal ogs√• v√¶re derinde."
2012	------------------------------------------------------------
2013	Line 268:
2014	  Original: "#BRACKET_OPEN#growling#BRACKET_CLOSE#"
2015	  Google: "#Bracket_open#knurrende#bracket_close#"
2016	  Ollama: "#BRACKET_OPEN#br√∏len#BRACKET_CLOSE#"
2017	  First pass: "[br√∏len]"
2018	  Final: "[br√∏len]"
2019	------------------------------------------------------------
2020	Line 269:
2021	  Original: "#BRACKET_OPEN#screaming#BRACKET_CLOSE#"
2022	  Google: "#Bracket_open#skrigende#bracket_close#"
2023	  Ollama: "#BRACKET_OPEN#skrigende#BRACKET_CLOSE#"
2024	  First pass: "[skrigende]"
2025	  Final: "[skrigende]"
2026	------------------------------------------------------------
2027	Line 270:
2028	  Original: "#BRACKET_OPEN#screaming, grunting#BRACKET_CLOSE#"
2029	  Google: "#Bracket_open#skrigende, gryntende#bracket_close#"
2030	  Ollama: "#BRACKET_OPEN#skrigende, gryntende#BRACKET_CLOSE#"
2031	  First pass: "[skrigende, gryntende]"
2032	  Final: "[skrigende, gryntende]"
2033	------------------------------------------------------------
2034	Line 271:
2035	  Original: "#BRACKET_OPEN#screaming#BRACKET_CLOSE#"
2036	  Google: "#Bracket_open#skrigende#bracket_close#"
2037	  Ollama: "#BRACKET_OPEN#skrigende#BRACKET_CLOSE#"
2038	  First pass: "[skrig]"
2039	  Final: "[skrig]"
2040	------------------------------------------------------------
2041	Line 272:
2042	  Original: "Aah!"
2043	  Google: "Aah!"
2044	  Ollama: "Aah!"
2045	  First pass: "Aah!"
2046	  Final: "Aah!"
2047	------------------------------------------------------------
2048	Line 273:
2049	  Original: "#BRACKET_OPEN#panting, grunting#BRACKET_CLOSE#"
2050	  Google: "#Bracket_open#panting, grynting#bracket_close#"
2051	  Ollama: "#BRACKET_OPEN#st√∏nnende, gryntende#BRACKET_CLOSE#"
2052	  First pass: "[forpustet, grynten]"
2053	  Final: "[forpustet, grynten]"
2054	------------------------------------------------------------
2055	Line 274:
2056	  Original: "Huh?"
2057	  Google: "Huh?"
2058	  Ollama: "Hvad?"
2059	  First pass: "Hvad?"
2060	  Final: "Hvad?"
2061	------------------------------------------------------------
2062	Line 275:
2063	  Original: "#BRACKET_OPEN#growling#BRACKET_CLOSE#"
2064	  Google: "#Bracket_open#knurrende#bracket_close#"
2065	  Ollama: "#BRACKET_OPEN#br√∏len#BRACKET_CLOSE#"
2066	  First pass: "[br√∏len]"
2067	  Final: "[br√∏len]"
2068	------------------------------------------------------------
2069	Line 276:
2070	  Original: "Aah!"
2071	  Google: "Aah!"
2072	  Ollama: "Aah!"
2073	  First pass: "Aah!"
2074	  Final: "Aah!"
2075	------------------------------------------------------------
2076	Line 277:
2077	  Original: "Uhh!"
2078	  Google: "Uhh!"
2079	  Ollama: "√òh!"
2080	  First pass: "Ugh!"
2081	  Final: "Ugh!"
2082	------------------------------------------------------------
2083	Line 278:
2084	  Original: "- Oh. - #BRACKET_OPEN#gasps#BRACKET_CLOSE#"
2085	  Google: "- √Öh. -#bracket_open#gisps#bracket_close#"
2086	  Ollama: "- √Öh. - #BRACKET_OPEN#gisp#BRACKET_CLOSE#"
2087	  First pass: "- √Öh.
2088	- [gasps]"
2089	  Critic: "- √Öh. -
2090	[gasps]" (CHANGED)
2091	  Final: "- √Öh. -
2092	[gasps]"
2093	------------------------------------------------------------
2094	Line 279:
2095	  Original: "No! Kipo!"
2096	  Google: "Ingen! Kipo!"
2097	  Ollama: "Nej! Kipo!"
2098	  First pass: "Nej! Kipo!"
2099	  Final: "Nej! Kipo!"
2100	------------------------------------------------------------
2101	Line 280:
2102	  Original: "#BRACKET_OPEN#grunting#BRACKET_CLOSE#"
2103	  Google: "#Bracket_open#grynting#bracket_close#"
2104	  Ollama: "#BRACKET_OPEN#st√∏nnen#BRACKET_CLOSE#"
2105	  First pass: "[st√∏nner]"
2106	  Final: "[st√∏nner]"
2107	------------------------------------------------------------
2108	Line 281:
2109	  Original: "Are you OK?"
2110	  Google: "Er du ok?"
2111	  Ollama: "Er du okay?"
2112	  First pass: "Er du okay?"
2113	  Final: "Er du okay?"
2114	------------------------------------------------------------
2115	Line 282:
2116	  Original: "#BRACKET_OPEN#with effort#BRACKET_CLOSE# I'm fine."
2117	  Google: "#Bracket_open#med indsats#bracket_close#Jeg har det godt."
2118	  Ollama: "#BRACKET_OPEN#med m√∏je#BRACKET_CLOSE# Jeg har det godt."
2119	  First pass: "[med anstrengelse] Jeg er okay."
2120	  Final: "[med anstrengelse] Jeg er okay."
2121	------------------------------------------------------------
2122	Line 283:
2123	  Original: "You could have been killed."
2124	  Google: "Du kunne have v√¶ret dr√¶bt."
2125	  Ollama: "Du kunne v√¶re blevet dr√¶bt."
2126	  First pass: "Du kunne v√¶re blevet dr√¶bt."
2127	  Final: "Du kunne v√¶re blevet dr√¶bt."
2128	------------------------------------------------------------
2129	Line 284:
2130	  Original: "#BRACKET_OPEN#chuckles#BRACKET_CLOSE#"
2131	  Google: "#Bracket_open#chuckles#bracket_close#"
2132	  Ollama: "#BRACKET_OPEN#fniser#BRACKET_CLOSE#"
2133	  First pass: "[fniser]"
2134	  Final: "[fniser]"
2135	------------------------------------------------------------
2136	Line 285:
2137	  Original: "#BRACKET_OPEN#screaming and groaning#BRACKET_CLOSE#"
2138	  Google: "#Bracket_open#skrigende og st√∏nnende#bracket_close#"
2139	  Ollama: "#BRACKET_OPEN#skrigende og st√∏nende#BRACKET_CLOSE#"
2140	  First pass: "[skrigende og st√∏nende]"
2141	  Final: "[skrigende og st√∏nende]"
2142	------------------------------------------------------------
2143	Line 286:
2144	  Original: "#BRACKET_OPEN#gasping for air#BRACKET_CLOSE# Oh, sweet!"
2145	  Google: "#Bracket_open#gisping efter luft#bracket_close#√•h, s√∏d!"
2146	  Ollama: "#BRACKET_OPEN#forpustet#BRACKET_CLOSE# √Öh, l√¶kkert!"
2147	  First pass: "[forpustet efter vejret] √Öh, sk√∏nt!"
2148	  Final: "[forpustet efter vejret] √Öh, sk√∏nt!"
2149	------------------------------------------------------------
2150	Line 287:
2151	  Original: "Sweet air!"
2152	  Google: "S√∏d luft!"
2153	  Ollama: "S√∏d luft!"
2154	  First pass: "√Öh, dejlig luft!"
2155	  Final: "√Öh, dejlig luft!"
2156	------------------------------------------------------------
2157	Line 288:
2158	  Original: "Phew! I knew everything would work out in the end."
2159	  Google: "Phew! Jeg vidste, at alt ville fungere til sidst."
2160	  Ollama: "Puh! Jeg vidste, det hele ville g√• godt til sidst."
2161	  First pass: "Puh! Jeg vidste, det ville g√• godt til sidst."
2162	  Final: "Puh! Jeg vidste, det ville g√• godt til sidst."
2163	------------------------------------------------------------
2164	Line 289:
2165	  Original: "#BRACKET_OPEN#Dave gagging#BRACKET_CLOSE# Tasted my lunch again. I only wanted to eat it once."
2166	  Google: "#Bracket_open#dave gagging#bracket_close#smagte min frokost igen. Jeg ville kun spise det en gang."
2167	  Ollama: "#BRACKET_OPEN#Dave br√¶kker sig#BRACKET_CLOSE# Smagte min frokost igen. Jeg ville kun spise den √©n gang."
2168	  First pass: "[Dave br√¶kker sig] Smagte min frokost igen. Jeg ville kun spise den √©n gang."
2169	  Final: "[Dave br√¶kker sig] Smagte min frokost igen. Jeg ville kun spise den √©n gang."
2170	------------------------------------------------------------
2171	Line 290:
2172	  Original: "- #BRACKET_OPEN#loud thud#BRACKET_CLOSE# - That was double the calories. #BRACKET_OPEN#groans#BRACKET_CLOSE#"
2173	  Google: "-#bracket_open#h√∏jlydt thud#bracket_close# - det var dobbelt s√• meget som kalorier. #Bracket_open#st√∏nn#bracket_close#"
2174	  Ollama: "‚Äì #BRACKET_OPEN#h√∏j dunk#BRACKET_CLOSE# ‚Äì Det var dobbelt s√• mange kalorier. #BRACKET_OPEN#st√∏n#BRACKET_CLOSE#"
2175	  First pass: "- [h√∏j lyd]
2176	- Det var dobbelt s√• mange kalorier. [st√∏nner]"
2177	  Critic: "- [h√∏j sm√¶ld]
2178	- Det var dobbelt s√• mange kalorier. [st√∏nner]" (CHANGED)
2179	  Final: "- [h√∏j sm√¶ld]
2180	- Det var dobbelt s√• mange kalorier. [st√∏nner]"
2181	------------------------------------------------------------
2182	Line 291:
2183	  Original: "Thank you, sweet jaguar girl!"
2184	  Google: "Tak, Sweet Jaguar Girl!"
2185	  Ollama: "Tak, s√∏de jaguarpige!"
2186	  First pass: "Tak, s√∏de jaguarpige!"
2187	  Final: "Tak, s√∏de jaguarpige!"
2188	------------------------------------------------------------
2189	Line 292:
2190	  Original: "We will never lose our treasures again!"
2191	  Google: "Vi mister aldrig vores skatte igen!"
2192	  Ollama: "Vi mister aldrig vores skatte igen!"
2193	  First pass: "Vi mister aldrig vores skatte igen!"
2194	  Final: "Vi mister aldrig vores skatte igen!"
2195	------------------------------------------------------------
2196	Line 293:
2197	  Original: "But what if somebody else finds them and takes them from us?"
2198	  Google: "Men hvad nu hvis nogen anden finder dem og tager dem fra os?"
2199	  Ollama: "Men hvad nu, hvis nogen andre finder dem og tager dem fra os?"
2200	  First pass: "Men hvad nu, hvis nogen andre finder dem
2201	og tager dem fra os?"
2202	  Critic: "Men hvad nu, hvis nogen andre finder dem og tager dem fra os?" (CHANGED)
2203	  Final: "Men hvad nu, hvis nogen andre finder dem og tager dem fra os?"
2204	------------------------------------------------------------
2205	Line 294:
2206	  Original: "Oh, yeah. We better start hiding them."
2207	  Google: "√Öh, ja. Vi skal hellere begynde at skjule dem."
2208	  Ollama: "√Öh ja, vi m√• hellere begynde at gemme dem."
2209	  First pass: "Ja, det har du ret. Vi m√• hellere begynde at gemme dem."
2210	  Final: "Ja, det har du ret. Vi m√• hellere begynde at gemme dem."
2211	------------------------------------------------------------
2212	Line 295:
2213	  Original: "Not this one!"
2214	  Google: "Ikke denne!"
2215	  Ollama: "Ikke den her!"
2216	  First pass: "Ikke den her!"
2217	  Critic: "Ikke denne!" (CHANGED)
2218	  Final: "Ikke denne!"
2219	------------------------------------------------------------
2220	Line 296:
2221	  Original: "#BRACKET_OPEN#roaring#BRACKET_CLOSE#"
2222	  Google: "#Bracket_open#br√∏lende#bracket_close#"
2223	  Ollama: "#BRACKET_OPEN#br√∏lende#BRACKET_CLOSE#"
2224	  First pass: "[br√∏l]"
2225	  Final: "[br√∏l]"
2226	------------------------------------------------------------
2227	Line 297:
2228	  Original: "- #BRACKET_OPEN#grunts#BRACKET_CLOSE# - Huh!"
2229	  Google: "-#bracket_open#grynt#bracket_close# - he!"
2230	  Ollama: "- #BRACKET_OPEN#st√∏n#BRACKET_CLOSE# - Hvad!"
2231	  First pass: "- [st√∏n]
2232	- Hmm!"
2233	  Final: "- [st√∏n]
2234	- Hmm!"
2235	------------------------------------------------------------
2236	Line 298:
2237	  Original: "#BRACKET_OPEN#panting#BRACKET_CLOSE# Ha‚Äî Ohh!"
2238	  Google: "#Bracket_open#pusting#bracket_close#ha‚Äî ohh!"
2239	  Ollama: "#BRACKET_OPEN#st√∏nnende#BRACKET_CLOSE# Ha‚Äî Ohh!"
2240	  First pass: "[pustende] Ha‚Äî √Öh!"
2241	  Final: "[pustende] Ha‚Äî √Öh!"
2242	------------------------------------------------------------
2243	Line 299:
2244	  Original: "#BRACKET_OPEN#gasps#BRACKET_CLOSE#"
2245	  Google: "#Bracket_open#gisps#bracket_close#"
2246	  Ollama: "#√•nden i halsen#"
2247	  First pass: "[gisp]"
2248	  Final: "[gisp]"
2249	------------------------------------------------------------
2250	Line 300:
2251	  Original: "- #BRACKET_OPEN#gasps#BRACKET_CLOSE# - #BRACKET_OPEN#growling#BRACKET_CLOSE#"
2252	  Google: "-#bracket_open#gisps#bracket_close# -#bracket_open#knurrende#bracket_close#"
2253	  Ollama: "- #BRACKET_OPEN#gisp#BRACKET_CLOSE# - #BRACKET_OPEN#knurren#BRACKET_CLOSE#"
2254	  First pass: "- [gasps]
2255	- [growling]"
2256	  Final: "- [gasps]
2257	- [growling]"
2258	------------------------------------------------------------
2259	Line 301:
2260	  Original: "Hah!"
2261	  Google: "Hah!"
2262	  Ollama: "Hah!"
2263	  First pass: "Ha!"
2264	  Final: "Ha!"
2265	------------------------------------------------------------
2266	Line 302:
2267	  Original: "Huh!"
2268	  Google: "Huh!"
2269	  Ollama: "√òh!"
2270	  First pass: "Hmm!"
2271	  Final: "Hmm!"
2272	------------------------------------------------------------
2273	Line 303:
2274	  Original: "Oh."
2275	  Google: "√Öh."
2276	  Ollama: "√Öh."
2277	  First pass: "√Öh."
2278	  Final: "√Öh."
2279	------------------------------------------------------------
2280	Line 304:
2281	  Original: "Ho!"
2282	  Google: "Ho!"
2283	  Ollama: "Ho!"
2284	  First pass: "Ho!"
2285	  Final: "Ho!"
2286	------------------------------------------------------------
2287	Line 305:
2288	  Original: "#BRACKET_OPEN#groaning#BRACKET_CLOSE#"
2289	  Google: "#Bracket_open#st√∏nnende#bracket_close#"
2290	  Ollama: "#BRACKET_OPEN#st√∏nnen#BRACKET_CLOSE#"
2291	  First pass: "[st√∏nner]"
2292	  Final: "[st√∏nner]"
2293	------------------------------------------------------------
2294	Line 306:
2295	  Original: "The only way to defeat a mega jaguar is with a mega of our own."
2296	  Google: "Den eneste m√•de at besejre en mega jaguar er med en egen mega."
2297	  Ollama: "Den eneste m√•de at besejre en mega-jaguar p√• er med en af vores egne."
2298	  First pass: "Den eneste m√•de at besejre en mega-jaguar er med en mega af vores egen."
2299	  Final: "Den eneste m√•de at besejre en mega-jaguar er med en mega af vores egen."
2300	------------------------------------------------------------
2301	Line 307:
2302	  Original: "Ahh!"
2303	  Google: "Ahh!"
2304	  Ollama: "Ahh!"
2305	  First pass: "Ah!"
2306	  Final: "Ah!"
2307	------------------------------------------------------------
2308	Line 308:
2309	  Original: "#BRACKET_OPEN#grunting#BRACKET_CLOSE#"
2310	  Google: "#Bracket_open#grynting#bracket_close#"
2311	  Ollama: "#BRACKET_OPEN#st√∏nnen#BRACKET_CLOSE#"
2312	  First pass: "[st√∏nnen]"
2313	  Final: "[st√∏nnen]"
2314	------------------------------------------------------------
2315	Line 309:
2316	  Original: "Where are you going?"
2317	  Google: "Hvor skal du hen?"
2318	  Ollama: "Hvor skal du hen?"
2319	  First pass: "Hvor er du p√• vej hen?"
2320	  Final: "Hvor er du p√• vej hen?"
2321	------------------------------------------------------------
2322	Line 310:
2323	  Original: "To eliminate our Emilia problem."
2324	  Google: "At eliminere vores Emilia -problem."
2325	  Ollama: "At l√∏se vores Emilia-problem."
2326	  First pass: "For at eliminere vores Emilia-problem."
2327	  Final: "For at eliminere vores Emilia-problem."
2328	------------------------------------------------------------
2329	Line 311:
2330	  Original: "#BRACKET_OPEN#grunting#BRACKET_CLOSE#"
2331	  Google: "#Bracket_open#grynting#bracket_close#"
2332	  Ollama: "#BRACKET_OPEN#st√∏nnen#BRACKET_CLOSE#"
2333	  First pass: "[st√∏nnen]"
2334	  Final: "[st√∏nnen]"
2335	------------------------------------------------------------
2336	Line 312:
2337	  Original: "I can't let you do that."
2338	  Google: "Jeg kan ikke lade dig g√∏re det."
2339	  Ollama: "Jeg kan ikke lade dig g√∏re det."
2340	  First pass: "Jeg kan ikke lade dig g√∏re det."
2341	  Final: "Jeg kan ikke lade dig g√∏re det."
2342	------------------------------------------------------------
2343	Line 313:
2344	  Original: "We both know Kipo."
2345	  Google: "Vi kender begge Kipo."
2346	  Ollama: "Vi kender begge Kipo."
2347	  First pass: "Vi kender begge Kipo."
2348	  Final: "Vi kender begge Kipo."
2349	------------------------------------------------------------
2350	Line 314:
2351	  Original: "She's always so focused on others, she doesn't consider her own safety."
2352	  Google: "Hun er altid s√• fokuseret p√• andre, hun betragter ikke sin egen sikkerhed."
2353	  Ollama: "Hun er altid s√• optaget af andre, at hun ikke t√¶nker p√• sin egen sikkerhed."
2354	  First pass: "Hun er altid s√• fokuseret p√• andre, at hun ikke t√¶nker p√• sin egen sikkerhed."
2355	  Final: "Hun er altid s√• fokuseret p√• andre, at hun ikke t√¶nker p√• sin egen sikkerhed."
2356	------------------------------------------------------------
2357	Line 315:
2358	  Original: "We just rescued her from one avalanche, but there's another avalanche coming."
2359	  Google: "Vi reddede hende lige fra en lavine, men der kommer en anden lavine."
2360	  Ollama: "Vi reddede hende lige fra en lavine, men der er en ny p√• vej."
2361	  First pass: "Vi reddede hende lige fra en lavine, men der kommer en anden lavine."
2362	  Critic: "Vi reddede hende lige fra en lavine, men der er en anden lavine p√• vej." (CHANGED)
2363	  Final: "Vi reddede hende lige fra en lavine, men der er en anden lavine p√• vej."
2364	------------------------------------------------------------
2365	Line 316:
2366	  Original: "And someone has to stop it."
2367	  Google: "Og nogen skal stoppe det."
2368	  Ollama: "Og nogen m√• stoppe det."
2369	  First pass: "Nogen skal stoppe det."
2370	  Final: "Nogen skal stoppe det."
2371	------------------------------------------------------------
2372	Line 317:
2373	  Original: "Emilia's the second avalanche."
2374	  Google: "Emilia er den anden skred."
2375	  Ollama: "Emilia er den anden lavine."
2376	  First pass: "Emilia er den anden lavine."
2377	  Final: "Emilia er den anden lavine."
2378	------------------------------------------------------------
2379	Line 318:
2380	  Original: "Yeah, I got that."
2381	  Google: "Ja, det fik jeg."
2382	  Ollama: "Ja, det har jeg."
2383	  First pass: "Ja, det har jeg forst√•et."
2384	  Final: "Ja, det har jeg forst√•et."
2385	------------------------------------------------------------
2386	Line 319:
2387	  Original: "But I won't go behind her back."
2388	  Google: "Men jeg vil ikke g√• bag hende tilbage."
2389	  Ollama: "Men jeg vil ikke tale bag hendes ryg."
2390	  First pass: "Men jeg vil ikke bag hendes ryg."
2391	  Final: "Men jeg vil ikke bag hendes ryg."
2392	------------------------------------------------------------
2393	Line 320:
2394	  Original: "Ah, she's like a sister to you."
2395	  Google: "Ah, hun er som en s√∏ster for dig."
2396	  Ollama: "Ah, hun er som en s√∏ster for dig."
2397	  First pass: "Ah, hun er som en s√∏ster for dig."
2398	  Final: "Ah, hun er som en s√∏ster for dig."
2399	------------------------------------------------------------
2400	Line 321:
2401	  Original: "Believe it or not, I feel the same."
2402	  Google: "Tro det eller ej, jeg f√∏ler det samme."
2403	  Ollama: "Tro det eller ej, jeg f√∏ler det samme."
2404	  First pass: "Uanset hvad, f√∏ler jeg det samme."
2405	  Final: "Uanset hvad, f√∏ler jeg det samme."
2406	------------------------------------------------------------
2407	Line 322:
2408	  Original: "We'd both do anything to protect her."
2409	  Google: "Vi ville begge g√∏re noget for at beskytte hende."
2410	  Ollama: "Vi ville begge g√∏re alt for at beskytte hende."
2411	  First pass: "Vi ville begge g√∏re alt for at beskytte hende."
2412	  Final: "Vi ville begge g√∏re alt for at beskytte hende."
2413	------------------------------------------------------------
2414	Line 323:
2415	  Original: "And that's why you're going to let me go."
2416	  Google: "Og det er derfor, du vil lade mig g√•."
2417	  Ollama: "Og derfor vil du lade mig g√•."
2418	  First pass: "Og derfor vil du lade mig g√•."
2419	  Final: "Og derfor vil du lade mig g√•."
2420	------------------------------------------------------------
2421	Line 324:
2422	  Original: "#BRACKET_OPEN#Kipo#BRACKET_CLOSE# Thanks for helping us."
2423	  Google: "#Bracket_open#kipo#bracket_close#tak for at hj√¶lpe os."
2424	  Ollama: "#BRACKET_OPEN#Kipo#BRACKET_CLOSE# Tak for hj√¶lpen."
2425	  First pass: "[Kipo]
2426	Tak fordi du hjalp os."
2427	  Critic: "[Kipo] Tak fordi du hjalp os." (CHANGED)
2428	  Final: "[Kipo] Tak fordi du hjalp os."
2429	------------------------------------------------------------
2430	Line 325:
2431	  Original: "- I'm Kameko! - OK."
2432	  Google: "- Jeg er Kameko! - OK."
2433	  Ollama: "- Jeg er Kameko! - Ok."
2434	  First pass: "- Jeg er Kameko!
2435	- Okay."
2436	  Final: "- Jeg er Kameko!
2437	- Okay."
2438	------------------------------------------------------------
2439	Line 326:
2440	  Original: "I'm just gonna write the details for Prahm right here, so you don't forget."
2441	  Google: "Jeg vil bare skrive detaljerne til Prahm lige her, s√• du glemmer ikke."
2442	  Ollama: "Jeg skriver bare detaljerne til Prahm her, s√• du ikke glemmer det."
2443	  First pass: "Jeg skriver bare detaljerne ned til Prahm lige her, s√• du ikke glemmer det."
2444	  Final: "Jeg skriver bare detaljerne ned til Prahm lige her, s√• du ikke glemmer det."
2445	------------------------------------------------------------
2446	Line 327:
2447	  Original: "#BRACKET_OPEN#chuckling#BRACKET_CLOSE# Great! We'll be there."
2448	  Google: "#Bracket_Open#Chuckling#Bracket_Close#Fantastisk! Vi er der."
2449	  Ollama: "#BRACKET_OPEN#fniser#BRACKET_CLOSE# Fantastisk! Vi er der."
2450	  First pass: "Godt! Vi er der."
2451	  Final: "Godt! Vi er der."
2452	------------------------------------------------------------
2453	Line 328:
2454	  Original: "Whoa! I found a treasure map on my hand!"
2455	  Google: "Whoa! Jeg fandt et skattekort p√• min h√•nd!"
2456	  Ollama: "Whoa! Jeg har fundet et skattekort p√• min h√•nd!"
2457	  First pass: "Whoa! Jeg har fundet et skattekort p√• min h√•nd!"
2458	  Final: "Whoa! Jeg har fundet et skattekort p√• min h√•nd!"
2459	------------------------------------------------------------
2460	Line 329:
2461	  Original: "Where do you think it leads?"
2462	  Google: "Hvor tror du, det f√∏rer?"
2463	  Ollama: "Hvor tror du, det f√∏rer hen?"
2464	  First pass: "Hvor tror du, den f√∏rer hen?"
2465	  Final: "Hvor tror du, den f√∏rer hen?"
2466	------------------------------------------------------------
2467	Line 330:
2468	  Original: "- We're going on a treasure hunt! - We're going on a treasure hunt!"
2469	  Google: "- Vi g√•r p√• en skattejagt! - Vi g√•r p√• en skattejagt!"
2470	  Ollama: "- Vi tager p√• skattejagt! - Vi tager p√• skattejagt!"
2471	  First pass: "- Vi skal p√• skattejagt!
2472	- Vi skal p√• skattejagt!"
2473	  Critic: "- Vi skal p√• skattejagt! - Vi skal p√• skattejagt!" (CHANGED)
2474	  Final: "- Vi skal p√• skattejagt! - Vi skal p√• skattejagt!"
2475	------------------------------------------------------------
2476	Line 331:
2477	  Original: "- Going from my thumb to my pinkie... - #BRACKET_OPEN#sighs#BRACKET_CLOSE#"
2478	  Google: "- g√•r fra min tommelfinger til min pinkie ... -#bracket_open#sukker#bracket_close#"
2479	  Ollama: "- Fra min tommelfinger til min lillefinger... - #BRACKET_OPEN#suk#BRACKET_CLOSE#"
2480	  First pass: "- Fra min tommelfinger til min lillefinger. .."
2481	  Final: "- Fra min tommelfinger til min lillefinger. .."
2482	------------------------------------------------------------
2483	Line 332:
2484	  Original: "All right, everyone."
2485	  Google: "Okay, alle sammen."
2486	  Ollama: "Okay, alle sammen."
2487	  First pass: "Okay, alle sammen."
2488	  Final: "Okay, alle sammen."
2489	------------------------------------------------------------
2490	Line 333:
2491	  Original: "This is our one chance to make Prahm happen"
2492	  Google: "Dette er vores eneste chance for at f√• Prahm til at ske"
2493	  Ollama: "Dette er vores eneste chance for at f√• Prahm til at ske."
2494	  First pass: "Det her er vores eneste chance
2495	for at f√• Prahm til at ske"
2496	  Critic: "Det her er vores eneste chance for at f√• Prahm til at lykkes." (CHANGED)
2497	  Final: "Det her er vores eneste chance for at f√• Prahm til at lykkes."
2498	------------------------------------------------------------
2499	Line 334:
2500	  Original: "and peace on the surface forever and ever."
2501	  Google: "og fred p√• overfladen for evigt og altid."
2502	  Ollama: "og fred p√• overfladen i al evighed."
2503	  First pass: "Og fred p√• overfladen for evigt og altid."
2504	  Final: "Og fred p√• overfladen for evigt og altid."
2505	------------------------------------------------------------
2506	Line 335:
2507	  Original: "- #BRACKET_OPEN#gasping#BRACKET_CLOSE# - #BRACKET_OPEN#Kipo#BRACKET_CLOSE# Are. You. Ready."
2508	  Google: "-#bracket_open#gisping#bracket_close# -#bracket_open#kipo#bracket_close#er. Du. Parat."
2509	  Ollama: "- #BRACKET_OPEN#forpustet#BRACKET_CLOSE# - #BRACKET_OPEN#Kipo#BRACKET_CLOSE# Er du klar?"
2510	  First pass: "- [gisp]
2511	- [Kipo] Er du klar?"
2512	  Critic: "- [gisp] - [Kipo] Er du klar?" (CHANGED)
2513	  Final: "- [gisp] - [Kipo] Er du klar?"
2514	------------------------------------------------------------
2515	Line 336:
2516	  Original: "To. Prahm. Pose?"
2517	  Google: "Til. Prahm. Positur?"
2518	  Ollama: "Til. Prahm. Pose?"
2519	  First pass: "Til. Prahm. Pos√©r?"
2520	  Final: "Til. Prahm. Pos√©r?"
2521	------------------------------------------------------------
2522	Line 337:
2523	  Original: "What is this, some kind of new toy?"
2524	  Google: "Hvad er dette, en slags nyt leget√∏j?"
2525	  Ollama: "Hvad er det her, en slags nyt leget√∏j?"
2526	  First pass: "Hvad er det her, en slags nyt leget√∏j?"
2527	  Final: "Hvad er det her, en slags nyt leget√∏j?"
2528	------------------------------------------------------------
2529	Line 338:
2530	  Original: "#BRACKET_OPEN#music starts playing#BRACKET_CLOSE#"
2531	  Google: "#Bracket_open#musik begynder at spille#bracket_close#"
2532	  Ollama: "#BRACKET_OPEN#musik begynder at spille#BRACKET_CLOSE#"
2533	  First pass: "[Musik begynder at spille]"
2534	  Final: "[Musik begynder at spille]"
2535	------------------------------------------------------------
2536	Line 339:
2537	  Original: "‚ô™ We messed up ‚ô™"
2538	  Google: "‚ô™ Vi rodede sammen ‚ô™"
2539	  Ollama: "‚ô™ Vi fuckede op ‚ô™"
2540	  First pass: "‚ô™ Vi lavede en fejl ‚ô™"
2541	  Critic: "‚ô™ Vi tog fejl ‚ô™" (CHANGED)
2542	  Final: "‚ô™ Vi tog fejl ‚ô™"
2543	------------------------------------------------------------
2544	Line 340:
2545	  Original: "‚ô™ We thought our way of life here Was the only way to be ‚ô™"
2546	  Google: "‚ô™ Vi troede, at vores livsstil her var den eneste m√•de at v√¶re ‚ô™"
2547	  Ollama: "‚ô™ Vi troede, den m√•de vi levede p√• her, var den eneste rigtige m√•de ‚ô™"
2548	  First pass: "‚ô™ Vi troede, vores m√•de at leve her
2549	Var den eneste m√•de at v√¶re p√• ‚ô™"
2550	  Final: "‚ô™ Vi troede, vores m√•de at leve her
2551	Var den eneste m√•de at v√¶re p√• ‚ô™"
2552	------------------------------------------------------------
2553	Line 341:
2554	  Original: "‚ô™ We messed up ‚ô™"
2555	  Google: "‚ô™ Vi rodede sammen ‚ô™"
2556	  Ollama: "‚ô™ Vi fuckede op ‚ô™"
2557	  First pass: "‚ô™ Vi tog fejl ‚ô™"
2558	  Final: "‚ô™ Vi tog fejl ‚ô™"
2559	------------------------------------------------------------
2560	Line 342:
2561	  Original: "‚ô™ We thought that mutes like you Were the only enemy ‚ô™"
2562	  Google: "‚ô™ Vi troede, at muter som du var den eneste fjende ‚ô™"
2563	  Ollama: "‚ô™ Vi troede, at stumme som dig var den eneste fjende ‚ô™"
2564	  First pass: "‚ô™ Vi troede, at stumme som dig
2565	var den eneste fjende ‚ô™"
2566	  Final: "‚ô™ Vi troede, at stumme som dig
2567	var den eneste fjende ‚ô™"
2568	------------------------------------------------------------
2569	Line 343:
2570	  Original: "‚ô™ Whoo! ‚ô™"
2571	  Google: "‚ô™ Whoo! ‚ô™"
2572	  Ollama: "‚ô™ Whoo! ‚ô™"
2573	  First pass: "‚ô™ Woo! ‚ô™"
2574	  Final: "‚ô™ Woo! ‚ô™"
2575	------------------------------------------------------------
2576	Line 344:
2577	  Original: "‚ô™ We messed up ‚ô™"
2578	  Google: "‚ô™ Vi rodede sammen ‚ô™"
2579	  Ollama: "‚ô™ Vi fuckede op ‚ô™"
2580	  First pass: "‚ô™ Vi tog fejl ‚ô™"
2581	  Final: "‚ô™ Vi tog fejl ‚ô™"
2582	------------------------------------------------------------
2583	Line 345:
2584	  Original: "‚ô™ And now we're here To give you our apology ‚ô™"
2585	  Google: "‚ô™ Og nu er vi her for at give dig vores undskyldning ‚ô™"
2586	  Ollama: "‚ô™ Og nu st√•r vi her, for at give dig vores undskyldning ‚ô™"
2587	  First pass: "‚ô™ Og nu er vi her
2588	For at give dig vores undskyldning ‚ô™"
2589	  Final: "‚ô™ Og nu er vi her
2590	For at give dig vores undskyldning ‚ô™"
2591	------------------------------------------------------------
2592	Line 346:
2593	  Original: "‚ô™ We invite you ‚ô™"
2594	  Google: "‚ô™ Vi inviterer dig ‚ô™"
2595	  Ollama: "‚ô™ Vi inviterer dig ‚ô™"
2596	  First pass: "‚ô™ Vi inviterer dig ‚ô™"
2597	  Final: "‚ô™ Vi inviterer dig ‚ô™"
2598	------------------------------------------------------------
2599	Line 347:
2600	  Original: "‚ô™ To come to Prahm ‚ô™"
2601	  Google: "‚ô™ At komme til Prahm ‚ô™"
2602	  Ollama: "‚ô™ At komme til Prahm ‚ô™"
2603	  First pass: "‚ô™ Kom til Prahm ‚ô™"
2604	  Final: "‚ô™ Kom til Prahm ‚ô™"
2605	------------------------------------------------------------
2606	Line 348:
2607	  Original: "‚ô™ To say we're sorry ‚ô™"
2608	  Google: "‚ô™ For at sige, at vi er ked af det ‚ô™"
2609	  Ollama: "‚ô™ For at sige undskyld ‚ô™"
2610	  First pass: "‚ô™ For at sige undskyld ‚ô™"
2611	  Final: "‚ô™ For at sige undskyld ‚ô™"
2612	------------------------------------------------------------
2613	Line 349:
2614	  Original: "‚ô™ I don't like it when we fight ‚ô™"
2615	  Google: "‚ô™ Jeg kan ikke lide det, n√•r vi k√¶mper ‚ô™"
2616	  Ollama: "‚ô™ Jeg kan ikke lide, n√•r vi sk√¶ndes ‚ô™"
2617	  First pass: "‚ô™ Jeg kan ikke lide, n√•r vi sk√¶ndes ‚ô™"
2618	  Final: "‚ô™ Jeg kan ikke lide, n√•r vi sk√¶ndes ‚ô™"
2619	------------------------------------------------------------
2620	Line 350:
2621	  Original: "‚ô™ I don't need to be right ‚ô™"
2622	  Google: "‚ô™ Jeg beh√∏ver ikke have ret ‚ô™"
2623	  Ollama: "‚ô™ Jeg beh√∏ver ikke at have ret ‚ô™"
2624	  First pass: "‚ô™ Jeg beh√∏ver ikke at have ret ‚ô™"
2625	  Final: "‚ô™ Jeg beh√∏ver ikke at have ret ‚ô™"
2626	------------------------------------------------------------
2627	Line 351:
2628	  Original: "‚ô™ The only thing I need Is to dance all night ‚ô™"
2629	  Google: "‚ô™ Det eneste, jeg har brug for, er at danse hele natten ‚ô™"
2630	  Ollama: "‚ô™ Det eneste, jeg beh√∏ver, er at danse hele natten ‚ô™"
2631	  First pass: "‚ô™ Det eneste jeg beh√∏ver
2632	Er at danse hele natten ‚ô™"
2633	  Final: "‚ô™ Det eneste jeg beh√∏ver
2634	Er at danse hele natten ‚ô™"
2635	------------------------------------------------------------
2636	Line 352:
2637	  Original: "‚ô™ I wanna dance on the surface with you ‚ô™"
2638	  Google: "‚ô™ Jeg vil danse p√• overfladen med dig ‚ô™"
2639	  Ollama: "‚ô™ Jeg vil danse p√• overfladen sammen med dig ‚ô™"
2640	  First pass: "‚ô™ Jeg vil danse p√• overfladen med dig ‚ô™"
2641	  Final: "‚ô™ Jeg vil danse p√• overfladen med dig ‚ô™"
2642	------------------------------------------------------------
2643	Line 353:
2644	  Original: "‚ô™ And there'll be nothing That we couldn't do ‚ô™"
2645	  Google: "‚ô™ Og der vil ikke v√¶re noget, vi ikke kunne g√∏re ‚ô™"
2646	  Ollama: "‚ô™ Og intet vil v√¶re umuligt for os ‚ô™"
2647	  First pass: "‚ô™ Og der vil ikke v√¶re noget,
2648	vi ikke kan klare ‚ô™"
2649	  Final: "‚ô™ Og der vil ikke v√¶re noget,
2650	vi ikke kan klare ‚ô™"
2651	------------------------------------------------------------
2652	Line 354:
2653	  Original: "‚ô™ Dream beyond the stars ‚ô™"
2654	  Google: "‚ô™ dr√∏m ud over stjernerne ‚ô™"
2655	  Ollama: "‚ô™ Dr√∏m dig ud over stjernerne ‚ô™"
2656	  First pass: "‚ô™ Dr√∏m ud over stjernerne ‚ô™"
2657	  Critic: "Dr√∏m ud over stjernerne" (CHANGED)
2658	  Final: "Dr√∏m ud over stjernerne"
2659	------------------------------------------------------------
2660	Line 355:
2661	  Original: "‚ô™ So big they have to come true ‚ô™"
2662	  Google: "‚ô™ S√• store, de er n√∏dt til at g√• i opfyldelse ‚ô™"
2663	  Ollama: "‚ô™ S√• store, at de m√• g√• i opfyldelse ‚ô™"
2664	  First pass: "‚ô™ S√• store, at de m√• blive virkelige ‚ô™"
2665	  Critic: "S√• store, at de m√• blive virkelige" (CHANGED)
2666	  Final: "S√• store, at de m√• blive virkelige"
2667	------------------------------------------------------------
2668	Line 356:
2669	  Original: "‚ô™ Break the mold and make something new ‚ô™"
2670	  Google: "‚ô™ Break formen og lav noget nyt ‚ô™"
2671	  Ollama: "‚ô™ Bryd formen og skab noget nyt ‚ô™"
2672	  First pass: "‚ô™ Bryd formen og skab noget nyt ‚ô™"
2673	  Critic: "Bryd formen og skab noget nyt" (CHANGED)
2674	  Final: "Bryd formen og skab noget nyt"
2675	------------------------------------------------------------
2676	Line 357:
2677	  Original: "Hey, kid, I know you can't really come to Prahm"
2678	  Google: "Hej, barn, jeg ved, at du ikke rigtig kan komme til Prahm"
2679	  Ollama: "Hej, skat, jeg ved godt, du ikke rigtig kan komme til Prahm."
2680	  First pass: "Hey, kn√¶gt, jeg ved, du ikke rigtigt kan komme til Prahm"
2681	  Final: "Hey, kn√¶gt, jeg ved, du ikke rigtigt kan komme til Prahm"
2682	------------------------------------------------------------
2683	Line 358:
2684	  Original: "because you're a spore-producing organism,"
2685	  Google: "Fordi du er en sporproducerende organisme,"
2686	  Ollama: "Fordi du er en sporeproducerende organisme."
2687	  First pass: "Fordi du er en sporedannende organisme,"
2688	  Final: "Fordi du er en sporedannende organisme,"
2689	------------------------------------------------------------
2690	Line 359:
2691	  Original: "tethered to an abandoned science place and all,"
2692	  Google: "bundet til et forladt videnskabssted og alt sammen,"
2693	  Ollama: "bundet til et forladt videnskabssted og alt det der."
2694	  First pass: "Bundet til et forladt
2695	videnskabslaboratorium og alt det der,"
2696	  Critic: "Bundet til et forladt videnskabslaboratorium og alt det der," (CHANGED)
2697	  Final: "Bundet til et forladt videnskabslaboratorium og alt det der,"
2698	------------------------------------------------------------
2699	Line 360:
2700	  Original: "but if you could..."
2701	  Google: "Men hvis du kunne ..."
2702	  Ollama: "men hvis du kunne..."
2703	  First pass: "Men hvis du kunne. .."
2704	  Final: "Men hvis du kunne. .."
2705	------------------------------------------------------------
2706	Line 361:
2707	  Original: "you know I'd save a dance for you."
2708	  Google: "Du ved, at jeg ville gemme en dans til dig."
2709	  Ollama: "Jeg ville gemme en dans til dig."
2710	  First pass: "Du ved, jeg ville gemme en dans til dig."
2711	  Final: "Du ved, jeg ville gemme en dans til dig."
2712	------------------------------------------------------------
2713	Line 362:
2714	  Original: "#BRACKET_OPEN#screaming#BRACKET_CLOSE#"
2715	  Google: "#Bracket_open#skrigende#bracket_close#"
2716	  Ollama: "#BRACKET_OPEN#skrigende#BRACKET_CLOSE#"
2717	  First pass: "[skrig]"
2718	  Final: "[skrig]"
2719	------------------------------------------------------------
2720	Line 363:
2721	  Original: "‚ô™ I wanna dance on the surface with you ‚ô™"
2722	  Google: "‚ô™ Jeg vil danse p√• overfladen med dig ‚ô™"
2723	  Ollama: "‚ô™ Jeg vil danse p√• overfladen sammen med dig ‚ô™"
2724	  First pass: "‚ô™ Jeg vil danse p√• overfladen med dig ‚ô™"
2725	  Final: "‚ô™ Jeg vil danse p√• overfladen med dig ‚ô™"
2726	------------------------------------------------------------
2727	Line 364:
2728	  Original: "‚ô™ And there'll be nothing That we couldn't do ‚ô™"
2729	  Google: "‚ô™ Og der vil ikke v√¶re noget, vi ikke kunne g√∏re ‚ô™"
2730	  Ollama: "‚ô™ Og intet vil v√¶re umuligt for os ‚ô™"
2731	  First pass: "‚ô™ Og der vil ikke v√¶re noget,
2732	vi ikke kan klare ‚ô™"
2733	  Final: "‚ô™ Og der vil ikke v√¶re noget,
2734	vi ikke kan klare ‚ô™"
2735	------------------------------------------------------------
2736	Line 365:
2737	  Original: "‚ô™ Dream beyond the stars ‚ô™"
2738	  Google: "‚ô™ dr√∏m ud over stjernerne ‚ô™"
2739	  Ollama: "‚ô™ Dr√∏m dig ud over stjernerne ‚ô™"
2740	  First pass: "‚ô™ Dr√∏m ud over stjernerne ‚ô™"
2741	  Final: "‚ô™ Dr√∏m ud over stjernerne ‚ô™"
2742	------------------------------------------------------------
2743	Line 366:
2744	  Original: "‚ô™ So big they'll have to come true ‚ô™"
2745	  Google: "‚ô™ S√• store, de bliver n√∏dt til at g√• i opfyldelse ‚ô™"
2746	  Ollama: "‚ô™ S√• store, at de m√• g√• i opfyldelse ‚ô™"
2747	  First pass: "‚ô™ S√• store, at de m√• blive virkelige ‚ô™"
2748	  Final: "‚ô™ S√• store, at de m√• blive virkelige ‚ô™"
2749	------------------------------------------------------------
2750	Line 367:
2751	  Original: "‚ô™ Break the mold and make something new ‚ô™"
2752	  Google: "‚ô™ Break formen og lav noget nyt ‚ô™"
2753	  Ollama: "‚ô™ Bryd formen og skab noget nyt ‚ô™"
2754	  First pass: "‚ô™ Bryd formen og skab noget nyt ‚ô™"
2755	  Final: "‚ô™ Bryd formen og skab noget nyt ‚ô™"
2756	------------------------------------------------------------
2757	Line 368:
2758	  Original: "#BRACKET_OPEN#meows#BRACKET_CLOSE#"
2759	  Google: "#Bracket_open#meows#bracket_close#"
2760	  Ollama: "#BRACKET_OPEN#miav#BRACKET_CLOSE#"
2761	  First pass: "[mjauer]"
2762	  Final: "[mjauer]"
2763	------------------------------------------------------------
2764	Line 369:
2765	  Original: "#BRACKET_OPEN#Kipo#BRACKET_CLOSE# Guys, that was amazing!"
2766	  Google: "#Bracket_open#kipo#bracket_close#fyre, det var fantastisk!"
2767	  Ollama: "#BRACKET_OPEN#Kipo#BRACKET_CLOSE# Hold da, det var fantastisk!"
2768	  First pass: "[Kipo]
2769	Folkens, det var fantastisk!"
2770	  Critic: "[Kipo] Folkens, det var fantastisk!" (CHANGED)
2771	  Final: "[Kipo] Folkens, det var fantastisk!"
2772	------------------------------------------------------------
2773	Line 370:
2774	  Original: "- Uh, nobody said yes. - Hmm, technically, nobody said anything."
2775	  Google: "- √Öh, ingen sagde ja. - Hmm, teknisk set sagde ingen noget."
2776	  Ollama: "- √òh, ingen sagde ja. - Hmm, teknisk set sagde ingen noget."
2777	  First pass: "- √òh, ingen sagde ja.
2778	- Hmm, teknisk set sagde ingen noget."
2779	  Final: "- √òh, ingen sagde ja.
2780	- Hmm, teknisk set sagde ingen noget."
2781	------------------------------------------------------------
2782	Line 371:
2783	  Original: "Silence is just possibility in disguise."
2784	  Google: "Stilhed er bare mulighed i forkl√¶dning."
2785	  Ollama: "Stilhed er blot en mulighed forkl√¶dt."
2786	  First pass: "Stilhed er bare en mulighed i forkl√¶dning."
2787	  Final: "Stilhed er bare en mulighed i forkl√¶dning."
2788	------------------------------------------------------------
2789	Line 372:
2790	  Original: "It's my fault. The high kicks weren't high enough,"
2791	  Google: "Det er min skyld. De h√∏je spark var ikke h√∏je nok,"
2792	  Ollama: "Det er min skyld. De h√∏je spark var ikke h√∏je nok."
2793	  First pass: "Det er min skyld. De h√∏je spark var ikke h√∏je nok,"
2794	  Final: "Det er min skyld. De h√∏je spark var ikke h√∏je nok,"
2795	------------------------------------------------------------
2796	Line 373:
2797	  Original: "and I kept going mm‚Äîpah! when I should have gone ka-ka‚Äîkah!"
2798	  Google: "Og jeg fortsatte med at g√• MM - PAH! N√•r jeg skulle v√¶re g√•et ka-ka-kah!"
2799	  Ollama: "Og jeg fortsatte med at g√• mm‚Äîpah! da jeg burde v√¶re g√•et ka-ka‚Äîkah!"
2800	  First pass: "Og jeg blev ved med at sige mm‚Äîpah! da jeg burde have sagt ka-ka‚Äîkah!"
2801	  Final: "Og jeg blev ved med at sige mm‚Äîpah! da jeg burde have sagt ka-ka‚Äîkah!"
2802	------------------------------------------------------------
2803	Line 374:
2804	  Original: "No, it was my timing."
2805	  Google: "Nej, det var min timing."
2806	  Ollama: "Nej, det var mit timing."
2807	  First pass: "Nej, det var mit timing."
2808	  Final: "Nej, det var mit timing."
2809	------------------------------------------------------------
2810	Line 375:
2811	  Original: "It was too perfect and highlighted that everyone else was off."
2812	  Google: "Det var for perfekt og fremh√¶vede, at alle andre var slukket."
2813	  Ollama: "Det var for perfekt, og det understregede, at alle andre var ude af trit."
2814	  First pass: "Det var for perfekt og fremh√¶vede, at alle andre var ude af sync."
2815	  Critic: "Det var for perfekt og fremh√¶vede, at alle andre var ude af takt." (CHANGED)
2816	  Final: "Det var for perfekt og fremh√¶vede, at alle andre var ude af takt."
2817	------------------------------------------------------------
2818	Line 376:
2819	  Original: "We did our best. Now, we just have to see what they say."
2820	  Google: "Vi gjorde vores bedste. Nu skal vi bare se, hvad de siger."
2821	  Ollama: "Vi gjorde vores bedste. Nu m√• vi se, hvad de siger."
2822	  First pass: "Vi gjorde vores bedste. Nu m√• vi se, hvad de siger."
2823	  Final: "Vi gjorde vores bedste. Nu m√• vi se, hvad de siger."
2824	------------------------------------------------------------
2825	Line 377:
2826	  Original: "Hold on. We have one Prahm-posal left."
2827	  Google: "Hold fast. Vi har en prahm-posal tilbage."
2828	  Ollama: "Hold fast. Vi har √©n prahm-posal tilbage."
2829	  First pass: "Vent lige. Vi har stadig √©t Prahm-forslag tilbage."
2830	  Final: "Vent lige. Vi har stadig √©t Prahm-forslag tilbage."
2831	------------------------------------------------------------
2832	Line 378:
2833	  Original: "#BRACKET_OPEN#exhales#BRACKET_CLOSE#"
2834	  Google: "#Bracket_open#ud√•nding#bracket_close#"
2835	  Ollama: "#BRACKET_OPEN#ud√•nder#BRACKET_CLOSE#"
2836	  First pass: "[ud√•nder]"
2837	  Final: "[ud√•nder]"
2838	------------------------------------------------------------
2839	Line 379:
2840	  Original: "Troy, I've been trying all day to think of the perfect way to ask you to Prahm."
2841	  Google: "Troy, jeg har pr√∏vet hele dagen at t√¶nke p√• den perfekte m√•de at bede dig om Prahm."
2842	  Ollama: "Troy, jeg har t√¶nkt hele dagen p√•, hvordan jeg bedst kan sp√∏rge dig om at g√• til Prahm."
2843	  First pass: "Troy, jeg har hele dagen fors√∏gt at finde den perfekte m√•de at sp√∏rge dig om at komme med til Prahm."
2844	  Critic: "Troy, jeg har hele dagen fors√∏gt at finde den perfekte m√•de at sp√∏rge dig, om du vil med til Prahm." (CHANGED)
2845	  Final: "Troy, jeg har hele dagen fors√∏gt at finde den perfekte m√•de at sp√∏rge dig, om du vil med til Prahm."
2846	------------------------------------------------------------
2847	Line 380:
2848	  Original: "Because you're amazing and awesome and that's what you deserve."
2849	  Google: "Fordi du er fantastisk og fantastisk, og det er det, du fortjener."
2850	  Ollama: "Fordi du er fantastisk og sk√∏n, og det fortjener du."
2851	  First pass: "For du er fantastisk og fed, og det er det, du fortjener."
2852	  Critic: "For du er fantastisk og fed, og det er, hvad du fortjener." (CHANGED)
2853	  Final: "For du er fantastisk og fed, og det er, hvad du fortjener."
2854	------------------------------------------------------------
2855	Line 381:
2856	  Original: "But what I've realized is..."
2857	  Google: "Men hvad jeg har indset er ..."
2858	  Ollama: "Men det, jeg er kommet frem til, er..."
2859	  First pass: "Men det, jeg er kommet frem til, er. .."
2860	  Final: "Men det, jeg er kommet frem til, er. .."
2861	------------------------------------------------------------
2862	Line 382:
2863	  Original: "I'm not perfect. Nothing is."
2864	  Google: "Jeg er ikke perfekt. Intet er."
2865	  Ollama: "Jeg er ikke perfekt. Intet er."
2866	  First pass: "Jeg er ikke perfekt. Intet er det."
2867	  Final: "Jeg er ikke perfekt. Intet er det."
2868	------------------------------------------------------------
2869	Line 383:
2870	  Original: "Not even french fries."
2871	  Google: "Ikke engang pommes frites."
2872	  Ollama: "Ikke engang pommes frites."
2873	  First pass: "Selv pommes frites er ikke perfekte."
2874	  Final: "Selv pommes frites er ikke perfekte."
2875	------------------------------------------------------------
2876	Line 384:
2877	  Original: "He's right. They should be called potato noodles!"
2878	  Google: "Han har ret. De skal kaldes kartoffelnudler!"
2879	  Ollama: "Han har ret. De burde hedde kartoffel-nudler!"
2880	  First pass: "Han har ret. De skulle kaldes kartoffel-nudler!"
2881	  Final: "Han har ret. De skulle kaldes kartoffel-nudler!"
2882	------------------------------------------------------------
2883	Line 385:
2884	  Original: "So, I'm not gonna try to be perfect anymore."
2885	  Google: "S√• jeg vil ikke pr√∏ve at v√¶re perfekt l√¶ngere."
2886	  Ollama: "S√• jeg gider ikke l√¶ngere at pr√∏ve at v√¶re perfekt."
2887	  First pass: "S√• jeg vil ikke l√¶ngere pr√∏ve at v√¶re perfekt."
2888	  Critic: "S√• vil jeg ikke l√¶ngere pr√∏ve at v√¶re perfekt." (CHANGED)
2889	  Final: "S√• vil jeg ikke l√¶ngere pr√∏ve at v√¶re perfekt."
2890	------------------------------------------------------------
2891	Line 386:
2892	  Original: "I'm just gonna be me."
2893	  Google: "Jeg bliver bare mig."
2894	  Ollama: "Jeg er bare mig selv."
2895	  First pass: "Jeg vil bare v√¶re mig selv."
2896	  Final: "Jeg vil bare v√¶re mig selv."
2897	------------------------------------------------------------
2898	Line 387:
2899	  Original: "So, will you?"
2900	  Google: "S√• vil du?"
2901	  Ollama: "S√• vil du?"
2902	  First pass: "S√•, vil du?"
2903	  Final: "S√•, vil du?"
2904	------------------------------------------------------------
2905	Line 388:
2906	  Original: "Will I go to Prahm with you?"
2907	  Google: "Vil jeg g√• til Prahm med dig?"
2908	  Ollama: "Vil jeg med til Prahm?"
2909	  First pass: "Vil jeg med til Prahm med dig?"
2910	  Critic: "Vil du g√• med til Prahm med mig?" (CHANGED)
2911	  Final: "Vil du g√• med til Prahm med mig?"
2912	------------------------------------------------------------
2913	Line 389:
2914	  Original: "Aah! I asked weird! I screwed it up!"
2915	  Google: "Aah! Jeg spurgte underligt! Jeg skruede det op!"
2916	  Ollama: "√Öh nej! Jeg formulerede mig m√¶rkeligt! Jeg √∏delagde det!"
2917	  First pass: "√Öh! Jeg spurgte m√¶rkeligt! Jeg √∏delagde det!"
2918	  Final: "√Öh! Jeg spurgte m√¶rkeligt! Jeg √∏delagde det!"
2919	------------------------------------------------------------
2920	Line 390:
2921	  Original: "No, no, that was really cute."
2922	  Google: "Nej, nej, det var virkelig s√∏dt."
2923	  Ollama: "Nej, nej, det var rigtig s√∏dt."
2924	  First pass: "Nej, nej, det var virkelig s√∏dt."
2925	  Final: "Nej, nej, det var virkelig s√∏dt."
2926	------------------------------------------------------------
2927	Line 391:
2928	  Original: "It's just, I was literally about to ask you."
2929	  Google: "Det er bare, jeg var bogstaveligt talt ved at sp√∏rge dig."
2930	  Ollama: "Det var lige, jeg var ved at sp√∏rge dig."
2931	  First pass: "Jeg var lige ved at sp√∏rge dig."
2932	  Final: "Jeg var lige ved at sp√∏rge dig."
2933	------------------------------------------------------------
2934	Line 392:
2935	  Original: "The answer's yes!"
2936	  Google: "Svaret er ja!"
2937	  Ollama: "Svaret er ja!"
2938	  First pass: "Svaret er ja!"
2939	  Final: "Svaret er ja!"
2940	------------------------------------------------------------
2941	Line 393:
2942	  Original: "#BRACKET_OPEN#applause#BRACKET_CLOSE#"
2943	  Google: "#Bracket_open#bifald#bracket_close#"
2944	  Ollama: "#BRACKET_OPEN#bifald#BRACKET_CLOSE#"
2945	  First pass: "[applaus]"
2946	  Final: "[applaus]"
2947	------------------------------------------------------------
2948	Line 394:
2949	  Original: "I usually don't have these kinds of emotions, but, uh, feels good."
2950	  Google: "Jeg har normalt ikke disse slags f√∏lelser, men f√∏les godt."
2951	  Ollama: "Jeg har normalt ikke s√•danne f√∏lelser, men‚Ä¶ det f√∏les godt."
2952	  First pass: "Jeg har normalt ikke s√•dan nogle f√∏lelser, men, √∏h, det f√∏les godt."
2953	  Final: "Jeg har normalt ikke s√•dan nogle f√∏lelser, men, √∏h, det f√∏les godt."
2954	------------------------------------------------------------
2955	Line 395:
2956	  Original: "#BRACKET_OPEN#gasps#BRACKET_CLOSE#"
2957	  Google: "#Bracket_open#gisps#bracket_close#"
2958	  Ollama: "#BRACKET_OPEN#hv√¶ser#BRACKET_CLOSE#"
2959	  First pass: "[ud√•nder]"
2960	  Final: "[ud√•nder]"
2961	------------------------------------------------------------
2962	Line 396:
2963	  Original: "You put a lot of love and effort into your Prahm-posal."
2964	  Google: "Du l√¶gger en masse k√¶rlighed og kr√¶fter i din Prahm-Posal."
2965	  Ollama: "Du har lagt rigtig meget k√¶rlighed og energi i dit Prahm-forslag."
2966	  First pass: "Du har lagt meget k√¶rlighed og energi i dit Prahm-forslag."
2967	  Final: "Du har lagt meget k√¶rlighed og energi i dit Prahm-forslag."
2968	------------------------------------------------------------
2969	Line 397:
2970	  Original: "It was an emotional workout!"
2971	  Google: "Det var en f√∏lelsesladet tr√¶ning!"
2972	  Ollama: "Det var en f√∏lelsesm√¶ssig udmattelse!"
2973	  First pass: "Det var en f√∏lelsesm√¶ssig tr√¶ning!"
2974	  Final: "Det var en f√∏lelsesm√¶ssig tr√¶ning!"
2975	------------------------------------------------------------
2976	Line 398:
2977	  Original: "So, we're in."
2978	  Google: "S√• vi er inde."
2979	  Ollama: "S√• vi er med."
2980	  First pass: "S√• vi er med."
2981	  Final: "S√• vi er med."
2982	------------------------------------------------------------
2983	Line 399:
2984	  Original: "#BRACKET_OPEN#gasps#BRACKET_CLOSE# All three of you?"
2985	  Google: "#Bracket_open#gisps#bracket_close#alle tre af jer?"
2986	  Ollama: "#BRACKET_OPEN#gisp#BRACKET_CLOSE# Alle tre af jer?"
2987	  First pass: "[gasps] Alle tre af jer?"
2988	  Final: "[gasps] Alle tre af jer?"
2989	------------------------------------------------------------
2990	Line 400:
2991	  Original: "No. We're here on behalf of everybody."
2992	  Google: "Nej. Vi er her p√• vegne af alle."
2993	  Ollama: "Nej. Vi er her p√• vegne af alle."
2994	  First pass: "Nej. Vi er her p√• vegne af alle."
2995	  Critic: "Nej. Vi er her p√• vegne af alle sammen." (CHANGED)
2996	  Final: "Nej. Vi er her p√• vegne af alle sammen."
2997	------------------------------------------------------------
2998	Line 401:
2999	  Original: "I'm going to Prahm!"
3000	  Google: "Jeg skal til Prahm!"
3001	  Ollama: "Jeg skal til Prahm!"
3002	  First pass: "Jeg skal til Prahm!"
3003	  Final: "Jeg skal til Prahm!"
3004	------------------------------------------------------------
3005	Line 402:
3006	  Original: "#BRACKET_OPEN#cheering#BRACKET_CLOSE#"
3007	  Google: "#Bracket_open#jubel#bracket_close#"
3008	  Ollama: "#BRACKET_OPEN#jubel#BRACKET_CLOSE#"
3009	  First pass: "[jubel]"
3010	  Final: "[jubel]"
3011	------------------------------------------------------------
3012	Line 403:
3013	  Original: "- #BRACKET_OPEN#laughing and cheering#BRACKET_CLOSE# - #BRACKET_OPEN#Kipo#BRACKET_CLOSE# Yes!"
3014	  Google: "-#bracket_open#griner og jubel#bracket_close# -#bracket_open#kipo#bracket_close#ja!"
3015	  Ollama: "- #BRACKET_OPEN#grinen og jubel#BRACKET_CLOSE# - #BRACKET_OPEN#Kipo#BRACKET_CLOSE# Ja!"
3016	  First pass: "- [griner og jubel]
3017	- [Kipo] Ja!"
3018	  Critic: "- [griner og jubel] - [Kipo] Ja!" (CHANGED)
3019	  Final: "- [griner og jubel] - [Kipo] Ja!"
3020	------------------------------------------------------------
3021	Line 404:
3022	  Original: "Now, all we have to do is everything else..."
3023	  Google: "Nu er alt, hvad vi skal g√∏re, alt andet ..."
3024	  Ollama: "Nu er det bare at g√∏re resten..."
3025	  First pass: "Nu skal vi bare ordne alt andet. .."
3026	  Final: "Nu skal vi bare ordne alt andet. .."
3027	------------------------------------------------------------
3028	Line 405:
3029	  Original: "by tomorrow!"
3030	  Google: "i morgen!"
3031	  Ollama: "i morgen!"
3032	  First pass: "I morgen!"
3033	  Final: "I morgen!"
3034	------------------------------------------------------------
3035	Line 406:
3036	  Original: "Oh, I need all hands on deck."
3037	  Google: "√Öh, jeg har brug for alle h√¶nder p√• d√¶kket."
3038	  Ollama: "√Öh, vi skal have alle mand p√• d√¶k."
3039	  First pass: "√Öh, jeg har brug for alle kr√¶fter p√• d√¶k."
3040	  Critic: "√Öh, jeg har brug for alle mand p√• d√¶k." (CHANGED)
3041	  Final: "√Öh, jeg har brug for alle mand p√• d√¶k."
3042	------------------------------------------------------------
3043	Line 407:
3044	  Original: "- Doag, sparkly things! - On it."
3045	  Google: "- Doag, glitrende ting! - P√• det."
3046	  Ollama: "- Doag, funklende ting! - G√∏r det."
3047	  First pass: "- Doag, funklende ting!
3048	- I gang."
3049	  Critic: "- Doag, funklende ting! - I gang." (CHANGED)
3050	  Final: "- Doag, funklende ting! - I gang."
3051	------------------------------------------------------------
3052	Line 408:
3053	  Original: "- Benson, music - On it!"
3054	  Google: "- Benson, musik - p√• det!"
3055	  Ollama: "- Benson, musik - I gang!"
3056	  First pass: "- Benson, musik
3057	- I gang."
3058	  Critic: "- Benson, musik - I gang." (CHANGED)
3059	  Final: "- Benson, musik - I gang."
3060	------------------------------------------------------------
3061	Line 409:
3062	  Original: "Dave, follow Benson."
3063	  Google: "Dave, f√∏lg Benson."
3064	  Ollama: "Dave, f√∏lg Benson."
3065	  First pass: "Dave, f√∏lg Benson."
3066	  Final: "Dave, f√∏lg Benson."
3067	------------------------------------------------------------
3068	Line 410:
3069	  Original: "Hey, I'm the leader."
3070	  Google: "Hej, jeg er lederen."
3071	  Ollama: "Hej, jeg er lederen."
3072	  First pass: "Hey, jeg er lederen."
3073	  Final: "Hey, jeg er lederen."
3074	------------------------------------------------------------
3075	Line 411:
3076	  Original: "- #BRACKET_OPEN#Benson#BRACKET_CLOSE# Just follow me. - OK."
3077	  Google: "-#Bracket_open#Benson#Bracket_Close#F√∏lg mig bare. - OK."
3078	  Ollama: "- #BRACKET_OPEN#Benson#BRACKET_CLOSE# F√∏lg bare med. - OK."
3079	  First pass: "- [Benson] Bare f√∏lg mig.
3080	- Okay."
3081	  Final: "- [Benson] Bare f√∏lg mig.
3082	- Okay."
3083	------------------------------------------------------------
3084	Line 412:
3085	  Original: "#BRACKET_OPEN#Kipo#BRACKET_CLOSE# Oh, and Scarlemagne, do you think you can get your piano?"
3086	  Google: "#Bracket_open#kipo#bracket_close#√Öh, og Scarlemagne, tror du, du kan f√• dit klaver?"
3087	  Ollama: "#BRACKET_OPEN#Kipo#BRACKET_CLOSE# √Öh, og Scarlemagne, kan du mon f√• dit klaver?"
3088	  First pass: "[Kipo] √Öh, og Scarlemagne, tror du, du kan f√• fat i dit klaver?"
3089	  Critic: "[Kipo] √Öh, og Scarlemagne, kan du f√• fat i dit klaver?" (CHANGED)
3090	  Final: "[Kipo] √Öh, og Scarlemagne, kan du f√• fat i dit klaver?"
3091	------------------------------------------------------------
3092	Line 413:
3093	  Original: "Ooh!"
3094	  Google: "Ooh!"
3095	  Ollama: "√Öh!"
3096	  First pass: "√òv!"
3097	  Final: "√òv!"
3098	------------------------------------------------------------
3099	Line 414:
3100	  Original: "Where's Scarlemagne?"
3101	  Google: "Hvor er Scarlemagne?"
3102	  Ollama: "Hvor er Scarlemagne?"
3103	  First pass: "Hvor er Scarlemagne?"
3104	  Final: "Hvor er Scarlemagne?"
3105	------------------------------------------------------------
3106	Line 415:
3107	  Original: "- It was the only way to protect you. - #BRACKET_OPEN#small gasp#BRACKET_CLOSE#"
3108	  Google: "- Det var den eneste m√•de at beskytte dig p√•. -#bracket_open#lille gisp#bracket_close#"
3109	  Ollama: "- Det var den eneste m√•de at beskytte dig p√•. - #BRACKET_OPEN#et lille gisp#BRACKET_CLOSE#"
3110	  First pass: "- Det var den eneste m√•de at beskytte dig p√•.
3111	- [svagt gisp]"
3112	  Critic: "- Det var den eneste m√•de at beskytte dig p√•. - [svagt gisp]" (CHANGED)
3113	  Final: "- Det var den eneste m√•de at beskytte dig p√•. - [svagt gisp]"
3114	------------------------------------------------------------
3115	Line 416:
3116	  Original: "Prahm is a great idea, but an idea won't keep you alive."
3117	  Google: "Prahm er en god id√©, men en id√© holder dig ikke i live."
3118	  Ollama: "Prahm er en god id√©, men en id√© holder dig ikke i live."
3119	  First pass: "Prahm er en god id√©, men en id√© holder dig ikke i live."
3120	  Critic: "Prahm er en god id√©, men en id√© kan ikke holde dig i live." (CHANGED)
3121	  Final: "Prahm er en god id√©, men en id√© kan ikke holde dig i live."
3122	------------------------------------------------------------
3123	Line 417:
3124	  Original: "Scarlemagne went after Emilia."
3125	  Google: "Scarlemagne gik efter Emilia."
3126	  Ollama: "Scarlemagne gik efter Emilia."
3127	  First pass: "Scarlemagne er g√•et efter Emilia."
3128	  Final: "Scarlemagne er g√•et efter Emilia."
3129	------------------------------------------------------------
3130	Line 418:
3131	  Original: "To do what?"
3132	  Google: "At g√∏re hvad?"
3133	  Ollama: "Hvad skulle jeg g√∏re?"
3134	  First pass: "Hvad skulle han?"
3135	  Final: "Hvad skulle han?"
3136	------------------------------------------------------------
3137	Line 419:
3138	  Original: "Wolf, no!"
3139	  Google: "Ulv, nej!"
3140	  Ollama: "Ulv, nej!"
3141	  First pass: "Ulven, nej!"
3142	  Final: "Ulven, nej!"
3143	------------------------------------------------------------
3144	Line 420:
3145	  Original: "I thought you believed in Prahm."
3146	  Google: "Jeg troede, du troede p√• Prahm."
3147	  Ollama: "Jeg troede, du troede p√• Prahm."
3148	  First pass: "Jeg troede, du troede p√• Prahm."
3149	  Final: "Jeg troede, du troede p√• Prahm."
3150	------------------------------------------------------------
3151	Line 421:
3152	  Original: "It might be the most important thing we've ever done."
3153	  Google: "Det er m√•ske den vigtigste ting, vi nogensinde har gjort."
3154	  Ollama: "Det kan v√¶re det vigtigste, vi nogensinde har gjort."
3155	  First pass: "Det kunne v√¶re det vigtigste, vi nogensinde har gjort."
3156	  Final: "Det kunne v√¶re det vigtigste, vi nogensinde har gjort."
3157	------------------------------------------------------------
3158	Line 422:
3159	  Original: "We're just trying to help you."
3160	  Google: "Vi pr√∏ver bare at hj√¶lpe dig."
3161	  Ollama: "Vi pr√∏ver bare at hj√¶lpe dig."
3162	  First pass: "Vi pr√∏ver bare at hj√¶lpe dig."
3163	  Final: "Vi pr√∏ver bare at hj√¶lpe dig."
3164	------------------------------------------------------------
3165	Line 423:
3166	  Original: "Well, I don't want that kind of help!"
3167	  Google: "Jeg vil ikke have den slags hj√¶lp!"
3168	  Ollama: "Jeg vil ikke have den slags hj√¶lp!"
3169	  First pass: "Jeg vil ikke have den slags hj√¶lp!"
3170	  Final: "Jeg vil ikke have den slags hj√¶lp!"
3171	------------------------------------------------------------
3172	Line 424:
3173	  Original: "Well, I hope one day you understand why you need it."
3174	  Google: "Jeg h√•ber, at du en dag forst√•r, hvorfor du har brug for det."
3175	  Ollama: "Jeg h√•ber en dag, du forst√•r, hvorfor du har brug for det."
3176	  First pass: "N√•, jeg h√•ber en dag, du forst√•r, hvorfor du har brug for det."
3177	  Critic: "N√•, jeg h√•ber en dag, du forst√•r, hvorfor du har brug for den." (CHANGED)
3178	  Final: "N√•, jeg h√•ber en dag, du forst√•r, hvorfor du har brug for den."
3179	------------------------------------------------------------
3180	Line 425:
3181	  Original: "#BRACKET_OPEN#groans#BRACKET_CLOSE#"
3182	  Google: "#Bracket_open#st√∏nn#bracket_close#"
3183	  Ollama: "#BRACKET_OPEN#st√∏n#BRACKET_CLOSE#"
3184	  First pass: "[St√∏nner]"
3185	  Final: "[St√∏nner]"
3186	------------------------------------------------------------
3187	Line 426:
3188	  Original: "[music playing["
3189	  Google: "[Musik spiller ["
3190	  Ollama: "[Musik spiller]"
3191	  First pass: "[musik spiller["
3192	  Final: "[musik spiller["
3193	------------------------------------------------------------
3194	
3195	SUMMARY STATISTICS
3196	--------------------------------------------------------------------------------
3197	Total lines translated: 426
3198	
3199	
3200	TRANSLATION SERVICE STATISTICS:
3201	----------------------------------------
3202	Google:
3203	  - Available for 426 lines (100.0%)
3204	  - First pass matched exactly: 57 times (13.4%)
3205	  - Selected as final translation: 59 times (13.8%)
3206	  - Average similarity to final translation: 71.0%
3207	
3208	Ollama:
3209	  - Available for 426 lines (100.0%)
3210	  - First pass matched exactly: 98 times (23.0%)
3211	  - Selected as final translation: 100 times (23.5%)
3212	  - Average similarity to final translation: 75.3%
3213	
3214	
3215	LLM FIRST PASS STATISTICS:
3216	----------------------------------------
3217	First pass translations used without changes: 323 (75.8%)
3218	First pass translations modified by critics: 103 (24.2%)
3219	
3220	
3221	STANDARD CRITIC STATISTICS:
3222	----------------------------------------
3223	Standard Critic changes: 103 (24.2%)
3224	Standard Critic pass rate: 323 lines left unchanged (75.8%)
3225	
3226	
3227	WORD-LEVEL STATISTICS:
3228	----------------------------------------
3229	Total source words: 2640
3230	Total target words: 2734
3231	Target/Source ratio: 103.6%
3232	
3233	================================================================================
3234	
3235	NOTE: Similarity metrics are approximate and based on character-level comparison.
3236	Higher similarity percentages indicate closer matches between service translations and final output.


--- File: templates/browser_diagnostics.html ---
[Empty file]


--- File: templates/config_editor.html ---
   1	<!DOCTYPE html>
   2	<html lang="en">
   3	<head>
   4	    <meta charset="UTF-8">
   5	    <meta name="viewport" content="width=device-width, initial-scale=1.0">
   6	    <title>Configuration Editor - Subtitle Translator</title>
   7	    <link rel="stylesheet" href="{{ url_for('static', filename='bootstrap/css/bootstrap.min.css') }}">
   8	    <link rel="stylesheet" href="{{ url_for('static', filename='css/main.css') }}">
   9	    <link rel="icon" href="{{ url_for('static', filename='favicon.ico') }}" type="image/x-icon">
  10	    <link rel="stylesheet" href="{{ url_for('static', filename='bootstrap/css/font-awesome.min.css') }}">
  11	</head>
  12	<body>
  13	    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
  14	        <div class="container-fluid">
  15	            <a class="navbar-brand" href="{{ url_for('index') }}">
  16	                <img src="{{ url_for('static', filename='images/sublogo.png') }}" alt="Site Logo" class="site-logo">
  17	                Subtitle Translator
  18	            </a>
  19	            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
  20	                <span class="navbar-toggler-icon"></span>
  21	            </button>
  22	            <div class="collapse navbar-collapse" id="navbarNav">
  23	                <ul class="navbar-nav">
  24	                    <li class="nav-item"><a class="nav-link" href="{{ url_for('index') }}">Translate</a></li>
  25	                    <li class="nav-item"><a class="nav-link active" aria-current="page" href="{{ url_for('config') }}">Settings</a></li>
  26	                    <li class="nav-item"><a class="nav-link" href="{{ url_for('logs') }}">Logs</a></li>
  27	                </ul>
  28	            </div>
  29	        </div>
  30	    </nav>
  31	
  32	    <div class="container mt-4">
  33	        <div class="card">
  34	            <h2><span class="icon"><i class="fas fa-cog"></i></span>Configuration Editor</h2>
  35	            <p class="description">Adjust application settings and preferences here. Changes are saved to the config.ini file.</p>
  36	
  37	            <div id="notification" style="display: none;" class="notification"></div>
  38	            
  39	            <div class="mb-3">
  40	                <label for="search-config" class="form-label">Search Settings</label>
  41	                <input type="text" id="search-config" placeholder="Enter keyword to filter settings..." class="form-control">
  42	            </div>
  43	            
  44	            <form id="config-form">
  45	                <div id="config-sections">
  46	                    <!-- Configuration sections will be loaded here by JavaScript -->
  47	                </div>
  48	                
  49	                <div class="d-flex justify-content-end mt-4">
  50	                    <button type="button" id="reset-btn" class="btn btn-secondary me-2">Reset Changes</button>
  51	                    <button type="submit" id="save-btn" class="btn btn-primary">Save Configuration</button>
  52	                </div>
  53	            </form>
  54	        </div>
  55	    </div>
  56	    
  57	    <script src="{{ url_for('static', filename='js/config_editor.js') }}"></script>
  58	    <script src="{{ url_for('static', filename='bootstrap/js/bootstrap.bundle.min.js') }}"></script>
  59	</body>
  60	</html>

--- File: templates/index.html ---
   1	<!DOCTYPE html>
   2	<html lang="en">
   3	<head>
   4	    <meta charset="UTF-8">
   5	    <meta name="viewport" content="width=device-width, initial-scale=1.0">
   6	    <title>Subtitle Translator</title>
   7	    <link rel="stylesheet" href="{{ url_for('static', filename='bootstrap/css/bootstrap.min.css') }}">
   8	    <link rel="stylesheet" href="{{ url_for('static', filename='css/main.css') }}">
   9	    <link rel="icon" href="{{ url_for('static', filename='favicon.ico') }}" type="image/x-icon">
  10	    <!-- Add Font Awesome or other icon library if you plan to use icons like in the CSS -->
  11	    <link rel="stylesheet" href="{{ url_for('static', filename='bootstrap/css/font-awesome.min.css') }}">
  12	</head>
  13	<body>
  14	    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
  15	        <div class="container-fluid">
  16	            <a class="navbar-brand" href="{{ url_for('index') }}">
  17	                <img src="{{ url_for('static', filename='images/sublogo.png') }}" alt="Site Logo" class="site-logo">
  18	                Subtitle Translator
  19	            </a>
  20	            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
  21	                <span class="navbar-toggler-icon"></span>
  22	            </button>
  23	            <div class="collapse navbar-collapse" id="navbarNav">
  24	                <ul class="navbar-nav">
  25	                    <li class="nav-item">
  26	                        <a class="nav-link active" aria-current="page" href="{{ url_for('index') }}">Translate</a>
  27	                    </li>
  28	                    <li class="nav-item">
  29	                        <a class="nav-link" href="{{ url_for('config') }}">Settings</a>
  30	                    </li>
  31	                    <li class="nav-item">
  32	                        <a class="nav-link" href="{{ url_for('logs') }}">Logs</a>
  33	                    </li>
  34	                </ul>
  35	            </div>
  36	        </div>
  37	    </nav>
  38	
  39	    <div class="container mt-4">
  40	        <!-- Flash Messages -->
  41	        {% with messages = get_flashed_messages(with_categories=true) %}
  42	            {% if messages %}
  43	                <div id="flash-messages-container" class="card" style="margin-bottom: 1rem;">
  44	                    {% for category, message in messages %}
  45	                        <div class="flash-message {{ category }}">{{ message }} <span class="close-flash" onclick="this.parentElement.style.display='none';">&times;</span></div>
  46	                    {% endfor %}
  47	                </div>
  48	            {% endif %}
  49	        {% endwith %}
  50	
  51	        <div class="translation-options-grid">
  52	            <!-- Single File Translation Card -->
  53	            <div class="card">
  54	                <h2><span class="icon"><i class="fas fa-file-alt"></i></span>Translate Subtitle File</h2>
  55	                <p class="description">Upload an SRT, ASS, or VTT file, or select one from the host system to translate.</p>
  56	                <form id="upload-form">
  57	                    <div class="translation-method">
  58	                        <div class="form-group">
  59	                            <label for="subtitle-file">Upload Subtitle File</label>
  60	                            <input type="file" id="subtitle-file" name="file" class="form-control" accept=".srt,.ass,.vtt">
  61	                        </div>
  62	                        <p style="text-align: center; margin: 0.5rem 0; color: #888;">OR</p>
  63	                        <div class="form-group">
  64	                            <label for="host-file-path">Select File from Host</label>
  65	                            <div class="upload-options">
  66	                                <input type="text" id="host-file-path" name="host_file_path" class="form-control" placeholder="Click browse to select a host file..." readonly>
  67	                                <button type="button" id="browse-host-file-btn" class="btn btn-secondary btn-sm">Browse</button>
  68	                            </div>
  69	                            <div id="host-file-browser" style="display:none;">
  70	                                <div class="browser-header">
  71	                                    <span>Host File Browser</span>
  72	                                    <span id="host-current-path" class="current-path-display"></span>
  73	                                </div>
  74	                                <div class="browser-body">
  75	                                    <ul id="host-file-list" class="browser-list"></ul>
  76	                                </div>
  77	                            </div>
  78	                        </div>
  79	                    </div>
  80	
  81	                    <div class="language-options">
  82	                        <div class="form-group">
  83	                            <label for="source-language">Source Language</label>
  84	                            <select id="source-language" name="source_language" class="form-select">
  85	                                {% for code, name in languages %}
  86	                                    <option value="{{ code }}" {% if code == default_source %}selected{% endif %}>{{ name }}</option>
  87	                                {% endfor %}
  88	                            </select>
  89	                        </div>
  90	                        <div class="form-group">
  91	                            <label for="target-language">Target Language</label>
  92	                            <select id="target-language" name="target_language" class="form-select">
  93	                                {% for code, name in languages %}
  94	                                    <option value="{{ code }}" {% if code == default_target %}selected{% endif %}>{{ name }}</option>
  95	                                {% endfor %}
  96	                            </select>
  97	                        </div>
  98	                    </div>
  99	
 100	                    <div class="form-group">
 101	                        <h3><span class="icon"><i class="fas fa-book-open"></i></span>Special Meanings (Optional)</h3>
 102	                        <div id="special-meanings-container">
 103	                            <!-- JS will populate this -->
 104	                        </div>
 105	                        <button type="button" id="add-special-meaning-btn" class="btn btn-secondary btn-sm" style="margin-top: 0.5rem;">Add Meaning</button>
 106	                        <div class="info-text">
 107	                            <small>Define specific translations for words or phrases. Useful for names, jargon, or correcting common mistranslations.</small>
 108	                        </div>
 109	                    </div>
 110	                    <div class="button-group">
 111	                        <button type="submit" class="btn btn-primary">Start Translation</button>
 112	                    </div>
 113	                </form>
 114	            </div>
 115	
 116	            <!-- Video Transcription Card -->
 117	            <div class="card">
 118	                <h2><span class="icon"><i class="fas fa-video"></i></span>Transcribe Video File</h2>
 119	                <p class="description">Select a video file from the host system to transcribe into an SRT subtitle file.</p>
 120	                <form id="video-transcribe-form">
 121	                    <div class="form-group">
 122	                        <label for="selected-video-path">Selected Video File</label>
 123	                        <div class="upload-options">
 124	                             <input type="text" id="selected-video-path-display" class="form-control" placeholder="Click browse to select a video..." readonly>
 125	                             <button type="button" id="browse-video-btn" class="btn btn-secondary btn-sm">Browse Video</button>
 126	                        </div>
 127	                        <span id="selected-video-path" style="display:none;"></span> <!-- Hidden, stores actual path -->
 128	                        
 129	                        <div id="video-file-browser" class="host-file-browser" style="display:none;">
 130	                            <div class="browser-header">
 131	                                <span>Video File Browser</span>
 132	                                <span id="video-current-path" class="current-path-display"></span>
 133	                            </div>
 134	                            <div class="browser-content">
 135	                                <div id="video-dirs-list-container" class="browser-list-half">
 136	                                    <p class="browser-section-title">Directories</p>
 137	                                    <ul id="video-dirs-list" class="browser-list"></ul>
 138	                                </div>
 139	                                <div id="video-files-list-container" class="browser-list-half">
 140	                                    <p class="browser-section-title">Video Files</p>
 141	                                    <ul id="video-files-list" class="browser-list"></ul>
 142	                                </div>
 143	                            </div>
 144	                        </div>
 145	                    </div>
 146	                    <div class="form-group">
 147	                        <label for="video-language">Video Language (Optional - leave blank to auto-detect)</label>
 148	                        <select id="video-language" name="language" class="form-select">
 149	                            <option value="">Auto-detect</option>
 150	                            {% for code, name in languages %}
 151	                                <option value="{{ code }}">{{ name }}</option>
 152	                            {% endfor %}
 153	                        </select>
 154	                    </div>
 155	                    <div class="button-group">
 156	                        <button type="submit" class="btn btn-primary">Start Transcription</button>
 157	                    </div>
 158	                </form>
 159	            </div>
 160	        </div>
 161	
 162	        <!-- Bulk Directory Translation Card -->
 163	        <div class="card">
 164	            <h2><span class="icon"><i class="fas fa-folder-open"></i></span>Bulk Translate Directory</h2>
 165	            <p class="description">Select a directory on the host system to find and translate all subtitle files within it.</p>
 166	            <div class="form-group">
 167	                <label for="selected-directory-display">Selected Directory for Bulk Translation</label>
 168	                <div class="upload-options">
 169	                    <input type="text" id="selected-directory-display" class="form-control" placeholder="Click browse to select a directory..." readonly>
 170	                    <button type="button" id="browse-btn" class="btn btn-secondary btn-sm">Browse Directory</button>
 171	                </div>
 172	                 <button type="button" id="toggle-browser-btn" class="btn btn-secondary btn-sm" style="margin-top:5px;">Toggle Browser</button>
 173	            </div>
 174	
 175	            <div id="inline-file-browser" class="inline-file-browser">
 176	                <div class="browser-header">
 177	                    <span>Directory Browser</span>
 178	                    <span id="current-inline-path" class="current-path-display"></span>
 179	                </div>
 180	                <div class="browser-body">
 181	                    <ul id="inline-directory-list" class="directory-list"></ul>
 182	                </div>
 183	                <div class="browser-actions">
 184	                    <button type="button" id="inline-select-dir-btn" class="btn btn-primary">Translate This Directory</button>
 185	                </div>
 186	            </div>
 187	        </div>
 188	        
 189	        <!-- Status and Results Card -->
 190	        <div id="status-container" class="card progress-feedback" style="display:none;">
 191	            <h3><span class="icon"><i class="fas fa-tasks"></i></span>Translation Progress</h3>
 192	            <div id="status-message" class="status-text">Initializing...</div>
 193	            <div class="progress-container">
 194	                <div id="progress-bar" class="progress-bar-fill"></div>
 195	                <div id="progress-text" class="progress-bar-text">0%</div>
 196	            </div>
 197	            <div id="live-status-display-container" class="live-feed">
 198	                <h4>Live Status:</h4>
 199	                <div id="live-status-display"><p>Waiting for job to start...</p></div>
 200	            </div>
 201	            <div id="result-container" style="display:none; margin-top: 1rem;">
 202	                <!-- Results like download links will be injected here by JS -->
 203	            </div>
 204	        </div>
 205	
 206	        <!-- Recent Files and Archive Grid -->
 207	        <div class="recent-and-archive-grid">
 208	            <div class="card">
 209	                <h3><span class="icon"><i class="fas fa-history"></i></span>Recent Translations/Transcriptions</h3>
 210	                <ul id="recent-files-list" class="file-list">
 211	                    <!-- JS will populate this -->
 212	                    <li class="empty-state">No recent files.</li>
 213	                </ul>
 214	            </div>
 215	
 216	            <div class="card">
 217	                <h3><span class="icon"><i class="fas fa-archive"></i></span>Subtitle Archive</h3>
 218	                <div class="button-group" style="margin-bottom: 1rem;">
 219	                    <button id="refresh-archive-btn" class="btn btn-secondary btn-sm">Refresh Archive</button>
 220	                </div>
 221	                <ul id="subtitle-archive" class="file-list">
 222	                    <!-- JS will populate this -->
 223	                    <li class="loading-state">Loading archive...</li>
 224	                </ul>
 225	            </div>
 226	        </div>
 227	    </div>
 228	
 229	    <!-- Modal for Viewing Subtitles/Reports -->
 230	    <div id="modal" class="modal" style="display:none;">
 231	        <div class="modal-content card">
 232	            <span class="close-modal-btn btn btn-sm btn-secondary" onclick="document.getElementById('modal').style.display='none'" style="position:absolute; top:10px; right:10px;">&times;</span>
 233	            <h3 id="modal-title">File Content</h3>
 234	            <pre id="modal-text-content" class="modal-pre"></pre>
 235	            <div id="modal-report-content"></div>
 236	        </div>
 237	    </div>
 238	    
 239	    <!-- Report Modal -->
 240	    <div id="report-modal" class="modal" style="display:none;">
 241	        <div class="modal-content card">
 242	            <span class="report-modal-close btn btn-sm btn-secondary" onclick="document.getElementById('report-modal').style.display='none'" style="position:absolute; top:10px; right:10px;">&times;</span>
 243	            <h3 id="report-modal-title">Translation Report</h3>
 244	            <div id="report-loading">Loading report data...</div>
 245	            <div id="report-content" class="report-content"></div>
 246	        </div>
 247	    </div>
 248	
 249	    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
 250	    <script src="{{ url_for('static', filename='bootstrap/js/bootstrap.bundle.min.js') }}"></script>
 251	    <script>
 252	        // Small script to handle add special meaning button and refresh archive
 253	        document.addEventListener('DOMContentLoaded', function() {
 254	            const addMeaningBtn = document.getElementById('add-special-meaning-btn');
 255	            if (addMeaningBtn) {
 256	                addMeaningBtn.addEventListener('click', function() {
 257	                    if (typeof addSpecialMeaningRow === 'function') {
 258	                        addSpecialMeaningRow();
 259	                    } else {
 260	                        console.error('addSpecialMeaningRow function not found.');
 261	                    }
 262	                });
 263	            }
 264	            // Load initial special meanings if the function exists
 265	            if (typeof loadSpecialMeaningsFromFile === 'function') {
 266	                loadSpecialMeaningsFromFile();
 267	            }
 268	
 269	
 270	            const refreshArchiveBtn = document.getElementById('refresh-archive-btn');
 271	            if (refreshArchiveBtn) {
 272	                refreshArchiveBtn.addEventListener('click', function() {
 273	                    if (typeof loadSubtitleArchive === 'function') {
 274	                        loadSubtitleArchive();
 275	                    } else {
 276	                        console.error('loadSubtitleArchive function not found.');
 277	                    }
 278	                });
 279	            }
 280	            
 281	            // Initial load of recent files and archive
 282	            if (typeof loadRecentFiles === 'function') { // Assuming you might create this
 283	                loadRecentFiles();
 284	            } else if (typeof loadSubtitleArchive === 'function') {
 285	                // If no specific recent files loader, archive might cover it or parts of it
 286	                // loadSubtitleArchive(); // Already called by refresh button setup, and likely on DOMContentLoaded in main.js
 287	            }
 288	        });
 289	    </script>
 290	    <script src="{{ url_for('static', filename='js/browser-fix.js') }}"></script>
 291	    {% if debug %}
 292	    <script src="{{ url_for('static', filename='js/browser-debug.js') }}"></script>
 293	    {% endif %}
 294	</body>
 295	</html>

--- File: templates/log_viewer.html ---
   1	<!DOCTYPE html>
   2	<html lang="en">
   3	<head>
   4	    <meta charset="UTF-8">
   5	    <meta name="viewport" content="width=device-width, initial-scale=1.0">
   6	    <title>Log Viewer - Subtitle Translator</title>
   7	    <link rel="stylesheet" href="{{ url_for('static', filename='bootstrap/css/bootstrap.min.css') }}">
   8	    <link rel="stylesheet" href="{{ url_for('static', filename='css/main.css') }}">
   9	    <link rel="icon" href="{{ url_for('static', filename='favicon.ico') }}" type="image/x-icon">
  10	    <link rel="stylesheet" href="{{ url_for('static', filename='bootstrap/css/font-awesome.min.css') }}">
  11	</head>
  12	<body>
  13	    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
  14	        <div class="container-fluid">
  15	            <a class="navbar-brand" href="{{ url_for('index') }}">
  16	                <img src="{{ url_for('static', filename='images/sublogo.png') }}" alt="Site Logo" class="site-logo">
  17	                Subtitle Translator
  18	            </a>
  19	            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
  20	                <span class="navbar-toggler-icon"></span>
  21	            </button>
  22	            <div class="collapse navbar-collapse" id="navbarNav">
  23	                <ul class="navbar-nav">
  24	                    <li class="nav-item"><a class="nav-link" href="{{ url_for('index') }}">Translate</a></li>
  25	                    <li class="nav-item"><a class="nav-link" href="{{ url_for('config') }}">Settings</a></li>
  26	                    <li class="nav-item"><a class="nav-link active" aria-current="page" href="{{ url_for('logs') }}">Logs</a></li>
  27	                </ul>
  28	            </div>
  29	        </div>
  30	    </nav>
  31	
  32	    <div class="container mt-4">
  33	        <div class="card">
  34	            <h2><span class="icon"><i class="fas fa-clipboard-list"></i></span>Log Viewer</h2>
  35	            <p class="description">View application logs. You can select different log files, refresh the view, and search for specific entries.</p>
  36	
  37	            <div class="controls log-controls">
  38	                <div class="form-group">
  39	                    <label for="log-file-select">Select Log File</label>
  40	                    <select id="log-file-select" class="form-control">
  41	                        {% for file in log_files %}
  42	                        <option value="{{ file }}" {% if file == current_log %}selected{% endif %}>{{ file }}</option>
  43	                        {% endfor %}
  44	                    </select>
  45	                </div>
  46	                
  47	                <div class="button-group">
  48	                    <button id="refresh-log" class="button primary"><i class="fas fa-sync-alt"></i> Refresh</button>
  49	                    <button id="clear-log" class="button secondary"><i class="fas fa-trash-alt"></i> Clear Log</button>
  50	                    <button id="auto-refresh" class="button toggle"><i class="fas fa-play-circle"></i> Auto-refresh: Off</button>
  51	                </div>
  52	                
  53	                <div class="form-group search-container">
  54	                    <label for="search-log">Search Logs</label>
  55	                    <input type="text" id="search-log" placeholder="Search in logs..." class="form-control">
  56	                    <div class="search-stats">
  57	                        <span id="search-count">0</span> matches
  58	                        <button id="prev-match" class="button icon-button" disabled><i class="fas fa-arrow-up"></i></button>
  59	                        <button id="next-match" class="button icon-button" disabled><i class="fas fa-arrow-down"></i></button>
  60	                    </div>
  61	                </div>
  62	            </div>
  63	            
  64	            <div id="log-container" class="log-view-area">
  65	                <pre id="log-content">{{ log_content }}</pre>
  66	            </div>
  67	        </div>
  68	    </div>
  69	    
  70	    <script src="{{ url_for('static', filename='js/log_viewer.js') }}"></script>
  71	    <script src="{{ url_for('static', filename='bootstrap/js/bootstrap.bundle.min.js') }}"></script>
  72	</body>
  73	</html>

--- File: test_browser.py ---
   1	#!/usr/bin/env python3
   2	"""
   3	Simple test script to verify the browser functionality.
   4	"""
   5	from flask import Flask, render_template, request, jsonify
   6	import os
   7	
   8	app = Flask(__name__, 
   9	           static_folder='static', 
  10	           template_folder='templates')
  11	
  12	@app.route('/')
  13	def index():
  14	    """Simple test page."""
  15	    languages = [("en", "English"), ("es", "Spanish")]
  16	    return render_template('index.html', 
  17	                          languages=languages, 
  18	                          default_source="en", 
  19	                          default_target="es",
  20	                          debug=True)
  21	
  22	@app.route('/api/browse_dirs', methods=['GET'])
  23	def browse_dirs():
  24	    """Simple directory browser."""
  25	    path = request.args.get('path', '')
  26	    print(f"Browsing directory: {path}")
  27	    
  28	    if not path:
  29	        path = '/'
  30	    
  31	    try:
  32	        dirs = []
  33	        parent = os.path.dirname(path) if path != '/' else ''
  34	        
  35	        if os.path.isdir(path):
  36	            for item in os.listdir(path):
  37	                full_path = os.path.join(path, item)
  38	                if os.path.isdir(full_path):
  39	                    dirs.append({"name": item, "path": full_path})
  40	        
  41	        return jsonify({
  42	            "directories": dirs,
  43	            "current_path": path,
  44	            "parent_path": parent
  45	        })
  46	    except Exception as e:
  47	        print(f"Error: {str(e)}")
  48	        return jsonify({"error": str(e)}), 500
  49	
  50	if __name__ == '__main__':
  51	    print("Starting test server on port 5001...")
  52	    app.run(host='0.0.0.0', port=5001, debug=True)


--- File: wyoming_chunk2srt.py ---
   1	#!/usr/bin/env python3
   2	"""
   3	Transcribe a single 30‚Äësecond WAV chunk with Wyoming Faster‚ÄëWhisper
   4	and write it to an .srt subtitle file.
   5	
   6	Example:
   7	    python wyoming_chunk2srt.py --wav chunk_000.wav --offset 0 \
   8	        --host 10.0.10.23 --port 10300 --model large-v3-turbo
   9	"""
  10	
  11	import argparse, asyncio, wave, textwrap
  12	from datetime import timedelta
  13	from pathlib import Path
  14	
  15	from wyoming.client import AsyncTcpClient                       # :contentReference[oaicite:2]{index=2}
  16	from wyoming.asr import Transcribe, Transcript                  # :contentReference[oaicite:3]{index=3}
  17	from wyoming.audio import AudioStart, AudioStop, wav_to_chunks  # :contentReference[oaicite:4]{index=4}
  18	from wyoming.event import async_write_event, async_read_event
  19	from wyoming.error import TransportClosed
  20	
  21	## ---------- helpers ---------------------------------------------------------
  22	
  23	def hhmmss_ms(sec: float) -> str:
  24	    td = timedelta(seconds=sec)
  25	    total = int(td.total_seconds())
  26	    h, m, s = total // 3600, (total % 3600) // 60, total % 60
  27	    ms = int((td.total_seconds() - total) * 1000)
  28	    return f"{h:02d}:{m:02d}:{s:02d},{ms:03d}"
  29	
  30	def make_srt_block(index: int, text: str, start: float, dur: float) -> str:
  31	    end = start + dur
  32	    lines = textwrap.fill(text, width=42)
  33	    return f"{index}\n{hhmmss_ms(start)} --> {hhmmss_ms(end)}\n{lines}\n\n"
  34	
  35	## ---------- core logic ------------------------------------------------------
  36	
  37	async def transcribe_chunk(path: Path, host: str, port: int,
  38	                           model: str, lang: str = "en") -> str:
  39	    """Return full transcript text of one WAV file."""
  40	    client = AsyncTcpClient(host, port)                         # :contentReference[oaicite:5]{index=5}
  41	    await client.connect()
  42	
  43	    # Ask the server to use the chosen model/language               :contentReference[oaicite:6]{index=6}
  44	    await async_write_event(Transcribe(name=model, language=lang).event(),
  45	                            client.writer)
  46	
  47	    with wave.open(str(path), "rb") as wav:
  48	        # Start stream                                              :contentReference[oaicite:7]{index=7}
  49	        await async_write_event(
  50	            AudioStart(rate=wav.getframerate(),
  51	                       width=wav.getsampwidth(),
  52	                       channels=wav.getnchannels()).event(),
  53	            client.writer)
  54	
  55	        # Stream audio in small PCM chunks                          :contentReference[oaicite:8]{index=8}
  56	        for chunk in wav_to_chunks(wav, samples_per_chunk=1024):
  57	            await async_write_event(chunk.event(), client.writer)
  58	
  59	        # Tell the server we‚Äôre done
  60	        await async_write_event(AudioStop().event(), client.writer)
  61	
  62	    # Collect transcript events (one per segment)                   :contentReference[oaicite:9]{index=9}
  63	    parts: list[str] = []
  64	    try:
  65	        while True:
  66	            event = await asyncio.wait_for(async_read_event(client.reader),
  67	                                           timeout=90)
  68	            if Transcript.is_type(event.type):
  69	                parts.append(Transcript.from_event(event).text)
  70	            else:
  71	                break
  72	    except (asyncio.TimeoutError, TransportClosed):
  73	        pass
  74	
  75	    await client.disconnect()
  76	    return " ".join(parts).strip()
  77	
  78	async def main(args):
  79	    text = await transcribe_chunk(Path(args.wav),
  80	                                  host=args.host,
  81	                                  port=args.port,
  82	                                  model=args.model,
  83	                                  lang=args.lang)
  84	
  85	    srt_txt = make_srt_block(1, text, args.offset, args.duration)
  86	    out_path = Path(args.wav).with_suffix(".srt")
  87	    out_path.write_text(srt_txt, encoding="utf-8")
  88	    print(f"Wrote {out_path}")
  89	
  90	if __name__ == "__main__":
  91	    parser = argparse.ArgumentParser(description="30‚Äës WAV ‚Üí SRT via Wyoming")
  92	    parser.add_argument("--wav", required=True, help="Path to 30‚Äës WAV file")
  93	    parser.add_argument("--host", default="10.0.10.23")
  94	    parser.add_argument("--port", type=int, default=10300)
  95	    parser.add_argument("--model", default="large-v3-turbo",
  96	                        help="Model name inside the container")
  97	    parser.add_argument("--lang", default="en")
  98	    parser.add_argument("--offset", type=float, default=0.0,
  99	                        help="Start time (s) of this chunk in the episode")
 100	    parser.add_argument("--duration", type=float, default=30.0,
 101	                        help="Duration (s) ‚Äì keep at 30 unless you changed chunk size")
 102	    asyncio.run(main(parser.parse_args()))


